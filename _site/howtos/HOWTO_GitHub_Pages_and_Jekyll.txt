# =============================================================================
# How to setup "Github Pages" with "Jekyll".

(1) Install bundler:
        $ gem install bundler
(1) Create a new branch gh-pages (this is a special-purpose branch where Github
    is looking for website files:
        $ git checkout -b gh-pages
(2) Make sure, that there are no files in the branch. If you have created a
    branch from master, delete all included files:
        $ rm -rf *
(3) Create a file "Gemfile" with following content and save it to the root
    directory of the branch:
        source 'https://rubygems.org'
        gem 'github-pages', group: :jekyll_plugins
(4) Install Jekyll and other dependencies from the GitHub Pages gem:
        $ bundle install
(5) Create a new Jekyll template site directory:
        $ jekyll new <folder_name>
        $ cd <folder_name>
(6) Edit the Gemfile. Comment the line
        gem "jekyll", "3.4.1"
    and uncomment the line
        gem "github-pages", group: :jekyll_plugins
    in order to use GitHub Pages.
(7) Actually, the template site directory should contain folders like _layouts,
    _includes and _sass, but probably does not. The reason is that since 
    Jekyll 3.2 stores these folders in the theme-gem folder. But because GitHub
    needs these folders, copy the folders from there.
    Type 
        $ bundle show minima
    to get the location <PATH> of the folders.
    Copy all the included folders and files to the *root directory*:
        $ cd ..
        $ cp -R <PATH>/* .
(8) Push all the files to your GitHub repository:
        $ git add .
        $ git commit
        $ git push origin gh-pages
(9) Go to repository in GitHub and enable GitHub Pages:
        Click "Settings".
        Under GitHub Pages -> Source, choose "gh-pages branch"
        Click Save.
    Your website is now available under
        http://<username>.github.io/<repository-name>/<folder_name>/

# =============================================================================
# How to debug the Website locally.

(1) Type 
        bundle exec jekyll serve --watch

# =============================================================================
# How to customize the Template.

(1) To override the default structure and style of minima, change the HTML
    files in the /includes folder.
(2) To override the default CSS, change the file /assets/main.scss

# =============================================================================
# How to enable Google Analytics.

(1) Add the following lines to your _config.yml:
        google_analytics: UA-NNNNNNNN-N
(2) Open _includes/head.html and add the following code just before the end 
    </head> tag:
        {% if site.google_analytics and jekyll.environment == 'production' %}
        {% include analytics.html %}
        {% endif %}

# =============================================================================
# How to enable Search engine optimization.

(1) Add the following to your site's Gemfile:
        gem 'jekyll-seo-tag'
(2) Add the following to your _config.yml:
        gems:
          - jekyll-seo-tag
(3) To tell the plugin where to put your meta tag information, you must add the
    SEO tag right before </head> in your site template files:
        <html>
            <head>
              {% include head.html %}
              {% seo %}
            </head>
        </html>

The SEO tag will respect any of the following if included in your site's
_config.yml:

title
description
url
author (see below)

twitter:username - The site's Twitter handle. You'll want to describe it like so:
twitter:
  username: benbalter

facebook - The following properties are available:
facebook:app_id - a Facebook app ID for Facebook insights
facebook:publisher - a Facebook page URL or ID of the publishing entity
facebook:admins - a Facebook user ID for domain insights linked to a personal account
You'll want to describe one or more like so:
    facebook:
      app_id: 1234
      publisher: 1234
      admins: 1234

logo - URL to a site-wide logo (e.g., /assets/your-company-logo.png)

social - For specifying social profiles. The following properties are available:
name
links
For example:
    social:
      name: Ben Balter
      links:
        - https://twitter.com/BenBalter
        - https://www.facebook.com/ben.balter
        - https://www.linkedin.com/in/BenBalter
        - https://plus.google.com/+BenBalter
        - https://github.com/benbalter
        - https://keybase.io/benbalter

google_site_verification for verifying ownership via Google webmaster tools

Alternatively, verify ownership with several services at once using the following format:
webmaster_verifications:
  google: 1234
  bing: 1234
  alexa: 1234
  yandex: 1234

The SEO tag will respect the following YAML front matter if included in a post, page, or document:
title - The title of the post, page, or document
description - A short description of the page's content
image - URL to an image associated with the post, page, or document (e.g., /assets/page-pic.jpg)
author - Page-, post-, or document-specific author information (see below)

