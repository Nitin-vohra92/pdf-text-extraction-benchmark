/* Generated By:JavaCC: Do not edit this line. TeXParserTokenManager.java */
package parse;
import model.Element;
import model.Command;
import model.MacroDefinition;
import model.NewParagraph;
import model.NewLine;
import model.Group;
import model.Text;
import model.Marker;
import model.Option;
import model.Document;
import model.Whitespace;
import java.util.Arrays;
import java.util.Stack;
import java.util.Map;
import java.util.Set;
import java.util.HashSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.lang.Integer;

/** Token Manager. */
@SuppressWarnings("all")
public class TeXParserTokenManager implements TeXParserConstants
{
  Stack < Integer > stateHistory = new Stack < Integer > ();

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc000L) != 0L)
            return 23;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 1);
      case 42:
         return jjStopAtPos(0, 9);
      case 91:
         return jjStopAtPos(0, 12);
      case 92:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 93:
         return jjStopAtPos(0, 13);
      case 123:
         return jjStopAtPos(0, 10);
      case 125:
         return jjStopAtPos(0, 11);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(3, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0x1040001090400010L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 93;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 59)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 44)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 41)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 38)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 37)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 32)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  if (curChar == 45)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 24;
                  if (curChar == 45)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if ((0x100001200L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 13)
                     jjAddStates(3, 4);
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  break;
               case 1:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 2:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 3:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 10:
                  if ((0x100001200L & l) != 0L)
                     jjAddStates(5, 6);
                  break;
               case 24:
                  if (curChar == 10 && kind > 19)
                     kind = 19;
                  break;
               case 25:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x2400L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 27:
                  if (curChar == 13)
                     jjAddStates(3, 4);
                  break;
               case 28:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 29:
                  if (curChar == 10)
                     jjCheckNAddStates(0, 2);
                  break;
               case 30:
                  if ((0x100001200L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 31:
                  if (curChar != 10)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(7, 9);
                  break;
               case 32:
                  if ((0x100001200L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 33:
               case 35:
                  if (curChar == 13)
                     jjCheckNAdd(31);
                  break;
               case 34:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(7, 9);
                  break;
               case 36:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(0, 2);
                  break;
               case 59:
                  if (curChar == 45 && kind > 17)
                     kind = 17;
                  break;
               case 60:
                  if (curChar == 60)
                     kind = 17;
                  break;
               case 61:
                  if (curChar == 62)
                     kind = 17;
                  break;
               case 62:
                  if (curChar == 32 && kind > 19)
                     kind = 19;
                  break;
               case 63:
                  if (curChar == 33)
                     kind = 19;
                  break;
               case 64:
                  if (curChar == 35 && kind > 19)
                     kind = 19;
                  break;
               case 65:
                  if (curChar == 37)
                     kind = 19;
                  break;
               case 66:
                  if (curChar == 38)
                     kind = 19;
                  break;
               case 67:
                  if (curChar == 40)
                     kind = 19;
                  break;
               case 68:
                  if (curChar == 41)
                     kind = 19;
                  break;
               case 69:
                  if (curChar == 42)
                     kind = 19;
                  break;
               case 70:
                  if (curChar == 43)
                     kind = 19;
                  break;
               case 71:
                  if (curChar == 44)
                     kind = 19;
                  break;
               case 72:
                  if (curChar == 47)
                     kind = 19;
                  break;
               case 73:
                  if (curChar == 58)
                     kind = 19;
                  break;
               case 74:
                  if (curChar == 59)
                     kind = 19;
                  break;
               case 84:
                  if (curChar == 45 && kind > 19)
                     kind = 19;
                  break;
               case 85:
                  if (curChar == 61)
                     kind = 20;
                  break;
               case 86:
                  if (curChar == 45 && kind > 20)
                     kind = 20;
                  break;
               case 87:
                  if (curChar == 39)
                     kind = 20;
                  break;
               case 89:
                  if (curChar == 34)
                     kind = 22;
                  break;
               case 92:
                  if (curChar == 46)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if (curChar == 126)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  else if (curChar == 94)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  else if (curChar == 96)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 124)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 123)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 92)
                     jjCheckNAdd(69);
                  else if (curChar == 93)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 91)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 64)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 57;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 22;
                  if (curChar == 92)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 92)
                     jjCheckNAddStates(10, 46);
                  if (curChar == 92)
                     jjAddStates(47, 49);
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 8:
                  if (curChar == 92)
                     jjAddStates(47, 49);
                  break;
               case 9:
                  if (curChar == 110)
                     jjAddStates(5, 6);
                  break;
               case 11:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 12:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if (curChar == 125 && kind > 4)
                     kind = 4;
                  break;
               case 14:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 21:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 37:
                  if (curChar == 92)
                     jjCheckNAddStates(10, 46);
                  break;
               case 38:
                  if (curChar == 100 && kind > 16)
                     kind = 16;
                  break;
               case 39:
               case 48:
                  if (curChar == 110)
                     jjCheckNAdd(38);
                  break;
               case 40:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 49:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 75:
                  if (curChar == 64)
                     kind = 19;
                  break;
               case 76:
                  if (curChar == 91)
                     kind = 19;
                  break;
               case 77:
                  if (curChar == 93)
                     kind = 19;
                  break;
               case 78:
                  if (curChar == 92 && kind > 19)
                     kind = 19;
                  break;
               case 79:
                  if (curChar == 92)
                     jjCheckNAdd(69);
                  break;
               case 80:
                  if (curChar == 95)
                     kind = 19;
                  break;
               case 81:
                  if (curChar == 123 && kind > 19)
                     kind = 19;
                  break;
               case 82:
                  if (curChar == 125 && kind > 19)
                     kind = 19;
                  break;
               case 83:
                  if (curChar == 124)
                     kind = 19;
                  break;
               case 88:
                  if (curChar == 96)
                     kind = 20;
                  break;
               case 90:
                  if (curChar == 94)
                     kind = 22;
                  break;
               case 91:
                  if (curChar == 126)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 27)
                     kind = 27;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 93 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc000L) != 0L)
            return 21;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 1);
      case 42:
         return jjStopAtPos(0, 9);
      case 91:
         return jjStopAtPos(0, 12);
      case 92:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_1(0x8000L);
      case 93:
         return jjStopAtPos(0, 13);
      case 123:
         return jjStopAtPos(0, 10);
      case 125:
         return jjStopAtPos(0, 11);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa2_1(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(3, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x10000000000000L, 0x0L
};
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 101;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if ((0x100001200L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(50, 52);
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 13)
                     jjAddStates(53, 54);
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  break;
               case 21:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 59)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 44)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 41)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 38)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 37)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 32)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 45)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  break;
               case 1:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 2:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 3:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 10:
                  if ((0x100001200L & l) != 0L)
                     jjAddStates(5, 6);
                  break;
               case 22:
                  if (curChar == 10 && kind > 19)
                     kind = 19;
                  break;
               case 23:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x2400L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 25:
                  if (curChar == 13)
                     jjAddStates(53, 54);
                  break;
               case 26:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 27:
                  if (curChar == 10)
                     jjCheckNAddStates(50, 52);
                  break;
               case 28:
                  if ((0x100001200L & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 29:
                  if (curChar != 10)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(55, 57);
                  break;
               case 30:
                  if ((0x100001200L & l) != 0L)
                     jjCheckNAddStates(55, 57);
                  break;
               case 31:
               case 33:
                  if (curChar == 13)
                     jjCheckNAdd(29);
                  break;
               case 32:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(55, 57);
                  break;
               case 34:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(50, 52);
                  break;
               case 57:
                  if (curChar == 61 && kind > 18)
                     kind = 18;
                  break;
               case 58:
                  if (curChar == 39)
                     kind = 18;
                  break;
               case 60:
                  if (curChar == 60)
                     kind = 18;
                  break;
               case 61:
                  if (curChar == 62)
                     kind = 18;
                  break;
               case 62:
                  if (curChar == 43 && kind > 18)
                     kind = 18;
                  break;
               case 63:
                  if (curChar == 45 && kind > 18)
                     kind = 18;
                  break;
               case 68:
                  if (curChar == 32 && kind > 19)
                     kind = 19;
                  break;
               case 69:
                  if (curChar == 33)
                     kind = 19;
                  break;
               case 70:
                  if (curChar == 35 && kind > 19)
                     kind = 19;
                  break;
               case 71:
                  if (curChar == 37)
                     kind = 19;
                  break;
               case 72:
                  if (curChar == 38)
                     kind = 19;
                  break;
               case 73:
                  if (curChar == 40)
                     kind = 19;
                  break;
               case 74:
                  if (curChar == 41)
                     kind = 19;
                  break;
               case 75:
                  if (curChar == 42)
                     kind = 19;
                  break;
               case 76:
                  if (curChar == 43 && kind > 19)
                     kind = 19;
                  break;
               case 77:
                  if (curChar == 44)
                     kind = 19;
                  break;
               case 78:
                  if (curChar == 47)
                     kind = 19;
                  break;
               case 79:
                  if (curChar == 58)
                     kind = 19;
                  break;
               case 80:
                  if (curChar == 59)
                     kind = 19;
                  break;
               case 90:
                  if (curChar == 45 && kind > 19)
                     kind = 19;
                  break;
               case 95:
                  if (curChar == 61 && kind > 21)
                     kind = 21;
                  break;
               case 97:
                  if (curChar == 34)
                     kind = 22;
                  break;
               case 100:
                  if (curChar == 46)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 92)
                     jjCheckNAddStates(58, 98);
                  if (curChar == 92)
                     jjAddStates(99, 101);
                  break;
               case 21:
                  if (curChar == 126)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  else if (curChar == 94)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 95;
                  else if (curChar == 124)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 123)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 92)
                     jjCheckNAdd(75);
                  else if (curChar == 93)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 91)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 64)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 66;
                  else if (curChar == 96)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 55;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 20;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 93;
                  else if (curChar == 92)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 8:
                  if (curChar == 92)
                     jjAddStates(99, 101);
                  break;
               case 9:
                  if (curChar == 100)
                     jjAddStates(5, 6);
                  break;
               case 11:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 12:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if (curChar == 125 && kind > 5)
                     kind = 5;
                  break;
               case 14:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 35:
                  if (curChar == 92)
                     jjCheckNAddStates(58, 98);
                  break;
               case 36:
                  if (curChar == 100 && kind > 16)
                     kind = 16;
                  break;
               case 37:
               case 46:
                  if (curChar == 110)
                     jjCheckNAdd(36);
                  break;
               case 38:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 59:
                  if (curChar == 96 && kind > 18)
                     kind = 18;
                  break;
               case 64:
                  if (curChar == 108 && kind > 18)
                     kind = 18;
                  break;
               case 65:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 81:
                  if (curChar == 64)
                     kind = 19;
                  break;
               case 82:
                  if (curChar == 91)
                     kind = 19;
                  break;
               case 83:
                  if (curChar == 93)
                     kind = 19;
                  break;
               case 84:
                  if (curChar == 92 && kind > 19)
                     kind = 19;
                  break;
               case 85:
                  if (curChar == 92)
                     jjCheckNAdd(75);
                  break;
               case 86:
                  if (curChar == 95)
                     kind = 19;
                  break;
               case 87:
                  if (curChar == 123 && kind > 19)
                     kind = 19;
                  break;
               case 88:
                  if (curChar == 125 && kind > 19)
                     kind = 19;
                  break;
               case 89:
                  if (curChar == 124)
                     kind = 19;
                  break;
               case 92:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 96 && kind > 21)
                     kind = 21;
                  break;
               case 94:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 96:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 98:
                  if (curChar == 94)
                     kind = 22;
                  break;
               case 99:
                  if (curChar == 126)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 91:
                  if ((jjbitVec1[i2] & l2) != 0L && kind > 21)
                     kind = 21;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 101 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(1, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 19;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if ((0x100001200L & l) != 0L)
                     jjAddStates(102, 103);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 4:
                  if (curChar == 110)
                     jjAddStates(102, 103);
                  break;
               case 6:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 7:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar == 125)
                     kind = 4;
                  break;
               case 9:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 16:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 19 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   30, 35, 34, 28, 29, 10, 11, 32, 33, 34, 47, 58, 59, 60, 61, 62, 
   63, 64, 2, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 
   78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 23, 
   25, 26, 28, 33, 32, 26, 27, 30, 31, 32, 45, 56, 57, 58, 59, 60, 
   61, 62, 63, 67, 68, 69, 70, 2, 71, 72, 73, 74, 75, 76, 77, 78, 
   79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 96, 97, 
   98, 99, 100, 21, 23, 24, 5, 6, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\52", "\173", "\175", 
"\133", "\135", "\134", "\134\144\145\146", null, null, null, null, null, null, null, 
null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_TABBING",
   "IN_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, 2, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1cfffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
static final long[] jjtoSpecial = {
   0x4L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[101];
private final int[] jjstateSet = new int[202];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public TeXParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public TeXParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 101; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       if (jjmatchedPos == 0 && jjmatchedKind > 28)
       {
          jjmatchedKind = 28;
       }
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 28)
       {
          jjmatchedKind = 28;
       }
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 3)
       {
          jjmatchedKind = 3;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    stateHistory.push(IN_COMMENT);
         break;
      case 2 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    stateHistory.pop();
    SwitchTo(stateHistory.isEmpty() ? DEFAULT : stateHistory.peek());
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 4 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    stateHistory.push(IN_TABBING);
         break;
      case 5 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    stateHistory.pop();
    SwitchTo(stateHistory.isEmpty() ? DEFAULT : stateHistory.peek());
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
