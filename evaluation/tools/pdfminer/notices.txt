pdf-miner (pdf2txt.py)
================================================================================

Executed steps:
--------------------------------------------------------------------------------
* Downloaded files: 
	git clone https://github.com/euske/pdfminer/
* Installed:
	sudo python setup.py install

Syntax:
-------------------------------------------------------------------------------- 
pdf2txt.py samples/simple1.pdf

Options:
--------------------------------------------------------------------------------

-o filename
    Specifies the output file name. By default, it prints the extracted contents to stdout in text format.

-p pageno[,pageno,...]
    Specifies the comma-separated list of the page numbers to be extracted. Page numbers start at one. By default, it extracts text from all the pages.

-c codec
    Specifies the output codec.

-t type
    Specifies the output format. The following formats are currently supported.

        text : TEXT format. (Default)
        html : HTML format. Not recommended for extraction purposes because the markup is messy.
        xml : XML format. Provides the most information.
        tag : "Tagged PDF" format. A tagged PDF has its own contents annotated with HTML-like tags. pdf2txt tries to extract its content streams rather than inferring its text locations. Tags used here are defined in the PDF specification (See ยง10.7 "Tagged PDF"). 

-I image_directory
    Specifies the output directory for image extraction. Currently only JPEG images are supported.

-M char_margin
-L line_margin
-W word_margin
    These are the parameters used for layout analysis. In an actual PDF file, text portions might be split into several chunks in the middle of its running, depending on the authoring software. Therefore, text extraction needs to splice text chunks. In the figure below, two text chunks whose distance is closer than the char_margin (shown as M) is considered continuous and get grouped into one. Also, two lines whose distance is closer than the line_margin (L) is grouped as a text box, which is a rectangular area that contains a "cluster" of text portions. Furthermore, it may be required to insert blank characters (spaces) as necessary if the distance between two words is greater than the word_margin (W), as a blank between words might not be represented as a space, but indicated by the positioning of each word.

    Each value is specified not as an actual length, but as a proportion of the length to the size of each character in question. The default values are M = 2.0, L = 0.5, and W = 0.1, respectively.

-F boxes_flow
    Specifies how much a horizontal and vertical position of a text matters when determining a text order. The value should be within the range of -1.0 (only horizontal position matters) to +1.0 (only vertical position matters). The default value is 0.5.

-C
    Suppress object caching. This will reduce the memory consumption but also slows down the process.

-n
    Suppress layout analysis.

-A
    Forces to perform layout analysis for all the text strings, including text contained in figures.

-V
    Allows vertical writing detection.

-Y layout_mode
    Specifies how the page layout should be preserved. (Currently only applies to HTML format.)

        exact : preserve the exact location of each individual character (a large and messy HTML).
        normal : preserve the location and line breaks in each text block. (Default)
        loose : preserve the overall location of each text block. 

-E extractdir
    Specifies the extraction directory of embedded files.

-s scale
    Specifies the output scale. Can be used in HTML format only.

-m maxpages
    Specifies the maximum number of pages to extract. By default, it extracts all the pages in a document.

-P password
    Provides the user password to access PDF contents.

-d
    Increases the debug level. 
