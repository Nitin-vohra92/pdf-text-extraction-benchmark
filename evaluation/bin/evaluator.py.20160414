import argparse
import logging
import os
import os.path
import util

from datetime import datetime

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s : %(levelname)s : %(module)s : %(message)s',
)
logger = logging.getLogger(__name__)

class Evaluator:
    ''' The base class of our evaluation that can be used to evaluate the 
    accuracy of the features defined above. '''
    
    def __init__(self, args):
        ''' Creates a new evaluator with the given args. '''
        self.args = args
        self.feature = None
        
    def evaluate(self):
        '''
        Starts the evaluation. Scans the root of groundtruth files given in 
        args for groundtruth files that matches the given prefix and suffix. 
        Tries to identify the actual file that belongs to the groundtruth file. 
        Computes the precision/recall values that result from both files and 
        compares them to previous results.
        '''
        
        # The root directory to scan for groundtruth files. 
        groundtruth_root = self.args.gt_path
        
        # The prefix of files to consider on evaluation. 
        prefix = self.args.prefix
        # The suffix of files to consider on evaluation (depends on feature).
        suffix = self.get_groundtruth_files_suffix()
        
        # Scan the given root directory for groundtruth files to evaluate.
        for current_dir, dirs, files in os.walk(groundtruth_root):
            # Only consider the files that matches the given prefix and suffix.
            files = [fi for fi in files if fi.startswith(prefix) \
                                       and fi.endswith(suffix)]
            for file in files:
                # Compose the absolute path of the groundtruth file.
                gt_path = os.path.join(current_dir, file)
                # Compose the absolute path of the actual file.
                actual_path = self.get_actual_path(gt_path)
                
                self.deserialize(self.get_serialization_path(actual_path))
                
                if self.args.recap:
                    self.recap(gt_path, actual_path)
                else:
                    # Evaluate.
                    self.evaluate_by_paths(gt_path, actual_path)
                    self.visualize(self.get_visualization_path(actual_path))
                    self.serialize(self.get_serialization_path(actual_path))
        self.finish_evaluation()

    def recap(self, gt_path, actual_path):
        ''' Recaps the evaluation results for given files.'''
        pass

    def evaluate_by_paths(self, gt_path, actual_path):
        ''' Evaluates the files given by the paths.'''
                        
        # Read and format the groundtruth file.
        gt = self.format_groundtruth_file(gt_path)
        # Read and format the actual file.
        actual = self.format_actual_file(actual_path)

        # Evaluate.
        return self.evaluate_by_strings(gt_path, gt, actual_path, actual)

    def evaluate_by_strings(self, gt_path, gt, actual_path, actual):
        ''' Evaluates the given strings.'''
        pass

    def format_actual_file(self, file_path):
        ''' Reads the given actual file. Override it if you have to do more 
        advanced stuff, like removing semantic markups, etc.'''
        
        # Make sure, that the file exists.
        if os.path.isfile(file_path):
            file = open(file_path)
            str = file.read()
            file.close()                        
            return str
        else:
            return ""

    def format_groundtruth_file(self, file_path):
        ''' Reads the given actual file. Override it if you have to do more 
        advanced stuff, like removing semantic markups, etc.'''
        
        # Make sure, that the file exists.
        if os.path.isfile(file_path):
            file = open(file_path)
            str = file.read()
            file.close()
            return str
        else:
            return ""

    def deserialize(self, path):
        ''' Deserializes the related results file for the given file/feature-
        pair. Computes (a) the latest precision/recall and (b) the best 
        precision and best recall achieved so far for the actual path and 
        feature.'''
        pass

    def serialize(self, actual_path):
        ''' Serializes the given result to the related results file. '''
        pass 

    def finish_evaluation(self):
        ''' Finishes the evaluation. '''
        pass

    # __________________________________________________________________________

    def get_actual_path(self, gt_file_path):
        '''
        Returns the path to the actual file produced by the tool under review
        that belongs to the given groundtruth file path.
        Returns None if no such actual file exists.
        '''
        groundtruth_root = self.args.gt_path
        gt_rel_path = os.path.relpath(gt_file_path, groundtruth_root)
            
        # Groundtruth file may have an extended file extension like 
        # "cond-mat0001228.full.txt" or "cond-mat0001228.body.txt"
        # But actual files don't have these extension.
        # For file name "cond-mat0001228.full.txt", find "cond-mat0001228.txt"
           
        # Find the first dot in the gt path.
        index_first_dot = gt_rel_path.find('.')
                
        if index_first_dot >= 0:
            # ext_file_extension = ".full.txt"
            ext_file_extension = gt_rel_path[index_first_dot : ]
            # Find the last dot in the extended file extension.
            index_last_dot = ext_file_extension.rfind('.')
            if index_last_dot >= 0:
                # ext_file_extension = ".txt"
                file_ext = ext_file_extension[index_last_dot : ]
                # Replace the extended file extension by the simple one.
                gt_rel_path = gt_rel_path.replace(ext_file_extension, file_ext)
            
        return os.path.join(self.args.actual_path, gt_rel_path)

    def get_groundtruth_files_suffix(self):
        """ Returns the suffix of groundtruth files to consider on parsing the 
        input directory. """
        return ".full.txt"
        
    def get_visualization_path(self, actual_path):
        ''' Returns the path to the file, where the visualization of the 
        evaluation of the given file/feature - pair should be stored. '''
        file_extension = ".visualization." + self.feature + ".txt"
        return util.update_file_extension(actual_path, file_extension)

    def get_serialization_path(self, actual_path):
        ''' Returns the path to the file, where the evaluation results for the
        given file/feature-pair should be stored. '''
        file_extension = ".results." + self.feature + ".txt"
        return util.update_file_extension(actual_path, file_extension)

