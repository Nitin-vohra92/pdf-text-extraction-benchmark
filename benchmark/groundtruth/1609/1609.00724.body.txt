pcr QSL pcr Squasher: A Fast Quasi-Separatrix Layer Map Calculator

Introduction

Many important questions in solar physics concern phenomena that take place in the low-Î² environment of the corona, such as flares and coronal mass ejections (CMEs), active region (AR) evolution and dynamics, heating of the corona and sources of the solar wind. For studying these, it is often useful to have a model of the 3D magnetic field in the corona as it still cannot be observed and mapped directly. Such models can be potential [\citep=Jiang12a], linear force-free field [\citep=Demoulin94] [\citep=Abramenko96] [\citep=Jiang12a], or non-linear force-free field [\citep=vanBallegooijen04] [\citep=Wiegelmann04] [\citep=Valori05] [\citep=Wheatland06] [\citep=Schrijver06] [\citep=Malanushenko12] [\citep=Inoue12] [\citep=Jiang12b]. Potential field source surface models have been in use for a long time and although well representative of the structure of the field at large heights in the corona, they by definition lack currents, and hence free energy, which is important for powering solar eruptions. An alternative are NLFFFs, which have gained significant popularity in recent years with the advent of numerous methods for their computation, which use either line-of-sight or vector photospheric magnetograms to produce a model of coronal magnetic fields or to extrapolate the observed photospheric magnetic field to the corona. However, these 3D magnetic fields are intrinsically complicated and although basic topological features, such as null points (NPs), fan-spine surfaces and flux ropes (FRs) can often be approximately identified just by inspecting field line plots, often, there is a need of quantitative topological analysis in order to make sense of the complicated 3D coronal magnetic field structure, its dynamics, and evolution.

Topological features in 2D and 2.5D, such as NPs [\citep=GorbatchevSomov88] [\citep=Parnell10], separatrices [\citep=GorbatchevSomov88], separator field lines, and null lines have been explored in solar physics context since the 80s. They are known to separate the field in connectivity domains. However, in the mid-90s a new topological term arose, namely quasi-separatrix layers [\citep=Priest95] [\citep=Demoulin96b], which are the 3D generalizations of the above-mentioned features, now separating the field into quasi-connectivity domains. While the linkage of magnetic field lines over separatrices and NPs is discontinuous, across QSLs it is continuous but drastically changes.

In the early description of [\cite=Demoulin96a], the strength of QSLs, i.e. the amount of the change in field line linkage, is measured by the norm of the Jacobian of the mapping of neighboring field lines [\citep=1994ApJ...437..851L] from one end of the photosphere to the other. However, this quantity is not invariant with respect to the direction of tracing of the field lines. Consequently, [\cite=Titov07] came up with an alternative covariant quantity quantifying QSL strengths, called the squashing factor, Q.

QSLs (as well as NPs and separatrices) are preferential sites for build-up of current sheets in the presence of footpoint motions, and hence are preferential sites where reconnection can take place [\citep=Aulanier05b]. Although, there is still no quantitative relationship [\citep=Galsgaard03b], it has been suggested that the higher the value of Q, the thinner the current layer at that particular QSL [\citep=Aulanier05b]. This makes these topological features very important for studies of storage and release of magnetic free energy in the process of reconnection at all scales.

Quantitative studies of topology by deriving QSL maps in 2D from potential, LFFFs, and NLFFFs have been used over the past decade to tackle many problems in solar physics. The existence of a QSL wrapping around the flux rope and crossing itself at a very high-Q topological feature, a hyperbolic flux tube [\citep=Titov07] [\citep=Savcheva12a] [\citep=Savcheva12b] [\citep=Zhao14] [\citep=Liu14], has become the basic feature in the standard flare model in 3D [\citep=Aulanier12] [\citep=Janvier13], confirmed by observations [\citep=Janvier14] [\citep=Savcheva15] [\citep=Savcheva16a] [\citep=Janvier16] [\citep=Zhao16]. In this picture, tether-cutting reconnection happens at the HFT under the FR between J-shaped oppositely directed field lines, which slip [\citep=Aulanier06b] over the photospheric traces of the HFT [\citep=Janvier13] and produce S-shape field lines that feed the FR and post-flare arcade. This scenario was put forward supported by data-constrained NLFFF models and MHD simulations by [\cite=Savcheva12b]. In this picture, the photospheric traces of the HFT are 2J-shaped [\citep=Titov07] [\citep=Aulanier10] and they match the 2J-shaped flare ribbons of classical two-ribbon flares [\citep=Chandra09] [\citep=Schrijver11]. The match between the shapes of QSLs and flare ribbons has been achieved recently by [\cite=Liu14], [\cite=Savcheva15], and [\cite=Zhao16]. These QSLs have been shown to move together with the flare ribbons in direction perpendicular to the polarity inversion line (PIL) [\citep=Savcheva16a] [\citep=Janvier16].

The QSLs derived in [\cite=Savcheva16a] and [\cite=Janvier16] have been derived based on NLFFFs constrained only by pre-flare observations (magnetograms, and EUV and X-ray images), but have managed to reproduce the flaring topology and its evolution to a large extent. That indicates that these kinds of studies have potential predictive power as the use of topology analysis can show us the likely sites of flare reconnection a few hours before the event, as shown in [\cite=Savcheva12a]. One could imagine going further and using the flare ribbon information and QSLs to work backwards and improve the initial NLFFF, thus providing better initial conditions for global data-driven MHD simulations of CME initiation and propagation [\citep=Savcheva16b].

Further studies show the evolution of QSL maps of solar ARs over several days, noting the effects of: flux cancellation on building sigmoidal flux ropes ([\cite=Savcheva12a], who showed the transition from bald-patch separatrix surfaces [\citep=Titov93] to a HFT); quadrupolar topology on the possible breakout scenario [\citep=Zhao14]; flux emergence on the development of a fan-spine NP topology [\citep=Jiang16]. The global topology of active regions before eruption has been shown to be important for the characteristics of the dynamics, be it an eruption or just loop reconfiguration [\citep=Janvier16] [\citep=Jiang16] [\citep=Pontin16] [\citep=Chintzoglou16].

Knowing the locations, extent, shape, and connections between connectivity domains, and the features they contain or border, can prove vital for understanding links between seemingly unconnected faraway regions on the Sun that erupt sequentially or almost simultaneously, i.e. sympathetic eruptions. A detailed study of one such event (1-2 August, 2010) was conducted by [\cite=Titov12], who showed that filaments embedded in neighboring pseudostreamers are activated sequentially after the first filament erupts and destabilizes the system [\citep=Torok11]. Even if it is a single CME, the potential of the CME to have a large longitudinal extent or to present with a significant energetic particle signature at any point in the heliosphere is most probably dependent on the specifics of the global 3D topology in the corona and heliosphere as the CME evolves and propagates [\citep=Masson13]. As a related phenomenon, the propagation of EUV dimmings may also turn out to be dependent on the global solar topology, neighboring the directly related AR [\citep=Downs16].

On a smaller scale, reconnection at QSLs have been potentially found important for the heating of the solar corona [\citep=Schrijver10]. Reconnection in loop braiding has been theoretically and numerically explored for this purpose as well [\citep=WilmotSmith09a] [\citep=Pontin15]. QSLs in the outskirts of ARs have been shown to drive plasma outflows [\citep=Baker09] as evidenced by blueshifts in Hinode/EIS velocity maps of ARs, which could be important for understanding the outflow of plasma from the corona that contributes to the slow solar wind. Potential solar wind sources can be further derived my means of the S-web model of [\cite=Archontis09], which utilizes QSLs at the source surface and below to look at the connectivity domains surrounding active regions and coronal holes, as well as the connections between them.

Ultimately, with the speed-up and automation of NLFFF codes and QSL computation methods, we will be able to implement 3D QSL analysis in space weather predictive operations aimed at identifying the next likely region to erupt, studying the effect of the propagation of the CME ejecta and its particles, and predicting the direction and sign of the CME magnetic field when it reaches the Earth's magnetosphere. One step on this path is obtaining a fast, reliable 3D QSL code that can work on the whole Sun or in an AR in great detail. Such codes have been developed and used before for analyzing potential coronal magnetic field models [\citep=0004-637X-806-2-171], as well as experimental flux rope configuration [\citep=PhysRevLett.103.105002], yet they were never made public.

In this paper, we introduce a fast, freely-available, open-source code, pcr QSL pcr Squasher, aimed at calculating 3D QSL maps, whose development was motivated by several potential uses, such as:

Studying large resolution QSL physics and its application to reconnection theory.

Exploring large parameter spaces of possible topologies.

3D studies of active region evolution, CME initiation and propagation.

Obtaining the evolution of topology over large periods of time with high cadence from data-driven or idealized MHD simulations at a wide range of scales.

The paper is organized as follows. In Section [\ref=over] we give an overview of the code. In Section [\ref=algo] we give details about the algorithm used in pcr QSL pcr Squasher. We show illustrative results in Section [\ref=ex] and give our concluding remarks in Section [\ref=summary].

Code Overview

pcr QSL pcr Squasher is written in C++ and depends on the Boost and VexCL [\citep=vexcl] libraries, on a working OpenCL implementation, as well as on their respective dependencies. The visualization scripts require Python with SciPy [\citep=scipy] and PyEVTK. The code is intended to be run on a graphics processing unit (GPU). However, it can be run multithreaded on a CPU if one uses the POCL [\citep=pocl] OpenCL implementation.

The input for pcr QSL pcr Squasher is 3D cubes containing the values of the magnetic field components sampled on a rectilinear grid in either Cartesian or spherical coordinates. For the exact file structure, we refer the reader to the manual distributed with the code.

The output of the code can be 2D or 3D arrays of Q values, depending on whether the code is run in 2D or 3D mode to produce slices or data cubes, respectively. For slices, the output can be rendered as an image using the provided Python script. The output of 3-dimensional calculations is exported to VTK format, which can then be visualized using Paraview, VisIt or Mayavi among many.

When the desired output is a slice through the volume of interest, the slices can have two types of geometry: planar or spherical. The code supports constructing planar slices of arbitrary orientation. In this case, one needs to specify the orientation, center, and axes span of the slice. Spherical slices are slices at a specified fixed radius, spanning a given range in latitude and longitude.

Algorithm

Below we write down the equations solved by pcr QSL pcr Squasher. The code can work in both Cartesian and spherical coordinates. Whenever we find it useful, we quote the explicit equations solved by the code for spherical coordinates.

Integrating field lines

The magnetic field lines [formula] (where Î» is an affine parameter) are calculated as the integral curves of the unit magnetic field, [formula]. Thus, in Cartesian coordinates, we trivially have:

[formula]

In spherical coordinates, the field lines are given as solutions to (keeping the Î» dependence explicit):

[formula]

Here we used the fact that the magnetic field components are written in the spherical orthonormal basis , , rÌ, which correspond to longitude, latitude, and radius, respectively.

Interpolation schemes

pcr QSL pcr Squasher allows one to use different interpolation schemes when calculating the values of the magnetic field vectors on the right-hand side of the above system of equations. This capability can be used to test the robustness of QSL maps on the interpolation order. The available interpolation schemes are trilinear, triquadratic [\citep=quadratic_interp] and tricubic [\citep=cubic_interp].

To be able to write down the interpolation schemes explicitly, we need to introduce some notation first. The input magnetic field data cubes specify the values [formula] of the magnetic field at points with coordinates [formula], sampled on a rectilinear grid. Thus, [formula] is a 3-vector, with each of its components running over the indices of the input 3d magnetic field array. Next, we would like to write down the value of [formula] at some arbitrary position [formula]. To do that, we need to identify the cell within the input array within which [formula] lies. The interpolation kernels cover 8, 27, or 64 vertices neighboring that cell for trilinear, triquadratic and tricubic interpolation, respectively. Of the 8 vertices in the immediate neighborhood of [formula], let us denote by [formula] that vertex, which lies closest to the origin of the array. Therefore, for any of the above interpolation schemes, we can write:

[formula]

where the sum runs over the 8, 27, or 64 vertices which span the respective interpolation stencil around [formula]. The physical dimensions of the array cell containing [formula] are specified by [formula]. The interpolation kernels [formula] depend on the selected interpolation order.

As an example, for trilinear interpolation, the interpolation kernels are given by:

[formula]

When running pcr QSL pcr Squasher for spherical geometry, the input magnetic field is sampled on a rectilinear grid in spherical coordinates. Thus, in the above equation, we have [formula], [formula], [formula], while h0, h1, h2 give the grid spacing in longitude, latitude and radius, respectively, for the cell containing [formula].

Field-line deviation using linearization

The squashing factor Q quantifies how neighboring field lines deviate from one another. The procedure described in [\cite=Pariat12] for solving for Q involves explicitly integrating three closely spaced field lines, after which one takes the finite differences in position of the footpoints of those field lines. Those differences in turn enter in the calculation of the squashing factor. However, calculating those field-line deviations using such a finite difference scheme puts severe constraints on the precision with which one should follow neighboring field lines. [\cite=Pariat12] quote a fractional precision of 10- 8 for their calculation, which results in severe speed penalties.

In pcr QSL pcr Squasher, we alleviate that problem by calculating field-line deviations by linearizing the deviation equation as follows. The deviation between two neighboring field-lines [formula] and [formula] is quantified by the difference in their positions: [formula]. Here we assume that when Î» = 0, the positions along the two field lines are infinitesimally apart. Thus, the field-line deviation can be calculated as follows:

[formula]

where we used perturbation theory to linearize the equation in the second equality.

In order to integrate the above equation, we need to be able to take the gradient of [formula]. Recalling that [formula] is calculated using ([\ref=interp]), taking the gradient is straightforward as it acts only on the interpolation kernels. In spherical coordinates, the field-line deviation is given explicitly below for reference:

[formula]

where Î´f is given by (after suppressing its arguments):

[formula]

where the derivatives are taken analytically in the code for each interpolation kernel.

Integration methods

pcr QSL pcr Squasher offers a choice between two integration schemes for integrating the field lines and field-line deviation vectors. One can use either an explicit Euler scheme, or an adaptive Runge-Kutta Cash-Karp method [\citep=Cash:1990:VOR:79505.79507] provided by the Boost |rungeuttaasharp54| stepper algorithm. The latter method can easily be substituted with any of the other integration methods offered by the Boost library.

The field line deviation vectors [formula] needed for the squashing factor calculation, are solved by pcr QSL pcr Squasher using eq. ([\ref=dev]) (or for spherical geometry, using ([\ref=dev_sph])) instead of the finite difference scheme of [\cite=Pariat12]. This allows us to relax the precision and accuracy tolerances by many orders of magnitude. For the adaptive stepper, we have found a value of 10- 2 to be more than sufficient for the real world example explored in this paper (see below). This tolerance is six orders of magnitude larger than the one quoted by [\cite=Pariat12]. Choosing an explicit fixed-step Euler scheme with roughly 5 samplings per grid spacing gives about an order of magnitude speed-up relative to the adaptive stepper implementation that is incorporated in pcr QSL pcr Squasher. One trades accuracy for such a speed-up. However, in our experiments, we have not encountered cases where using the adaptive stepper was beneficial. We still consider the adaptive stepper useful as it can be used for testing the convergence properties of the Euler scheme for the particular problem at hand.

Squashing factor calculation

Having introduced the basic equations allowing us to integrate the magnetic field lines and field-line deviations, we proceed to describe the calculation of the squashing factor. To calculate the squashing factor, we use Method 3 of [\cite=Pariat12]. That requires projecting the components ([formula]) of [formula] perpendicular to the field line tangent, given by [formula]. In spherical coordinates, we can do that if we write both [formula] and [formula] in the spherical orthonormal basis spanned by , , rÌ. The magnetic field is given by interpolating the input magnetic field using ([\ref=interp]), while the components of the field line deviation vector are given by:

[formula]

Since our choice of basis is orthonormal, calculating [formula] numerically is trivial. Here [formula] is evaluated at [formula].

To calculate Q at a position [formula], we need to integrate [formula] for two sets of initial conditions (denoted with superscripts):

[formula]

where Î» = 0 corresponds to the initial condition for the field line [formula], which passes through [formula]. The only restriction on vectors [formula] and [formula] is that they, combined with [formula], form an orthonormal basis at [formula]. Integrating the field line [formula] along with [formula] and [formula] involves solving equations ([\ref=fl]) and ([\ref=dev]) (which in spherical coordinates, correspond to ([\ref=fl_sph]) and ([\ref=dev_sph])), forwards to [formula], and then backwards to [formula], subject to the initial conditions ([\ref=ic]). Those values of Î» correspond to parameter values for which [formula] reaches the boundary of the region spanned by the input magnetic field.

Let us define the solutions at the endpoints as:

[formula]

With these definitions, after a bit of algebra, one can show that Q as calculated using Method 3 of [\cite=Pariat12] can be reduced to the following expression, which is straightforward to implement numerically:

[formula]

where [formula] is the unnormalized magnetic field magnitude corresponding to one of the endpoints, and similarly for [formula] and B0.

Adaptive refinements

In order to be able to identify QSLs, one needs to resolve high-Q regions, which correspond to thin surfaces, separating the quasi-connectivity domains in 3D. Thus, a proper QSL code needs to perform adaptive refinements around those regions. One way to do that is to refine in regions where Q (or its second derivative, for example) is larger than a predefined threshold. In pcr QSL pcr Squasher, we employ an alternative method, which identifies those domain boundaries much more robustly. The method relies on using Field-line Length Edge (FLEDGE) maps which we introduce next.

We define a FLEDGE map to be any map of the changes of the length of neighbouring field lines. As an example, such changes can be mapped out using the gradient magnitude from the Sobel operator applied to a 2D or 3D map of the length of field lines in a section or a volume. Examples of FLEDGE maps are shown in the last row of Figure [\ref=TDslices] (discussed further in the next section), where a Sobel filter was applied to the 2D maps of the Field-Line Length (FLL) shown in the middle row of that figure.

Having introduced FLEDGE maps, let us move on to describe the way adaptive refinements are handled by pcr QSL pcr Squasher. That is done by first filling the slice or volume of interest with a Hilbert curve. This allows one to map the region of interest onto a one-dimensional curve. Thus, the array holding the Q and FLL values in the code can be rendered one-dimensional, with successive elements of that array ordered according to position along the Hilbert curve.

Hilbert curves carry the useful property that neighboring points on the Hilbert curve are necessarily close together in real space, although the opposite does not necessarily hold. In the spirit of the FLEDGE maps described above, our criterion for refining the sampling in a region of interest is checking whether the jump in the FLLs between two successive samples along the Hilbert curve surpasses a certain threshold. One can envision many other possible choices, but we found this rule quite robust, converging on domain boundaries about an order of magnitude faster than using a threshold in Q (or its second derivative along the Hilbert curve) as a refinement criterion. If the FLL jump threshold is surpassed, then the code calculates Q (and the respective field-line length) halfway along the Hilbert curve between those two neighboring samples.

For convenience, pcr QSL pcr Squasher includes a code which takes the Q (or FLL) array sampled along the Hilbert curve, and converts it into a 2D or 3D array of Q values sampled on a rectilinear grid spanning the respective slice or volume of interest. If more than one Q value is found in a cell around a grid point, the value the array converter assigns to that point is the maximum Q value in that cell. If there are no samples in a grid cell, then the array converter interpolates the log (Q) values along the Hilbert curve to fill in the gap.

The Hilbert curve refinements can miss a point that lies in between samples that are not close along the Hilbert curve, but are close in real space. To alleviate that problem, after each refinement step, we shift the Hilbert curve by a small amount in real space; then reorder the Q and FLL arrays along that new Hilbert curve; perform the refinement step again; and then shift back the Hilbert curve to its original position, reordering the arrays along that original curve. We have found that applying this shifting technique nearly eliminates such misses, and makes any artifacts irrelevant.

The benefit of the Hilbert curve refinements (as opposed to using more sophisticated adaptive-mesh techniques) is that the code performing the adaptive refinements is about 50 lines long and requires no special book-keeping other than keeping track of the Hilbert coordinate of each point for which a Q value is known. The functions responsible for the calculation of the Q values are independent on the choice of refinement scheme. Thus, incorporating any other type of adaptive refinement in pcr QSL pcr Squasher should be a straightforward coding exercise.

Illustrative examples

Titov & DÃ©moulin flux rope

In order to illustrate the capabilities of pcr QSL pcr Squasher, in this section we show several 2D and 3D QSL and FLEDGE maps obtained with the code. Originally, the theory of QSLs has been developed for the Cartesian analytical model of a flux rope following the construction of [\citet=TD99], which has served as an analytical case study for QSL calculation methods [\citep=Pariat12]. Thus, the first results from pcr QSL pcr Squasher we include are obtained for the numerical implementation of the TD flux rope model as given by [\cite=vanBallegooijen08]. Those are shown in 2D in Fig. [\ref=TDslices] and in 3D in Fig. [\ref=3DTD].

In Fig. [\ref=TDslices], we have shown horizontal slices through the FR at 3 different heights (first three columns), as well as vertical slices through the flux rope (fourth column). The three rows in the figure correspond to: a QSL map, quantified by the squashing factor, Q; a map of the field-line length(FLL); as well as a FLEDGE map, quantified by the gradient magnitude from a Sobel filter applied to the FLL map.

The height of the sections in the first column (z = 0.01) is taken below the peak of the HFT, so that the QSLs have a 2J shape with the J's facing away from each other [\citep=Savcheva12a] [\citep=TD99]. For the chosen value of flux rope twist, the horizontal maps display QSL hooks that are almost closed on each other. The effect of twist on the hooks is discussed in detail by [\cite=Savcheva12b] and [\cite=Zhao16].

The second column (z = 0.97) shows a single S-shaped QSL because the cut passes through the HFT [\citep=Savcheva12a]. The third column (z = 2) shows the QSL that encircles the flux rope when the cut is taken above the HFT. The curve is almost closed due to the large amount of twist in the rope. The vertical section clearly shows the HFT under the flux rope core as the location where the QSLs that wraps around the flux rope intersects with itself.

From Fig. [\ref=TDslices], one can see that large values in the FLEDGE maps (locations where FLL jumps) correspond to quasi-domain boundaries, characterized by QSLs. Note that the FLEDGE maps also capture the boundary between open and closed field lines. The close correspondence between the QSL and FLEDGE maps is investigated further below.

In Fig. [\ref=3DTD], the 3D QSL (left column) and FLEDGE (right column) maps are rendered using Paraview. One can clearly see the QSL surface that wraps around the flux rope. In the top panel, a 2D section is added in the center of the rope showing the outline of the rope and the crossing of the QSL with itself at the HFT (the reddest part of the volume). A semi-transparent reddish feature from the 3D rendering can be seen to pass through the saddle point of the HFT in the 2D map. Note that 2D sections can be computed separately by pcr QSL pcr Squasher, or can be extracted from the 3D volume of Q in a visualization software. In the bottom panel of the Fig. [\ref=3DTD] we have shown some sample field lines that belong to the flux rope and are contained within the 3D-rendered surface of the TD flux rope QSL. As in Fig. [\ref=TDslices], in Fig. [\ref=3DTD] one can clearly see the close resemblance between the QSL and FLEDGE maps in 3D. The most apparent difference is the fact that the HFT is not prominent in the FLEDGE map. Thus, while we can use the locations of the largest Q values as a proxy for the location of the HFT, there is no such correspondence between values in the FLEDGE map and HFT's.

SOL2010-04-08 sigmoidal region

Next, we demonstrate the capabilities of pcr QSL pcr Squasher for a data-constrained unstable magnetic field model in spherical coordinates, produced with the flux rope insertion method [\citep=vanBallegooijen04] [\citep=Savcheva09]. The model is of SOL2010-04-08 sigmoidal region that produced a B-class flare and a CME on 08 April 2010 and its stability has been studied in detail in [\cite=Su11]. The unstable model analyzed here is produced by addition of axial flux to the best-fit marginally stable model, so that a residual Lorentz force exists, which prevents the field from reaching a non-linear force-free equilibrium during the magnetifrictional relaxation of the field [\citep=Savcheva15]. Such an unstable model has been used by [\cite=Kliem13] and [\cite=Savcheva16b] to produce an MHD eruption from this region. The lower boundary for the QSL calculation is set at 2 Mm since lower than that the magnetic field models contain many low-lying bold patches [\citep=Titov93] which contain infinite values of Q, yet the field lines that pass through these BPs do not propagate to large heights. The introduction of that boundary significantly speeds up the computation as discussed in [\cite=Savcheva12b].

Our 3D results for SOL2010-04-08 are shown in Fig. [\ref=100408slice]. The left column shows the QSL map of the region, while the right column, the FLEDGE map, computed in the same way as for the TD flux rope.

The first two rows of Fig. [\ref=100408slice] show a top and side view of the spherical wedge domain of the magnetic field computation, including field lines sampling different quasi-connectivity domains, including the core of the flux rope (magenta) and the overlying arcade (cyan). The bottom row shows a planar vertical slice through the spherical domain in the middle of the flux rope. One can see the outline of the flux rope and the HFT (red field line) underneath. Notice that the HFT has already reached a significant height in the shown iteration of the magnetofrictional evolution [\citep=Savcheva16a] and the erupting flux rope is in the process to turn into a CME.

As was the case with the TD flux rope, in this realistic example, the FLEDGE map recovers the general flux rope structure seen in the QSL map, including the intersection of the QSL surfaces at the location of the HFT. Yet, the HFT itself is not readily identified in the FLEDGE map.

However, calculating the 3D FLEDGE maps for SOL2010-04-08 took about 3 min on a consumer workstation GPU (AMD W8100). The calculation of the 3D QSL map of the same region took 2 orders of magnitude more time. The main reason for this enormous difference is the fact that one does not need to perform adaptive refinements when computing FLEDGE maps as jumps in FLL are readily identified (see top-right panel of Fig. [\ref=1004083D]) even at low resolution, unlike local spikes in Q. Thus, we argue that FLEDGE maps offer a computationally cheap substitute of QSL maps that can be especially useful in the preliminary stages of any (quasi-)topological studies.

In Fig. [\ref=1004083D] we have shown a spherical surface slice below the peak of the HFT. This can be recognized by the QSL pattern around coordinates (-200 Mm, 300 Mm) in the top-left panel, showing the 2D QSL map. That QSL pattern can be recognized as the 2J-pattern seen in the first column of Fig. [\ref=TDslices], as well as in the cartoon shown in Fig. 8 of [\cite=Savcheva12a]. The QSL map is certainly complicated due to the intrinsic complexity of the observed HMI magnetic field (no smoothing has been applied). This effect of real magnetic fields on the complexity of QSL maps has been discussed in detail in [\cite=Savcheva12a] [\cite=Savcheva12b]. Yet, from the vertical slice in Fig. [\ref=100408slice], one can see that most of the complex structures are contained at low heights above the photosphere, and do not interfere substantially with one's ability to read the flux-rope structure from the 3D QSL maps, thus highlighting the importance of calculating QSL maps in three dimensions.

For comparison, in the other three panels of Fig. [\ref=1004083D], we show the corresponding FLL map (top-right), as well as the FLEDGE map with two different scalings and color-codings in the bottom two panels. The similarities between the QSL and FLEDGE maps on the top-left and bottom-left are clear.

Summary

In this paper we presented pcr QSL pcr Squasher: a free, publicly available, open-source code for fast calculation of Quasi-Separatrix Layer maps in two or three dimensions. It requires an input magnetic field sampled on a rectilinear grid in Cartesian or spherical coordinates.

We benchmarked the code by calculating 3D QSL maps for a model of the SOL2010-04-08 sigmoidal region on a consumer workstation GPU (AMD W8100). We found that the code achieves large processing speeds for three main reasons, each of which results in an order-of-magnitude speed-up:

Running the code on the GPU as opposed to the workstation CPU results in about an order of magnitude speed-up.

Compared to previous studies [\citep=Pariat12], we drastically relax the precision requirements for the QSL calculation. We do that by applying perturbation theory when calculating field-line deviations, which are necessary for calculating the squashing factor, quantifying the QSL strength.

We use a new boundary detection criterion between quasi-connectivity domains, which quickly identifies possible QSL locations which need to be finely sampled by the code. That boundary detection criterion relies on finding the locations of abrupt field-line length changes. A map of these jumps in field-line length we dub a FLEDGE map. We find that using such FLL jumps as a refinement criterion, instead of a threshold in Q (or its second derivative), results in an order of magnitude speed-up of the code.

For the realistic model discussed above, we clocked pcr QSL pcr Squasher at several million Q values per minute, which implies that a representative 3D QSL map can be obtained within a few hours.

We also presented a quick-and-dirty alternative to QSL maps: FLEDGE maps, which can be optionally output by pcr QSL pcr Squasher. We show that, for the most part, FLEDGE maps and QSL maps identify similar topological features. Constructing high-resolution 3D FLEDGE maps with pcr QSL pcr Squasher can be completed in minutes - two orders of magnitude faster than calculating the corresponding 3D QSL maps. The main reason for this difference is the fact that one does not need to perform adaptive refinements when computing FLEDGE maps as jumps in field-line length are readily identified even at low resolution, unlike local spikes in Q. Thus, we argue that FLEDGE maps offer a computationally cheap substitute of QSL maps that can be especially useful in the preliminary stages of any (quasi-)topological studies.

The potential advantages to the solar physics community of having such freely-available, open-source codes are largely unexplored beyond published data-reduction pipelines. One of our goals in making pcr QSL pcr Squasher public is stimulating others to get involved in a collaborative effort to produce codes open to inspection and verification. This has the benefit of avoiding the duplication of coding efforts and waste of public resources, as well as decoupling the scientific and coding efforts.

pcr QSL pcr Squasher can be found at .