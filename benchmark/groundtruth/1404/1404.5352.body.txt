=10000

Critique of J. Kim's "P is not equal to NP by Modus Tollens"

Introduction

The abstract of Kim's paper [\cite=Kim2014] is as follows:

In this paper we will critique Kim's proof that   ≠  , a proof that claims to solve the famous [formula] vs. [formula] problem, widely agreed to be the most important unsolved problem in computer science. We will begin by outlining Kim's paper in detail. Then we will examine several problems with his paper, including the many ambiguous definitions, wordings, and explanations throughout his paper. We will address both of the possible interpretations of his most ambiguous definition, and describe how either interpretation arrives at a contradiction. Finally, we provide a comment on the invalidity of the final commentary of Kim's paper.

Kim's argument

Most of the arguments in Kim's paper are not rigorous, some constructions are not shown, his definitions are not precise, and we believe his paper contains many notational mistakes. For this reason, this section will restate his paper in detail as we understand it so that it may be refuted rigorously.

Cook-Levin theorem

By the Cook-Levin theorem, we can construct a series of Boolean clauses based on the action of any arbitrary Turing machine on a given input x, such that the series of clauses is satisfiable if and only if it accepts x. Together, Kim calls this unit of clauses c. In the proof of this theorem given by Garey and Johnson, these Boolean clauses in c are grouped into G1, G2, G3, G4, G5, and G6 by the different parts of the computation that they enforce. One group of particular interest to Kim is G4, which enforces that "at time 0, the computation is in the initial configuration of its checking stage for input x" [\cite=Garey1979]. The rest of the groups of clauses, G1, G2, G3, G5, and G6, are each concerned with the run of the machine, its transitions, and that it ends at a final state [\cite=Garey1979].

For a given c, he lets cx, what he calls the "input-part," be G4, the group that is concerned with asserting the initial configuration. He lets cr, the "run-part," be the rest of the clauses, those concerned with the run of the machine.

Construction of M

[formula] An accepting computation of a Turing machine T on input y is a finite sequence of configurations and transitions of T (starting at the initial state of T and with y on its tape) that ends in an accepting state of T.

Kim proposes a Turing machine algorithm M, which has in its code a finite list 1,2,...,n of Boolean formulas, each which have been encoded from arbitrary accepting computations from arbitrary Turing machines, using the Cook-Levin construction described above. For each j in this list, we can strip its "input-part" to obtain the list of "run-parts" cr1, cr2, ..., crn. Call this list of "run-parts" from arbitrary machines [formula].

Kim notes that we can construct countably many M's, 1,2,3,...,i, where each i includes in its program code the list of Boolean formulas Cri, as described above. Kim defines the behavior of a given i as follows.

Let Ci,y be the list of each c that appears in the run of i on input y. More formally, Ci,y  =  1,2,...,n such that [formula], where rj∈Cri.

Defining o

Kim introduces the idea of a particular transition table of a Turing machine, which he says is a transition table that "may produce an accepting computation by running on a Turing Machine" [\cite=Kim2014]. He observes that "each of all accepting computations may have its particular transition table, i.e., the table can be built by collecting all the distinguished transitions from the computation, where we know that a computation is a sequence of the transitions of configurations of a Turing Machine" [\cite=Kim2014].

Kim then proposes the machine o∈{1,2,...,i} such that, for some input y, there exists a co∈Co,y that describes an accepting computation on input y (call this accepting computation o) for which there exists a particular transition table t which is also a particular transition table for the accepting computation of the run of o on y (call this o.) Note, rather importantly, that o and o are both accepting computations with respect to input y.

"  ≠  "

Definition: [\cite=Kim2014] A particular transition table t is Dsat if it "deterministically describes o's transitions and the SAT-solver module in o runs deterministically in a poly-time for the length of c."

Kim's proof of   ≠   is as follows.

He argues that P1  ⇒  (P2  ⇒  P3) because, if such an o exists, by definition a t must exist, and that t is Dsat, because if   =  , the SAT-solver module (which is known to be NP-complete) would run in deterministic polynomial time.

This argument is sufficient to show that P1  ⇒  (P2  ⇒  P3). All Kim must show now is that P2  ⇒  P3 results in a contradiction, thus showing [formula], and proving by modus tollens [formula]. But first, he argues (unnecessarily) that P2 is true. And in fact, he is actually arguing that [formula] is true. The following argument [\cite=Kim2014], while irrelevant, is shown for completeness.

Kim provides very little to explain precisely what this "merging process" of tables is. Below is a construction of what we assume his merging process to be. Consider transition tables δM and δM' for machines M and M' respectively: (For brevity, head movements and writes to the tape are omitted; only state transitions are shown.)

Using δM and δM', we can produce the non-deterministic particular transition table δM,M' that "describes," or that can "produce" both M and M', as generated by δM,M', for arbitrary input y:

Contradiction argument

Kim's proof by contradiction to prove [formula] is as follows. By way of contradiction, he assumes (P2  ⇒  P3) to be true, i.e., that "if o exists then there exists t, which is a Dsat particular transition table for both o and o" [\cite=Kim2014]. He then claims that, since the same transition table t can generate both o and o, which share the same input y, "it is concluded that both o and o are exactly the same computation, i.e., all the transitions of the configurations of o and those of o are exactly the same" [\cite=Kim2014].

Now, he lets i be the number of transitions between configurations in o, j the number of clauses of o, and k the number of transitions between configurations in o.

He argues that during the run of o on input y, all the clauses of o will have to be loaded on the tape of o, as well as the clauses of all other c's ∈Co,y, so i  >  j. And, since each transition of an accepting computation is described by more than one clause [\cite=Garey1979], we conclude j  >  k, and thus i  >  j  >  k.

However, Kim argues that a contradiction arises here. The previous conclusion that o and o are exactly the same computation would imply that i  =  k, which contradicts i  >  j  >  k. Thus, he claims [formula].

Critique

During our analysis of his argument, we identified several flaws in Kim's proof which we critique here in detail.

Invalidity of logical argument

Kim's argument centers around the definition of Dsat, as well as this fact: if   =   then the particular transition table that is implied by o's existence is Dsat. Kim then attempts to arrive at a contradiction by showing that such a particular transition table cannot exist. However, in his proof by contradiction, he does not use the fact that t is Dsat, so the assumption (that if there exists an o then there exists a t that is Dsat) is equivalent to (o exists) ⇒   (t exists). Note that, by definition, o exists if and only if t exists. Therefore, Kim cannot possibly prove that (o exists) ⇒   (t exists) is false. This fact provides evidence that his proof must be invalid, which we will presently show.

Ambiguities with accepting computations and particular transition tables

An error arises in Kim's final contradiction that P2 does not imply P3, namely that since o exists, a sat particular transition table of both o and o exists. Kim argues that the existence of this particular transition table implies that o and o are equivalent accepting computations.

Here, Kim's definition of an accepting computation is of crucial importance. Michael Sipser [\cite=Sipser2013] offers the following definition of an accepting computation history:

Although Sipser refers to an accepting computation history, we infer from Kim's own paper that this definition is equivalent to simply accepting computation: "...we know that a computation is a sequence of the transitions of configurations of a Turing Machine" (emphasis added) [\cite=Kim2014].

Note that Sipser's definition suggests, as would common intuition, that an accepting computation relies on the transition table of the given machine running it. However, Kim is vague in describing how particular transition tables and accepting computations relate. One could interpret it in one of two ways. Either,

An accepting computation is produced by a given Turing machine and its own transition table.

An accepting computation can be produced by a given particular transition table, not necessarily that of the original machine, that can describe each transition between configurations.

We believe that an error arises when Kim operates under the first interpretation for his claim that i  >  j  >  k, and the second for the i = k claim. To produce a consistent and coherent proof, the paper can only operate under one interpretation. In the following sections, we will address both interpretations independently and show that under either one, his contradiction is invalid.

First interpretation

By this interpretation, o and o are accepting computations from different Turing machines entirely, which behave in very different ways. o, on input y, concatenates its own y with each of the Boolean formulas in Cro, then runs a SAT-solver module on each [formula], counting the [formula]'s that are accepted. On the other hand, each [formula] is just an arbitrary accepting computation of some Turing machine [formula] on an input y. Under this interpretation, it is not obvious that any o is equivalent to any o. The argument that Kim gives as proof that some o is equivalent to some o is that one can create a particular transition table that is a transition table for both o and o. However, the "merging" technique that Kim uses to show that any t can be made from two transition tables can be shown to be invalid.

This technique produces a new transition table, which contains new states (as it must include the set of states from both machines) and possibly new alphabet characters. Thus, it cannot be said that the new particular transition table is the same transition function as either original machine, or even a "compatible" one, since it operates on a set of states that is different from the machine's original set of states, and would thereby be malformed.

Therefore, under this interpretation, Kim's argument that i  =  k follows from there existing some t which can produce o and o is invalid, since o and o are computations produced by transition tables necessarily different from their original machines, and thus i  >  j  >  k is correct, and there is no inconsistency.

Second interpretation

In the second interpretation, we will assume that accepting computations can be produced by the particular transition table [formula]. Then we may conclude that since [formula] is a particular transition table for o and o, then o and o are equivalent as accepting computations produced by a particular transition table for some input [formula]. Note that these accepting computations are not necessarily the same as the accepting computations produced by their respective Turing machines' transition tables. So, when Kim concludes that the number of transitions in o must be larger than the number of transitions in o as a contradiction, he is no longer comparing the same accepting computations, so that fact is not contradictory. Given the nature of o and o, i  >  j  >  k does not follow, because o and o are indeed the same computations produced by t, and analysis based on their original respective machines does not apply.

Comment on Kim's "commentary"

At the end of his paper, Kim verifies that his given proof could not also be used to prove that   =  . This verification is very brief and relies heavily on the assumption that the proof that his paper presents makes accurate assumptions and logical inferences. It is essentially a retelling of his argument with reversed assumptions and conclusions. Clearly, assuming that his original proof is correct, it can be used to refute the possibility of proving the opposite statement, but it does not tell us anything about the validity of the original proof.

Conclusion

From our interpretation of Kim's paper, the main problems stem from a severe lack of rigor, numerous misunderstandings, and occasional inconsistencies in his definitions. In his main argument, he derives a contradiction from the properties of a Turing machine and the Dsat property of a particular transition table. In our main argument, we point out that there is an inconsistency here that renders the main proposition of his supposed contradiction invalid in the two possible interpretations of his definition regarding accepting computation.

Acknowledgments

We thank Lane A. Hemaspaandra and Joe Izraelevitz for helpful comments on a preliminary draft of this critique. All claims, opinions, and errors in the present, substantially revised critique are the sole responsibility of the authors.