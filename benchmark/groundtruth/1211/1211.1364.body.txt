=1

Unveiling Hidden Communities Through Cascading Detection on Network Structures

Introduction

Over the course of the last decade, network science has attracted an ever growing interest since it provides important insights on a large class of interacting complex systems. One of the features that has drawn much attention is the structure of interactions highlighted by the network representation. Indeed, it has become increasingly clear that global structural patterns emerge in most real networks [\cite=Girvan2002]. One such pattern, where links and nodes are aggregated into larger groups, is called the community structure of a network.

While the exact definition of communities is still not agreed upon [\cite=Fortunato2010], the general consensus is that these groups should be denser than the rest of the network. The notion that communities form some sort of independent units (families, friend circles, coworkers, protein complexes, etc.) within the network is thus embedded in that broader definition. It follows that communities represent functional modules, and that understanding their layout as well as their organization on a global level is crucial to a fuller understanding of the system under scrutiny [\cite=hebert10_pre] [\cite=hebert11_prl].

By developing techniques to extract this organization, one assumes that communities are encoded in the way nodes are interconnected, and that their structure may be recovered from limited, incomplete topological information. Various algorithms and models have been proposed to tackle the problem, each featuring a different definition of the community structure while sharing the same general objective. Although these tools have been used with success in several different contexts [\cite=Fortunato2010] [\cite=ahn10_nature] [\cite=Palla2005], a number of shortcomings are still to be addressed.

In this report, we show how to improve existing algorithms independent of the procedure or the definitions they use. More precisely, we first show that present algorithms tend to overlook small communities found in the neighborhood of larger, denser ones. Then, we propose and develop a cascading approach to community detection that greatly enhance their performance.

Resolution limit due to shadowing

It is known that a resolution limit exists for a large class of community detection algorithms that rely on the optimization of a quality function (e.g., modularity [\cite=Girvan2002]) over non-overlapping partitions of the network [\cite=Fortunato2007]. Indeed, it appears that the size of the smallest detectable community is related to the size of the network. This leads to counterintuitive cases where clearly separated clusters of nodes are considered as one larger community because they are too small to be resolved by the detecting algorithm. A possible solution could be to conduct a second analysis on all detected communities in order to verify that no smaller modules can be identified.

However, the optimal partition of a network should include overlapping communities, as they capture the multiplicity of functions that a node might fulfill since nodes can then be shared between many communities. We argue that a different resolution limit, due to an effect that we refer to as shadowing, arises in detection algorithms that:

allow such overlapping communities;

rely on some global resolution parameter.

Shadowing typically occurs when large/dense communities act as screens hence preventing the detection of smaller/sparser adjacent communities. To illustrate this phenomenon, we study two families of detection algorithms based on two different paradigms of community structure, namely nodes and links communities.

Clique percolation algorithm

The clique percolation algorithm (CPA) [\cite=Palla2005] defines communities as maximal k-clique percolation chains, where a k-clique is a fully connected subgraphs of k nodes, and where a percolation chain is a group of cliques that can be reached from one adjacent k-clique to another [\cite=derenyi05_prl]. The complete community structure is obtained by detecting every maximal percolation chains for a given value of k.

It is noteworthy that the definition of a community in this context is consistent with the general description of communities outlined in Sec. [\ref=sec:intro]. Indeed, k-clique percolation chains are dense by definition, and a sparser neighboring region is required to stop a k-clique percolation chain, ensuring that communities are denser than their surroundings. We expect shadowing as both conditions listed in Sec. [\ref=sec:intro] are met:

since percolation chains--communities--consist of k-cliques sharing k - 1 nodes, overlapping communities occur whenever two cliques share less than k - 1 nodes;

the size of the cliques, k, acts as a global resolution parameter.

Let us explain this last point. In principle, low values of k lead to a more flexible detection of communities as a smaller clique size allows a wider range of configurations. However, low values of k often yield an excessively coarse-grained community structure of the network since percolation chains may grow almost unhindered and include a significant fraction of the nodes. In contrast, large values of k may leave most of the network uncharted as only large and dense clusters of nodes are then detected as communities. An optimal value corresponding to a compromise between these two extreme outcomes must therefore be chosen. As this value of k attempts to balance these two unwanted effects for the entire network as a whole, a shadowing effect is expected to arise causing the algorithm to overlook smaller communities, or to merge them with larger ones. See Fig. [\ref=Fig:CPA_shadowing] for an illustration of this effect. For the purpose of this study, we use the lowest value of k such that no extensive community is detected. As suggested in [\cite=Palla2005], the largest community is considered extensive if it contains about twice as many nodes as the second largest community. In networks with large unbreakable cliques (Internet and Protein networks), a lower ratio is used (0.25 and 0.31, respectively).

Link clustering algorithm

The link clustering algorithm (LCA) [\cite=ahn10_nature] aggregates links--and hence the nodes they connect--into communities based on the similarity of their respective neighborhood. Denoting eab the link between nodes a and b, the similarity of two adjacent links eik and ejk (attached to a same node k called the keystone) is quantified through a Jaccard index

[formula]

where n+(q) is the set of node q and its neighbors, and |n+(q)| is the cardinality of the set. Figure [\ref=Fig:Similarity_Ahn] illustrates the calculation of [formula]. Once the similarity has been calculated for all adjacent pair of links, communities are built by iteratively aggregating adjacent links whose similarity exceeds a given threshold Sc. We refer to links that are left after this process (i.e., communities consisting of one single link) as unassigned.

Again, a shadowing effect is expected, as the two aforementioned conditions are fulfilled:

because communities are built by aggregating links, this algorithm naturally allows communities to overlap (to share nodes) since a node can belong to as many communities as its degree (number of links it is attached to) can allow;

the similarity threshold Sc acts as a global resolution parameter as it dictates whether two links belong to the same community or not.

To elucidate the global aspect of Sc, we describe how its value is chosen (as proposed in [\cite=ahn10_nature]). Let us first define the density ρj of community j as

[formula]

where dj and nj are the number of links and nodes in community j, respectively. Considering that a community of n nodes must at least include n - 1 links, ρj computes the fraction of potential "excess links" that are present in the community. The similarity threshold Sc is then chosen such that it maximizes the overall density of the communities

[formula]

where C(Sc) is the set of communities detected for a given Sc, D is the total number of links assigned to communities of more than one link (i.e., dj > 1). Note that ρ(Sc) is typically a well-behaved function of Sc and normally displays a single maximal plateau [\cite=ahn10_nature]. The value of Sc corresponding to this plateau is then selected as it leads, on average, to the denser set of communities, hence its global nature.

Following an analysis similar to Sec. [\ref=sec:CFinder], we expect small communities to be left undetected as they are eclipsed by larger and denser ones. This is mainly due to the use of a resolution parameter (Sc) that cannot be adjusted locally. For instance, links in a small community could exhibit vanishing similarities because some of the associated nodes are hubs (nodes of high degree). This is especially true in the vicinity of large and dense clusters whose nodes are typically of high degree (see Fig. [\ref=Fig:Ahn_shadowing] for an illustration).

Cascading detection

Figures [\ref=Fig:CPA_shadowing] and [\ref=Fig:Ahn_shadowing] suggest that the inability to detect small or sparse communities in the vicinity of larger or denser ones--the shadowing effect--could be circumvented by removing these structures from the networks. We formalize this idea and propose a cascading approach to community detection that proceeds as follows:

identify large or dense communities--by tuning the resolution parameter accordingly--using a given community detection algorithm;

remove the internal links of the communities identified in step 1;

repeat until no new significant communities are found.

The first iteration of this algorithm detects the communities that are normally targeted by detection algorithms, thus ensuring that the cascading approach retains the main features of the "canonical" community structure. After removal of links involved in the detected communities, a new iteration of the detection algorithm is then performed on a sparser network in which previously hidden communities are now apparent. This process is repeated until a final and more thorough partition of the network into overlapping communities is eventually obtained.

For example, in the case of the CPA, a high value of k (which leads to the traditional community structure) is selected for the first iteration of the algorithm. The network then becomes significantly sparser since all cliques of size k' > k are destroyed by the removal of internal links in step 2. Subsequent iterations of the detection algorithm can thus be conducted at lower k, unveiling finer structures, as the pathways formed by dense cluster are no longer available. The process naturally comes to a halt at k = 3, since k = 2 only detects the disjoint components of the network. In the case of the LCA, the detection is stopped before the partition density reaches zero, for [formula] only detects chains of links (the keystone ensures a non-vanishing similarity), which in general are not classified as significant communities.

It is worth mentioning that conducting this repeated analysis does not increase the computational cost significantly, since the cascading algorithm scales exactly like the community detection algorithm used at each iteration, and since the number of iterations that can be carried is small (typically less than 10). Moreover, the size of the networks (number of links and nodes) effectively decreases after each iteration, further reducing the cost.

Results and discussions

To investigate the efficiency and the behavior of the cascading detection, we have applied our approach to 10 network datasets: arXiv cond-mat circa 2004 (arXiv) [\cite=Palla2005], Brightkite online (Brightkite) [\cite=Cho11], university Rovira i Virgili email exchanges (Email) [\cite=guimera03_pre], Gnutella peer-to-peer data (Gnutella) [\cite=Ripeanu02], internet autonomous systems (Internet) [\cite=hebert11_prl], MathSciNet co-authorship (Mathsci) [\cite=palla08_njp], Pretty-Good-Privacy data exchange (PGP) [\cite=boguna04_pre], Western States Power Grid (Power) [\cite=watts98_nature], Protein-protein interactions (Protein) [\cite=Palla2005] and word associations (Words) [\cite=Palla2005].

First and foremost, our results show that cascading detection always improves the thoroughness of the community structure detection. Indeed, Fig. [\ref=Fig:Cascading_Detection] shows that while a traditional use of the algorithms yields partitions with high fractions of unassigned links, the cascading approach leads to community structures where this fraction is significantly reduced. More precisely, the percentage of remaining assignable links drops from 54.1% to 26.3% on average in the case of CPA, and from 41.0% to 5.3% in the case of LCA. Note how cascading detection is more efficient when applied to the LCA. This is due to the fact that the effective network gets increasingly sparser with each iteration, and that link clustering works equally well on sparse and dense networks, whereas clique percolation requires a high level of clustering to yield any results. Links that are not part of any triangles cannot be assigned to a community by the CPA since they cannot take part in any k-clique, whereas the LCA can potentially assign every link to a community, since isolated links were removed from the datasets.

Figure [\ref=Fig:Size_distribution] confirms that as the cascading detection proceeds, smaller--and previously masked--communities are detected, regardless of the algorithm used. For instance, Fig. [\ref=Fig:Size_distribution_WA_CP] clearly shows how a significant number of 3-cliques are overlooked by "traditional" use of the CPA. However, large communities are also found after many iterations, suggesting that the shadowing effect is not restricted to small communities.

Visual inspection of the detected communities not only verifies the quality of the hidden communities, but also confirms our intuition of the shadowing effect. For instance, Fig. [\ref=Fig:WordAssAhn1] shows a triangle detected at the third iteration (out of five) of the LCA on the Words network. This structure was most likely missed during the initial detection due to the high degree of its three nodes, as speculated in Fig. [\ref=Fig:Ahn_shadowing]. Similarly, although k = 4 was initially chosen (according to the criterion discussed in Sec. [\ref=sec:CFinder]) for the CPA on the Words network, a second iteration using k = 3 has permitted the detection of other significant communities such as the one shown in Fig. [\ref=Fig:WordAssCFinder].

More complex structures and correlations are also brought to light using this approach. Figure [\ref=Fig:WordAssAhn2] presents a star of high-degree nodes detected at the third iteration of the LCA on the word association network. None of these nodes are directly connected to each other, but they share many neighbors. Hence, once the main communities were removed--here semantic fields related to toys, theatre and music--the shadow was lifted such that this correlated, but unconnected structure could be detected. Whether this particular structure should be defined as a relevant community is up for debate. Keeping in mind that there are no consensus on the definition of a proper community in complex networks, the role of algorithms, and consequently of the cascading method, is to infer plausible significant structures.

Internal link removal is destructive in the sense that information about shadowed communities is lost in the process, as some of the internal links are shared by more than one community [\cite=ahn10_nature]. Leaving these links untouched would certainly enhance the quality of the detected communities while further reducing the uncharted portion of the network. Nevertheless, without using refined algorithm and by only resorting to our simple idea, we obtain surprisingly good results. This suggest that shadowing is not necessarily due to the density of the prominent communities but rather to the stiffness of the resolution parameter. Indeed, by using a cascading approach, we allow this parameter to vary artificially from a region of the network to the other, as the algorithm is effectively applied to a new network - partially retaining the structure of the original network - at each iteration. A once rigid global parameter can now flexibly adapt to small changes in the topology of the network to better reveal subtle structures.

Conclusion and perspective

In conclusion, we have managed to significantly reduce the uncharted portion of a network by assigning an important fraction of seemingly random links to relevant communities. This significant improvement in community detection will help shrink the gap between analytical models and their real network counterparts. The difficult problem of accurately modeling the dynamical properties of real networks might be better tackled if one includes complex community structure through comprehensive distributions or solved motifs [\cite=allard12b] [\cite=karrer10_pre], two applications for which a reliable and complete partition is fundamental.

Moreover, this work opens the way to more subtle cascading approach, as envisioned at the end of the previous section. For instance, we could build an extreme version of the algorithm where communities are detected one by one. Such an approach would enable a perfect adaptation of the resolution parameter to the situation at hand. And while it would certainly come to significant computational cost, it could lead to the mapping of the community detection problem unto simpler problems. If we accept to detect communities one at a time, the detection of the most significant ones can be done through well optimized methods, such as modularity optimization [\cite=newman06_pnas], which would otherwise be incapable of detecting overlapping communities. Finally, perhaps the most significant observation that emerges from our work could be simply stated: since community structure occurs at all scales, global partitioning of overlapping communities must be done sequentially, cascading through the organizational layers of the network.

Appendix A: Summary of the cascading detection results

Acknowledgments

The authors wish to thank the Gephi [\cite=gephi] development team for their visualization tool; Yong-Yeol Ahn et al. for the link community algorithm; Gergely Palla et al. for the clique percolation algorithm; all the authors of the cited papers for providing the network data; and Calcul Québec for computing facilities. This research was funded by CIHR, NSERC and FRQ–NT.