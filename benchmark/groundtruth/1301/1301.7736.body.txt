Higher order geometric integrators for a class of Hamiltonian systems

HIGHER ORDER GEOMETRIC INTEGRATORS FOR A CLASS OF HAMILTONIAN SYSTEMS

Introduction

Numerical methods for integrating dynamical systems forward in time will usually introduce errors, sometimes leading to results which are even qualitatively wrong. However, there exists a class of methods, geometric integrators, which aims at preservation of the basic geometric properties of the system. A broad discussion of such methods can be found in the book by Hairer et. al. [\cite=HLWG]. For many dynamical systems the relevant geometry is the symplectic structure of phase space. For a phase space of dimension 2N this structure can f.i. be defined by the Poisson bracket

[formula]

or the differential two-form,

[formula]

Another class of geometric constraints are those imposed by conservation laws due to continuous (Nöther) symmetries. An interesting field of applications for geometric integrators are (classical limits of) minisuperspace models of cosmology; for a good introduction see the review by Capozziello et. al. [\cite=CapozzielloDeLaurentisOdintsov]. Some of us are in the process of analysing questions from this field by use of the algorithms described in this paper.

The Hamilton equations of motion constitute a system of ordinary first order differential equations,

[formula]

where the overdot [formula] denotes differentiation with respect to time t, and [formula]. They can be viewed as the characteristic equations of the partial differential equation

[formula]

with LH the first order differential operator,

[formula]

generating a flow on phase space. If H does not depend explicitly on t, a formal solution of ([\ref=HamiltonianFlow]) is

[formula]

In most cases this expression remains just formal, but one may often split the Hamiltonian into two parts, H  =  HA  +  HB, corresponding to a splitting LH  =  LA  +  LB, such that the flows generated by LA and LB are separately integrable. One may then use the Cambell-Baker-Hausdorff formula to approximate the flow generated by LH. By doing this in a symmetric way one obtains the Strang [\cite=Strang] splitting formula,

[formula]

which shows that time stepping this expression with a timestep τ provides an approximation with relative accuracy of order τ2, exactly preserving the symplectic property of the flow.

The left hand side of equation [\eqref=CambellBakerHousdorff] corresponds to the symplectic splitting scheme of solving

and iterating. Here the last part of one iteration may be combined with the first part of the next, unless one wants to register the state of the system at intermediate times.

A rather common situation is that [formula], where one may choose the splitting HA  =  T and HB  =  V (or HA  =  V and HB  =  T). In quantum mechanics such a splitting scheme is usually associated with the Trotter product formula,

[formula]

but there more often used to motivate the path integral formulation than as a numerical approximation method. For a more common language we refer to steps [\eqref=FirstKick] and [\eqref=SecondKick] as kicks, since they (when HB  =  V) change momentum but not position, and step [\eqref=Move] as a move, since it change position but not momentum.

The integration scheme defined by the equations [\eqref=SymplecticSplitting], although symplectic, does not quite reproduce the flow generated by H, but instead one generated by

[formula]

for some Hamiltonian H2 (computed in section [\ref=nonLinearSystems]). For this reason the motion will not be exactly confined to the constant energy surface SH(E) of H, but to the constant energy surface SH'(E') of H', which for small enough τ2 (and regular Hamiltonians) will lie close to SH(E). Hence, the energy error of the generated solution will stay bounded regardless of how long we integrate the equations, being geometrically constrained by the maximal distance between SH(E) and SH'(E'). In addition to symplecticity, this constraint is another reason why the scheme defined by [\eqref=SymplecticSplitting] is qualitatively robust.

Nevertheless, the generated and exact solutions may still drift apart with time, since two points on (essentially) the same solution surface may still be quite far apart. Hence, there are good reasons to search for more accurate schemes which maintain the attractive geometric properties of equation [\eqref=SymplecticSplitting]. Our approach is to stick to the three-step algorithm of [\eqref=SymplecticSplitting], but with modified expressions for the Hamiltonians HA and HB. For instance, finding the error term of equation [\eqref=StormerVerletHamiltonian] to be H2  =  T2  +  V2, we can eliminate the order-τ2 error by using an effective kinetic energy [formula], and an effective potential energy [formula] in the splitting scheme.

There have been several approaches to construct integration schemes which are of higher order in τ, while maintaining exact symplecticity of the evolution. Accessible reviews of such approaches have f.i. been given by Yoshida [\cite=YoshidaReview], McLachan et. al. [\cite=RIM], and Blanes et.al. [\cite=BlanesCasasMurua]. Neri [\cite=Neri] has provided the general idea to construct symplectic integrators for Hamiltonian systems. Forest and Ruth  [\cite=FR] discussed an explicit fourth order method for the integration of Hamiltonian equations for the simplest non-trivial case. Suzuki [\cite=Suzuki] presented the idea of how recursive construction of successive approximants may be extended to other methods.

Many of the higher order symplectic splitting methods involve an extension of equation ([\ref=CambellBakerHousdorff]) to an expression of the form

[formula]

as discussed by Yoshida [\cite=Yoshida]. It was noted that if one uses a symmetric integrator, such that for some generator [formula], then Hence, by choosing one increases the order of the scheme by two or more. However, equations ([\ref=ImprovementConditions]) have real solutions only if either x0 or x1 is negative. In fact, it has been proven (cf. Sheng [\cite=Sheng], Suzuki [\cite=SuzukiJMP], Goldman and Kaper [\cite=GoldmanKaper], Blanes and Casas [\cite=BlanesCasas]) that all schemes of the form ([\ref=GeneralIteratedComposition]) require at least one ci < 0, and at least one di < 0. For equations invariant under time reversal, which is often the case for Hamiltonian systems, this may not be a big obstacle (although it may seem like an inefficient way of integrating equations forward in time).

Worse, if one wants to use the same code to solve parabolic equations negative timesteps may have a disastrous effect on numerical stability due to exponentially growing errors. Castella et. al. [\cite=CastillaChartierDescombesVilmart] have proposed to use complex solutions of equations ([\ref=AddToOne], [\ref=AddToZero]). It is possible to find solutions where all timesteps have a positive real part. This can stabilize the scheme, but at the cost of working with complex quantities.

In this paper we investigate a different approach, based on our [\cite=AsifAnneKare] observation that the operators LA, LB of each step of a splitting scheme don't need to be exactly the same as those in the sum LH  =  LA  +  LB. Instead, our approach is to construct τ-dependent operators LA, LB such that

[formula]

For Hamiltonians of the form,

[formula]

with M a symmetric positive definite matrix (the inverse mass matrix), we have constructed an explicit series expansion

[formula]

up to N = 8. This can be used in schemes with global error of order τN, for [formula]. We denote the order of these schemes by N. Since the operators X (with [formula]) generate flows [formula] which are modifications of those generated by LX, we refer to such flows as modified integrators. Chartier et. al. [\cite=ChartierHairerVilmart] have labeled such schemes as modified differential equations. The N'th order scheme is constructed to generate the same flow as

[formula]

after each complete timestep. I.e., we use modified integrators to generate the unmodified flow better. Note that knowledge of the Hamiltonians corresponding to the operators (N / 2)X also provide an explicit estimate of the leading error of the scheme.

One possible restriction on the class of available splitting schemes is the requirement that both of the flows [formula] and [formula] must be explicitly integrable. We have relaxed this requirement by demanding both flows to be efficiently computable: I.e., it must be possible to integrate each short timestep numerically sufficiently fast, while preserving the symplectic structure to sufficient numerical precision. This question arises for our method because [formula] in general will depend on both [formula] and [formula]. This means that the step defined by equation [\eqref=Move] will in general not be explicitly integrable. Instead, to integrate such steps we construct a generating function G for a transformation

[formula]

which solves equation [\eqref=Move] to the required accuracy in τ, and is exactly symplectic. The change in momentum [formula] (of order τ3 -- i.e. a gentle push) is then defined through an implicit equation, while the change in position [formula] continues to be explicit.

The rest of this paper is organized as follows: In section [\ref=linearSystems] we demonstrate the basic idea of the proposed methods on linear systems. Next we develop the general theory, valid for separable Hamiltonians ([\ref=SeparableHamiltonian]), in section [\ref=nonLinearSystems]. Here we construct the operators X (for X = A,B) explicitly. Or more precisely, we calculate the contributions T2k to the corresponding [formula], and the contributions V2k to the corresponding [formula], cf. equation [\eqref=ModifiedHamiltonians]. We focus our discussion on the numerical implementations in section [\ref=numericalResults], together with test-case investigations of how the methods work in practice. We have tested these methods on anharmonic oscillators and Fermi-Pasta-Ulam-Tsingou type problems (named as suggested by Dauxois [\cite=Dauxois]). We conclude the paper with some brief remarks in section [\ref=concludingRemarks].

Linear Systems

Single Harmonic Oscillator

For a simple illustration of our idea consider the Hamiltonian

[formula]

whose exact evolution over a time interval τ is

[formula]

Compare this with the process of first evolving the system with the (kick) Hamiltonian [formula] for a time [formula], followed by an evolution with the (move) Hamiltonian [formula] for a time τ, and ending with an evolution with HB for a time [formula]. One such combination (one complete timestep) gives

[formula]

We note that by choosing the exact evolution is reproduced, provided 0  <  τ  <  π. If we interchange the rôles of HA and HB one combination instead gives

[formula]

which becomes exact if we choose

[formula]

again provided the timestep is restricted to the interval 0  <  τ  <  π.

Higher-dimensional linear systems

It should be clear that this idea works for systems of harmonic oscillators in general, i.e. for quadratic Hamiltonians of the form

[formula]

where M and K are symmetric matrices. For a choosen splitting scheme and step interval τ there are always modified matrices, generating a kick-move-kick flow which reproduces the exact one up to corrections of order τ8. It should be obvious how this can be extended to arbitrary order in τ2, with coefficients taken from the expansions in equation ([\ref=HarmonicOscillatorCorrection]). In principle this can be used to reproduce the exact flow, provided τ is not too large. I.e., [formula], where [formula] is the largest angular frequency of the system.

General potentials

For a more general treatment we consider Hamiltonians of the form

[formula]

A series solution of the Hamilton equations in powers of τ is Here we have introduced notation to compactify expressions,

[formula]

where we employ the Einstein summation convention: An index which occur twice, once in lower position and once in upper position, are implicitly summed over all its available values. I.e.,

[formula]

We will generally use the matrix M to rise an index from lower to upper position.

If we instead use a splitting method to generate the flow, with generators [formula] and [formula] (i.e., a kick-move-kick scheme), we obtain As expected the result differs from the exact result in the third order. However, the difference can be corrected by modifiying the generators, HA  →  T  +  τ2  T2 and HB  →  V  +  τ2  V2, with

[formula]

Specialized to a one-dimensional system with potential [formula] this agrees with equation ([\ref=HarmonicOscillatorCorrection]). With this correction the kick-move-kick splitting scheme agrees with the exact solution to fourth order in τ, but differ in the τ5-terms. We may again correct the difference by introducing fourth order generators, HA  →  T  +  τ2  T2  +  τ4  T4 and HB  →  V  +  τ2  V2  +  τ4  V4, with

[formula]

Specialized to a one-dimensional system with potential [formula] this agrees with equation ([\ref=HarmonicOscillatorCorrection]). With this correction the kick-move-kick splitting scheme agrees with the exact solution to sixth order in τ, but differ in the τ7-terms. We finally correct this difference by introducing sixth order generators, HA  →  T  +  τ2  T2  +  τ4  T4  +  τ6  T6 and HB  →  V  +  τ2  V2  +  τ4  V4  +  τ6  V6, with where we have introduced

[formula]

Specialized to a one-dimensional system with potential [formula] this agrees with equation ([\ref=HarmonicOscillatorCorrection]). With this correction the kick-move-kick splitting scheme agrees with the exact solution to eight order in τ, but differ in the τ9-terms. The process may be continued to higher orders in τ,

[formula]

To keep track of the algebraic expressions which occured during the calculations above, we have represented them graphically in terms of bi-colored tree-diagrams. I.e., these calculations are related to "rooted-tree-type" theories. Our tree-diagrams describing T2k and V2k, and the generating functions Gk below, are unrooted (the derivatives of these scalar functions can be represented by rooted trees). It is fairly straightforward to find the general structure of the order τN correction terms, but more laborious to compute the rational coefficients multiplying each term. They are simplest found by considering enough special cases for a unique determination. After the explicit expressions ([\ref=SecondOrderCorrections], [\ref=FourthOrderCorrections]) were found we verified them manually for a general Hamiltonian ([\ref=GeneralHamiltonian]) using graphical calculations. The explicit expressions ([\ref=SixthOrderCorrections]) has been checked against a general Hamiltonian ([\ref=GeneralHamiltonian]) acting on a four-dimensional phase space (i.e., with two-dimensional [formula] and [formula]) by use of a computer algebra program.

Solving the move steps

Addition of extra potential terms [formula], is in principle unproblematic for solution of the kick steps. The equations,

[formula]

can still be integrated exactly, preserving the symplectic structure. The situation is different for the kinectic term [formula], since it now leads to equations

[formula]

which are no longer straightforward to integrate exactly. Although the problematic terms are small one should make sure that the move steps preserve the symplectic structure. Let [formula] denote the positions and momenta just before the move step, and [formula] the positions and momenta just after. The relation between [formula] and [formula] can be expressed in terms of a generating function (cf. Goldstein [\cite=Goldstein], Arnold [\cite=Arnold]),

[formula]

such that the transformation

[formula]

preserves the symplectic structure exactly. However, note that the relation between [formula] and [formula] in general is a nonlinear equation of the form

[formula]

where the second term on the right is of order τ3 or higher. We solve this equation by iteration. With [formula],

[formula]

Writing [formula], with [formula] the exact solution, we find to first order in [formula] that

[formula]

Let λ  ~  τ3 be the eigenvalue of [formula] with largest magnitude. Then the iteration converges exponentially fast towards the exact solution, with [formula] decaying like λn  ~  τ3n. Since it is most to gain by a higher order method when the timestep τ is small, we assume λ to be small in all cases of practical relevance. Our experience is that the iteration scheme is robust, with 3-4 iterations been sufficient for computations to double precision accuracy. It is important that [\eqref=PushStep] is solved to sufficient accuracy; otherwise the evolution fails to be (sufficiently) symplectic.

Some of our theoretical results have already been given in the literature. The generating function formalism has been used earlier by Feng [\cite=Feng] and Feng et.al  [\cite=FengWuQinWang] to construct canonical difference schemes (see also Channell and Scovel [\cite=ChannelScovel], Stuchi [\cite=Stuchi]). They give the result ([\ref=SecondOrderCorrections]), but the actual solution of the resulting implicit equations are not discussed. One can construct a generating function for the full symplectic evolution over a timestep τ, without combination with a splitting method. However, in that case the resulting nonlinear equations would be more time consuming and/or difficult to solve by direct iteration.

We now explicitly construct G so that the move step is reproduced to sufficient accuracy. Consider first the case when HA  =  T. The choice [formula] gives

[formula]

which is the correct relation. Now add the τ2  T2-term to the move step. The exact solution of equation ([\ref=MoveSteps]) becomes Compare this with the result of changing

[formula]

where [formula]. The solution of equation ([\ref=CanonicalTransformation]) change from the relations ([\ref=SimpleKick]) to Since D is linear in [formula], equation ([\ref=Pequation]) constitute a system of third order algebraic equations which in general must be solved numerically. This should usually be a fast process for small τ. An exact solution of this equation is required to preserve the symplectic structure, but this solution should also agree with the exact solution of ([\ref=MoveSteps]) to order τ4. This may be verified by perturbation expansion in τ. A perturbative solution of equation ([\ref=Pequation]) is which inserted into ([\ref=Qequation]) reproduces the full solution ([\ref=ExactMove]) to order τ4.

This process can be systematically continued to higher orders. We write the transformation function as

[formula]

and find the first terms in the expansion to be

[formula]

Also in these calculations we represent the algebraic expressions by bi-colored tree diagrams, to better visualise and understand their structure. The possible graphical structures for Gn is fairly simple to write down. But it is quite laborious to find the rational coefficients multiplying each graph. They are simplest found by considering enough special cases for a unique determination. After that we have verified the expressions up to G6 manually using graphical calculations, and G7, G8 against a general Hamiltonian ([\ref=GeneralHamiltonian]) acting on a four-dimensional phase space (i.e., with two-dimensional [formula] and [formula]) by use of a computer algebra program.

Numerical results on nonlinear systems

One-dimensional anharmonic oscillator

It remains to demonstrate that our algorithms can be applied to real examples. We have considered the Hamiltonian

[formula]

with initial condition q(0) = 0, p(0) = 1. The exact motion is a nonlinear oscillation with H constant equal to [formula], and period

[formula]

Here [formula] is the beta function. In Fig. [\ref=energyPreservation] we plot the behaviour of [formula] during the last half of the [formula] oscillation, for various values of τ and corrected generators up to order τ6 (corresponding to n = 6).

Fermi-Pasta-Ulam-Tsingou type problems

We also want to demonstrate that our algorithms can be applied to systems with many degrees of freedom, like lattice models with short range interactions. Here we will consider a one-dimensional closed chain of d particles, as illustrated in Fig. [\ref=chain], interacting with its nearest neighbours through a potential U, and possibly with a local substrate through a potential V. The latter will confine the [formula] particle to the vicinity of a position Rn  =  nL / d, where L is the circumference of the chain.

This class of models include the Fermi-Pasta-Ulam-Tsingou (FPU) problem introduced in 1953 by Fermi et. al. [\cite=FermiPastaUlam] for investigating equipartition of energy among the degrees of freedom in the system. Much research in different fields of mathematics and physics have been devoted towards understanding the highly unexpected dynamical behavior of this system. A review of the last 50 years of comprehensive study has been given by Berman and Izrailev [\cite=BermanIzrailev].

In a recent paper Hairer and Lubich [\cite=HairerLubich] presented an investigation of the FPU problem using a modulated Fourier expansions on chains with a large number of particles, and in [\cite=McLachlanNeale] McLachlan and Neal have made a comparison of various integrators applied to the FPU problem. A good analysis, using the Baker-Cambell-Hausdorff formula, of the Störmer-Verlet method applied this problem has been given by Benettin and Ponno [\cite=BenettinPonno]. Application of numerical methods to this problem is also discussed by Palearis and Penati [\cite=PalearisPenati].

Here we will demonstrate that our integrators can be implemented and applied in practise to these type of models. There is of course a computational cost per timestep by going to a higher order method, but asymptotically that cost grows linearely with the size of the system, provided interactions are of short range. There is also a cost in complexity of code implementation, which we have solved by writing a program for automatic generation of the numerical code [\cite=AsifAnneKareIII].

Let qm(t)  =  rm(t)  -  Rm, where rm(t) the position of the [formula] particle, and consider the system described by the Hamiltonian

[formula]

where d is the number of particles, and sm  =  qm + 1 - qm. A class of model which includes both the linear chain and the FPU model can be obtained by choosing

[formula]

where U is describing the interactions between particles. This model has been referred to as the FPU α  +  β model (with ω2 = 0). In this example we have used α = 0 and β  =  1. We have tested the methods with respect to (i) energy conservation, (ii) deviation of the generated solution from the exact solution, and (iii) efficiency of the methods with respect to CPU time.

In Fig. [\ref=energyError] we show the scaled energy error on FPU for different choices of τ with all four methods. For these experiments we consider 9 particles with initial energy E(0) = 1.425. As can be seen the energy conserved very well for all methods, with the error scaling like τN for a method of order N. As demonstrated by the long time behaviour in Fig. [\ref=LongtimeenergyError] the energy error does not increase noticably with time.

Another quantity of interest in a system with many degrees of freedom is the global error, i.e. a measure how much the numerical solution deviates from the exact solution. Here an exact solution is not available. Instead we have generated a very accurate solution by use of our eight order method with timestep τ = 5  ·  10- 4, calculated with multiprecision (50 decimal digits) floating point accuracy. This is for practical purposes as good as an exact result, and we will refer to it as such.

We have investigated several measures of deviation; they all give qualitatively the same results. Here we will only discuss the quantity

[formula]

where [formula] ([formula]) denote the positions (momenta) of the numerical solution at a timestep n such that nτ  =  t, and [formula] ([formula]) denote the positions (momenta) of the exact solution at time t. As shown in Fig. [\ref=globalError] the global error behaves roughly like

[formula]

for relatively short times t. Here C is a constant which depends on the order N of the method and the initial conditions. This is in agreement with exact behaviour of integrable systems, cf. Theorem 3.1 in the book [\cite=HLWG] by Hairer et. al.

To check the efficiency of our methods in practical use, we have also measured CPU time used to integrate systems with different number d of particles, with d ranging from 9 to 50  000. All runs have been done on the same system, a workstation equipped with two six-core Opteron 2431 processors, but using code written in NumPy. Hence, the code is not parallellized and run on a single core. Some results, run with timestep τ  =  1 / 12 for all methods, is shown in Fig. [\ref=CPUtime]. Under these conditions we find that the CPU time increases by a factor of about 10 for each step in order. From the left frame of Fig. [\ref=globalError] we see that this step also increases the accuracy with a factor of about 10- 1  τ2 (for d = 9 particles). If we want a prescribed accuracy 10- P for the global error ε(t) at time t we may choose to use lower order method with a small timestep (which requires many steps n), or a higher order method with fewer, but more time-consuming steps. Which choice is best? For the parameters displayed in Fig. [\ref=globalError] we estimate the condition

[formula]

I.e., we must choose a timestep such that

[formula]

which requires

[formula]

steps, where each steps requires a CPU time [formula] for some constant t0 which depends on the computer being used. Hence, we should choose N to minimize

[formula]

Treating N as a continuous varible gives the optimal value

[formula]

Concluding remarks

In this paper we have shown that it is possible to systematically extend the standard Störmer-Verlet symplectic integration scheme to higher orders of accuracy, and that the higher order schemes can be applied in practise to physical systems of interest, including FPU-type lattice problems with many particles (with nearest-neighbour interactions). As illustrated by equation ([\ref=OptimalOrder]), it is advantageous to use a higher order method when one wants a solution of high precision P, and also if one wants a solution of moderate accuracy but over a long time interval.

As demonstrated, the theoretical algorithms have been implemented and tested. One rapidly discovers that it is a nightmare to do a correct implementation by hand. The general compact form of these schemes usully expand to very long expressions, which are laborious and error-prone to handle manually. We have therefore developed a set of computer routines which automatically generate the basic numerical integrators for a complete timestep of each specific model.

For the cases we have investigated these integrators perform according to expectations, sometimes even better than expected.

Acknowledgements

We thank professor Ernst Hairer for encouraging remarks and helpful pointers to the literature.