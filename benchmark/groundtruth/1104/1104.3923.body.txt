Lemma Claim Proposition Corollary Fact Example Notation Observation Conjecture

Definition

Remark

An improved approximation algorithm for the minimum cost subset k-connected subgraph problem

Introduction

We present an improved approximation algorithm for the minimum cost subset k-connected subgraph problem. In this problem (subset k-connectivity, for short), we are given a graph G = (V,E) with edge costs and a set of terminals T  ⊆  V. The goal is to find a minimum cost subgraph such that each pair of terminals is connected by k openly (vertex) disjoint paths. This is a fundamental problem in network design which includes as special cases the minimum cost Steiner tree problem (the case k = 1) and the minimum cost k vertex-connected spanning subgraph problem (the case T = V). However, the subset k-connectivity problem is significantly harder than these two special cases. Specifically, an important result of Kortsarz, Krauthgamer and Lee [\cite=KKL04] shows that the problem does not admit an approximation guarantee better than 2log 1 - εn for any ε > 0 unless [formula]. In contrast, polylogarithmic approximation guarantees are known for the minimum cost k-vertex connected spanning subgraph problem. The first such result was obtained by Fakcharoenphol and Laekhanukit [\cite=FL08] using the Halo-set decomposition, introduced by Kortsarz and Nutov [\cite=KN05]. Subsequently, Nutov [\cite=Nutov09a] improved the approximation guarantee to [formula].

Since the hardness result of Kortsarz et at. [\cite=KKL04] no non-trivial approximation algorithm was known for the general case of the subset-k-connectivity problem until the work of Chakraborty, Chuzhoy and Khanna [\cite=CCK08]. They presented an O(kO(k2)  ·   log 4|T|)-approximation algorithm for the rooted version of our problem, namely the rooted subset k-connectivity problem. There, given a root vertex r and a set of terminals T, the goal is to find a minimum cost subgraph that has k openly disjoint paths from the root vertex r to every terminal in T. Chakraborty et al. showed how to solve the subset k-connectivity problem by applying the rooted subset k-connectivity algorithm k times, thus obtaining an O(kO(k2)  ·   log 4|T|)-approximation algorithm. Recently, in a series of developments [\cite=CCK08] [\cite=CK08] [\cite=CK09] [\cite=Nutov12] [\cite=Nutov09c], the approximation guarantees for the rooted subset k-connectivity problem has been steadily improved. This has culminated in an O(k log k) guarantee due to Nutov [\cite=Nutov12], thus implying an approximation guarantee of O(k2 log k) for the subset k-connectivity problem.

There is a trivial way to obtain an approximation bound of O(|T|2). So, with the current progress on the rooted subset k-connectivity problem, the application of the rooted subroutine is only useful when the number of terminals is large enough, say |T|  ≥  2k. The main contribution of this paper is to show that, in this case, only a polylogarithmic number of applications of the rooted subset k-connectivity algorithm are required to solve the subset k-connectivity problem. Given an approximation algorithm for the rooted subset k-connectivity problem, we show that only O( log 2k) applications of the algorithm are required, and we can save a factor of O( log k) since some of these applications are applied to instances with lower costs. Moreover, as the number of terminal increases above k2, we are able to save an additional O( log k) factor. Thus, given an approximation algorithm for the rooted subset k-connectivity problem in [\cite=Nutov12] due to Nutov (and with careful analysis), we achieve an α(|T|)-approximation guarantee where

[formula]

As we may combine our algorithm with the trivial O(|T|2)-approximation algorithm for the case |T| < 2k, we obtain an approximation guarantee of O(k2), which improves upon the previous best approximation guarantee of O(k2 log k) for all cases. Moreover, for |T|  ≥  2k, we obtain a significant improvement of a factor of k. Observe, however, that for the case |T|  ≈  k the guarantee is still quadratic. At first, this may seem paradoxical since we may hope that the problem is easier when the number of terminals is small. Our results suggest that this is not the case. Indeed, it appears that the hardest instances of subset k-connectivity may have at most k terminals. Precisely, we show that, given an α(k)-approximation algorithm for the subset k-connectivity problem with |T| = k, there is an (α(k) + f(k))-approximation algorithm for any instance with |T| > k, where f(k) is the best known approximation guarantee for the rooted subset k-connectivity problem. Furthermore, we give an approximation preserving reduction from the rooted subset k-connectivity problem to the subset k-connectivity problem, showing a strong connection between the two problems.

Related Work. Some very special cases of the subset k-connectivity problem are known to have constant factor approximation algorithms. For k = 1, the minimum cost Steiner tree problem, the best known approximation guarantee is 1.39 due to Byrka, Grandoni, Rothvoß and Sanità [\cite=BGRS10]. For k = 2, a factor two approximation algorithm was given by Fleischer, Jain and Williamson [\cite=FJW06]. The subset k-connectivity problem also has an O(1)-approximation algorithm when edge costs satisfy the triangle inequality; see Cheriyan and Vetta [\cite=CV07]. The most general problem in this area is the vertex-connectivity survivable network design problem (VC-SNDP). In VC-SNDP, the connectivity requirement for each pair of vertices can be arbitrary. Recently, Chuzhoy and Khanna [\cite=CK09] showed that there is an O(k3 log n)-approximation algorithm for VC-SNDP. The problems where requirements are edge and element connectivity (EC-SNDP and Element-SNDP) are also very well studied. Both problems admit 2-approximation algorithms via iterative rounding. For EC-SNDP, a 2-approximation algorithm was given by Jain [\cite=Jain01]. For Element-SNDP a 2-approximation algorithm was given by Fleischer, Jain and Williamson [\cite=FJW06]. The vertex-cost versions of these problems have also been studied in literature. Nutov [\cite=Nutov10-nodecost] gave an approximation guarantee of O(k log |T|) for vertex-cost EC-SNDP using a technique, called spider decomposition. Later on, in [\cite=Nutov12], Nutov applied the spider decomposition technique to other vertex-cost problems, giving approximation guarantees of O(k log |T|) for Element-SNDP, O(k2 log |T|) for the rooted subset k-connectivity problem, O(k3 log |T|) for the subset k-connectivity problem and O(k4 log 2|T|) for VC-SNDP.

Preliminaries and Results

We begin with some formal definitions. Let G = (V,E) denote the graph for an instance of the problem. For a set of edges F, the graph [formula] is denoted by G + F; for a vertex v, the graph obtained from G by removing v is denoted by G - v. For any set of vertices U  ⊆  V, let Γ(U) denote the set of neighbors of U; that is, [formula]. Define a set U* to be [formula], which is the vertex-complement of U. For any pair of vertices s,t∈V, two s,t-paths are openly disjoint if they have no vertices except s and t in common. Let T  ⊆  V be a set of vertices called terminals. Without loss of generality, assume that no two terminals of T are adjacent in G. This assumption can be easily justified by subdividing every edge joining two terminals; that is, if there is an edge (s,t) joining two terminals, then we replace (s,t) by two new edges (s,u) and (u,t) and set costs of the new edges so that c(s,t) = c(s,u) + c(u,t), where c(.) is a cost function. The set of terminals T is k-connected in G if the graph G has k openly disjoint s,t-paths between every pair of terminals s,t∈T. Thus, by Menger Theorem, the removal of any set of vertices with size at most k - 1 leaves all the remaining terminals in the same component of the remaining graph. By the subset connectivity of G on T, we mean the maximum integer [formula] such that T is [formula]-connected in G. A deficient set is a subset of vertices U  ⊆  V such that both U and U* contain terminals of T and |Γ(U)| < k. Observe that the vertex-complement U* is also a deficient set. Similarly, given a designated root vertex r, the graph is k-connected from r to T if G has k openly disjoint r,t-paths for every terminal t∈T (r may or may not be in T). By the rooted connectivity of G from r to T, we mean the maximum integer [formula] such that G is [formula]-connected from r to T.

In the subset k-connectivity problem, we are given a graph G = (V,E) with a cost c(e) on each edge e∈E, a set of terminals T  ⊆  V, and an integer k  ≥  0. The goal is to find a set of edges Ê  ⊆  E of minimum cost such that T is k-connected in the subgraph Ĝ = (V,Ê). In the rooted subset k-connectivity problem, our goal is to find a set of edges Ê  ⊆  E of minimum cost such that the subgraph Ĝ = (V,Ê) is k-connected from r to T, for a given root r.

Nutov [\cite=Nutov12] recently gave an O(k log k)-approximation algorithm for the rooted subset k-connectivity problem. The approximation guarantee improves by a logarithmic factor for the problem of increasing the rooted connectivity of a graph by one.

There is an O(k log k)-approximation algorithm for the rooted subset k-connectivity problem. Moreover, consider the restricted version of the problem where the goal is to increase the rooted connectivity from [formula] to [formula]. Then the approximation guarantee (with respect to a standard LP) is [formula].

Our focus is upon the subset k-connectivity problem. The followings are our main results:

For any set T of terminals, there is an α(|T|)-approximation algorithm for the subset k-connectivity problem where

[formula]

In particular, there is an O(k2)-approximation algorithm for the general case of the subset k-connectivity problem, and there is an O(k log k)-approximation algorithm when |T|  ≥  k2.

Consider the subset k-connectivity problem. Suppose there is an α(k)-approximation algorithm for instances with |T| = k. Then there is an (α(k) + f(k))-approximation algorithm for any instance with |T| > k, where f(k) is the best known approximation guarantee for the rooted subset k-connectivity problem.

There is an approximation preserving reduction such that, given an instance of the rooted subset k-connectivity problem consisting of a graph G, a root vertex r and a set of terminals T, outputs an instance of the subset k-connectivity problem consisting of a graph G' and a set of terminals [formula].

The hardness result in Theorem [\ref=thm:rooted-to-subset] together with the hardness of the rooted subset k-connectivity problem by Cheriyan, Laekhanukit, Naves and Vetta [\cite=CLNV12] implies the hardness of Ω(kε), for the subset k-connectivity problem, where ε > 0 is some fixed constant.

Some results and proofs similar to the ones in this paper have appeared in previous literature; see [\cite=CVV03] [\cite=KN05] [\cite=Bundit-Thesis]. In particular, Lemma [\ref=lmm:low-thickness] and Lemma [\ref=lmm:two-cores] appeared in [\cite=KN05] and [\cite=Bundit-Thesis], respectively. The proofs of Proposition [\ref=prop:hardest] is identical to that of the case T = V, which was given in [\cite=KR96] and also in [\cite=ADNP99]. Our key new contributions are Lemmas [\ref=lmm:bound-1], [\ref=lmm:halo-nbr] and [\ref=lmm:num-cores], which allow us to extend the result in [\cite=KN05] to the subset k-connectivity problem.

We remark that, at the time this paper is written, the approximation guarantee of the subset k-connectivity problem was improved by Nutov [\cite=Nutov11] to O(k log k) for all k  ≤  |T| - o(|T|).

Organization: In Section [\ref=sec:algo], we present an approximation algorithm for the subset k-connectivity problem, which is the main result in this paper. In Section [\ref=sec:below2k], we give a discussion that our algorithm and analysis can be extended to the case k < |T| < 2k. To keep the presentation simple, Section [\ref=sec:below2k] is presented separately from the main result. In Section [\ref=sec:hardness], we discuss the hardness of the subset k-connectivity problem. To be precise, we show that the hardest instance of the subset k-connectivity problem might be when |T|  ≈  k, and we give an approximation preserving reduction from the rooted subset k-connectivity problem to the subset k-connectivity problem.

An approximation algorithm

Our main result in Theorem [\ref=thm:sskconn-main] breaks up into three cases where there are a small number, a moderate number and a large number of terminals, respectively. Indeed, the first case is a folklore. When there are a small number of terminals (|T| < 2k), we apply the following trivial O(|T|2)-approximation algorithm. We find k openly disjoint paths of minimum cost between every pair of terminals by applying a minimum cost flow algorithm. Let opt denote the cost of the optimal solution to the subset k-connectivity problem. Since any feasible solution to the subset k-connectivity problem has k openly disjoint paths between every pair of terminals, the cost incurred by finding a minimum cost collection of k openly disjoint paths between any pair of terminals is at most opt. Since we have at most |T|2 pairs, this incurs a total cost of [formula].

The remaining two cases are similar. Things are slightly easier, though, when there are large number of terminals (|T|  ≥  k2), leading to a slightly better guarantee than when there are a moderate number of terminals (2k  ≤  |T|). We devote most of this section to presenting an approximation algorithm for the moderate case. (In Section [\ref=sec:very-simple-algo], we show the improvement for the case of a large number of terminals.)

Our algorithm works by repeatedly increasing the subset connectivity of a graph by one. We start with a graph that has no edges. Then we apply k outer iterations. Each outer iteration increases the subset connectivity (of the current graph) by one by adding a set of edges of approximately minimum cost. The analysis of the outer iterations applies linear programming (LP) scaling and incurs a factor of O( log k) in the approximation guarantee for the k outer iterations. The analysis based on LP-scaling can be seen in [\cite=RW97] [\cite=CV07] [\cite=KN05] [\cite=FL08] and also in [\cite=GGPSTW94] [\cite=Bundit-Thesis].

The following is a standard LP-relaxation for the subset k-connectivity problem.

[formula]

where δ(U,W) = {(u,w)∈E:u∈U,w∈W} is a set of edges with one endpoint in U and the other endpoint in W, and [formula].

Suppose there is a [formula]-approximation algorithm for the problem of increasing the subset connectivity of a graph from [formula] to [formula] with respect to a standard LP, where [formula] is a non-decreasing function.Then there is an O(β(k) log k)-approximation algorithm for the subset k-connectivity problem.

We are left with the key problem of increasing the subset connectivity (of the current graph) by one by adding a set of edges of approximately minimum cost. Throughout this section, we assume that the set of terminals T is [formula]-connected in the current graph, and [formula]. Also, we assume that no two terminals are adjacent in the input graph G = (V,E).

Assumption: The set of terminals T is [formula]-connected in the current graph Ĝ = (V,Ê). Moreover, no two terminals are adjacent in the input graph G.

Our algorithm solves the problem of increasing the subset connectivity of a graph by one by applying a number of so-called inner iterations. To describe our algorithm, we need some definitions and subroutines. Thus, we defer the description of our algorithm to Section [\ref=sec:second-algo]. In Section [\ref=sec:deficient], we give important definitions and structures of subset [formula]-connected graphs called "cores" and "halo-families". Our algorithm requires two subroutines. The first one is the subroutine that employs the rooted subset [formula]-connectivity algorithm to cover halo-families. This subroutine is given in Section [\ref=sec:cover-halo]. The second one is the subroutine for decreasing the number of cores to [formula], which is given in Section [\ref=sec:reduce-cores]. Then we introduce a notion of "thickness" in Section [\ref=sec:thickness]. This notion guides us how to use the rooted subset [formula]-connectivity algorithm efficiently. Finally, in Section [\ref=sec:second-algo], we present an O(k log 2k)-approximation algorithm for the case [formula]. By slightly modifying the algorithm and analysis, we show in Section [\ref=sec:very-simple-algo] that our algorithm achieves a better approximation guarantee of O(k log k) when |T|  ≥  k2.

Subset [formula]-connected graphs: deficient sets, cores, halo-families and halo-sets

In this section, we discuss some key properties of deficient sets that will be exploited by our approximation algorithm.

Assume that the set of terminals T is [formula]-connected in the graph G = (V,E). Then G has [formula] for all U  ⊆  V such that [formula] and [formula]. Moreover, by Menger Theorem, G is subset [formula]-connected if and only if G has no deficient set.

A key property of vertex neighborhoods is that the function |Γ(  ·  )| on subsets of V is submodular. In other words, for any subsets of vertices U,W  ⊆  V,

[formula]

We call a deficient set U  ⊆  V small if [formula].

For any small deficient set U, [formula] and [formula].

The first inequality follows from the definition of small deficient sets. Consider the second inequality. We have

[formula]

Consider any two distinct deficient sets U,W  ⊆  V. If [formula] and [formula], then both [formula] and [formula] are deficient sets. Moreover, if U or W is a small deficient set, then [formula] is a small deficient set.

Suppose [formula] and [formula]. Note that

[formula]

Moreover, [formula]. This means that

[formula]

Hence, by Menger Theorem, we have [formula] and [formula]. Moreover, since U,W are deficient sets, we have [formula]. It then follows by the submodularity of |Γ(.)| that

[formula]

Thus, [formula]. This implies that both [formula] and [formula] are deficient sets. Moreover, suppose U or W is a small deficient set. Without loss of generality, assume that U is a small deficient set. Then [formula] is a small deficient set because [formula]. Thus,

[formula]

By a core, we mean a small deficient set C that is inclusionwise minimal. In other words, C is a core if it is a small deficient set that does not contain another such set. It can be seen that any small deficient set U contains at least one core.

The halo-family of a core C, denoted by [formula], is the set of all small deficient sets that contain C and contain no other cores; that is,

[formula]

The halo-set of a core C, denoted by H(C), is the union of all the sets in [formula]; that is,

[formula]

An example of cores, halo-families and halo-sets is illustrated in Figure [\ref=fig:core-haloset].

Remark: We remark that cores and halo-sets of subset [formula]-connected graphs can be computed in polynomial time. In fact, algorithms for computing cores and halo-sets of the k-vertex connected spanning subgraph problem also apply to the subset k-connectivity problem. See [\cite=KN05] [\cite=FL08] [\cite=Bundit-Thesis].

Some important properties of cores and halo-families that we will require are stated below.

Consider any two distinct cores C and D. For any deficient sets [formula] and [formula], either [formula] or [formula].

Suppose to the contrary that [formula] and [formula]. Then, by Lemma [\ref=lmm:uncross], [formula] is a small deficient set. Thus, [formula] contains a core. This core is either C or D or another core distinct from C and D. In each case, we have a contradiction.

The next result gives an upper bound on the number of halo-sets that contain a chosen terminal, which is a key for the design of our algorithm.

For any terminal t∈T, the number of cores C such that t∈H(C) is at most [formula].

Let [formula] be distinct cores such that t∈H(Ci) for all [formula]. For each [formula], since t is in the halo-set H(Ci), there must exist a deficient set Ui in the halo-family [formula] that contains t. It then follows that [formula]. By the Disjointness Lemma (Lemma [\ref=lmm:sskconn-disjoint]), for i  ≠  j, [formula] only if [formula]. This is because Ui and Uj are deficient sets of different halo-families. For [formula], observe that Ui is small. Hence, by Proposition [\ref=prop:size], we have [formula]. Thus, the upper bound on the number halo-sets that contain t is

[formula]

Covering halo-families via rooted subset [formula]-connectivity

We say that an edge e = (u,v) covers a deficient set U if e connects U and U*; that is, u∈U and [formula]. Clearly, e covers U if e covers U*. Observe that if e covers U, then after adding the edge e to the current graph, U is no longer a deficient set. Now, consider any core C. We say that a set of edges F covers the halo-family of C if each deficient set U in [formula] is covered by some edge of F. For a terminal r∈T, we say that the terminal r hits the halo-family [formula] if r is in C or r is in the vertex-complement of the halo-set of C; that is, r hits [formula] if r∈C or [formula]. For a set of terminals [formula], we say that S hits a halo-family [formula] if there is a terminal [formula] that hits [formula]. The following lemma shows that if r hits the halo-family [formula], then we can find a set of edges F that covers [formula] by applying the rooted subset [formula]-connectivity algorithm with r as the root.

Consider a set of edges F whose addition to Ĝ makes the resulting graph Ĝ + F [formula]-connected from a terminal r to T. Let C be any core. If r∈C or [formula], then F covers all deficient sets in the halo-family of C.

Consider the graph Ĝ + F. By the construction, Ĝ + F has [formula] openly disjoint paths from r to every terminal of T. This means that F covers all deficient sets of Ĝ that contains r. If r∈C, then r∈U for all deficient sets [formula]. So, F covers [formula]. Similarly, If r∈H(C)*, then [formula] for all deficient sets [formula]. So, again, F covers [formula] because an edge e∈F covers U* if and only if e covers U, and the lemma follows.

Preprocessing to decrease the number of cores

In this section, we describe the preprocessing algorithm that decreases the number of cores to [formula]. We apply the following root padding algorithm in the preprocessing step.

The root padding algorithm: The algorithm takes as an input a graph G = (V,E) with the given edge costs, a subset of terminals [formula], and a connectivity parameter ρ  ≤  |R|. We construct a padded graph by adding a new vertex r̂ and new edges of zero cost from r̂ to each terminal of R. Then we apply the rooted subset ρ-connectivity algorithm to the padded graph with the set of terminals T and the root r̂. We denote a solution subgraph (of the padded graph) by [formula], where F  ⊆  E. Then the algorithm outputs the subgraph (of the original graph) Ĝ  -  r̂ = (V,F). The following result shows that, in the resulting graph Ĝ, every deficient set contains at least one terminal of R.

Suppose we apply the root padding algorithm as above, and it finds a subgraph Ĝ  -  r̂ = (V,F). Then every deficient set of Ĝ  -  r̂ (with respect to ρ-connectivity of T in Ĝ  -  r̂) contains at least one terminal of R.

Observe that Ĝ has ρ openly disjoint r̂,t-paths, for all [formula]. Suppose U  ⊆  V is a deficient set of Ĝ  -  r̂ that contains none of terminals of R. Thus, U contains another terminal t∈T - R and |Γ(U)| < ρ. Then (Ĝ  -  r̂) - Γ(U) has no path between t and a terminal of R. This also holds for Ĝ  -  Γ(U) because adding r̂ and the edges from r̂ to every terminals of R cannot give a path between t and a terminal of R. This is a contradiction since Ĝ should have ρ openly disjoint r̂,t-paths.

Remark: Consider an instance Πroot of the rooted subset k-connectivity problem that is obtained from an instance Πsubset of the subset k-connectivity problem by either  (1) picking one of the terminals as the root or  (2) applying the root padding algorithm using any k terminals of Πsubset. Then the cost of the optimal solution to Πroot is at most the cost of the optimal solution to Πsubset because any feasible solution to Πsubset gives a feasible solution to Πroot (but not vice-versa).

Next, recall that [formula]. We apply the root padding algorithm in Lemma [\ref=lem:rootpad] to any subset R of [formula] terminals with [formula]. By Theorem [\ref=thm:rooted-kconn], this incurs a cost of at most [formula] Moreover, the algorithm adds a set of edges to the current graph such that every deficient set of the resulting graph contains at least one terminal of R. Thus, each core of the resulting graph contains at least one terminal of R. By Lemma [\ref=lmm:bound-1], each terminal is in [formula] halo-sets. Hence, the number of cores in the resulting graph is at most [formula]. This gives the next result.

Given a subset [formula]-connected graph, where [formula], there is an f(k)-approximation algorithm that decreases the number of cores to [formula], where f(k) is the best known approximation guarantee for the rooted subset k-connectivity problem.

Thickness of terminals

Consider a graph Ĝ such that T is [formula]-connected in Ĝ. We define the thickness of a terminal t∈T to be the number of halo-families [formula] such that t∈Γ(H(C)). Thus, the thickness of a terminal t is [formula].

The following lemmas show the existence of a terminal with low thickness.

For every core C, [formula].

We use induction on the number of deficient sets in [formula]. For the induction basis, [formula] has one deficient set U, and H(C) = U. Then Γ(H(C))  =  Γ(U) has size [formula] since the graph is subset [formula]-connected.

Suppose that U is the union of j deficient sets that each contains the core C, and suppose that [formula]. Consider another deficient set W that contains C. Our goal is to show that [formula] has size at most [formula]. If W  ⊆  U, then we are done. Otherwise, we apply the submodularity of |Γ(  ·  )|. Observe that [formula] contains a terminal since [formula], and [formula] contains a terminal since [formula] and W* contains a terminal. Hence, [formula] has size at least [formula]. Thus, we have

[formula]

This implies that [formula] has size at most [formula], and the lemma follows.

The following lemma shows the existence of a terminal with low thickness.

Consider a subset [formula]-connected graph. Let q denote the number of halo-families. Then there exists a terminal t∈T with thickness at most [formula].

Consider the following bipartite incidence graph B of terminals and halo-families: B has a vertex for each terminal and each halo-family, and it has an edge between a terminal t and a halo-family [formula] if and only if t∈Γ(H(C)). The previous lemma shows that each halo-family is adjacent to at most [formula] terminals in B. Hence, B has at most [formula] edges. Therefore, B has a terminal that is adjacent to at most [formula] cores; that is, there exists a terminal with the required thickness.

An O(k log 2k)-approximation algorithm for |T|  ≥  2k

In this section, we describe our approximation algorithm for the case of a moderate number of terminals. Recall that we solve the problem by iteratively increasing the subset connectivity of a graph by one. Initially, we apply the algorithm in Section [\ref=sec:reduce-cores] to decrease the number of core to [formula]. Then we apply inner iterations until all the deficient sets are covered. At the beginning of each inner iteration, we compute the cores and the halo-sets. Then we apply a covering-procedure to find a set of edges that covers all the computed halo-families. This completes one inner iteration. Note that an inner iteration may not cover all of the deficient sets because deficient sets that contain two or more of the initial cores (those computed at the start of the inner iteration) may not be covered. So, we have to repeatedly apply inner iterations until no core is present. See Algorithm [\ref=algo:2nd-algo].

We now describe the covering-procedure. The procedure first finds a set of terminals [formula] that hits all the computed halo-families. Then it applies the rooted subset [formula]-connectivity algorithm (Theorem [\ref=thm:rooted-kconn]) from each terminal of S. Let F be the union of all edges found by the rooted subset [formula]-connectivity algorithm. Then, by Lemma [\ref=lmm:cover-halo], F covers all the halo-families.

The key idea of our algorithm is to pick a terminal r̂ with a minimum thickness. Observe that a halo-family [formula] is not hit by r̂ only if

its halo-set H(C) has r̂ as a neighbor (that is, r̂∈Γ(H(C))) or

its halo-set H(C) contains r̂, but its core C does not contain r̂.

The number of halo-families [formula] such that r̂∈Γ(H(C)) may be large, but the number of halo-families whose halo-sets contain r̂ is O(1), assuming that [formula]. Hence, we only hit halo-families of the second case by picking one terminal from each core C whose halo-set contains r̂. Thus, the number of terminals picked is O(1). We call this a micro iteration. Then the remaining halo-families are the halo-families whose halo-sets have r̂ as a neighbor. We repeatedly apply micro iterations until we hit all of the halo-families computed at the start of the inner iteration.

To be precise, initially let [formula]. In each micro iteration, we add to S a terminal r̂ of minimum thickness (with respect to halo-families that are not hit by S). Then, for each core C such that r̂∈H(C) - C, we add to S any terminal in [formula]. We repeatedly apply micro iterations until S hits all the halo-families. At the termination, we apply the rooted subset [formula]-connectivity algorithm (Theorem [\ref=thm:rooted-kconn]) from each terminal of S, and we return all the set of edges found by the algorithm as an output. The covering-procedure is presented in Figure [\ref=algo:cover-proc].

Analysis

The feasibility of a solution directly follows from the condition of the inner iteration; that is, the inner iteration terminates when a current graph has no core. So, at the termination of the inner iteration, the resulting graph has no deficient set. Thus, the subset connectivity of the graph becomes [formula]. Applying the outer iteration k times, the final graph is then subset k-connected.

It remains to analyze the cost of the solution subgraph. First, we analyze the number of times that the covering-procedure applies the rooted subset [formula]-connectivity algorithm. Then we analyze the total cost incurred by all inner iterations, which is the cost for increasing the subset connectivity of a graph by one. Finally, we apply Theorem [\ref=lmm:LP-scaling] to analyze the final approximation guarantee.

Consider any micro iteration of the covering-procedure. By Lemma [\ref=lmm:bound-1], r̂ is contained in at most O(1) halo-sets, assuming that [formula]. Hence, we have to apply the rooted subset [formula]-connectivity algorithm O(1) times.

We now analyze the number of micro iterations needed to hit all of the halo-families. Let hi denote the number of halo-families that are not hit by S at the beginning of the i-th micro iteration. Recall that the number of cores after the preprocessing step is [formula]. Thus, [formula]. We claim that, at the i-th iteration, the number of halo-families that are not hit by S is at most h1 / 2i - 1.

Consider the i-th micro iteration. The number of halo-families that are not hit by terminals of S at the start of the iteration is h1 / 2i - 1.

We proceed by induction on i. It is trivial for i = 1. Suppose that the assertion is true for the (i - 1)-th micro iteration for some i > 1. Consider the (i - 1)-th micro iteration. Since we choose a vertex r̂ with a minimum thickness, by Lemma [\ref=lmm:low-thickness], the thickness of r̂ is at most [formula]. Note that [formula] since [formula]. This means that r̂ is a neighbor of at most hi - 1 / 2 halo-sets. At the end of the micro iteration, halo-families that are not hit by terminals of S are halo-families whose halo-sets have r̂ as a neighbor. Thus, the number of remaining halo-families is at most hi - 1 / 2. Hence, we have

[formula]

Lemma [\ref=lmm:uncovered-halo] implies that the maximum number of micro iterations (within the covering-procedure) is [formula]. So, in each inner iteration, we have to call the rooted subset [formula]-connectivity algorithm [formula] times.

Lastly, we analyze the total cost incurred by all inner iterations, which is the cost for increasing the subset connectivity of a graph by one. We may apply Theorem [\ref=thm:rooted-kconn] directly to analyze the cost of the solution. However, this leads to a bound slightly weaker than what we claimed. To get the desired bound, we apply a stronger version of Nutov's theorem [\cite=Nutov12]. In particular, the approximation guarantee of Nutov's algorithm depends on the size of a smallest deficient set. To be precise, the size of a smallest deficient set is defined by

[formula]

Consider the problem of increasing the rooted subset connectivity of a graph from [formula] to [formula]. Let [formula]. That is, each deficient set of the initial graph contains at least φ terminals. Then there is an [formula]-approximation algorithm.

Now, we analyze the size of a smallest deficient set of a graph at the beginning of each inner iteration. Consider the cores at any inner iteration. We call cores at the beginning of the iteration old cores and call cores at the end of the iteration new cores. We claim that every new core Ĉ contains at least two old cores C and D that are disjoint on T. This follows from the following lemma.

No small deficient set contains two distinct cores C and D such that [formula].

Suppose to the contrary that there is a small deficient set U that contains two distinct cores C and D such that [formula]. Since [formula], by Lemma [\ref=lmm:sskconn-disjoint], [formula]; that is, [formula] has no terminals. Since U contains both C and D, it follows that U* is contained in both C* and D*. Hence, U* has no terminals. This contradicts the fact that U is a deficient set.

Lemma [\ref=lmm:two-cores] implies that no new cores contain two old cores that are intersecting on T. This is because new cores are small deficient sets of the old graph. Moreover, since all small deficient sets that contain only one core have been covered, new cores must contain at least two old cores that are disjoint on T. Thus, the size of a smallest deficient set increases by a factor of 2. This implies the following lemma.

Consider the j-th inner iteration. At the beginning of the iteration, the size of a smallest deficient set of the current graph is at least 2j - 1.

As in the above discussion, the size of a smallest deficient set increases by a factor of two in each inner iteration. In more detail, consider the size of a smallest deficient set at the beginning and the end of an inner iteration. We call the graph at the beginning of the iteration an "old graph" and the graph at the end of the iteration a "new graph". Let U and U' denote smallest deficient sets of the old and the new graph, respectively. By the size argument, we conclude that U and U' are cores of the old and the new graph. At the end of the inner iteration, small deficient sets containing one core are all covered. Thus, U' contains two distinct cores C and C' of the old graph. Moreover, Lemma [\ref=lmm:two-cores] implies that C and C' have no terminals in common. By the minimality of U, we have [formula] and [formula]. Thus, [formula] as claimed.

Now, we prove the lemma by induction. At the first inner iteration, each deficient set contains at least one terminal. Thus, the statement holds for the base case. Assume that the assertion is true for the (j - 1)-th inner iteration; that is, at the beginning of the (j - 1)-th inner iteration, any deficient set U has at least 2j - 2 terminals. By the above claim, this number increases by a factor of two at the end of the iteration. Thus, at the beginning of the j-th iteration, the size of a smallest deficient sets is 2j - 1, proving the lemma.

By Lemma [\ref=lmm:root-size] and [\ref=lmm:size-defi], at the j-th inner iteration, the cost incurred by the rooted subset [formula]-connectivity algorithm is [formula]. Combining everything together, the approximation guarantee for the problem of increasing the subset connectivity of a graph by one is

[formula]

Thus, by Theorem [\ref=lmm:LP-scaling], our algorithm achieves an approximation guarantee of O(k log 2k), assuming that |T|  ≥  2k.

An O(k log k)-approximation algorithm for |T|  ≥  k2.

To finish, we show that if the number of terminals is large, then we get a slightly better performance guarantee. Observe that if |T|  ≥  k2, then, by Lemma [\ref=lmm:low-thickness], there is a terminal r̂ with a thickness of at most [formula]. Moreover, by Lemma [\ref=lmm:bound-1], each terminal is contained in at most [formula] halo-sets. Thus, the number of halo-families that are not hit by r̂ is O(1). This means that we can hit all the remaining halo-families by choosing O(1) terminals; that is, for each halo-family, we choose one terminal from its core. So, we can skip the micro iterations of the covering-procedure, and the approximation guarantee becomes O(k log k).

Analysis for the case k < |T| < 2k

Our algorithm in Section [\ref=sec:second-algo] indeed applies to the case k < |T| < 2k with an approximation guarantee of [formula]. To see this, we leave the bounds in Lemma [\ref=lmm:bound-1] and Lemma [\ref=lmm:low-thickness] untouched. Then we have

Each terminal is contained in at most [formula] halo-families.

There is a terminal with a thickness of [formula], where q is the number of halo-families.

Recall the micro iterations of the covering-procedure. In each micro iteration, we choose [formula] terminals, and the number of halo-families (which are not hit) decreases by a factor of [formula]. Here the number of micro iterations is not logarithmic because [formula] is not constant when [formula]. To analyze the upper bound, we write [formula] as [formula] and apply an equation:

[formula]

Thus, we need [formula] micro iterations to decrease the number of halo-families (which are not hit) by a factor of e. This means that the covering-procedure terminates in [formula] iterations, where q is the number of halo-families. (Note that, in this case, we do not need the preprocessing step because the number of halo-families is at most |T|2 = O(k2).) So, the covering-procedure has to call the rooted subset [formula]-connectivity algorithm for [formula] times. Following the analysis in Section [\ref=sec:analysis], we have an approximation guarantee of [formula] as claimed.

Hardness of the subset k-connectivity problem

In this section, we discuss the hardness of the subset k-connectivity problem. First, we will show in Section [\ref=sec:hardest-instance] that the hardest instance of the subset k-connectivity problem might be when k  ≈  |T|; that is, we prove Proposition [\ref=prop:hardest]. Then we will present in Section [\ref=sec:root2subset] an approximation preserving reduction from the rooted subset k-connectivity problem to the subset k-connectivity problem; that is, we prove Theorem [\ref=thm:rooted-to-subset].

The hardest instance

We will show that an α(k)-approximation algorithm for the case |T| = k implies an (α(k) + f(k))-approximation algorithm for all instances with |T| > k, where f(k) is the best known approximation guarantee for the rooted subset k-connectivity problem. In particular, instances with |T|  ≈  k might be the hardest cases of the subset k-connectivity problem.

Suppose there is an α(k)-approximation algorithm A for the subset k-connectivity problem for the case |T| = k. We apply A to solve an instance of the subset k-connectivity problem with |T| > k as follows. Let G = (V,E) be a given graph and T  ⊆  V be a set of terminals, where |T| > k. First, we take any subset R of k terminals from T. Then we apply the algorithm A to this instance with R as the set of terminals; this results in a graph GR = (V,ER). Clearly, R is k-connected in GR. Now, we make the remaining terminals connected to R by applying the rooted subset k-connectivity algorithm. To be precise, we construct a padded graph by adding a new vertex r̂ and new edges of zero cost from r̂ to each terminal of R. Then we apply the rooted subset k-connectivity algorithm to the padded graph with the set of terminals T and the root r̂. Denote a solution subgraph (of the padded graph) by [formula], where Eroot  ⊆  E. The algorithm outputs the union of the two subgraphs, namely [formula].

We claim that the set of all terminals T is k-connected in Ĝ. Suppose not. Then there is a set of vertices X  ⊆  V of size k - 1 that separates some terminals [formula]; that is, s and t are not connected in Ĝ  -  X. Consider the padded subgraph Gpad. By the construction, since Gpad is k-connected from r̂ to T, both s and t have paths to r̂ in Gpad  -  . Moreover, each of these two paths must visit some terminals s' and t' in R, respectively. If s' = t', then s and t are connected by the union of these paths. So, we have a contradiction. If s'  ≠  t', then we can join these two paths by an s',t'-path in GR  -  X. Such s',t'-path exists because R is k-connected in GR, meaning that X cannot separates a pair of terminals in R. Thus, s and t are connected, and we again have a contradiction.

Now, consider the cost. The approximation factor incurred by the algorithm A is α(k), and the approximation factor incurred by the rooted subset k-connectivity algorithm is f(k). Thus, the above algorithm gives an approximation guarantee of (α(k) + f(k)) as claimed.

A reduction from the rooted subset k-connectivity problem

As we showed in the previous section, an approximation algorithm for the rooted subset k-connectivity problem implies an approximation algorithm for the subset k-connectivity problem. Hence, it is more likely that the rooted problem is easier than the subset problem. Here we show a solid evidence of this statement; that is, we will give an approximation preserving reduction from the rooted subset k-connectivity problem to the subset k-connectivity problem.

The key idea of the reduction is that a solution Ĝ to the rooted subset k-connectivity problem is indeed almost subset k-connected. In particular, if the root vertex r is not allowed to be removed, then there is no set of vertices of size less than k that can separate a pair of terminals. So, we want to prevent the root vertex r from being in a separator. To do this, we replace r by a clique Kd of size at least k + 1. Thus, removing any set of less than k vertices cannot remove all vertices corresponding to r.

Now, we shall realize the above idea. First, take any instance Πroot of the rooted subset k-connectivity problem consisting of a graph G = (V,E), a set of terminals T  ⊆  V and a root vertex r∈V - T. Let d be the degree of r in G. Clearly, if the instance Πroot is feasible, then d  ≥  k. We construct an instance Πsubset of the subset k-connectivity problem consisting of a graph G' = (V',E') and a set of terminals T' as follows. Let [formula] be a set of neighbors of r in G. We remove from G the vertex r and replace it with a clique Kd + 1 on a set of vertices [formula]. All edges of Kd + 1 have zero costs. The vertex r' corresponds to the root vertex r of G, and each vertex v'i corresponds to each neighbor vi of r in G. Then we connect Kd + 1 to G by adding to G' an edge (v'i,vi) for each edge (r,vi) in G and setting the cost of (v'i,vi) to be the same as the cost of (r,vi). Thus, each edge (v'i,vi) in G' corresponds to an edge (r,vi) in G. The set of terminals of this new instance is [formula], and the connectivity requirements is k, the same for both instances. This completes the construction.

In sum, we have

[formula]

Completeness: First, we show that any feasible solution H of Πroot maps to a feasible solution H' of Πsubset with the same cost. The mapping is as follows. Given a graph H, we construct a solution H' to Πsubset by taking all edges of Kd + 1 and all edges of G' corresponding to edges of H. Clearly, the cost of H' and H are the same. It remains to show that T' is k-connected in H'.

The connectivity between the vertex r' and each terminal t∈T is clearly satisfied. This is because any collection of openly disjoint r,t-paths in H maps to a collection of openly disjoint r',t-paths in H'. In particular, any path [formula] in H maps to a path [formula] in H', and it is easy to see that the mapping preserves vertex-disjointness. By the same argument, we can deduce that every vertex v'j∈Kd + 1 is k-connected to t in H'. This is because the path P also maps to a path [formula] or [formula] in H'.

Now, consider the connectivity between a pair of vertices [formula]. Assume a contradiction that t and t' are not k-connected. Then there is a subset of vertices X of G' with |X|  ≤  k - 1 such that t and t' are not connected in H' - . Since |X|  ≤  k - 1  ≤  d, there is a vertex s in Kd + 1  -  . (The vertex s is either the vertex r' or some vertex vi in Kd + 1.) As we have shown, s is k-connected to t and t' in H'. Thus, by Menger's theorem, H' -  contains both an s,t-path and an s,t'-path. So, t and t' are connected in H' - , a contradiction. Therefore, T' is k-connected in H', implying that H' is feasible to the subset k-connectivity problem.

Soundness: Now, we show the converse; that is, any feasible solution H' of Πsubset maps to a feasible solution H of Πroot with the same cost. This direction is easy. We construct H' by taking all edges of H' that correspond to edges of G. Clearly, the cost of H and H' are the same. By feasibility, H' has, for each terminal t∈T, a collection of k openly disjoint r',t-paths, namely [formula], and each path P'j is of the form [formula]. The path P'j maps to a path [formula] in H. So, we have a collection of paths [formula] in H that are openly disjoint. Therefore, H is feasible to the rooted subset k-connectivity problem, finishing the proof.

Conclusions and Discussions

We studied the structure of the subset k-connectivity problem and used this knowledge to design an approximation algorithm for the subset k-connectivity problem. When the number of terminals is moderately large, at least 2k, our algorithm gives a very good approximation guarantee of O(k log 2k). When the number of terminals is tiny, at most [formula], then the trivial algorithm also gives a very good approximation guarantee of O(k). However, when the number of terminals is between [formula] and 2k, the approximation guarantee can be as large as Θ(k2). Interestingly, as we have shown, it does seem that the hardest instances of the subset k-connectivity problem are when the number of terminals is close to k.

Acknowledgments. We thank Joseph Cheriyan for useful discussions over a year. Also, we thank Adrian Vetta, Parinya Chalermsook, Danupon Nanongkai, Jittat Fakcharoenphol and anonymous referees for useful comments on the preliminary draft.