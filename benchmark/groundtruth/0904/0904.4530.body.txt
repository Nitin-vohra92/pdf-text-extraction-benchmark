Online Maximizing Weighted Throughput In A Fading Channel

Research is partially supported by Seed Award from the Office of the Vice President for Research and Economic Development at George Mason University.

Introduction

Time-varying signal strength is a fundamental characteristic of wireless channels. Scheduling packets over fading wireless channels has received much attention (see [\cite=TH98] [\cite=FMT06] [\cite=TSZM07] [\cite=ZM08] [\cite=CNM08] and the references therein). A scheduling algorithm can significantly improve the communication performance by taking advantages of the changing channel states. In this paper, we consider scheduling weighted packets with time constraints in an online manner.

Resource allocation for fading channels has been a well-studied topic in the area of information theory. The quantity to maximize is often the Shannon capacity, defined as the tightest upper bound of the amount of information (the total number of packets) that can be reliably transmitted over a communication channel. Tse and Hanly [\cite=TH98] have found capacity limits and optimal resource allocation policies for such fading channels. In [\cite=FMT06], the authors applied a dynamic programming approach to get the optimal solution for scheduling uniform-value packets under both time and energy constraints. A polynomial-time optimal offline solution of scheduling packets with deadlines was given in [\cite=TSZM07] [\cite=ZM08]. In their problem settings, energy is minimized under the assumption that all arriving packets are successfully delivered. An optimal offline algorithm maximizing throughput and a heuristic online approach of scheduling uniform-value packets with possibly different deadlines were given in [\cite=CNM08]. No theoretical analysis has been provided for the heuristic online solution. The first work considering scheduling weighted packets is [\cite=LZ09a], in which an optimal offline algorithm is provided but theoretical analysis of the proposed online algorithm is missing.

Note that in previous studies, packets have uniform values (except in [\cite=LZ09a]) and their arrivals at the transmitter are usually modeled by a Poisson distribution. However, packets from different users and various applications may have different significance levels of embedded information. For the sake of being realistic and practical, we associate packets with weights ( values) to indicate the significance of their embedded information. We also associate packets with deadlines to represent the information's time sensitivity. None of the previous algorithms for delivering packets can be generalized to this problem setting, because a schedule with the maximum throughput does not imply its optimality on maximizing weighted throughput. In this paper, we design competitive online algorithms to maximize weighted throughput for packets with time constraints over a fading channel.

Model

We consider scheduling weighted packets with deadlines over a wireless fading channel in an online manner. In this model, time is assumed to be discrete. Each unit of time is called a time step and a few continuous time steps are called a time interval. Packets are released over time. All packets are with the same length [formula] (l is a constant). Each packet p has an integer release time ( arriving time) [formula], a positive real value [formula] to represent its weight ( value), and an integer deadline [formula] to denote the time by which it should be delivered. The time required to send a packet depends on the state quality qt (qt∈[qmin, qmax]) of the fading channel during a time step t. For simplicity, we assume qmin  =  0 and l  =  qmax (if the fading channel is at its highest quality qmax, one packet can be sent in a time step). Without loss of generality, we assume the fade state in a single time step keeps unchanged. A packet has to be sent in consecutive time steps. Sending a packet p takes t(p) time steps subject to where t(p)  =  t2  -  t1. Two or more packets cannot share (i.e., to be sent in) the same time step. If a packet p is sent by its deadline dp, its weight wp is contributed to our objective. Our goal is to maximize weighted throughput in an online manner subject to the deadline constraints of packets and the varying fading channel qualities. We note here that our model can be an overloaded system -- it is possible that due to packets' deadline constraints, no algorithm can deliver all packets in the input instance, some packets have to be dropped.

There are two kinds of algorithms: offline algorithms and online algorithms. All input information (including the fade channel states, the packets' characteristics, and the packet sequence) is known to an offline algorithm in advance. Our work on offline algorithms in scheduling weighted packets with deadlines can be found in [\cite=LZ09a]. For an online algorithm, the packet input sequence is unknown. Each packet p's characteristics (such as rp, wp, dp) is known to the algorithm only at the time rp when p actually arrives at the transmitter. Under various assumptions on the variants of the online version of this problem, the fade state of the channel is either completely unknown or partially known to the online algorithm. Note that essentially, delivering packets with deadlines in a wireless channel is an online decision-making problem. We address our online problem in a preemption-restart setting:

Preemption-restart setting. An online algorithm is allowed to abort a packet during its transmission, and the aborted packet can be restarted (from scratch) and completed later in a preemption-restart setting.

Algorithms and Analysis

Scheduling packets with deadlines is essentially an online decision-making problem. In order to evaluate the worst-case performance of an online algorithm lacking of future input information, we compare it with an optimal offline algorithm. The offline algorithm is a clairvoyant algorithm, empowered to know the whole input sequence (including the fading states of the channel, the packet sequence, and every packet p's characteristics rp, wp, dp) in advance to make its decision. A competitive online algorithm, on the contrary, does not know the input sequence beforehand and it has a packet p's characteristics only at the time rp when p actually arrives. In contrast to stochastic algorithms that provide statistical guarantees under some mild assumptions on input sequences, competitive online algorithms guarantee the worst-case performance. Furthermore, when reasonable or reliable approximation of the input probability distribution is not available or when analytical worst-case performance guarantees are sought, competitive analysis is of fundamental research interests to us.

Competitive ratio [\cite=BY98]. A deterministic online algorithm [formula] is called k-competitive if its weighted throughput on any finite instance I is at least 1  /  k of the weighted throughput of an optimal offline algorithm on this instance: where δ is a constant (δ becomes insignificant when the size of the input |I| increases) and [formula] is the optimal offline solution of an input I. The parameter k is known as the online algorithm's competitive ratio. We also call the optimal offline algorithm adversary.

The upper bounds of competitive ratios are achieved by some known online algorithms. A competitive ratio less than the lower bound is not reachable by any online algorithm. An online algorithm is said to be optimal if its competitive ratio reaches the lower bound. If the additive constant δ is no larger than 0, the online algorithm [formula] is called strictly k-competitive. Competitiveness has been widely accepted as the metric to measure an online algorithm's worst-case performance in theoretical computer science and operations research [\cite=BY98]. In this section, we design and analyze competitive online scheduling algorithms in maximizing weighted throughput.

Without time constraints on packets, (weighted) throughput is maximized by simply delivering all packets that ever arrive at the transmitter. For packets with deadlines, when qt is a constant, an optimal competitive online algorithm can be achieved [\cite=CJST07a] such that the throughput (of uniform-value packets) is maximized. However, how to schedule packets with deadlines in fading channels still remains as an open problem and this problem becomes more interesting and complicated when packet weights are taken into account.

The lower bound of competitive ratio

We indicate if the fading states are unknown to the online algorithms, no online algorithm can have a competitive ratio better than wmax  /  wmin.

[\cite=LZ09a] If the fading states are unknown to online algorithms, no online algorithm can have a competitive ratio better than wmax  /  wmin.

Based on Theorem [\ref=theorem:counter], we know that if the fade states are completely unpredictable, without one step of look-ahead, no online algorithm can have a competitive ratio better than wmax  /  wmin. In the following, we consider a practical scenario and make the following assumption that is widely accepted:

Assumption applies to all the variants we consider in the following.

Assume both the fade states and the packet input sequence are unknown to the online algorithms

Two packets are with more interests when neither the fade states nor the input sequence is known to the online algorithm:

i: the currently running packet. If i is not available, we simply create a virtual packet i with wi  =  0.

h: the packet with the maximum-value among all pending packets for the transmitter.

From [\cite=LZ09a], we conclude that always sending the packet with the earliest deadline or h results a competitive ratio arbitrarily large. Here, we employ the following ideas of getting an online algorithm with a better competitive ratio: If the currently sending packet is with a sufficiently large value, then we keep sending it. Otherwise, we let h preempt it. The algorithm we study is called SEMI-GREEDY.

Before we prove the competitive ratio for the algorithm SEMI-GREEDY, we define a concept that is useful to the proof.

Packet chains. We define a packet chain C of k packets as [formula] with the following property (α  >  1), [formula]. We use W(C) to represent the total value of the packets of C.

Given a chain C of k  ≥  2 packets [formula], we have [formula].

[formula]

The SEMI-GREEDY algorithm has a competitive ratio of [formula]. It is (φ2  ≈  2.618)-competitive when α  =  φ  ≈  1.618.

We use a charging scheme to prove Theorem [\ref=theorem:general]. The idea is: For the packets the adversary sends, we charge them into different time intervals and we prove that in each pair of corresponding intervals, the value we charge to the adversary in that interval is no more than [formula] times of what SEMI-GREEDY achieves.

Let the subset of packets chosen by the adversary (that is, an optimal offline algorithm) (respectively, SEMI-GREEDY) be Π1 (respectively, Π2). Without loss of generality, we assume the adversary sends packets in a canonical order, i.e., for any two pending packets pi and pj, the adversary sends the packet with an earlier deadline. We are going to prove that

The proof depends on the following two observations:

Given a set of packets S at time t, we assume an online algorithm schedules a packet pi∈S. We consider time t'  >  t. Since all packets are with the same length, if the packet pi cannot be finished by time t', any packet in S cannot be finished completely by time t', no matter what the fade states of the channel has.

Given a set of packets S at time t, we assume that the SEMI-GREEDY algorithm schedules a packet pi∈S. We have wpi  ≥   max pj∈Swpj  /  α.

If we assume pi is aborted at time t'  >  t by a packet pk, we have wpi  <  wpk  /  α and pk∉S. If the preempting packet pk is not sent by the algorithm SEMI-GREEDY, pk must be aborted by another packet which has the potential of being sent. So on and so forth, we regard all aborted packets and the last-sent packet pl as a chain. From Lemma [\ref=lemma:chain], all ever-aborted packets have value [formula].

Note that no chains share a same packet, since each preempted packet and its preempting packet are in the same chain.

For any packet [formula] sent only by the optimal offline algorithm, either p expires before SEMI-GREEDY sends it or p was sent, SEMI-GREEDY aborted p before p could be finished, and p is never completed by its deadline. If p expires, any packet that SEMI-GREEDY sends since time rp has a value ≥  wp  /  α (from the algorithm). For each time interval in which a single packet is sent, we examine it for both the optimal offline algorithm and this online SEMI-GREEDY algorithm in a sequential order. Our charging scheme works as follows:

For any packet [formula] that SEMI-GREEDY has not ever run, we charge it to the corresponding time interval that SEMI-GREEDY sends a packet. We note that SEMI-GREEDY must have one pending packet to send in this interval since this packet p is a candidate. The packet SEMI-GREEDY sends, let it be p', in this corresponding interval has a value no less than wp  /  α. Also, SEMI-GREEDY finishes p' no later than the adversary finishes p since p and p' have the same processing time and p and p' are being executed in corresponding time intervals when both algorithms send packets.

For any packet [formula] that SEMI-GREEDY ever sends but aborts it later, we know that (from above observations) p belongs uniquely to a chain and the last element of this chain, say p', is sent by SEMI-GREEDY. Thus, we charge wp to the time interval when p' is sent by SEMI-GREEDY.

For any packet [formula], we charge wp to the time interval when SEMI-GREEDY sends p. Clearly, for any packet acting as the last-element of a chain, this charging scheme results that the value ratio is bounded by [formula] (see Lemma [\ref=lemma:chain]).

The remaining part of the proof is to argue that when we charge a packet [formula] that SEMI-GREEDY has not ever run yet in the corresponding time interval, SEMI-GREEDY sends a packet p', wp'  ≥  wp  /  α. This claim is easy to prove since if wp'  <  wp  /  α, p' will be aborted by p immediately at the time when p arrives. Thus, for each packet p that SEMI-GREEDY sends, the charged value to p for the adversary is bounded by 1  +  α and [formula] and all packet that the adversary sends have been charged. Theorem [\ref=theorem:general] is proved.

Closing or shrinking the gap

[formula]

Assume the fade states are known to the online algorithms, but the packet input sequence is unknown

Now we consider a variant in which the fade states are known beforehand, but the packet input sequence is unknown. To illustrate the challenge, we present an instance in which packets are with the same value and the fade state of the channel is fixed at [formula]. Consider one packet p1 with deadline 5 at time 1. If an online algorithm executes p1, the adversary releases another packet p2 with deadline 3 at time 2. So, the online algorithm cannot finish both jobs and the competitive ratio is 2, given the adversary finishes both packets in the order of p2 and p1. If the online algorithm aborts p1 but executes p2 at time 2, the adversary releases another packet p3 at time 2 with deadline 4. Here, the online algorithm cannot finish both p2 and p3, but the adversary can finish p1 and p3 by their deadlines in order. Thus, the lower bound of competitive ratios for this variant (wpi  =  1, [formula] and fade states keep constant 1  /  2) is 2. It is intuitive to abort a running packet if it can be sent later with respect to the given set of pending packets and fade states of the channel. Our proposed online algorithms are based on this intuition. In order to check if a set of packets can be delivered successfully, we define

Provisional schedule [\cite=CJST07a] [\cite=EW07]. At any time t, a provisional schedule [formula] is a schedule for the pending packets at time t (assuming no new arriving packets). This schedule specifies the set of packets to be transmitted, and for each it specifies the delivery time. An optimal provisional schedule is the one achieving the maximum total value of packets among all provisional schedules.

In the following, we provide a modified earliest-deadline-first algorithm called [formula]. Since the fade states are known, there exists an efficient algorithm in calculating an optimal provisional schedule for time t (see [\cite=LZ09a]). We are interested in two packets in this provisional schedule: the earliest-deadline pending packet e and the packet h with the maximum value. We either schedule e (if e is with a sufficiently large value) or another packet f satisfying wf  ≥   max {β  ·  we, wh  /  β}.

Assume fade states are known to online algorithms. Algorithm [formula] is [formula]-competitive, and it is 2-competitive when β  =  2.

We use a potential function method and a loop invariant method to prove Theorem [\ref=theorem:bare]. We compare our algorithm [formula] with the adversary ADV. Let [formula] and [formula] denote the potentials of the adversary and [formula] respectively. Specifically, [formula] denotes the total value achieved since time t from the pending packets at time t for the adversary. Let this set of packets be S*t. Let [formula] denote the total value of the optimal petitional schedule of the pending packets at time t for [formula]. We use pt and p't to denote the t-th packet sent by [formula] and ADV respectively. If such a packet does not exist, pt (p't) is a null packet with value 0. To prove Theorem [\ref=theorem:bare], we need to show that for any t, [formula], where [formula]. We provide the following loop invariants and prove their correctness by case study.

Denote the pending packets at time t for ADV and [formula] as P't and Pt. P't  ⊆  Pt. Note that [formula] may not deliver all packets in Pt.

When a packet is sent, the sum of the actual gain and the credit charge (see below) is called amortized gain. We prove that for the i-th packet sent, ADV's amortized gain is no more than c times of [formula]'s amortized gain.

For arrivals, with the first invariant, the invariants are easy to prove. Note wpt  =  wp't  =  0. In the following, we consider packet deliveries only. Let the packet [formula] chooses to send in this time interval be p. One fact that we will use in the proof is: Given two packet p and a packet p* with dp  ≤  dp*, if p is not in the optimal provisional schedule, but p* is, then wp*  ≥  wp. This fact further implies that if p is the packet [formula] is currently sending, any packet not in the optimal provisional schedule has a value ≤  β  ·  wp.

Assume ADV sends a packet p'. Assume p is sent successfully by [formula].

Based on the invariants, wp', wp   ≤   wh. From the algorithm itself, wp  ≥  wh  /  β. Since all packets have the same length, under any fade states, [formula] finishes p no later than ADV finishes p'.

If dp'  <  dp, we have wp'  <  wp in the optimal provisional schedule. Then we charge wp'  +  wp to the adversary and we have wp'  +  wp  ≤  2  ·  wp. If dp'  >  dp, p will not be sent by the adversary. Then we charge wp' to ADV and we have β  ·  wp  ≥  wh  ≥  wp'.

Assume ADV sends a packet p'. Assume p is aborted by [formula] before it is finished.

If the adversary will send p, we will charge wp to the packet that preempts it. Like the chain we have calculated in Lemma [\ref=lemma:chain], the value gained by sending the last packet of the chain is at least (β  -  1)  ·  βn  /  (βn  +  1  -  1) times of the total value we charge for the adversary.

Assume ADV has nothing to send from the currently pending packets for [formula].

We claim that either p has been sent by ADV or ADV must have one new arrival before [formula] finishes the packet p it chooses to send. Otherwise, ADV can get more credit by delivering p. It does not hurt if we have run p till new arrivals come. This analysis is similar to what we have had in above cases.

Theorem [\ref=theorem:bare] implies that extra information (for example, the known fade states) helps improve competitive ratio.

Assume the fade states are unknown, but the packet input sequence is known

We first provide the lower bound φ  ≈  1.618 of competitive ratio for deterministic online algorithms for this variant. Then we discuss the relation between this model and another well-studied online problem.

Consider a variant in which the fade states are unknown, but the packet input sequence is known to online algorithms. The lower bound of competitive ratio for deterministic online algorithms is φ  ≈  1.618.

Such an instance is easy to construct. Assume there are two packets in the input sequence only. One packet p1 is with value 1 and deadline 2. The other packet p2 is with value φ and deadline 3. These two packets are released at time 0. Let an online algorithm be ON.

If ON schedules p1, the optimal offline algorithm schedules p2 and the fade states are 0.5 from time 0 to 3. Note here the Assumption [\ref=assumption:1] still holds. Then the competitive ratio is φ. If ON schedules p2, the optimal offline algorithm schedules both p1 and p2 given the fading states are 0.5 from 0 to 4. Thus, the competitive ratio is (1  +  φ)  /  φ  =  φ.

In the following, we reveal the relationship between this variant and a well-studied model called the bounded-delay model (see [\cite=EW07] [\cite=LSS07] and the references therein). In the bounded-delay model, packets are released in an online manner. Each packet is associated with a value and a deadline by which it should be sent. In each time step, a packet can be sent and the goal is to maximize the total value of the packets sent by their respective deadlines.

Assume the fade states are unknown, but the packet input sequence is known to online algorithms. A c-competitive algorithm for the bounded-delay model implies a c-competitive algorithm for our model.

Consider an input sequence I for the bounded-delay model. Let the packets sent by an optimal offline algorithm be O and the algorithm be [formula].

Given a time t, we create the fade states such that the optimal offline algorithm [formula] for this variant achieves the same weighted throughput as [formula], also, for an online algorithm, the extra given information about the whole input sequence cannot avoid the difficulty brought by the unpredictable fade states. The construction of fade states is as follows.

For the bounded-delay model, let the set of packets O be [formula] and they are sent in time steps [formula] respectively. (If there is no packet sent in a step i, we create a dummy packet pi for step i with wpi  =  0.) Without loss of generality, all packets pi can be sent in the earliest-deadline-first manner. Then we modify the deadlines of the packets in O such that [formula], for all [formula]. At last, we force the quality of the fade states from time dpi to dpi  +  1 be l  /  (dpi  +  1  -  dpi). This guarantees a packet can be sent under such fade states and if pi is pending to an online algorithm at time dpi  -  1 and the online algorithm sends any other packet than pi, pi cannot be sent by the online algorithm any more. We ensure that the optimal offline algorithm for this variant works the same as the optimal offline algorithm for the bounded-delay model. Also, the extra information about the packet input sequence does not help the online algorithm since it has no knowledge about the fade states. With Assumption [\ref=assumption:1], the online algorithm known that only one packet can be sent once it is committed and this is exactly as what is assumed in the bounded-delay model.

Closing or shrink the gap of competitive ratios

[formula]