Definition Lemma

A Combinatorial Study of Linear Deterministic Relay Networks

Introduction

Network information theory [\cite=key-7] attempts to model aspects of large communication networks such as interference, cooperation, and noise that are often overlooked in network optimization theory. Relay channels [\cite=key-7] are an example of a network information problem in which there is a source, a unique destination, and at least one intermediary transmitter-receiver pair which is instrumental to the communication between the source and the destination. In this paper we focus on a simplified mathematical model for the wireless relay channel which we describe via a directed graph N(V,E), where V denotes the set consisting of the source node, the destination node, and all relay nodes. Here the source node only sends signals, the destination node only receives signals, and a relay node can both receive signals and transmit any function of its incoming messages. The transmission of signals in this network obeys two rules: 1- any signal which is sent by node i is broadcast to every node j such that ij∈E, and 2- the signal which is received by node j is a linear combination of all signals that are broadcast to it and an independent additive noise signal which is typically modeled by a Gaussian random variable. Finding the capacity of a wireless relay channel has long been a challenging and important open problem. Avestimehr, Diggavi, and Tse [\cite=key-1] [\cite=key-2] recently proposed a simplified linear deterministic relay network model in which the effects of broadcasting, interference, and noise are captured by linear transformations of the transmitted signals. One motivation for the study of this model is the result in [\cite=key-1] [\cite=key-2] that the capacity of any wireless relay channel with Gaussian noise is within a constant additive factor of the capacity of a corresponding linear deterministic model. More recent work [\cite=key-15] [\cite=key-16] has connected the linear deterministic model to the approximate capacity of other relay channels and to the design of near-optimal coding schemes for them. We next summarize the model and some of the results of [\cite=key-1] [\cite=key-2]:

The authors of [\cite=key-1] [\cite=key-2] focus on layered directed graphs N with set of nodes [formula] Here [formula] and [formula] respectively denote the source and destination nodes, and [formula] denotes the set of relay nodes in the ith layer for [formula]. Each edge in the graph is from some node in [formula], to a node in Oi + 1. Observe that the study of an arbitrary directed network can also be placed into this framework if one instead studies its time-expanded representation [\cite=key-1] [\cite=key-2]. In this case Oi corresponds to the possible behaviors of the network from symbol time (i - 1)τ to symbol time iτ - 1 for some positive integer τ.

In the layered network, every node [formula] receives a column vector [formula] at time t and transmits a column vector [formula] at time t. Node S transmits vector [formula] and node D receives vector [formula] The elements of all transmitted and received vectors belong to some fixed finite field [formula] Every edge Oi(j)Oi + 1(k)∈E represents a communication channel which is described by a matrix Gi(j,k) with entries from [formula] called the transfer function from [formula] to vector [formula]. Define the block matrix Gi by [formula] for [formula] and [formula] Let [formula] be the transmitted vector from layer i and [formula] be the received vector at layer i + 1; i.e.,

[formula]

The communication channel from layer i to layer i + 1 is characterized by the following relationship:

[formula]

Assume the communication session begins at time 1 and ends at time τ and has desired rate of transmission R; i.e., node S wishes to send message ω which is chosen randomly from a set [formula] of messages to node D at the end of the session. The communication protocol proceeds from layer to layer. Node Oi(j) transmits vectors [formula] to nodes in layer Oi + 1, and node Oi + 1(k) transmits signals to the nodes in next layer after receiving vectors [formula] At every time instant t, vector [formula] is some function of ω and [formula] is some function of [formula] There are two natural questions about this model: First, what is the capacity or maximum rate of information in this network? Second, among capacity-achieving schemes, how can one optimize the duration τ and the complexity of the relay functions used?

The first of these questions was initially addressed in [\cite=key-1] [\cite=key-2]. To study the capacity C of the network, we first define a cut Ω as a subset of the nodes V. A cut separates S from D if S∈Ω and [formula] The transfer function of the cut Ω, G(Ω), is defined as a block diagonal matrix with (M - 1)  ×  (M - 1) blocks. The ith diagonal block, Gi(Ω) is the submatrix of Gi consisting of the transfer functions from the transmitted vectors of the nodes in [formula] to the received vectors of the nodes in [formula] for [formula] and each off-diagonal block is an all-zero matrix. Avestimehr, Diggavi and Tse used a min-cut upper bound on the rate of transmissions [\cite=key-7] and a random coding argument to show

For any cut Ω, [formula] Furthermore, the capacity of network N as defined above is C  =   min ΩSDC(Ω).

The achievability argument in [\cite=key-1] [\cite=key-2] is based on a linear scheme in which source node S initially encodes the message ω as a vector in [formula] denoted by [formula]. Node S and relay node Oi(j) respectively generate transmitted signals by the linear transformations

[formula]

It is shown in [\cite=key-1] [\cite=key-2] that if the encoding matrices FS and Fi(j) are chosen randomly with a uniform distribution over the space of all matrices over the field [formula], if τ is sufficiently large, and if R  ≤  C, then the destination node D will, with probability approaching 1, receive τR linearly independent linear combinations of the message vector [formula] from which it will be able to decode message ω.

Since the complexity of the transmission scheme in [\cite=key-1] [\cite=key-2] is large and increases with τ, we seek a deterministic, low-complexity transmission scheme that is capacity-achieving and processes only one signal [formula] at a time for each i and j, i.e., τ = 1. We remark that [\cite=key-3] considered similar issues for transmissions over a binary field. We will discuss the approach of [\cite=key-3] in Section 1.2.

Our Results and Techniques

Our algorithm has two main steps. First we propose an algorithm to transmit signals from layer Oi, [formula] to layer Oi + 1 in an optimal way. In the second step we extend our algorithm to the full network and prove that it is capacity-achieving. Since our transmission scheme manipulates only one signal [formula] at a time for each i and j, we hereafter drop the time superscript.

We define a flow of the block matrix Gi as follows:

Let [formula] be a vector of non-negative integers that satisfies [formula] We say that matrix Gi supports flow [formula] if there exists a full rank [formula] submatrix [formula] of Gi such that [formula] is an intersection of [formula] columns of the jth column block of Gi, [formula] with [formula] rows of the kth row block of Gi, [formula]. (See Figure [\ref=fig:example].(a).) We further say that such a submatrix [formula] is a solution for flow [formula].

For the physical interpretation of flow, suppose matrix Gi supports flow [formula] Consider the subvector [formula] of [formula] and the subvector [formula] of [formula] which correspond to the transfer matrix [formula]. Furthermore, let [formula] and [formula] respectively denote the parts of these subvectors that belong to vector [formula] and [formula]. If the entries of [formula] which are not part of [formula] are set to zero, then [formula] will uniquely determine [formula] since [formula] is a full rank matrix. Hence [formula] units of information flow from the nodes in Oi to the nodes in Oi + 1 during a transmission. We next introduce the notion of the flow from O1 to OM supported by network N. For convenience we will consider a more general network N with an arbitrary number of nodes in the first and last layers as opposed to the single node each at the first and last layers of relay channel models.

Suppose non-negative integers [formula] and [formula] satisfy [formula]. We say that vector [formula] is a rate-R flow supported by network N if for every [formula] there exists non-negative integers [formula] such that vector [formula], [formula] is a rate-R flow supported by matrix Gj. (See Figure [\ref=fig:example].(b).)

Every flow for network N is determined by the submatrices [formula] and the corresponding row and column indices of Gi. Let us return to the case where N has a single node each in the first and last layers. Suppose that network N supports a rate-R flow [formula] Then given [formula] [formula] a simple coding scheme that achieves rate R can be defined as follows:

Given the length-R encoded vector [formula], node S generates vector [formula] by setting [formula] to the vector [formula] and by setting the other entries of [formula] to zero. The transformation at every relay node Oi(j) is similar: after receiving vector [formula], node Oi(j) extracts the subvector [formula] with length [formula] and sets [formula]. The remaining entries of [formula] are set to zero. Finally node D first decodes subvector [formula] from the received vector [formula] and then extracts the encoded message [formula]. Observe that for every i, [formula] and [formula] These imply that [formula] Since the matrices [formula] are nonsingular, the decoding operation is well defined.

Our main technical result in Section 2 is the following theorem providing the necessary and sufficient conditions for matrix Gi to support a flow [formula]:

For any subsets [formula] and [formula] define the block matrix Gi(W,U) as the intersection of the row blocks of Gi having indices in W with the column blocks of Gi having indices in U. Matrix Gi supports a flow [formula] if and only if for all [formula] and for all [formula]

[formula]

This combinatorial property of matrices is, to our knowledge, the first two-dimensional result of this type and may be of independent interest in the theory of matrices. Theorem [\ref=thm:matrix-transversal] holds for matrices with entries from an arbitrary field and is therefore more general than its application for this relay problem. We prove the necessity of Theorem [\ref=thm:matrix-transversal] by examining the relationships of the ranks of various submatrices of block matrix [formula].

Our sufficiency argument is more technical and involves a divide-and-conquer procedure and an inductive argument to prove the existence of [formula]. The basis of our inductive argument will be the Rado-Hall transversal theorem [\cite=key-5], which states the necessary and sufficient conditions for the existence of independent structures in a collection of subsets of elements of a matroid. In the special case of matrices we have:

(The Rado-Hall Theorem) Let H be a matrix with column blocks labeled [formula]. For [formula] let H(U) denote the submatrix of H which is formed by the column blocks with indices in U. Given non-negative integers [formula], there are [formula] linearly independent columns of H with exactly [formula] of the columns from [formula] [formula] if and only if for every U we have [formula]

In the study of matrices Theorem [\ref=thm:matrix-transversal] can be viewed as an extension of the Rado-Hall Theorem. The Rado-Hall Theorem has many variations for matroids with different constraints on the cardinalities of the independent sets [\cite=key-6]. However, the rank function of a matroid is, by definition, both submodular and nondecreasing. The columns of a matrix form a ground set for a matroid, and the rank function of a subset of columns is defined as the dimension of the subspace spanned by these columns; this is also true if the columns are replaced by the rows of the matrix. We next define a natural extension of the rank function on the union of all rows and columns of a matrix which is motivated by the cuts of a network. Let P and Q respectively denote the set of rows and columns of the matrix. Define the rank function of a subset [formula] where [formula] with P  ⊆  P and Q  ⊆  Q, to be the dimension of the spanning subspace of the submatrix which is formed by the intersection of the rows in P and the columns which are not in Q. In Lemma [\ref=lem:9] we study this rank function for the block matrices of network N and prove that it is submodular. In that discussion the nodes of the two consecutive layers of the network respectively represent the column and row blocks of a matrix. We comment that the rank function arising from the study of cuts in our model has an important difference from the rank function in earlier transversal theorems. Observe that since the rank of both sets [formula] and [formula] is zero, the rank function we introduce is not monotone. Korte and Lov�sz [\cite=key-24] initiated the study of a generalization of matroids known as greedoids with rank functions which are monotone but not necessarily submodular. They have also derived a transversal theory of greedoids similar to the Rado-Hall Theorem [\cite=key-24]. Theorem [\ref=thm:matrix-transversal] appears to be the first extension of the Rado-Hall Theorem in which the rank function is submodular but not monotone. This is interesting because monotonicity plays a central role in the proofs of the previous results.

In Section 3, we prove the following extension of Theorem [\ref=thm:matrix-transversal]:

A network N with capacity C supports flow [formula] if and only if R  ≤  C.

Edmonds and Giles [\cite=key-17] introduced a generalization of classical network flow known as submodular flow, where the classical flow conservation constraints are replaced by submodular flow constraints on certain subsets of nodes. We prove a submodularity property of the cut function in Lemma [\ref=lem:90], and it is possible to show that our notion of flow for network N is a special case of submodular flow. The Edmonds and Giles theory of submodular flow does not directly imply variations of the max-flow min-cut theorems. We therefore study our flow using an earlier result of Edmonds [\cite=key-19]. We prove in Section 3 that the maximum flow in our setting is a linear programming optimization over the intersection of two polymatroids. We apply a corollary of the polymatroid intersection theorem [\cite=key-19] to show that the maximum rate of a flow is the capacity C of the network and that the corresponding flow can be achieved by non-negative integer vectors [formula].

In the appendix, we demonstrate an algorithm to construct a capacity-achieving code for network N which is strongly polynomial time in the size of the graph and in the size of the matrices Gi. In first step of the analysis we show that:

Given matrix Gi and an achievable flow vector [formula] the submatrix [formula] can be computed in polynomial time.

We can in principle use the divide-and-conquer argument for the proof of Theorem [\ref=thm:matrix-transversal] to obtain a recursive algorithm for this problem, but since the analysis is difficult we take a different approach. We will demonstrate that testing the conditions of Theorem [\ref=thm:matrix-transversal] for matrix Gi and flow [formula] is equivalent to showing that a certain submodular function has a non-negative minimum. It is well known (see, e.g., [\cite=key-11] [\cite=key-18]) that there are polynomial-time algorithms to find the minimum of a submodular function. Our algorithm to construct [formula] checks which rows of Gi can be removed without violating the conditions of Theorem [\ref=thm:matrix-transversal] and then removes them one by one. The same procedure is next repeated for the columns. The final part of this step is to establish that the remaining matrix is a valid choice for [formula].

The second step establishes the following result.

The capacity C of a deterministic relay network N can be computed in polynomial time. Given the network flow vector [formula] with R  ≤  C, the flow vectors [formula] for every matrix Gi, [formula] can be computed in polynomial time.

We prove this theorem in the appendix by applying the algorithm in [\cite=key-12] for optimizing a linear function over the intersection of two polymatroids. Theorems [\ref=thm:alg-matrix] and [\ref=thm:alg-network] together imply a polynomial-time algorithm for finding a transmission scheme for network N.

Related Work

Earlier work [\cite=key-13], [\cite=key-14] obtained capacity results for a different type of deterministic relay network in which the nodes broadcast data but the signals are received without interference. The paper [\cite=key-3] considers the same problem we address here, but restricts [formula] to a binary field. The approach of [\cite=key-3] is based on a path augmentation argument similar to the Ford-Fulkerson algorithm (see, e.g., [\cite=key-22]) and involves a new network in which every node Oi(j) is replaced by several nodes with each corresponding to a different entry of vector [formula] or [formula] In the new network there is an edge between a pair of nodes if the analogous entry in the transfer function Gi(k,j) is equal to one. For an edge e, we respectively denote its tail and head by x(e) and y(e). Edges [formula] are said to be independent if the transfer function from the vector [formula] to the vector [formula] has full rank. The scheme in [\cite=key-3] finds C disjoint paths in the new network, where every cut that separates S from D intersects C independent edges of these paths. There does not appear to be a natural way to extend the approach of [\cite=key-3] to arbitrary finite fields. We use a different procedure to construct the full rank submatrices needed for our transmission scheme.

Proof of Theorem [\ref=thm:matrix-transversal]

At several steps of our proof we remove rows or columns from matrix Gi to find a suitable submatrix [formula] Unless otherwise stated, assume that each such intermediate submatrix T of Gi maintains the same partition of row blocks and column blocks as original matrix Gi. In other words, each row (column) of T consists of a subset of the entries of some row (column) of Gi, and the two rows (columns) have the same row (column) block index in their respective matrices. For [formula] and [formula], let the block submatrix T(W,U) denote the intersection of the row blocks of T having indices in W with the column blocks of T having indices in U. Notice that some row and/or column blocks of T may be empty.

Proof of Necessity

For [formula] and [formula], [formula] is a submatrix of Gi(W,U). Therefore, [formula] From the submodularity of the rank function we have:

[formula]

Since [formula] is a full rank square matrix all of its columns are independent and hence

[formula]

By the monotonicity of the rank function

[formula]

Since all of the rows of [formula] are independent we have

[formula]

The relations ([\ref=eq:nece1])-([\ref=eq:nece4]) imply the necessity of the condition

[formula]

Proof of Sufficiency

Assume throughout this subsection that the conditions of Theorem [\ref=thm:matrix-transversal] are satisfied. First suppose that mi + 1 = 1 and [formula]Then for every set [formula] the inequality ([\ref=eq:transversal-condition]) reduces to:

[formula]

Since the definition of vector [formula] implies [formula] it follows that [formula] By Theorem [\ref=thm:(Rado's-Theorem)], there exists a rank-[formula] submatrix [formula] of matrix Gi which consists a subset of [formula] columns, for [formula] from each column block [formula] Since [formula] [formula] has a submatrix [formula] consisting of [formula] independent rows. [formula] is a solution for flow [formula]

We can similarly argue the existence of a solution [formula] for flow [formula] when mi = 1. Next suppose [formula] and [formula] We will use induction and a divide-and-conquer procedure to prove the sufficiency result. For our inductive hypothesis we assume that Theorem [\ref=thm:matrix-transversal] is true for any block matrix Gi consisting of ni + 1  ×  ni blocks where ni  ≤  mi, ni + 1  ≤  mi + 1, and mi + 1  ×  mi  ≠  ni + 1  ×  ni.

Let [formula] and [formula]. We say that Gi(W,U) is a tight submatrix of Gi if the inequality ([\ref=eq:transversal-condition]) holds with equality for U and W.

Either Gi has a tight submatrix or Gi has a submatrix T for which for all [formula] and [formula],

[formula]

and T has a tight submatrix; i.e., ([\ref=eq:6A]) hold with equality for some [formula] and [formula] In the latter case we replace Gi with T for the rest of the proof of Theorem [\ref=thm:matrix-transversal].

By our previous argument, Gi has one or more tight submatrices. We call a tight submatrix Gi(W,U) a proper submatrix if it is not one of the following cases:

|U| = mi and |W| = 1, or

|U| = 1 and |W| = mi + 1.

For the rest of the proof of Theorem [\ref=thm:matrix-transversal] we need a proper submatrix. We have the following result:

Either (a) Gi has a proper submatrix or (b) it has a submatrix T which satisfies ([\ref=eq:6A]) for all [formula] and [formula] and T has a proper submatrix T(W,U). If case (b) applies then we replace Gi with the corresponding submatrix T for the rest of the proof of Theorem [\ref=thm:matrix-transversal].

Let P = Gi(W,U) be a proper submatrix of Gi. Next we reorder and relabel the row blocks and the column blocks of Gi such that [formula] It is straightforward to reverse the ordering and relabeling operation at the end of our argument. We label the four parts of matrix Gi as the following, where A,B, and/or L may possibly be empty matrices:

[formula]

We denote by GA the matrix [formula] We further consider a partition of GA into blocks as the following:

[formula]

Next consider the vector

[formula]

We verify that [formula] is a valid flow vector. By the tightness of matrix P we have:

[formula]

Therefore we have

[formula]

Matrix GA supports flow [formula]

Let [formula] be the submatrix of GA corresponding to a solution for flow [formula]; here Pt is a submatrix of P and At is a submatrix of A. We let [formula] where Pc is the submatrix of P consisting of the rows of P that are used for the construction of Pt; Pt is then a submatrix of Pc consisting of a subset of its columns. Notice that matrices Pt and Pc have a natural partition into ni + 1  ×  ni block matrices which is induced by the block structure of matrix P. Next let [formula] and partition GB into blocks as follows:

[formula]

Next we define the vector

[formula]

Since

[formula]

it follows that

[formula]

and [formula] is a valid flow vector. Furthermore we have:

Matrix GB supports flow [formula]

Let [formula] be the submatrix of GB corrsponding to a solution for flow [formula]; here Pct is a submatrix of Pc and Bt is a submatrix of B. We let [formula] where Pcr is the submatrix of Pc consisting of the columns of Pc that are used for the construction of Pct; Pct is then a submatrix of Pcr consisting of a subset of its rows. Finally, let Lt be the submatrix of L obtained by intersecting the set of columns with indices matching those of the columns of At with the set of rows with indices matching those of Bt. Observe that

[formula]

is a submatrix of Gi. Our final step is the following lemma:

Matrix [formula] as defined above is a solution for flow [formula] for matrix Gi.

To summarize the preceding argument, we have established the existence of a solution [formula] when mi = 1, when mi + 1 = 1, and when [formula] and [formula] Our proof of Theorem [\ref=thm:matrix-transversal] is complete.

Proof of Theorem [\ref=thm:Network_flow]

We prove a more general statement. Consider a network N with an arbitrary number of nodes in the first and last layers. For a rate-R flow vector [formula] we show that:

Network N supports rate-R flow [formula] if and only if for every cut Ω,

[formula]

Notice that for M = 2, Theorem [\ref=thm:extension] reduces to Theorem [\ref=thm:matrix-transversal]. Also if N has a single node each in the first and last layers, then [formula] and hence ([\ref=eq:extension-condition]) and Theorem [\ref=thm:channel-capacity] imply that for every cut Ω with S∈Ω and D∈, C(Ω)  ≥  C  ≥  R. Thus, Theorem [\ref=thm:extension] implies Theorem [\ref=thm:Network_flow].

Proof of Theorem [\ref=thm:extension]

We use induction on M. For M = 2, Theorem [\ref=thm:matrix-transversal] gives the result. For M > 2, choose [formula] Define networks NA and NB to respectively be the subnetworks of N with node set [formula] and [formula]. The next step of our argument is to show that the inductive hypothesis and ([\ref=eq:extension-condition]) imply the existence of non-negative integers [formula] such that [formula] and networks NA and NB support the rate-R flows

[formula]

This step would establish that N supports flow [formula] since submatrix [formula] can be obtained from the solution to NA for [formula] and from the solution to NB for [formula]

By the inductive hypothesis if the desired [formula] exist then they are non-negative integers which form a feasible solution to the following system of linear constraints:

[formula]

For any set T  ⊆  OK define:

[formula]

Then the system ([\ref=eq:17]) of linear constraints is equivalent to

[formula]

The functions fA(T) and fB(T) are I) submodular, II) nondecreasing, and satisfy III) [formula] and [formula] Notice that function f is submodular if for every T1 and T2:

[formula]

and is nondecreasing if for every T1  ⊆  T2, f(T1)  ≤  f(T2).

Referring to terminology in polyhedral optimizations (see [\cite=key-9]) a polytope P is integer if and only if each vertex of P has integral coordinates. If a polyhedron [formula] in n dimensions is integer, then any linear programming problem [formula] with a finite solution must have a solution with integral coordinates.

Let f be a submodular function on some set V with v elements. The polymatroid associated with f is:

[formula]

where we define [formula] and [formula]

([\cite=key-19]) Let f1 and f2 be nondecreasing submodular set functions with integer values on V with [formula] Then [formula] is integer and for each U  ⊆  V,

[formula]

For the submodular set functions fA and fB, define the polymatroids:

[formula]

For ([\ref=eq:lp]) to have a non-negative and integral solution, [formula] is clearly necessary. To show sufficiency suppose [formula] achieves [formula]. Then for every choice of [formula] [formula] and so we choose [formula] such that [formula] Lemma [\ref=lem:7] and Theorem [\ref=thm:12] imply that:

[formula]

and the optimum can be achieved by a non-negative integer solution. Theorem [\ref=thm:extension] follows from ([\ref=eq:35]) and the following lemma:

[formula] if and only if for every cut Ω in N,

[formula]

Appendix

Proof of Theorem [\ref=thm:alg-matrix]:

Suppose that matrix Gi and flow [formula] satisfy the conditions of Theorem [\ref=thm:matrix-transversal]. We first prove that Algorithm [\ref=alg:Submatrix] will find a solution [formula] for flow [formula], and we later discuss the complexity of the algorithm. We begin by showing that after exiting Step 1, matrix T(0)c has exactly [formula] rows. By definition, [formula] Suppose that T(0)c has more than R rows. By Theorem [\ref=thm:matrix-transversal], T(0)c has a submatrix [formula] which is a solution for flow [formula] and hence [formula] has R rows. Therefore all rows that belong to T(0)c but not to [formula] can be removed and the resulting matrix T satisfies [formula] for all [formula] and [formula]. This contradicts the assumption that T(0)c has no more rows that can be removed. We can similarly argue that the matrix [formula] output at the end of Step 2 has R columns. Since [formula] is an R  ×  R matrix for which [formula] for all [formula] and [formula], [formula] is a solution for flow [formula]

To find the complexity of Algorithm [\ref=alg:Submatrix], we argue that at Step 1 or Step 2 a removable row or column can be found respectively by testing at most R + 1 rows or columns. For example, in Step 1, any row which is not part of T(0)c can be removed without violating any of the stated rank conditions. The pigeonhole principle implies that at most R + 1 rows need to be checked to find a row which is not part of T(0)c. Define [formula] for every cut [formula]. Then the conditions of Theorem [\ref=thm:matrix-transversal] are equivalent to the requirement that [formula] for every cut [formula]. Lemma [\ref=lem:9] in the appendix proves the submodularity of (Gi(Ω)). By Lemma [\ref=lem:91], which appears later in the appendix, the function [formula] is also a submodular function of Ω. Thus α(Ω), which is the sum of two submodular functions, is also submodular. We next verify whether or not the minimum of α(Ω) is non-negative. It is known (see, e.g., [\cite=key-11] and [\cite=key-18]) that the minimum value of a submodular function can be found in strongly polynomial time. Here we use the algorithm by Schrijver [\cite=key-11] that finds the minimum of a submodular function f on the power set of set Ef, in time O(|Ef|6tf), where tf is the time for evaluating function f for some subset of Ef. In our problem f is α which is defined on [formula] If we suppose that |Oi|  ≤  m, then [formula]. Every evaluation of α requires calculating the rank of submatrix Gi(Ω) with size at most the size of Gi. Suppose that Gi has dimension at most h0  ×  h0. The rank of Gi(Ω) can then be evaluated, for instance, by Gaussian elimination in [formula] time [\cite=key-3]. The complexity of minimizing α(Ω) is therefore

[formula]

The number of iterations of Step 1 of Algorithm [\ref=alg:Submatrix] is at most the number of rows, h0. Likewise there are at most h0 iterations of Step 2. Since each iteration requires at most R + 1 minimization of the submodular function α, the total complexity of the algorithm is at most

[formula]

As we run Algorithm [\ref=alg:Submatrix] for Gi, [formula] the complexity of this part will be [formula]

Proof of Theorem [\ref=thm:alg-network]:

First we prove that the capacity C of the network N can be computed in polynomial time. For any cut Ω  ⊆  V, [formula] By Lemma [\ref=lem:9], (Gi(Ω)) is a submodular function of Ω. Thus C(Ω) is a submodular function of Ω. Next suppose that Ω1 and Ω2 are two cuts that separate S from D. Then [formula] and [formula] separate S from D. Therefore C(Ω) is a submodular function over all cuts Ω  ⊆  V that separate S from D. To evaluate C  =   min C(Ω) over all cuts that separate S from D we use a submodular minimization algorithm [\cite=key-11] with running time of O(|EC|6tC). Here [formula] is the ground set of C(Ω), and |EC|  ≤  m(M - 2), where m is the maximum number of nodes in each layer. tC denotes the time for the evaluation of [formula] for a given Ω, and it involves M - 1 rank evaluations. Recall that each matrix Gi has size at most h0  ×  h0. Then Gi(Ω) has size at most h0  ×  h0. Therefore using Gaussian elimination for rank evaluation, we have tC = O(Mh30). Therefore, the total complexity of computing the capacity C is O(m6M7h30).

Next we discuss the complexity of the evaluation of the vectors [formula] As we discussed in the proof of Theorem [\ref=thm:extension], in order to determine [formula] for a fixed K, we need to solve the optimization problem ([\ref=eq:35]) for the vector [formula]. This is an integer programming problem over the intersection of two polymatroids. Let [formula] Then |Ex|  ≤  m. Let tx be the time needed for one evaluation of functions fA(T) and fB(T) as defined in Section 3. By applying the result of [\cite=key-9], it follows that [formula] can be found in time O(|Ex|6tx) if we use the algorithm of [\cite=key-11] for minimizing an integer programming problem over a polymatroid. Recall that

[formula]

Define for cut ΩA in NA with [formula], [formula]. By Lemmas [\ref=lem:90] and [\ref=lem:91] the functions C(Ω) and [formula] are submodular over the set of all cuts in NA. Next, if for two cuts Ω1 and Ω2 we have [formula] and [formula] then De Morgan's laws imply that [formula] and [formula]. Thus φT(ΩA) is a submodular function over all cuts ΩA with [formula] Hence the evaluation of fA(T) involves the minimization of a submodular function. The complexity of such a minimization over a set EφT is O(|EφT|6tφT). Since the nodes in [formula] are already fixed, the set EφT is the set of all nodes in [formula] Therefore |EφT|  ≤  m(K - 1). tφT is the time for an evaluation of [formula] for a given cut ΩA. Since [formula], there are K - 1 rank evaluations. Each rank function can be evaluated in time at most O(h30) using Gaussian elimination. Thus tφT = O(Kh30) and fA(T) can be evaluated in time at most

[formula]

Similarly, fB(T) can be evaluated in [formula] The total time for evaluating fA and fB is therefore [formula] Therefore evaluating vector [formula] needs time

[formula]

The function above is maximized when K = 0 and the time complexity is [formula] Since the vector [formula] needs to be computed for every layer [formula], we find that the total complexity of the second stage is [formula] Thus the total complexity of constructing the transmission scheme is

[formula]

Proof of Lemma [\ref=lem:tight-submatrix]:

Let T(0) = Gi and for [formula] define T(t) to be a submatrix of Gi obtained by removing an arbitrary row from T(t - 1). Observe that for every [formula] [formula] and [formula]

[formula]

Suppose that ([\ref=eq:transversal-condition]) is satisfied with strict inequality for all [formula] and [formula] Then by ([\ref=eq:6B]), for all [formula] and [formula]

[formula]

If T(1) has a tight submatrix we are done. Otherwise, let T(λ) denote the empty submatrix of Gi. Observe that

[formula]

and so the rows of Gi cannot be removed indefinitely without violating at least one rank condition. Therefore by ([\ref=eq:6B]) there must be some t < λ such that T = T(t) satisfies ([\ref=eq:6A]) for all Û and Ŵ and T has a tight submatrix.

Proof of Lemma [\ref=lem:proper-submatrix]:

Consider a tight submatrix Gi(W,U) of Gi that is not proper. Suppose, without loss of generality, that Gi(W,U) is of the form [formula] Remove rows from Gi arbitrarily among the row blocks with indices in [formula], until no further rows can be removed from the resulting submatrix T of Gi without violating [formula] for some [formula] and [formula]. Notice that this process terminates before we remove all rows from blocks with indices in [formula] for if T is a matrix with rows only from row block 1, then [formula] Next replace Gi with T for the rest of our argument. Since no row can be removed from Gi among the row blocks with indices in [formula] without violating a rank condition, there exists a tight submatrix Q = Gi(W',U') of Gi which has a non-empty intersection with the row blocks of Gi with indices in [formula] Now consider some possibilities for Q. If Q is a proper submatrix, then we are done. If Q is not a proper submatrix consider two cases:

|W'| = 1 and |U'| = mi. Without loss of generality suppose that [formula] Since P and Q are tight, ([\ref=eq:transversal-condition]) implies [formula] and [formula] Next consider the submatrix of Gi given by

[formula]

By ([\ref=eq:transversal-condition]), we have [formula] However, by considering the rows of E,P, and Q, we see that, (E)  ≤  (P) + (Q), and therefore [formula]. Thus, [formula]. E is therefore both a tight and a proper submatrix of Gi.

|W'| = mi + 1 and |U'| = 1. Without loss of generality suppose that [formula]. We will next consider a collection of subcases. Suppose first that other than P and Q there exists another tight submatrix K. If K is proper then there is nothing further to prove. If K is not proper then without loss of generality we can assume that K is either of the form [formula] or [formula] If [formula], then the matrix [formula] is proper by our argument in the previous case. Likewise, if [formula] then the matrix [formula] is proper. Suppose next that P and Q are the only tight submatrices of Gi. We already have assumed that no other row from [formula] can be removed without violating some rank condition ([\ref=eq:transversal-condition]). Since P and Q are the only tight submatrices of Gi, removing one row from [formula] will cause the violation of a rank condition only for the tight submatrix [formula] If a row in [formula] was a linear combination of some other rows in Q it could be removed without violating any rank condition for submatrix Q. Since Q is a tight submatrix and we constructed T so that no further rows could be removed from it without violating a rank condition, this is impossible. Hence every row in [formula] is independent from all other rows in Q. Thus

[formula]

where [formula] is the number of rows of the jth row block of Gi. By inequality ([\ref=eq:transversal-condition]) for [formula] and [formula] we have [formula] for every [formula] Furthermore, the rank of a matrix is at most the number of rows of the matrix, and hence [formula]. Consequently [formula] This together with ([\ref=eq:5]) and the fact that [formula] imply that

[formula]

However, by evaluating inequality ([\ref=eq:transversal-condition]) for [formula] and [formula] we obtain

[formula]

([\ref=eq:6]) and ([\ref=eq:66]) imply that

[formula]

Hence Gi(1,1) is tight, and this contradicts the assumption that P and Q are the only tight submatrices of Gi.

Proof of Lemma [\ref=lem:3]:

Let p be the index of the first column block of GA and let [formula] respectively be the indices of the other column blocks. Furthermore let [formula] be the indices of the row blocks of GA. Select any two subsets [formula] and [formula] We consider two cases:

If p∈U: consider the submatrix GA(W,U). This submatrix is the same as Gi(W,U') where [formula] Since Gi(W,U') satisfies the condition of inequality ([\ref=eq:transversal-condition]) for vector [formula] we have:

[formula]

If we expand the right hand side of ([\ref=eq:7]), we have:

[formula]

where ([\ref=eq:17D]) follows by ([\ref=eq:rank(P)]). The last expression is the condition of inequality ([\ref=eq:transversal-condition]) for GA(W,U) when GA supports flow [formula]

If p∉U: define [formula] so that we can apply ([\ref=eq:17D]):

[formula]

Observe that

[formula]

By ([\ref=eq:8]) and ([\ref=eq:18C]),

[formula]

which is the rank condition ([\ref=eq:transversal-condition]) for GA(W,U) when GA supports flow [formula]

The block matrix GA has block dimension ni + 1  ×  (mi - ni + 1). Therefore, GA has strictly fewer blocks than Gi unless ni + 1 = mi + 1 and mi - ni + 1 = mi or ni = 1. This is impossible since P is a proper submatrix of Gi. It follows from our induction hypothesis matrix GA supports flow [formula]

Proof of Lemma [\ref=lem:F_B_flow]:

Let the indices for the row and column blocks of GB respectively be [formula] and [formula] Define [formula]. Observe that matrix G'B supports flow [formula] since the only change needed to the proof of Lemma [\ref=lem:3] is to take the transposition of all matrices. Next, since [formula] is a solution for the flow [formula] then by definition of flow the matrix Pt has full column rank and has (P) columns. Therefore

[formula]

Since Pc is a submatrix of P and Pt is a submatrix of Pc, we have

[formula]

and therefore

[formula]

This implies that the rows that are in P but not in Pc are linear combination of the rows of Pc. It follows that for every [formula] the rows that are in [formula] but not in [formula] are linear combination of the rows of [formula]. Hence

[formula]

This implies that for every [formula] if p∈W then [formula] and

[formula]

If p∉W, GB(W,U) does not depend on Pc and (GB(W,U)) = (G'B(W,U)). Therefore in general for every W and U, replacing Pc with P in GB will not change any rank function and we can still use the result of Lemma [\ref=lem:3].

Proof of Lemma [\ref=lem:F_i_flow]:

We have to verify two properties of [formula]. The first is that every row block [formula] of [formula] has [formula] rows and every column block [formula] has [formula] columns. The second property is that [formula] By our construction, the number of columns in column blocks [formula] and the number of rows in row blocks [formula] are respectively determined by [formula] Since

[formula]

there are the right number of rows and columns in these cases. Furthermore, the number of columns in column blocks [formula] and the number of rows in row blocks [formula] are respectively determined by [formula] Since

[formula]

there are the right number of columns and rows in these cases as well. Hence every row block [formula] of [formula] has [formula] rows and every column block [formula] has [formula] columns.

For the second property, observe that since [formula] is a solution of flow [formula] for GB, then by the definition of the solution of a flow the matrix Pct has full row rank and has (P) rows. Therefore

[formula]

Since Pct is a submatrix of Pcr consisting of a subset of its rows, (Pcr)  ≥  (Pct). Because Pcr is a submatrix of P, (Pcr)  ≤  (P). Thus

[formula]

and so the rows that are in Pcr are linear combinations of the rows in Pct. Next since the rows of Bt are also rows of the full-rank matrix [formula] it follows that all rows of Bt are linearly independent and are independent from all other rows of [formula] and consequently from all other rows in [formula] Therefore, all rows in [formula] are linearly independent and are independent from all other rows in [formula] Therefore the two relationships follow:

[formula]

[formula]

Notice that by ([\ref=eq:28A]) and ([\ref=eq:28B]) (Pcr) = (Pc). Since Pcr is a submatrix of Pc consisting of a subset of its columns, the columns of Pc are linear combinations of the columns of Pcr. Therefore

[formula]

By ([\ref=eq:28C]) and ([\ref=eq:28A]), (Pc) = (Pt). Recall that Pt is a submatrix of Pc consisting of a subset of its columns. Therefore the columns of Pc are linear combinations of the columns of Pt. Hence,

[formula]

Since [formula] is a solution for flow [formula] it follows that [formula] Thus, ([\ref=eq:10A]) and ([\ref=eq:10B]) imply

[formula]

From ([\ref=eq:9]), ([\ref=eq:10]), and ([\ref=eq:10A]) we conclude that

[formula]

Proof of Lemma [\ref=lem:7]:

Here we only prove the submodularity of function fA(T) as the proof for fB(T) is similar. Consider layers Oi and Oi + 1 and transfer function Gi. Recall that Gi(Ω) is the transfer function from the nodes in Ω to the nodes in [formula] We first prove that:

(Gi(Ω)) is a submodular function over cuts [formula]; i.e., for every two such cuts Ω1 and Ω2:

[formula]

We point out that the preceding result was first proved in [\cite=key-1] in order to study the time-expanded representation of a network which is not layered. [\cite=key-1] established Lemma [\ref=lem:9] through an information theoretic argument involving the submodularity of the entropy function. We offer a new and combinatorial proof of Lemma [\ref=lem:9].

Consider matrix Gi in Figure [\ref=fig:1]-(a). Suppose that we have reordered the row blocks of Gi and the column blocks of Gi such that the blocks corresponding to the transfer matrices of Gi(Ω1) and Gi(Ω2) appear as in Figure [\ref=fig:1]-(a). We have depicted and labeled the different parts of the transfer matrices [formula] and [formula] in Figure [\ref=fig:1]-(b). Therefore we have:

[formula]

We first prove that:

[formula]

Let p be the maximum number of rows [formula] in A2 which are independent in [formula] and q be the maximum number of rows [formula] in Gi(Ω1) but not in [formula] which are independent in [formula] We have:

[formula]

Let [formula] denote the rows in Gi(Ω1) which respectively end in the rows [formula] of A2. Then these rows are clearly independent in [formula] and therefore q  ≥  p. By ([\ref=eq:22A]) and ([\ref=eq:22B]),

[formula]

which implies ([\ref=eq:22]). A similar argument for Gi(Ω2) implies that:

[formula]

By adding together inequalities ([\ref=eq:22]) and ([\ref=eq:23]) we find that

[formula]

If we use the submodularity of the rank function of a matrix [\cite=key-5] we deduce that if W1 and W2 are the indices of rows (columns) of some matrix and (W) is the number of independent rows (columns) among those with indices in W, then:

[formula]

Applying ([\ref=eq:25]) to the columns of matrix [formula] and to the rows of matrix [formula] we find that:

[formula]

Lemma [\ref=lem:9] follows from ([\ref=eq:24]), ([\ref=eq:26]), and ([\ref=eq:27]).

Next we extend Lemma [\ref=lem:9] to a multilayer network NA:

In the network NA, C(Ω) is a submodular function over cuts [formula].

We decompose Ω into the subsets [formula] where [formula] defines a cut of the subnetwork of NA with set of nodes [formula] We have

[formula]

If two cuts Ω and Ω' are respectively decomposed into [formula] and [formula], then [formula] and [formula] will be respectively decomposed into [formula] and [formula]. By Lemma [\ref=lem:9], [formula] is submodular. Therefore

[formula]

Since the sum of submodular functions is submodular, the final result follows.

We next prove the following useful lemma:

For any function f defined on the set E and any given set V  ⊆  E, the function g on the power set of E defined as [formula] is submodular.

By definition,

[formula]

We next prove that fA is submodular.

Suppose T1,T2  ⊆  OK, and let A1 and A2 be the two cuts in [formula] such that

[formula]

Consider [formula] and [formula] By De Morgan's laws, [formula] and [formula] By ([\ref=eq:f_A]) we have

[formula]

By the submodularity of C(Ω) we have

[formula]

Furthermore

[formula]

By ([\ref=eq:demorgan1])-([\ref=eq:set-theory]), we have

[formula]

We prove the result for fA and it is straightforward to modify it for fB. It suffices to prove that for every T  ⊆  OK and every OK(i)∉T,

[formula]

Suppose that for T and OK(i)∉T, cut A in NA achieves [formula] We have

[formula]

Next consider the cut [formula] Notice that [formula] Therefore

[formula]

Observe that for every j  ≤  K - 2, Gj(A) = Gj(A'). Furthermore GK - 1(A) has the same row blocks as GK - 1(A') and an additional row block corresponding to the transfer function from the nodes in [formula] to [formula] Therefore C(A)  ≥  C(A'). Finally, [formula], and hence

[formula]

([\ref=eq:inc1]), ([\ref=eq:inc2]), and ([\ref=eq:inc3]) imply that [formula]

Since [formula] and [formula], fA and fB are non-negative functions. Observe that by choosing cut [formula] for network NA and cut [formula] for network NB, we find that [formula] [formula] and

[formula]

Proof of Lemma [\ref=lem:final-lemma]:

Suppose that T0 achieves [formula] and cuts ΩA and ΩB respectively achieve fA(T0) and [formula] in NA and NB. Then

[formula]

Let [formula] be a cut in network N. Since [formula] it follows that Gi(Ω) = Gi(ΩA) for [formula] and Gi(Ω) = Gi(ΩB) for [formula] Thus we have

[formula]

From ([\ref=eq:A]) and ([\ref=eq:B]) we have

[formula]

Since [formula] and [formula] ([\ref=eq:aboce]) and ([\ref=eq:necessity]) together imply [formula], as desired.

To prove the converse, consider a cut Ω in network N and partition it into two cuts ΩA and ΩB in networks NA and NB respectively. Let [formula] Then by definition

[formula]

Therefore

[formula]

If we substitute C(ΩA) + C(ΩB) = C(Ω) and [formula] and [formula] into the preceding expression, we obtain

[formula]

which is the final result.