Meadow Enriched ACP Process Algebras

Introduction

In many formalisms proposed for the description and analysis of processes in which data are involved, algebraic specifications of the data types concerned have to be given over and over again. This is also the case with the principal -based formalisms proposed for the description and analysis of processes in which data are involved, to wit μCRL [\cite=GP94a] [\cite=GP95a] and PSF [\cite=MV90a]. There is a mismatch between the process specification part and the data specification part of these formalisms. Firstly, there is a choice of one built-in type of processes, whereas there is a choice of all types of data that can be specified algebraically. Secondly, the semantics of the data specification part is its initial algebra in the case of PSF and its class of minimal Boolean preserving algebras in the case of μCRL, whereas the semantics of the process specification part is a model based on transition systems and bisimulation equivalence. Sticking to this mismatch, no stable axiomatizations in the style of  has emerged for process algebras that have to do with processes in which data is involved.

Our objective is to obtain a stable axiomatization in the style of  for process algebras that have to do with processes in which data is involved. To achieve this objective, we first introduce the notion of an  process algebra and then the notion of a meadow enriched  process algebra.  process algebras are essentially models of the axiom system . Meadow enriched  process algebras are data enriched  process algebras in which the mathematical structure for data is a meadow. Meadows are defined for the first time in [\cite=BT07a]. The prime example of meadows is the rational number field with the multiplicative inverse operation made total by imposing that the multiplicative inverse of zero is zero. Although the notion of a meadow enriched  process algebra is a simple generalization of the notion of an  process algebra, it is an interesting one: there is a multitude of finite and infinite meadows and meadows obviate the need for Boolean values and operations on data that yield Boolean values to deal with conditions on data.

In the work on , the emphasis has always been on axiom systems. In this paper, we put the emphasis on algebras. That is,  process algebras are looked upon in the same way as groups, rings, fields, etc. are looked upon in universal algebra (see e.g. [\cite=BS81a]). The set of equations that are taken to characterize  process algebras is a revision of the axiom system . The revision is primarily a matter of streamlining. However, it also involves a minor generalization that allows for the generalization to meadow enriched  process algebras to proceed smoothly.

This paper is organized as follows. First, we give a brief summary of meadows (Section [\ref=sect-meadows]). Next, we introduce the notion of an  process algebra (Section [\ref=sect-ACP-process-alg]) and the notion of an meadow enriched  process algebra (Section [\ref=sect-MD-ACP-process-alg]). Finally, we make some concluding remarks (Section [\ref=sect-conclusions]).

Meadows

In the data enriched  process algebras introduced in this paper, the mathematical structure for data is a meadow. A meadow is a field with the multiplicative inverse operation made total by imposing that the multiplicative inverse of zero is zero. Meadows are defined for the first time in [\cite=BT07a] and are investigated in e.g. [\cite=BHT09a] [\cite=BP08a] [\cite=BR07a]. In this section, we give a brief summary of meadows.

The signature of meadows is the same as the signature of fields. It is a one-sorted signature. We make the single sort explicit because we will extend this signature to a two-sorted signature in Section [\ref=sect-MD-ACP-process-alg]. The signature of meadows consists of the sort [formula] of quantities and the following constants and operators:

the constants [formula] and [formula];

the binary addition operator [formula];

the binary multiplication operator [formula];

the unary additive inverse operator [formula];

the unary multiplicative inverse operator [formula].

We assume that there is a countably infinite set [formula] of variables, which contains u, v and w, with and without subscripts. Terms are build as usual. We use infix notation for the binary operators [formula] and [formula], prefix notation for the unary operator [formula], and postfix notation for the unary operator [formula]. We use the usual precedence convention to reduce the need for parentheses. We introduce subtraction and division as abbreviations: p  -  q abbreviates p  +  ( - q) and p  /  q abbreviates [formula]. We freely use the numerals [formula] .

The constants and operators from the signature of meadows are adopted from rational arithmetic, which gives an appropriate intuition about these constants and operators.

A meadow is an algebra with the signature of meadows that satisfies the equations given in Table [\ref=eqns-meadow]. Thus, a meadow is a commutative ring with identity equipped with a multiplicative inverse operation [formula] satisfying the reflexivity equation [formula] and the restricted inverse equation [formula]. From the equations given in Table [\ref=eqns-meadow], the equation [formula] is derivable.

A non-trivial meadow is a meadow that satisfies the separation axiom A cancellation meadow is a meadow that satisfies the cancellation axiom or equivalently, the general inverse law In [\cite=BT07a], cancellation meadows are called zero-totalized fields. An important property of cancellation meadows is the following: 0  /  0  =  0, whereas u  /  u  =  1 for u  ≠  0.

Process Algebras

In this section, we introduce the notion of an  process algebra. This notion originates from the models of the axiom system , which was first presented in [\cite=BK84b]. A comprehensive introduction to  can be found in [\cite=BW90] [\cite=Fok00].

It is assumed that a fixed but arbitrary finite set [formula] of atomic action names, with [formula], has been given.

The signature of  process algebras is a one-sorted signature. We make the single sort explicit because we will extend this signature to a two-sorted signature in Section [\ref=sect-MD-ACP-process-alg]. The signature of  process algebras consists of the sort [formula] of processes and the following constants, operators, and predicate symbols:

the deadlock constant [formula];

for each [formula], the atomic action constant [formula];

the binary alternative composition operator [formula];

the binary sequential composition operator [formula];

the binary parallel composition operator [formula];

the binary left merge operator [formula];

the binary communication merge operator [formula];

for each [formula], the unary encapsulation operator [formula];

the unary atomic action predicate symbol [formula].

We assume that there is a countably infinite set [formula] of variables of sort [formula], which contains x, y and z, with and without subscripts. Terms are built as usual. We use infix notation for the binary operators. We use the following precedence conventions to reduce the need for parentheses: the operator [formula] binds weaker than all other binary operators and the operator [formula] binds stronger than all other binary operators. We write [formula], where [formula] and [formula] are terms of sort [formula], for [formula]. The convention is that [formula] stands for [formula] if [formula].

Let P and Q be closed terms of sort [formula]. Intuitively, the constants and operators introduced above can be explained as follows:

[formula] can neither perform an atomic action nor terminate successfully;

e first performs atomic action e and then terminates successfully;

[formula] behaves either as P or as Q, but not both;

[formula] first behaves as P and on successful termination of P it next behaves as Q;

[formula] behaves as the process that proceeds with P and Q in parallel;

[formula] behaves the same as [formula], except that it starts with performing an atomic action of P;

[formula] behaves the same as [formula], except that it starts with performing an atomic action of P and an atomic action of Q synchronously;

[formula] behaves the same as P, except that atomic actions from H are blocked;

[formula] holds if P is an atomic action.

The predicate [formula] is a means to distinguish atomic actions from other processes. An alternate way to accomplish this is to have a subsort [formula] of the sort [formula]. We have not chosen this alternate way because it complicates matters considerably. Moreover, we prefer to keep close to elementary algebraic specification (see e.g. [\cite=BT06a]). By the notational convention introduced below, we seldom have to use the predicate [formula] explicitly.

In equations between terms of sort [formula], we will use a notational convention which requires the following assumption: there is a countably infinite set [formula] that contains a, b and c, with and without subscripts, but does not contain x, y and z, with and without subscripts. Let φ be an equation between terms of sort [formula], and let [formula] be the set of all variables from [formula] that occur in φ. Then we write φ for [formula], where φ' is φ with, for all i∈[1,n], all occurrences of ai replaced by xi, and [formula] are variables from [formula] that do not occur in φ.

An  process algebra is an algebra with the signature of  process algebras that satisfies the formulas given in Table [\ref=eqns-ACP]. Three equations in this table are actually schemas of equations: e is a syntactic variable which stands for an arbitrary constant of sort [formula] different from [formula]. A side condition is added to two schemas to restrict the constants for which the syntactic variable stands. The number of proper equations is still finite because there exists only a finite number of constants of sort [formula].

Because the notational convention introduced above is used, the four equations in Table [\ref=eqns-ACP] that are actually conditional equations look the same as their counterpart in the axiom system . It happens that these conditional equations allow for the generalization to meadow enriched  process algebras to proceed smoothly. Apart from this, the set of formulas given in Table [\ref=eqns-ACP] differs from the axiom system  on three points. Firstly, the equations [formula], [formula], and [formula] have been added. In the axiom system , all closed substitution instances of these equations are derivable. Secondly, the equations [formula] and [formula] have been removed. These equations can be derived using the added equation [formula]. Thirdly, the formulas [formula] and [formula] have been added. They express that the processes denoted by constants of sort [formula] are atomic actions and that the processes that result from the communication merge of two atomic actions are atomic actions. This does not exclude that there are additional atomic actions, which is impossible in the case of .

Not all processes in a  process algebra have to be interpretations of closed terms, even if all atomic actions are interpretations of closed terms. The processes concerned may be solutions of sets of recursion equations. It is customary to restrict the attention to  process algebras satisfying additional axioms by which sets of recursion equations that fulfil a guardedness condition have unique solutions. For an comprehensive treatment of this issue, the reader is referred to [\cite=BW90].

Meadow Enriched  Process Algebras

In this section, we introduce the notion of an meadow enriched  process algebra. This notion is a simple generalization of the notion of an  process algebra introduced in Section [\ref=sect-ACP-process-alg] to processes in which data are involved. The elements of a meadow are taken as data.

The signature of meadow enriched  process algebras is a two-sorted signature. It consists of the sorts, constants and operators from the signatures of  process algebras and meadows and in addition the following operators:

for each [formula] and [formula], the n-ary data handling atomic action operator [formula];

the binary guarded command operator [formula].

We take the variables in [formula] for the variables of sort [formula]. We assume that the sets [formula] and [formula] are disjunct. Terms are built as usual for a many-sorted signature (see e.g. [\cite=ST99a] [\cite=Wir90a]). We use the same notational conventions as before. In addition, we use infix notation for the binary operator [formula].

Let [formula] and p be closed terms of sort [formula] and P be a closed term of sort [formula]. Intuitively, the additional operators can be explained as follows:

[formula] first performs data handling atomic action [formula] and then terminates successfully;

[formula] behaves as the process P under the condition that p  =  0 holds.

The different guarded command operators that have been proposed before in the setting of  have one thing in common: their first operand is considered to stand for an element of the domain of a Boolean algebra (see e.g. [\cite=BM05a]). In contrast with those guarded command operators, the first operand of the guarded command operator introduced here is considered to stand for an element of the domain of a meadow.

A meadow enriched  process algebra is an algebra with the signature of meadow enriched  process algebras that satisfies the formulas given in Tables [\ref=eqns-ACP] and [\ref=eqns-ACPmd]. Like in Table [\ref=eqns-ACP], some formulas in Table [\ref=eqns-ACPmd] are actually schemas of formulas: e, e' and e'' are syntactic variables which stand for arbitrary constants of sort [formula] different from [formula] and, in addition, n and m stand for arbitrary natural numbers.

For meadow enriched  process algebras that satisfy the cancellation axiom, the first five equations concerning the guarded command operator can easily be understood by taking the view that 0 and 1 represent the Boolean values [formula] and [formula], respectively. In that case, we have that

p / p models the test that yields [formula] if p  =  0 and [formula] otherwise;

if both p and q are equal to 0 or 1, then 1  -  p models [formula], [formula] models [formula], and consequently [formula] models [formula].

From this view, the equations given in the upper half of Table [\ref=eqns-ACPmd] differ from the axioms for the most general kind of guarded command operator that has been proposed in the setting of  (see e.g. [\cite=BM05a]) on two points only. Firstly, the equation [formula] has been added. This equation formalizes the informal explanation of the guarded command given above. Secondly, the equation [formula] has been removed. This equation can be derived using the equation [formula] from Table [\ref=eqns-ACP].

The equations in Table [\ref=eqns-ACPmd] concerning the communication merge of data handling atomic actions formalize the intuition that two data handling atomic actions [formula] and [formula] cannot be performed synchronously if n  ≠  m or p1  ≠  q1 or [formula] or pn  ≠  qn. The equations concerning the encapsulation of data handling atomic actions formalize the way in which it is dealt with in μCRL and PSF. The formula concerning the atomic action predicate simply expresses that data handling atomic actions are also atomic actions.

Conclusions

We have introduced the notion of an  process algebra. The set of equations that have been taken to characterize  process algebras is a revision of the axiom system . We consider this revision worth mentioning of itself. We have also introduced the notion of a meadow enriched  process algebra. This notion is a simple generalization of the notion of an  process algebra to processes in which data are involved, the mathematical structure of data being a meadow. The primary mathematical structure for calculations is unquestionably a field, and a meadow differs from a field only in that the multiplicative inverse operation is made total by imposing that the multiplicative inverse of zero is zero. Therefore, we consider a combination of  process algebras and meadows like the one made in this paper, a combination with potentially many applications.