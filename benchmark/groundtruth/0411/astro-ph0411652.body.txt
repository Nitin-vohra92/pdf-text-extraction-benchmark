A multi-dimensional, adiabatic hydrodynamics code for studying tidal excitation

and Yasser Rathore2

1 Institute for Theory and Computation, Harvard-Smithsonian Center for Astrophysics, Cambridge, MA 02138, USA 2 Theoretical Astrophysics, Caltech 130-33, Pasadena, CA 91125, USA

Introduction

White dwarfs (WDs) are known to be common endpoints of stellar evolution. A significant amount of evidence suggests that both stellar mass black holes (< 102 M[formula] ) and neutron stars are also relatively common. More recently, both theoretical [\citep=Mada-Rees:01] and observational [\citep=Colb-Ptak:02] [\citep=Gers_etal:02] studies have implied the existence of intermediate mass black holes (102-105M[formula] ). As a result, it appears inevitable that white dwarf-compact object binaries will form. This may be especially likely within cluster environments.

After formation, the subsequent evolution of a white dwarf-compact object binary will typically be driven by gravitational radiation. As the system passes through resonances between the normal mode frequencies of the white dwarf and harmonics of the orbital frequency, it is possible to resonantly excite oscillations on the white dwarf. Even small amounts of energy transfer may have a non-negligible impact upon the orbit, possibly with consequences for gravitational wave detections of such systems (e.g., by LISA). Large energy transfers may result in heating and, possibly, the detonation of the white dwarf, leading to an exotic type I supernova and, perhaps, a subsequent γ-ray burst. In order to assess the magnitude and likelihood of such scenarios, it is necessary to understand the mode excitation process in detail. For the linear regime, this has been done [\citep=Rath-Brod-Blan:03] [\citep=Rath-Blan-Brod:04], and it was found that, depending upon the initial conditions, it is possible to excite modes with large enough amplitudes that the validity of the linear theory becomes questionable. Therefore, it is necessary to investigate the mode evolution in the non-linear regime. This is most directly done via numerical hydrodynamics simulations.

A number of hydrodynamics codes which may be used for this purpose currently exist. Two such codes, ZEUS [\citep=Ston-Norm:92] and Flash [\citep=Flash:00] have been developed to be generic hydrodynamic engines. Such codes provide access to a sophisticated suite of hydrodynamic simulation tools. However, they also have the disadvantage of being complicated to use and, perhaps, suboptimal for our specific problem. In addition, to a good approximation, the white dwarf oscillations are adiabatic, and hence detailed treatment of shocks and entropy generation are unnecessary.

[\citet=Motl-Tohl-Fran:02] have developed an adiabatic hydrodynamics code, primarily for studying binary mass transfer. However, the choice of a cylindrical grid, while useful for the mass transfer application, is problematic for the case of a pulsating white dwarf, where it is important to maintain uniform resolution throughout the star. Furthermore, a cylindrical coordinate system complicates the numerical advection scheme. These difficulties are avoided with a Cartesian grid, an additional advantage of which is that the Poisson equation can be solved easily and efficiently via spectral methods.

We present a simple hydrodynamics code with some diagnostics and an example application. This is done in seven sections with §[\ref=GHE] reviewing the hydrodynamic equations, §[\ref=DS] outlining the differencing scheme used, §[\ref=StPE] describing the method used to solve the Poisson equation, §[\ref=TP] presenting some tests of the code, §[\ref=AtaPWD] applying the code to an oscillating white dwarf, and §[\ref=C] containing concluding remarks.

Governing Hydrodynamic Equations

There is considerable freedom in the choice of macroscopic quantities used to describe fluid flows. Our choice was primarily dictated by the numerical convenience of the sourced advective form of the hydrodynamic equations. In addition, since we are restricting ourselves to adiabatic flows, it is convenient to use the entropy rather than the energy as a thermodynamic variable. We therefore chose the following five quantities to describe the fluid flow: mass density (ρ), entropy density (s), and momentum density ([formula]).

The equations for ρ and s have a purely advective form,

[formula]

which correspond to the conservation of mass and entropy. The equation for [formula] can be written in a sourced advective form,

[formula]

where the pressure (P) is given by an equation of state,

[formula]

the self-gravitational potential (Φ) is determined by the Poisson equation,

[formula]

and [formula] is any additional external force per unit volume acting on the fluid (e.g., an external gravitational field and/or Coriolis forces).

Differencing Scheme

In one dimension, the use of a staggered mesh avoids the interpolation of the flow velocities to the cell boundaries. With a zone-centred grid, the velocities would have to be interpolated, which would complicate the advection step in the momentum conservation equation ([\ref=momentum_cons]). However, in multiple dimensions, the interpolation of vector quantities (e.g., the momentum density) cannot be avoided by the use of a staggered mesh. Therefore, we use the conceptually simpler zone-centred grid.

Casting the hydrodynamic equations in a sourced advective form allows the explicit conservation of mass, entropy, and momentum (insofar as the source terms allow).

Advection

The advection steps in equations ([\ref=mass_cons]-[\ref=momentum_cons]) may be integrated to yield finite-difference equations for a given cell

[formula]

where Δλ is the change in the quantity λ due to fluid advection, Δt is the time step, ΔV is the cell volume, Λ±  i are the fluxes of the quantity λ at the ±  ith boundary of the cell, and ΔSi is the area of the cell surface normal to the ith direction.

In general some interpolation is required to determine the values of the fluxes at the boundaries of the cell. We break the interpolation of the fluxes into an interpolation over the fluid velocity and an interpolation over the advected quantities,

[formula]

where [formula] is the interpolated component of the velocity normal to the ±  ith cell face at the cell boundary, and λ* is the interpolated value of the advected quantity. The [formula] are defined by

[formula]

where vi and vi±  i are the values of the fluid velocity in the ith direction at the centre of the current cell, and the centres of the neighbouring cells in the ±  ith directions, respectively.

A numerical difficulty with the interpolation of the advected quantities is that advecting the volumetric densities tends to generate unphysically high velocities in low cells with low mass density. We circumvent this problem by using consistent transport [\citep=Ston-Norm:92], in which it is the specific quantities that are interpolated, i.e.

[formula]

where [formula] and [formula] are the interpolated values of ρ and the specific quantity λ  /  ρ at the ±  ith boundary of the cell.

The choice of the method used for interpolating the advected quantities has to be made carefully, so as to avoid introducing instabilities in the finite-difference scheme. Several such methods exist, of which we have chosen to use upwinding methods. These methods provide stability by clipping new local extrema, and limit diffusivity by interpolating quantities to the boundary in a way that accounts for the difference between the velocities associated with the upwind and downwind characteristics. Upwinding methods of various orders exist, with the the higher-order methods being necessarily more computationally expensive. The three methods we have implemented are the donor cell (zeroth-order), van Leer (first-order), and piecewise parabolic advection (PPA; second-order) methods.

Donor Cell Upwinding

The donor cell method is a zeroth-order upwinding scheme, approximating the spatial distribution of a given quantity, q, as a step function. In this method, all information from the downwind cell is ignored, i.e. at the - ith cell boundary

[formula]

For a given cell, this only requires information from the nearest neighbours. In practise, donor cell upwinding is highly diffusive (see, e.g., §[\ref=TP:A]), and hence was not used beyond the testing stage.

van Leer Upwinding

The van Leer upwinding method is a first-order method first described by its namesake [\citep=vanL:77a] [\citep=vanL:77b] [\citep=vanL:79]. In contrast to the donor cell method, the distribution of q is approximated by a piecewise linear function. The slopes of these linear functions are given by the so-called van Leer slopes, defined below for a given cell along the ith direction,

[formula]

In terms of the van Leer slopes, the upwinded value of the quantity q at the - ith cell boundary is given by

[formula]

where the notation dqi±  j denotes the van Leer slope in the ith direction for the neighbouring cell in the ±  jth direction. The van Leer method prevents the introduction of new local extrema, and hence ensures stability in the advection scheme. When the van Leer slopes vanish, the scheme reduces to the donor cell method. Note that, because van Leer upwinding uses the van Leer slopes of neighbouring cells, it requires information from both the nearest and next-nearest neighbours.

PPA Upwinding

The PPA method is a second-order upwinding method originally developed by [\citet=Cole-Wood:84]. It approximates the distribution of q by a piecewise parabolic function. The essence of the method is the determination of the monotonized left and right interface values, qL and qR, which are computed via equations (1.6)-(1.10) in [\citet=Cole-Wood:84]. In terms of qL and qR, the upwinded value of q at the - ith cell boundary is given by

[formula]

where [formula]. This requires information from the nearest three neighbours.

The PPA method is substantially less diffusive than the van Leer method. This is especially notable at discontinuities, where the profiles generated by PPA are significantly steeper than those generated by the van Leer scheme. However, the improvement comes with a relatively high computational cost. It has been found by [\citet=Ston-Norm:92] that, typically, increasing the grid resolution is a computationally more efficient way to obtain greater accuracy. For this reason, unless explicitly stated otherwise, we use the van Leer upwinding method.

Artificial Viscosity

In Eulerian upwinding schemes, shocks can lead to numerical instabilities. If resolving shocks is critical, the instabilities may be cured via the introduction of Riemann solvers (capable of localising a shock to a single cell boundary). However, if resolving shocks is unnecessary, it is significantly easier to introduce an artificial numerical viscosity to smooth them out. Several prescriptions for implementing numerical viscosity can be found in the literature; we chose to implement the von Neumann-Richtmyer scheme because of its ability to produce the correct shock propagation velocity and its low dissipation far from shocks [\citep=Ston-Norm:92]. This scheme takes the form of defining a viscous pseudo-pressure for each direction which is non-vanishing in regions of compression only:

[formula]

for i = x,  y,  z, where l is the length scale over which shocks are to be smoothed. The associated source term for equation ([\ref=momentum_cons]) is given by

[formula]

Typically this will smooth a shock front over a number of cells-a distance that is usually much larger than the natural shock depth. It should also be noted that a strictly correct treatment of shocks is precluded by the adiabatic condition, equation ([\ref=entropy_cons]). This can be remedied by the inclusion of a viscous source term in the entropy equation. However, since for the applications we envision shocks will result in the rapid thermalisation of the kinetic energy of the stellar oscillations, their mere production may make a purely hydrodynamic description inapplicable. In particular, thermonuclear processes could dominate at such a point, and thus neither the added complexity and computational overhead of the Reimann solver methods nor the complication of an entropy source term are required.

Momentum Source Terms

In addition to advection, the momentum density evolves due to pressure gradients, self-gravity, and external forces (if any). We have found that simply finite-differencing [formula] leads to a less stable system than calculating the gradient via partial derivatives of the equation of state, and finite-differencing in ρ and s. In contrast, the gravitational acceleration is obtained directly in terms of a second-order, finite-difference of the gravitational potential (the details of solving for which are presented in §[\ref=StPE]). The finite differencing of the viscous force is performed in two steps: ( i) determining the viscous pseudo-pressure, and ( ii) finite differencing the viscous pseudo-pressure to obtain the viscous force directly. In finite difference form, the viscous pseudo-pressure is defined by

[formula]

for i = x,  y,  z. The dimensionless coefficient η is approximately the number of cells over which discontinuities are to be smoothed. Typically, we find η = 2 to be adequate. The viscous force is then determined by

[formula]

Therefore, excluding external forces, the source terms in equation ([\ref=momentum_cons]) are given by

[formula]

for i = x,  y,  z.

When using a barotropic equation of state, P(ρ), it can be convenient to write the source terms in terms of the specific enthalpy, h,

[formula]

for i = x,  y,  z. An example of when this is useful will be discussed in §[\ref=AtaPWD]. Note that in this case, the entropy equation is superfluous.

Courant-Friedrichs-Lewy Time Step

The stability of our explicit finite-difference scheme requires that the time step should satisfy the Courant-Friedrichs-Lewy (CFL) criterion. This corresponds to the physical consideration that, in a single time step, information should only propagate into a given cell from the neighbouring cells which are used to compute spatial derivatives at that point. A time step that is too large would require information from more distant cells, which is not available in the differencing scheme. Therefore, for stability,

[formula]

where the CFL time is defined by

[formula]

where cs is the local adiabatic sound speed [\citep=Motl-Tohl-Fran:02] [\citep=Ston-Norm:92]. In addition, the inclusion of an artificial viscosity imposes the additional requirement that the time step does not exceed the timescale for diffusion across cell width length-scales:

[formula]

[\citep=Ston-Norm:92]. In practise, for many operator split methods, taking the time step to be the CFL time does not ensure stability. Rather, it is necessary to take Δt to be some fraction of tCFL or tvisc. In practise, we find that a robust choice is

[formula]

From equation ([\ref=CFL_time]) it is clear that the cells with the highest velocities (both kinetic and sound) will provide the most stringent limits on the time step. An example is the case of cells constituting the vacuum surrounding a star. In practise, for numerical reasons, no portion of the grid can have vanishing mass density. Therefore, we take 'zero' density to be some small fraction (typically, 10- 8) of the initial maximum density. As a result, the vacuum is physically insignificant. Nonetheless, because of their large accretion velocities (though negligible momentum densities), the vacuum cells can be the limiting factor in determining the time step. To avoid this problem, we impose a velocity cap, so that the CFL time is set by only considering cells with densities larger than, say, 10- 6 of the maximum density. The remaining cells have their velocities capped at

[formula]

so as to not drive the time step down. While this explicitly violates the hydrodynamic equations presented in §[\ref=GHE], it does so in a physically negligible manner.

We use operator splitting to separate the source and advection contributions to the evolution of the fluid quantities at each time step. However, we do not use directional splitting, making our scheme a variation of the unsplit method of van Leer. Thus, a single time step is taken in three stages: (1) taking half of the source step, (2) performing the updates due to advection, and (3) taking the second half of the source step. The gravitational potential is calculated at each source sub-step.

Boundary Conditions

Because the upwinding methods require information about neighbouring cells, it is necessary to provide a boundary of ghost cells along the outer edges of the grid. As these ghost cells are not evolved themselves, they require some prescription for assigning the evolved quantities to them. We have implemented three types of boundary conditions: fixed, replicated, and outflow.

The first, and simplest, is the fixed boundary condition. In this prescription, the boundary cells are fixed to have 'zero' density, entropy density, and momentum flux. This tends to limit the velocity of the 'zero' density vacuum by not providing a boundary momentum flux.

The second set of boundary conditions consists of replicating the last set of cells in the grid. This provides a slightly more realistic set of boundary conditions, allowing the accretion of the 'zero' density vacuum to stabilise through hydrodynamic balance. However, if a physically significant portion of the flow is crossing the boundary, then this is significantly superior to the first scheme.

The third set of boundary conditions implemented are the so-called outflow boundary conditions. In this prescription, fluid is allowed to flow off the grid but not into it. In order to prevent the boundaries from physically affecting the fluid on the grid, the boundary values for density and entropy are chosen to preserve hydrostatic equilibrium in the last grid zone. Note that this does not stop the fluid from advecting off the grid through this zone. As a result, this will minimise the creation of spurious reflections at the boundaries. For a self-gravitating fluid configuration that is initially contained entirely within the grid, this provides the most realistic set of conditions.

Parallelisation

The primary purpose for the development of our code is to perform high resolution studies of the non-linear evolution of normal modes in white dwarfs. The resulting computational requirements necessitate high-performance computing. Because the sourced advection step for a given cell depends only upon cells in its immediate neighbourhood, it naturally lends itself to a straightforward parallelisation scheme. This takes the form of dividing the entire grid into a number of sub-domains, each of which are handled by a separate process. Because interprocess communication incurs substantial performance penalties, we need to choose a domain decomposition that minimises the communication required. The source of interprocess communication in each sourced advection step is the need for neighbour data around the edges of each sub-domain. Therefore, the time penalties due to interprocess communication are dictated by the surface area of each sub-domain, as well as the depth of neighbours that is necessary (one for donor cell upwinding, two for van Leer upwinding, and three for PPA upwinding). Hence, minimising the surface area of each sub-domain minimises the interprocess communication.

We have chosen to implement our code in the C++ programming language. This choice is motivated by considerations such as modularity of design, flexibility, efficiency, ease of code reuse, and extensibility. For example, using the object-oriented paradigm in the C++ language has allowed us to maintain a clean separation between interfaces and implementations (e.g., for the equation of state, Poisson equation solver, and initial conditions etc.), and features such as templates have allowed us to write generic code without sacrificing runtime performance.

Since standard C++ does not provide facilities for parallel computing, it is necessary to use additional libraries to handle the parallelisation. We have chosen to implement parallelisation via the Message Passing Interface (MPI). Since both optimising, ISO-compliant C++ compilers and high quality MPI implementations are available for virtually every major computing platform, our code is highly portable.

Solving the Poisson Equation

Equation ([\ref=poisson_eq]) is distinct from equations ([\ref=mass_cons]-[\ref=momentum_cons]) in that it requires global, rather than local, information. There are a number of methods that can be used to solve the Poisson equation. These include general elliptic equation set solvers, multigrid methods, multipole methods, and spectral methods [\citep=Motl-Tohl-Fran:02] [\citep=Flash:00] [\citep=Mull-Stei:95] [\citep=Ston-Norm:92]. Spectral methods tend to be the most efficient, and implementing them on a regular Cartesian grid is straightforward.

The solution of the Poisson equation requires the specification of a boundary condition on some closed surface. In most physical problems, this surface is chosen to lie at infinity, upon which the potential is chosen to vanish. However, since our computational domain is finite, it is not possible to impose a boundary condition at infinity in a straightforward manner. Instead, we define the value of the potential on the surface of our domain, which we compute via a multipole expansion:

[formula]

where

[formula]

In practise, it is only necessary to include the first few multipoles (for our purposes l max  =  5) to obtain accurate boundary values. Note that the boundary condition at infinity is built into the multipole expansion.

Given the Dirichlet boundary condition, it is possible to solve Poisson equation via a discrete sine transform (DST) [\citep=Pres-Teuk-Vett-Flan:92]. Written in its finite-difference form, ([\ref=poisson_eq]) becomes

[formula]

In terms of their discrete sine transforms [formula] and [formula], Φ and ρ are given by

[formula]

where i, j, k, and I, J, K define the location in, and the dimensions of, the computational domain, respectively. Substituting these expansions into ([\ref=fd_poisson_eq]) gives

[formula]

where The potential Φi,j,k is then computed from ([\ref=phi_dst_eq]).

Expanding Φ in terms of the sine basis functions of the Fourier series ensures that it vanishes at the boundaries of the domain. Non-zero boundary conditions can be incorporated by adding an appropriate source term to the right side of equation ([\ref=fd_poisson_eq]). We may define Φ'  =  Φ  -  ΦB where now ΦB is determined by equation ([\ref=multipole_eq]) at one zone beyond the boundary and vanishes everywhere else. The resulting equation for Φ' is the same as equation ([\ref=fd_poisson_eq]) in the interior and is given by

[formula]

on the ±  jth boundary. As a result, the effective source terms are given by

[formula]

To summarise, our procedure for solving the Poisson equation is:

Calculate ΦB via the multipole expansion ([\ref=multipole_eq]).

Calculate the effective source terms for Φ' from ([\ref=eff_source_eq]).

Perform a DST on the effective source terms.

Calculate ' from ([\ref=phihat_from_rhohat_eq]).

Perform a DST on ' to determine Φ'.

We do not actually need to add ΦB to our final answer since it only affects the ghost points outside our grid. Note that, because we use a second-order finite-difference to determine the gravitational acceleration in equation ([\ref=fd_source_terms]), it is necessary to define Φ on an extra surface of ghost cells on each edge of the domain.

The DST is most efficiently parallelised in terms of a slab decomposition of the grid, as opposed to the ideal decomposition for the sourced advection step (which is cubical). As a result, a significant amount of interprocess communication is required to prepare for the solution of the Poisson equation at each source sub-step. However, we have found that the time saved by using the DST more than outweighs the penalty incurred by the communication overhead compared to alternative methods.

Test Problems

Advection

In order to test the advection scheme, we considered the advection of a square pulse (without source terms). In Figure [\ref=advect], the pulse is shown after being advected five times its initial width (50 cells) using both the donor cell and van Leer upwinding methods. It is clear that both methods are diffusive, with the donor cell method substantially more so.

In general, diffusion will lead to errors in both the amplitude and the phase of an advected pulse. In order to quantify these errors for diffusion resulting from the upwinding scheme, a sine wave was advected with periodic boundary conditions for 100 times its wavelength. By this time, the donor cell upwinding scheme has diffused the sine wave completely, hence only the van Leer and PPA methods are shown in Figure [\ref=sine_wave]. The errors are at the 4% and 0.4% levels, respectively, with deviations becoming most significant at extrema. In both the square pulse and the sine wave, a noticeable asymmetry (which is determined by the direction of propagation) develops as a result of higher-order effects in the upwinding schemes.

Sod Shock Tube

The pressure source term in equation ([\ref=momentum_cons]) was tested by the Sod shock tube problem. The Sod shock tube consists of an initial density and pressure discontinuity, and its subsequent evolution for an ideal gas (Γ  =  1.4) and a specific set of initial conditions. For x > 0, ρ = 0.125 and P = 0.1, while for x  ≤  0, ρ = 1 and P = 1. Because it is the entropy density and not the pressure that is evolved, it is necessary to find s as a function of ρ and P for an ideal gas:

[formula]

The Sod shock tube is useful as a test because the resulting ρ and P profiles for any given time can be calculated analytically [\citep=Sod:78] [\citep=Hawl-Wils-Smar:84].

In Figure [\ref=sod], the numerical results from our code are compared to the analytical solutions. Overall, they are in good agreement, with the exception of two minor discrepancies. The most notable discrepancy is the entropy deficit in the post-shock fluid (0.184 < x < 0.35). This is a result of using the adiabatic condition, and thus ignoring entropy production at shocks. Hence, the higher analytical value is easy to understand. Because we intend to apply the code to scenarios in which the adiabatic condition holds to a very good approximation, we expect the entropy deficit to be physically insignificant. The second discrepancy is the overshoots at points where the slopes of quantities change discontinuously. As discussed in [\citet=Ston-Norm:92], this is a real result, originating from the numerical viscosity inherent in any finite-difference code. The most important result, however, is the fact that the artificial viscosity causes the shock fronts to be well behaved in our code.

Pressure-Free Collapse

The gravitational source term in equation ([\ref=momentum_cons]) was tested via the pressure-free collapse of a uniform density sphere. Once again, there is an analytical solution:

[formula]

[\citep=Ston-Norm:92]. Figure [\ref=freefall] depicts the result after allowing the radius to halve (at t = 0.909 for G = 1), for a [formula] cell grid. There is a small excess on the edges resulting from our implementations of viscosity and consistent transport (which necessarily treats the advection of velocity into the edges differently due to the density gradients). Overall, it does show good agreement with the analytical prediction.

Application to a Pulsating White Dwarf

Hydrostatic Equilibrium

The problem of choosing an equilibrium fluid configuration is made non-trivial by the finite differencing of the the dynamical equations. Consequently, a method to produce an equilibrium solution for the finite difference equations is required. For a barotropic equation of state, we have chosen to make use of the self-consistent field (SCF) method [\citep=Motl-Tohl-Fran:02] [\citep=Hach:86] [\citep=Ostr-Mark:68]. Because it is well described elsewhere, we will only summarise the procedure here.

An initial guess for the density (taken from the continuous solution) is used to generate the gravitational potential via the method described in §[\ref=StPE].

The new gravitational potential and the initial density guess are then used to calculate the Bernoulli constant at the centre of the star.

the Bernoulli constant and the new gravitational potential are used to calculate the enthalpy at all points on the grid, which is then subsequently inverted to yield the new density guess.

This procedure is iterated until the Bernoulli constant converges to some specified tolerance-i.e. when the fractional change is less than some small value (say, 10- 12). The resulting density distribution is a solution to

[formula]

and, hence, no net momentum flux is generated if the source terms are given by equation ([\ref=enthalpy_fd_source_terms]). Note that, if the source terms are given by equation ([\ref=fd_source_terms]), this may still produce a net momentum flux, and is not necessarily a good approximation to equilibrium in that case.

When

[formula]

the pressure gradient required to preserve hydrostatic equilibrium cannot be resolved on the grid. For a star, this can result in strong, inwardly directed forces at the surface, driving shocks into the interior. We have found that adding an isothermal envelope can mitigate this problem by pushing the region where this inequality is true off the grid, while adding an insignificant amount of mass to the star itself. This is done explicitly by setting a fiducial density (which we chose to be 10- 2 of the central density) at which the equation of state changes from that of a cold white dwarf to a Γ = 1 polytrope. The polytropic constant is chosen such that P(ρ) remains continuous across the transition. Table [\ref=WD_props] compares the properties of the cold white dwarf with (HWD) and without (CWD) the isothermal envelope. Note that while the isothermal envelope increases the radius significantly, it does not change the mass or the frequency of the quadrupolar fundamental mode (ωf2). The reason for this can be seen in Figure [\ref=models_compare]. The f2 mode is more strongly weighted in the core where the addition of the isothermal envelope makes no difference. In contrast, the lowest-order quadrupolar p-mode is substantially affected by the presence of the envelope. This probably results from the fact that the radial wavelength of the p2 is much closer to the height of the isothermal envelope. Henceforth, all evolutions were begun with the HWD model listed in Table [\ref=WD_props].

The quality of the equilibrium generated by the SCF method may be explicitly demonstrated. Figure [\ref=sstars] shows the evolution of the centre-of-mass position, net momentum, and the fraction of the total energy that is converted into kinetic energy for a star initially in hydrostatic equilibrium. The last quantity is given in terms of the kinetic, internal, and gravitational components:

[formula]

Despite an initial exponential rise, these quantities saturate at relatively low levels for all resolutions shown. Note that all times are measured in dynamical times of the cold white dwarf, [formula], which is approximately the time it takes for a disturbance to cross the star.

Oscillation Modes

In general, the problem of interest is dynamical. Specifically, we are interested in the non-linear evolution of the oscillation modes of a cold white dwarf which are being excited resonantly by tidal forces. Towards this end, it is important to obtain a measure of the numerical quality factor (Q; the e-folding time of the energy in the oscillation), and the oscillation frequencies themselves. That the latter may be different from the frequencies in Table [\ref=WD_props] is a result of both the approximation of discrete cells and the fact that the finite-difference equations are distinct from the continuous equations. However, we expect the deviation to be small, and therefore a close agreement between the predicted and observed frequencies serves as yet another test for the correctness of our code. Both the quality factor and the oscillation eigenfrequencies can be obtained by deforming the star in a particular way, and analysing the subsequent oscillations.

We deformed the star by adding a fractional quadrupolar perturbation to the density, i.e.

[formula]

where the amplitude, A, was chosen to be small (10- 4) so that the resulting oscillation occurred in the linear regime. This initiated an even m = 2 standing wave on the star. Figures [\ref=qpstars] and [\ref=qpmoments] show the resulting evolutions for a number of grid resolutions. The same diagnostics as those used to demonstrate hydrostatic equilibrium are shown in Figure [\ref=sstars]. In this case as well, the centre-of-mass and momentum drift saturate at levels well below those of interest. Unlike hydrostatic equilibrium, there now exists a non-vanishing kinetic energy. It is strongly harmonic and decays exponentially. Because the initial perturbation excited all of the even quadrupolar modes with m = 2, there are a number of distinct decay constants, with the slowest being due to the f2 mode. This exponential decay at late times may be fit to estimate the numerical Q, found here to be on the order of 6000.

In Figure [\ref=qpmoments], the quadrupolar moments are shown. The even m = 2 moment is strongly dominant as expected. It also has a very clear harmonic structure. This may be Fourier analysed to produce the dominant oscillation mode, as shown in Figure [\ref=qpfts]. In the power spectrum of the even m = 2 quadrupolar moment, there is a peak which extends five orders of magnitude above the rest of the spectrum. This peak is clearly identifiable with the f2 mode, and appears to have very nearly the frequency predicted by the HWD model.

Conclusions

We have developed and tested a parallel, simple and fast hydrodynamics code for multi-dimensional, self-gravitating, adiabatic flows. Both the advection terms and the solution for the self-gravity are greatly simplified by the use of a uniform Cartesian geometry, ultimately leading to explicit conservation of mass, entropy, and momentum to nearly numerical accuracy. The simplifying assumption of adiabaticity and the absence of shocks eliminate the necessity for more numerically expensive schemes, yielding an efficient code.

We have also applied our code to a number of standard diagnostic problems in order to verify its physical correctness and limitations. This has been done in a systematic fashion intended to test each aspect of the code separately, including the advection scheme, the pressure source terms, and finally the gravitational potential. Finally we have demonstrated the fitness of the code for the problem which motivated its development: the study of tidally excited adiabatic oscillations on white dwarfs. This has been done in two stages: firstly, verifying the long term numerical stability of a white dwarf in hydrostatic equilibrium, and, secondly, measuring the numerical quality factor (found to be on the order of 6000) and the quadrupolar fundamental mode frequency (found to be very nearly that predicted by a linear mode analysis of the white dwarf model). The details of tidally exciting adiabatic oscillations with non-linear amplitudes on cold white dwarfs, and their subsequent evolution will be discussed in a future publication.

Acknowledgements

The authors would like to thank Anatoly Spitkovsky, Ruben Krasnopolsky, Michele Vallisneri, Andrew MacFadyen, Joel Tohline, and Michael Norman for a number of helpful conversations. AEB would especially like to thank Jim Stone for a number of useful suggestions regarding the presentation of this material. This work was supported under NASA grant NAGWS-2837.