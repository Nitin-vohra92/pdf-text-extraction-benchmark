A presentation of the quantum Fourier transform from a recursive viewpoint

In most introductory texts to quantum computation, such as [\cite=ChNi] or [\cite=Pres], the presentation of the quantum Fourier transform relies on the derivation of an explicit formula, which is then translated into a quantum circuit. The connection with the classical fast Fourier transform is also cited, but not explicited, or left as an exercise.

In this note we construct a quantum Fourier transform circuit in a recursive way, by directly copying the construction of the fast Fourier transform algorithm that is given, for example, in [\cite=CLRS], chapter 30. We do not pretend this presentation to be original, nor claim for any anteriority. The aim of this paper is purely pedagogical.

The author would like to thank Prof. Hugues Randriam for his supervision of the writing of this text.

The fast Fourier transform

Let n be an integer and N = 2n. The discrete Fourier transform associates to each complex N-tuple [formula] the complex N-tuple [formula] with

[formula]

where

[formula]

is a primitive N-th root of 1.

Thus, apart from some power of [formula], the discrete Fourier transform amounts to evaluating the polynomial

[formula]

of degree 2n - 1, at the powers of ζn. The fast Fourier transform algorithm performs this using a divide and conquer strategy. Obviously P can be written in a unique way

[formula]

In this decomposition the degree of Peven (resp. Podd) is 2n - 1 - 1, and its coefficients are the aj for even (resp. odd) j's. Using the fact that ζ2n  =  ζn - 1, one gets

[formula]

Thus, to perform a Fourier transform of order n, one has to perform two Fourier transforms of order n - 1, and then O(n) additions and multiplications. We will summarize this as

[formula]

which finally gives us that the total number of elementary operations required grows as

[formula]

The quantum Fourier transform

As we just saw, the exponential factor 2n in the complexity of the fast Fourier transform algorithm comes from the factor 2 in equation [\eqref=FFTrec], that is, from the fact that the computation of a Fourier transform of order n requires two Fourier transforms of order n - 1. Hopefully this factor 2 could be shrunk down to 1 using quantum parallelism. Indeed, recall that when one has a quantum circuit F acting on n - 1 qubits, then the circuit [formula] (see figure [\ref=Ftens1] below) on n qubits, applied to a vector |x〉 = |x0〉|0〉 + |x1〉|1〉, gives as output (F|x0〉)|0〉 + (F|x1〉)|1〉, thus, in some way, computing simultaneously F|x0〉 and F|x1〉 at the cost of only one application of F. Carrying this out succesfully will lead to a dramatic decrease of complexity in the adaptation of the Fourier transform from the classical world to the quantum world: from an exponential complexity we will get to a quadratic one.

To make it formally, consider an n qubits system, and denote the vectors of the computational basis by

[formula]

for [formula] (recall that N = 2n) with base 2 expansion

[formula]

We will construct a quantum circuit which sends the unitary vector [formula] to [formula] where the bk's are deduced from the aj's by relation [\eqref=defFourier]. Remark that, since quantum circuits can only perform unitary transformations, this implies that formula [\eqref=defFourier] is norm preserving. Although this fact is well known (Parseval's theorem), we will not need to assume it. Indeed our construction can be considered as a way of re-proving it.

Now let

[formula]

Grouping together terms according to jn = 0 (that is, j even) or jn = 1 (that is, j odd) we get a decomposition

[formula]

which is the exact analogue of decomposition [\eqref=pair-impair].

According to formula [\eqref=formulerec], we have then to perform a Fourier transform on the first n - 1 qubits, which can be done as in figure [\ref=Ftens1]. In doing that one has however to be careful on the ordering of the output qubits. Indeed, write

[formula]

Then, as ζ2n - 1n - 1 = 1 and ζ2n - 1n =  - 1, formula [\eqref=formulerec] can be re-writen as

[formula]

where

[formula]

Thus, while |Peven〉 and |Podd〉 are vector states of the first n - 1 qubits [formula], their Fourier transforms should be output on the last n - 1 qubits [formula]. To circumvent this difficulty we will consider a modified quantum Fourier transform, mQFT, which reverses the order of the output qubits. Obviously this is not a serious problem, since the correct order can then be restablished using only n / 2 swap gates.

Our modified quantum Fourier transform circuit of order n should then look like:

At point A we input the vector

[formula]

so that at point B we get

[formula]

where we denoted by [formula] the effect of our (modified) quantum Fourier transform. According to formula [\eqref=formulerecbis] we have

[formula]

so that, putting the 2- n / 2 back, at point C we should get

[formula]

where ζk'n can be understood as the diagonal matrix acting on the first n - 1 qubits by multiplying |k'〉 by ζk'n, or equivalently as the controlled operation that multiplies the last qubit by ζk'n when the first n - 1 qubits are set to |k'〉.

Clearly one can go from [\eqref=B] to [\eqref=C] by sending |0〉 to [formula] and |1〉 to [formula], that is by acting on the last qubit through

[formula]

where [formula] is the usual Hadamard matrix and [formula].

This means that we can complete our quantum Fourier circuit by replacing the '?' circuit in figure [\ref=schema] with

Thus we see that the (modified) quantum Fourier circuit of order n can be constructed from the order n - 1 one by adding n - 1 controlled operations and one Hadamard gate. Putting all together, since the quantum Fourier circuit of order 0 is trivial (the identity), we get a total complexity of [formula] gates.

The reader will remark that the circuit we get is the inverse of the one that is given in [\cite=ChNi], figure 5.1. This is not a mistake: it only indicates that the Fourier transform is essentially its own inverse.

Gloria Paradisi, c/o Hugues Randriam Ecole nationale supérieure des télécommunications 46, rue Barrault 75634 Paris Cedex 13 France Gloria.Paradisi@salle-s.org