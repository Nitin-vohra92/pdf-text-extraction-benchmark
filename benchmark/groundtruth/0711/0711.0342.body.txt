Comprehensive Metadata Query Interface for Heterogeneous Data Archives Based on Open Source PostgreSQL ORDBMS

Introduction

Storing and querying structured metadata is an important point for building astronomical archives containing heterogeneous datasets coming from various telescopes and/or instruments. IVOA Characterisation Data Model (McDowell et al., in prep.) allows to describe a position of any astronomical dataset in the multidimensional space of physical parameters. Thus, building query interface on top of the characterisation metadata, will provide enough capabilities for elaborated queries often needed for sophisticated scientific usage of the resource.

Implementation

Usage of mature and freely available DBMS engine as a backend for the query interface is of a big importance for further development of working prototypes implementing Characterisation DM, since relational database server can solve many data structure and manipulation problems one may encounter when deploying data archive in a consistent way.

With the advent of native XML support in relational database engines it all become possible. We use open source PostgreSQL DBMS for storing and querying characterisation metadata.

Initial XML type support in the PostgreSQL has recently been implemented by NS in a frame of "Google Summer of Code 2006". We make heavy use of this feature in order to provide comprehensive search over Characterisation metadata tree.

Figure [\ref=P3.23_fig1] demonstrates the concepts used to store and query XML structures, and shows how XPath expressions can be incorporated in SQL queries.

We built a prototype of the Characterisation metadata query service, implementing two access methods:

HTTP-GET/POST based interface implements almost direct translation of the query parameter name into XPath of the data model element, then incorporated into extended SQL/XML queries to XML and relational data being stored in DBMS. This concept allows to distinguish axes by some specific properties, for instance by their UCDs, and provides ability of putting constraints on the query result.

Web-Service based interface to receive XQuery which is also directly translated into SQL/XML statements. This method aims in dealing with ADQL-like queries in the future.

Perspectives

Presently XML type in PostgreSQL is developed for manipulation abilities rather than a specific storage engine, meaning that it is built on top of VARCHAR as initial storage implicit type. This somehow limits performance of queries since one is confined only to use functional indices based on result of XPath expression evaluation.

Nearest plans of XML type development include very important features that will comprise:

XMLQUERY - standardized by SQL:2006 way of integration of XQuery capabilities with other essential relational functionality. Joins of XML and relational data in one expression.

Proper design at physical level (data structure, comprehensive indices system and Generalized Search Tree usage, etc). This will lead to fast XQuery and XPath evaluation.

Thus, all performance penalties for this combination of relational and XML approaches will soon be minimized dramatically.

This opens very broad perspectives for building similar systems making use of some XML-based data models since one can achieve all that flexibility and comprehensiveness right inside DBMS.