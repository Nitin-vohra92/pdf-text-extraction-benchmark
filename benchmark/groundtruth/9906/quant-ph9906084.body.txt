Fact. Open Problem

Proof of . width6pt depth1pt

To appear in the Proceedings of the 24th International Symposium on Mathematical Foundations of Computer Science, September, 1999

A Foundation of Programming a Multi-Tape Quantum Turing Machine Tomoyuki Yamakami Department of Computer Science Princeton University 35 Olden Street, Princeton, NJ 08544

Introduction

A quantum Turing machine (QTM) is a theoretical model of quantum computers, which expands the classical model of a Turing machine (TM) by allowing quantum interference to take place on their computation paths. Designing a QTM in general, however, is significantly harder than that of a classical TM because of its well-formedness condition as well as its halting condition, known as the timing problem. Recently Bernstein and Vazirani [\cite=BV97] initiated a study of quantum complexity theory founded on a restrictive model: a one-head, multi-track, stationary, dynamic, normal form, unidirectional QTM (for definitions, see Section [\ref=sec:basics]) that prohibits a tape head to stay still. We call such a restrictive QTM conservative for convenience.

One may find easier to program a less restrictive QTM when he wishes to solve a problem on a quantum computer. In this paper we wish to introduce a QTM as general as possible. In Section [\ref=sec:basics], we introduce a multi-tape, multi-head QTM with multi final states that also allows tape heads to stay still. Although many variations of QTMs are known to be polynomially equivalent [\cite=BV97] [\cite=Yao93], unsolved is the question of what is the degree of polynomials of these simulation overhead. As we will show in Section [\ref=sec:simulation], any multi-tape, multi-head, well-formed QTM can be effectively simulated by a conservative QTM with only cubic polynomial slowdown.

Our primary goal is to contribute to the foundation of programming a handy QTM. In Section [\ref=sec:lemmas], we will prove two fundamental lemmas: Well-formedness Lemma and Completion Lemma, which are important tools in constructing a QTM. The lemmas expand the results of Bernstein and Vazirani [\cite=BV97], who considered mostly conservative QTMs. Using the lemmas, we will show that any computation of a well-formed QTM can be reversed on a well-formed QTM with quadratic polynomial slowdown. We will also address the timing problem in Section [\ref=sec:simulation]. In Section [\ref=sec:oracle], we will focus on an oracle QTM with multi query tapes and multi oracles. For any oracle QTM M, we can build an oracle QTM, similar to the classical case, that simulates M with a fixed number of queries of fixed length on every computation path.

Definition of Quantum Turing Machines

This section briefly describes the formal definition of quantum Turing machines. For our purpose, we wish to make the definition as general as possible. Here we present a definition that is slightly more general than the one given in [\cite=BV97] [\cite=BBBV97].

A k-tape quantum Turing machine (QTM) M is a quintuple [formula], where each Σi is a finite alphabet with a distinguished blank symbol #  , Q is a finite set of internal states including an initial state q0 and [formula], a set of final states, and δ is a multi-valued, quantum transition function from [formula] to [formula]. (Note that δ(qif,) must be defined.) For brevity, write Σ̃(k) for [formula]. A QTM has two-way infinite tapes of cells indexed by [formula] and read/write tape heads that move along the tapes. Directions R and L mean that a head steps right and left, respectively, and direction N mean that a head makes no movement. We say that all tape heads move concurrently if they move in the same direction at any time (in this case, e.g., we write δ(p,,q,,d) instead of δ(p,,q,,)). We call a QTM dynamic if its heads never stay still. A QTM is unidirectional if, for any p1,p2,q∈Q, 1,2∈Σ̃(k), and 1,2∈{L,N,R}k, [formula] implies 1  =  2.

We assume the reader's familiarity with the following terminology: a time-evolution operator, a configuration and final configuration, a superposition and a final superposition, a well-behaved and stationary QTM, and the acceptance probability of a QTM. For their definitions, see [\cite=BV97].

Here are ones different from [\cite=BV97]. A QTM is in normal form if, for every [formula], there exists a direction i∈{L,N,R}k such that δ(qf,) = |q0〉|〉|i〉 for any ∈Σ̃(k). A QTM M is called synchronous if, for every [formula], any two computation paths of M on [formula] reach final configurations at the same time. The running time of M on [formula] is defined to be the minimal number T such that, at time T, all computation paths of M on [formula] reach final configurations. We write [formula] to denote the running time of M on [formula] if one exists; otherwise, it is undefined. We say that M on input [formula] halts in time T if [formula] exists and [formula]. A QTM is well-formed if its time-evolution operator preserves the L2-norm. A multi-tape QTM is said to be conservative if it is a well-formed, stationary, dynamic, unidirectional QTM in normal form with concurrent head move. We write μM() to denote the probability that M accepts input [formula].

Throughout this paper, T denotes a function from Σ* to [formula].

Fundamentals of Quantum Turing Machines

In this section, we will prove two lemmas that are essential tools in programming a well-formed QTM: Well-Formedness Lemma and Completion Lemma.

For convenience, the head move directions R, N, and L are identified with - 1, 0, and + 1, respectively.

Well-Formedness Lemma.

One of the most significant feature of a QTM is the well-formedness condition on its quantum transition function that reflects the unitarity of their corresponding time-evolution operators. Here we present in Lemma [\ref=lemma:general-formedness] three local requirements for a quantum transition function whose associated QTM is well-formed.

Let [formula] be a k-tape QTM. Recall that Σ̃(k) stands for [formula]. We introduce the notation δ[null]. Let [formula], [formula], and [formula]. Let (p,,)∈Q  ×  (Σ̃(k))2 and ∈Ek. Define [formula] and [formula], where  = (di)1  ≤  i  ≤  k and  = (εi)1  ≤  i  ≤  k. Let h, = (hdi,εi)1  ≤  i  ≤  k, where hd,ε = 2d - ε if ε  ≠  0 and [formula] otherwise. Finally, we define δ[null] as follows: [formula].

(Well-Formedness Lemma) A k-tape QTM [formula] is well-formed iff the following three conditions hold.

(unit length) [formula] for all (p,)∈Q  ×  Σ̃(k).

(orthogonality) δ(p1,1)  ·  δ(p2,2) = 0 for any distinct pair (p1,1),(p2,2)∈Q  ×  Σ̃(k).

(separability) δ[null]  ·  δ[null] = 0 for any distinct pair ,'∈Ek and for any pair (p1,1,1),(p2,2,2)∈Q  ×  (Σ̃(k))2.

The proof of the lemma is similar to that of Theorem 5.3 in [\cite=BV97]. Note that, since any two distinct tapes do not interfere, a k-tape QTM must satisfy the k independent conditions for the case k = 1. We leave the detail to the reader.

Completion Lemma.

A quintuple [formula] is called a partial QTM if δ is a partial quantum transition function that is defined on a subset S of [formula]. If δ satisfies the three conditions of Lemma [\ref=lemma:general-formedness] on all entries of δ, then we call M a well-formed partial QTM [\cite=BV97].

Completion Lemma says that any well-formed partial QTM can be expanded to a well-formed QTM.

(Completion Lemma) For every k-tape, well-formed partial QTM with quantum transition function δ, there exists a k-tape, well-formed QTM with the same state set and alphabet whose transition function δ' agrees with δ whenever δ is defined.

To show the lemma, we first consider how to change the basis of a given QTM. Let [formula] be a given QTM. We first partition [formula] into mutually orthogonal spaces [formula] such that (i) [formula] and (ii) for any ∈Ek and any (p,,)∈Q  ×  (Σ̃(k))2, [formula]. Note that if ||  ≠  |'| then [formula]. For each ∈Ek, let [formula] be an orthonormal basis for [formula]. Let B be the union of all such [formula]'s.

We assume that, at time t, M in state p scans symbol [formula] and that δ maps (p,) to[formula]. Define the change of basis from Q  ×  {L,N,R}k to B  ×  Ek by mapping |q〉|〉 into [formula]. Let U1 denote this transform. This matrix U1 is unitary because [formula], which implies U*1U1 = I. It is known in [\cite=BV97] that U1 preserves the L2-norm iff U1 is unitary.

Let δ'(p,) denote U1δ(p,) for any (p,)∈S. In what follows, we show that δ' is "unidirectional" in the sense that if [formula] then   =  '. Let [formula] and ' be distinct and in Ek. Note that the separability condition ensures that δ[null]  ·  δ[null] = 0 for any (p',',')∈Q  ×  (Σ̃(k))2. Since [formula], δ'(p,,v,,) = 0 for any v∈B' if   ≠  '. Therefore, δ' is "unidirectional."

The transform U1 is useful to show Completion Lemma. We go back to the formal proof of Completion Lemma.

Let [formula] be a given QTM. Let U1 be defined as above. As shown above, U1 is unitary. As a result, δ'(S) is a set of orthonormal vectors since so is δ(S).

For each v∈B, let v be [formula] such that [formula] for some (p,,)∈Q  ×  (Σ̃(k))2 if any, and let v = (1)1  ≤  i  ≤  k otherwise. Since δ' is "unidirectional", v is uniquely determined. This implies that we can define the vector δ''(p,) as [formula].

Now we expand δ'' to Q  ×  Σ̃(k) by adding arbitrarily extra orthonormal vectors associated with elements in Q  ×  Σ̃(k)  -  S. Let [formula] be such an expansion of δ''. We define [formula] by [formula].

We then apply the inverse transform U*1 to [formula] and let [formula] be the result obtained. Define [formula]. Since U1 is unitary, [formula] must be well-formed.

Completion Lemma also enables us to use a k-tuple of a single alphabet, Σk, instead of [formula]. In the following sections, we will deal only with a k-tape QTM with tape alphabets Σk.

Simulation of Quantum Turing Machines

In this section we demonstrate several simulation results using the main lemmas in Section [\ref=sec:lemmas]. Since we are interested only in the acceptance probability of a QTM, the "simulation" of a QTM M by another QTM M' in this paper regards with the statement that N produces the same acceptance probability as M does. More formally, we say that M' simulates M with slowdown f if, for every [formula], μM'() = μM() and [formula].

Assume that M is a k-tape well-formed QTM running in time T() on input [formula]. For [formula], let T,m denote the (k + m)-tape QTM that, on input [formula] in tapes 1 to k and 1T() in tape k + 1 and empty elsewhere, behaves like M on input [formula] except that the heads in tapes k + 1 to k + m idle in the start cells. The tape alphabets of T,m for tapes 1 to k are the same as M's.

For convenience, let M(|φ〉) denote the final superposition of M that starts with superposition |φ〉. In the case where |φ〉 is an initial configuration with input [formula], we write M(|〉) for M(|φ〉).

For any pair  = (σi)1  ≤  i  ≤  k and  = (τj)1  ≤  j  ≤  m,   *   denotes the (k + m)-tuple [formula]. In particular, we write s *  for (s) *  and  * s for  * (s).

Simulation by Synchronous Machines.

We show how to transform any well-formed QTM into a well-formed, synchronous QTM with a single final state with the help of the information on its running time.

Let M be a k-tape, well-formed QTM that halts in time T() on any k-tuple input string [formula]. Then, there exists a (k + 2)-tape, well-formed, synchronous QTM M' with a single final state such that, on input (,1T()), it halts in time 2T() + 2, the last two tape heads move back to the start cells, leaving 1T() unchanged, and μM'(,1T()) = μM(). If M already has a single final state, then M' needs only k + 1 tapes and satisfies M'(|,1T()〉) = T,1(|,1T()〉).

Simulation by Machines with Concurrent Head Move.

The simulation of a multi-tape QTM by a single tape QTM is a central subject in this subsection. We show that any multi-tape, well-formed QTM can be simulated by a certain well-formed, well-behaved QTM with concurrent head move. The simulation overhead here is a quadratic polynomial. This result makes it possible to simulate a multi-tape QTM by a single tape QTM with quadratic polynomial slowdown.

Let M be a k-tape, well-formed QTM that halts in time T() on input [formula]. There exists a (k + 2)-tape, well-formed, well-behaved QTM M' with concurrent head move such that M', on input [formula] in tapes 1 to k and empty elsewhere, simulates M in time 2T()2 + (2k + 9)T() + 4. Moreover, if M is synchronous, dynamic, unidirectional, or normal form, so is M'. In particular, when M is synchronous, M' can be made stationary with extra T() + 1 steps.

Any QTM with concurrent head move can reduce the number of tapes by merging a k-tuple of tape symbols which the head is scanning, into a single tape symbol.

Let 1  ≤  m  ≤  k. Let M be a k-tape, well-formed QTM with concurrent head move that, on input [formula] in tapes 1 to m and empty elsewhere, halts in time T(). There exists an m-tape, well-formed QTM M' such that, on input [formula], halts in time T() and simulates the computation of M on [formula]. If M is dynamic, synchronous, stationary, unidirectional, or normal form, so is M'.

Simulation by Dynamic Machines.

This subsection is devoted to show that any well-formed QTM can be simulated by a certain conservative QTM with quadratic polynomial slowdown.

Let M be a k-tape, well-formed, synchronous QTM that halts in time T() on input ∈Σk. There exists a 2k-tape, well-formed, stationary, synchronous, unidirectional, dynamic QTM M' such that, on input [formula] in tape 1 to k and empty elsewhere, M' simulates M in time 2T()2 + 16T() + 4. If M has a single final state, then M' is further in normal form.

Since the proposition regards with a unidirectional QTM, it also gives an extension of Unidirection Lemma in [\cite=BV97] to multi-tape QTMs.

Simply combining Propositions [\ref=prop:concurrent] and [\ref=prop:dynamic] and Lemmas [\ref=lemma:final-state] and [\ref=lemma:one-tape], we obtain the following corollary.

Let M be a k-tape, well-formed QTM that, on input x in tape 1 and empty elsewhere, runs in time T(x). There exist a quartic polynomial and a two-tape conservative QTM M' such that, on input (1T(x),x), M' halts in time p(T(x)) and satisfies μM'(1T(x),x) = μM(x).

Note that, by modifying the simulation given in the proof of Proposition [\ref=prop:concurrent] (with O(S()T()) slowdown, where S() is any space bound of M), we can achieve a much tighter O(T(x)3) time bound. The detail is left to the reader.

Reversing a Computation.

First recall Definition 4.11 in [\cite=BV97] that defines the notion: M2 reverses the computation of M1. Different from [\cite=BV97], we only assume that M1 and M2 are well-formed QTMs (whose tape alphabets may differ) and that M1 has a single final state. We show below that we can reverse the computation of any well-formed QTM with quadratic polynomial slowdown.

Let M be a k-tape, well-formed QTM with a single final state that halts in time T() on input [formula]. There exist a quadratic polynomial p and a 2(k + 1)-tape, well-formed, synchronous, dynamic QTM MR in normal form that, on input [formula] in tapes 1 to k and 1T() in tape k + 1 and empty elsewhere, reverses the computation of T,k + 2 in time p(T()).

Theorem [\ref=theorem:reverse] leads to the following lemma. The proof of the lemma also uses an argument similar to that of Theorem 4.14 in [\cite=BBBV97].

(Squaring Lemma) Let [formula]. Let M be a k-tape, well-formed QTM with a single final state which, on input [formula], outputs b()∈{0,1} in the start cell of tape k in time T() with probability ρ(). There exist a quadratic polynomial p and a (2k + 3)-tape, well-formed, stationary, normal form QTM M' such that, on input (1T(),), M' reaches in time p(T()) the configuration in which M' is in a single final state with 1T() in tape 1, [formula] in tapes 2 to k, b() in tape k + 1, and empty elsewhere, with probability ρ()2.

Timing Problem.

Let M = (Q,{q0},{qf},Σk,δ) be a k-tape, partial, well-formed, normal form QTM. We assume that any computation path of M on input [formula] is completely determined by δ and ends with final state qf and that the length of any computation path of M on x does not exceed T(). We modify δ by forcing δ(qf,) to be |qf〉|〉|〉 for any ∈Σk and let δ* denote this modified δ. This δ* makes M halt within time T(). For clarity, let M* be the QTM defined by δ*. Although M* may not be well-formed, when the final superposition has unit L2-norm, we can still consider the acceptance probability of M* as before. Can we simulate M* on a well-formed QTM?

For convenience, we say that M is well-structured if (1) it is well-formed, (2) any computation path of M on input x is completely determined by δ and ends with a single final state, and (3) any final superposition of M* on each input has unit L2-norm. For simplicity, we write μM() to denote the acceptance probability of M* on input [formula].

Let M be a k-tape, well-structured, partial QTM in normal form such that the length of any computation path of M on each input [formula] is less than T(). There exists a (k + 3)-tape, well-formed QTM M' such that, on input [formula] in tapes 1 to k and 1T() in tape k + 1 and empty elsewhere, it halts in time O(T()2) and satisfies μM'(,1T()) = 2-  ⌊ log T()⌋ - 1μM().

Lemma [\ref=lemma:timing] solves the timing problem for any quantum complexity class whose acceptance criteria is invariant to a polynomial fraction of acceptance probability.

Oracle Quantum Turing Machines

Unlike the previous sections, we will focus on an oracle QTM, which is a natural extension of a classical oracle TM with the help of a set of oracles.

Formally, we define a (k + m)-tape oracle QTM M with m query tapes to be a septuple [formula], where Q includes [formula], a set of pre-query states, and [formula], a set of post-query states, and the transition function δ is defined only on (Q - Qp)  ×  Σk. We assume the reader's familiarity with an oracle query. For its definition, see [\cite=BV97]. Conventionally, we assume that every alphabet Σk + i, 1  ≤  i  ≤  m, includes binary bits {0,1}. Let A = (Ai)1  ≤  i  ≤  m be a series of oracles such that each Ai is a subset of (Σk + i)*. Note that query states qip and qia correspond only to the ith query tape and the ith oracle Ai.

It is important to note that Well-Formedness Lemma and Completion Lemma hold even for oracle QTMs.

Reducing the Number of Query Tapes.

We can reduce the number of query tapes by combining a given set of oracles into a single oracle together with copying a query word written in one of query tapes into a single query tape. When we copy a query word [formula] from the ith query tape, we pad the suffix 0i1m - i (between y and b) to make the copying process reversible.

Let [formula]. Let M be a (k + m)-tape, well-formed, oracle QTM with m query tapes that halts in time T() on input ∈Σk. Let A = (Ai)1  ≤  i  ≤  m be a series of oracles. There exists a (k + 2m + 1)-tape, well-formed, oracle QTM M' with a single query tape such that, on input (,1T()), halts in time 5T()2 + 8T() and μBM'(,1T()) = μAM(), where B = {y0i1m - i|y∈Ai}.

Adjusting the Number of Queries.

Let M be a given QTM. At the end of each round, in which a new QTM M' simulates a single step of the computation of M, we force M' to make a query (of the form [formula]) in 6 steps if M does not query. When M invokes an oracle query, we force M' to idle for 6 steps instead of making a query of [formula]. This proves the lemma below.

Let M be a (k + 1)-tape, well-formed, oracle QTM in normal form with a single query tape that halts in time T()d, on input ∈Σk. Let A be an oracle. There exist a (k + 2)-tape, well-formed, oracle QTM M' with two query tapes running in time 7T() on input [formula] such that M' makes exactly T() queries along each computation path and μ(A,A)M'()  =  μAM().

Adjusting the Length of Query Words.

We show that the length of query words can be stretched with quadratic slowdown. To extend the length of a query word to the fixed length T - 1, we pad the suffix 01T - |y| - 2 in 4T + 6 steps.

Let M be a (k + 1)-tape, well-formed, oracle QTM in normal form with a single query tape that halts in time T() on input ∈Σk. Let A be an oracle set. There exists a (k + 3)-tape, well-formed, oracle QTM M' such that, for every input (,1T()), it halts in time 4T()2 + 10T(), the length of any query word is exactly T() - 1 on any computation path, and it satisfies μBM'(,1T())  =  μAM(), where B = {y01m - |y| - 2|y∈A,m  ≥  |y| + 2}.

The author is grateful to Andy Yao and Yaoyun Shi for interesting discussion o quantum computation.