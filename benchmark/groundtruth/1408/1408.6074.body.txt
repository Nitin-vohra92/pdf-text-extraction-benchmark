On efficient and reliable stochastic generation of RVEs for analysis of composites within the framework of homogenization

Introduction/motivation

In this paper we describe some approaches to generate the representative volume elements (RVE) in order to estimate the effective properties of composite materials within the framework of stochastic homogenization.

Our consideration of this problem is motivated by direct applications, namely the estimation of mechanical, thermal and electrical properties of composites reinforced by spherical inclusions, microtubes as well as inclusions of irregular shapes. Our main approach to estimate these properties is based on homogenization techniques, so we need an efficient algorithm of generation of stochastic RVEs; in particular it should be sufficiently fast and require minimal interaction with the user. The nature of the considered materials defines the geometries that we need to generate, namely we focus our attention on a mixture of spherical and cylindrical inclusions that are not allowed to intersect or to overlap.

There has been a number of works on the RVE generation for various geometries of inclusions: spheres ([\cite=segu], [\cite=levesque_sp]), ellipsoids ([\cite=man] - [\cite=levesque_ell]), "spherocylinders" (cylinders with half-spheres attached to the ends - [\cite=williams], [\cite=zhao]). The common point of all these geometries is that the relative positions of two figures is characterized by simple algebraic conditions. For the applications that interest us we would need also the inclusions of true cylindrical form, since we are going to use them as elementary "building blocks" for designing and optimizing more complex geometries. The purpose of this paper is thus to present appropriate methods of dealing with such geometries in different situations occuring in pratice, give an estimation of their efficiency and implementation details.

To generate an RVE one can adapt several approaches that are more or less efficient for different geometries. The most natural and probably historically the first one is random sequential adsorption (RSA, see for example [\cite=rsa1] [\cite=rsa]) - random generation of the parameters of the geometry and verification if these parameters satisfy the imposed conditions, like the intersection one. In practice one considers an empty RVE and starts generating the inclusions one after the other and rejecting those that do not verify the conditions. This process usually solves the problem when the volume fraction of inclusions is sufficiently small, otherwise the generation process can take a long time or even get stuck while the RVE is still far from the theoretical volume fraction of inclusions.

Another family of approaches is inspired by molecular dynamics (MD): basically the generated inclusions are allowed to interact and change until the desired configuration is constructed. Here, one should distinguish two qualitatively different techniques: "event driven" and "time driven" simulation. For the "event driven" MD one is not interested in dynamics itself but only in a particular configuration when some event occurs: that can be a collision between inclusions or an interaction of an inclusion with the boundary of the considered region. For every such event, the parameters (coordinates, velocities, angular velocities, sizes...) of the inclusions are updated and the process is repeated until the desired configuration is achieved. A nice description of such a process with an example of rigid disks in a plane can be found in [\cite=LSA]; because of this publication the process is often called Lubachevsky-Stillinger algorithm. The difference of the "time driven" MD is that the parameters are updated at each time step. The former method is more efficient provided that there is an easy way to compute the time of the next event. In practice, however, already for simple geometric shapes like ellipsoids, it is not an easy task ([\cite=levesque_ell]): one needs to predict the time of collision of moving inclusions and provide a consistent model of interaction itself. In this paper, we explain how the above mentioned methods can be adapted in order to generate the RVEs with cylindrical and spherical inclusions. We describe in details the random generation of non-intersecting inclusions, as well as the relaxation procedure allowing us to produce non-intersecting configurations from the intersecting ones.

The paper is organized as follows. In the next section we discuss the conditions of intersection of spheres with cylinders and of cylinders between themselves under convenient form for verification. This is already sufficient to implement the random generation strategy described in section [\ref=sec:MC]. As an alternative to this strategy in section [\ref=sec:dynamic_geometry] we present a relaxation procedure: we describe a model for dynamics of intersecting inclusions which is then used in the time driven MD simulation. We comment on the mechanics behind this model as well as on the computational and implementation details. The short section [\ref=sec:compare] is devoted to comparison of these methods. We observe that for low volume fractions both strategies are acceptable, while for higher fraction (which we may need in the applications) only the latter one produces satisfactory results in reasonable time. We also study the dependence of time needed to generate the RVE samples depending on the geometric parameters of the configuration: relative fraction of spheres and cylinders, size and number of them.

Intersection conditions

In this section we describe the preliminaries related to the conditions of intersection of the geometric shapes that will be used as inclusions in the RVE generation. We present these conditions in the form of small algorithms to make their implementation transparent. In each algorithm we not only detect the intersection but also specify the type of it (notations of the form [formula]). The reason for this is that the application of these algorithms is twofold: in section [\ref=sec:MC] we use them as a parts of RSA-type methods (only the detection itself is important), but we also use them to define the MD interaction laws in section [\ref=sec:dynamic_geometry] (one does need to distinguish various types). These types of intersections will be described after each algorithm; an illustration of each of them can also be seen in the appendix 1 (figures [\ref=fig:sp-cyl1] - [\ref=fig:cyl-cyl9]).

Sphere with cylinder

Let us start with a simpler case of intersection of spheres with cylinders. Throughout this paper, we will characterize a sphere S by its central point [formula] and its radius [formula], and denote it [formula] The parameters for a cylinder [formula] will be its central point [formula], its radius [formula] and the direction of the axis of symmetry [formula] - a vector which is not normalized and thus encodes also the information about the (half of the)length of a the cylinder. In what follows we will use the notation a for the aspect ratio of a cylinder [formula].

To guarantee that a sphere S does not intersect with a cylinder C, one needs to verify two conditions: that there is no intersection neither with the cylindrical (curved) face nor with any of the two bases (extreme disks in the orthogonal sections). Two important quantities in the process are L -- the distance from [formula] to the symmetry axis of C and X -- the distance from [formula] to the orthogonal projection of [formula] to the axis, depending on them we check if [formula] is in the domain of intersection (waved or dotted regions of fig [\ref=fig:sp-cyl-inter_b]).

The following algorithm describes the computation. The intersection of type sc2 is the most natural, when the sphere touches the cylindrical face. Types sc3 and sc4 correspond to the sphere intersecting the disk base of the cylinder; that depends on whether or not the center of the sphere is inside the infinite cylinder. Type sc1 corresponds to a degenerate situation when the cylinder is inside the sphere.

Two cylinders

Let us now turn to the intersection of two cylinders C1 and C2. In contrast to the previous situation, we have potentially four geometries of intersection, that is all combinations of cylindrical faces or base disks.

An important (and not obvious from the first impression) observation is that one can distinguish these cases in terms of simple geometry of skew (i.e. not coplanar) straight lines. More precisely, consider the symmetry axes l1 and l2 of the cylinders, let [formula] and [formula] be the intersection points of the respective axes with the orthogonal line realizing the distance between them (fig. [\ref=fig:skew-lines]). If the cylinders are intersecting non-trivially (i.e. one is not inside the other one) but [formula] is not inside C1 and [formula] is not inside C2 then at least one of the disk bases of one cylinder intersects with the other cylinder. Let us give an idea of the proof of this statement. If there is no intersection by the cylindrical face of one of the cylinders the result is automatic. If the symmetry axes are coplanar the statement is also trivial and follows from the intersection of rectangles in this plane. Else, consider the intersection of infinite cylinders with the generating axes l1 and l2. They are quadratic surfaces in [formula] and their intersection is given by continuous curves. Since the distance between the axes is less than the sum of radii of the cylinders there are points belonging to these curves lying in the plane orthogonal to l1 that contains the segment

[formula]

Random generation

The algorithms presented in the previous section allows one to formulate explicitly the method of generating the RVE containing non-intersecting spherical and cylindrical inclusions. As we have agreed, a sphere is characterized by its central point [formula] and its radius by rs, the cylinder by its central point [formula], its radius rc and the direction of the axis of symmetry [formula]. Suppose that the volume fractions fs, fc as well as the number ns, nc of spheres and cylinders are given, let us also fix the aspect ratio [formula] of all the cylinders. This defines the size of all geometric shapes. Thus, creating a random sphere is just generating three real numbers to form [formula]; for a cylinder one needs to provide six numbers: for [formula] and [formula], and then rescale [formula] to fit the aspect ratio. The natural RSA-type algorithm is then the following: As one sees from the above algorithm there is an issue of periodicity to deal with. The reason for this is that the concept of RVE has to cover the cases when the inclusions penetrate the boundary of the considered volume. The convention that is often used is that the part of the inclusion that exits the volume is mapped periodically to the other side of it. From the point of view of implementation it means that each generated object should have an attribute of intersecting the boundary of the RVE, which is assigned depending on its geometric properties. (We leave the formulation of explicit conditions of this intersection as a simple exercise for a curious reader). If this attribute is present, the algorithm [\ref=alg:sp-cyl] or [\ref=alg:cyl-cyl] should be applied to all the couples of the objects or their periodic images. One should not forget, that one object can potentially intersect several RVE's boundaries, e.g. a sphere centered in the corner of the RVE should be considered as eight objects.

Let us also note that one can suggest several versions of the above algorithm, all of the RSA type. Namely there is a freedom in the choice of the order of generation of spheres and cylinders: first all the cylinders, first all the spheres, or some mixed order. We have made several tests of efficiency depending on the generation strategy. The results are shown on the figure [\ref=fig:gen_order]: there is no particular optimal strategy, since generating first the cylinders gives better performance on small volume fractions, but generating the spheres first permits us to achieve higher volume fractions, so the choice should apparently be made empirically depending on concrete applications. In what follows we have chosen "cylinders first" strategy for comparison, since for higher volume fraction we will suggest another algorithm.

We have performed several tests in order to study the dependence of the generation time on various parameters of the RVEs. The typical generation time is of order 10- 3 seconds for small total volume fraction of inclusions (like 10%) and it may reach several seconds for relatively high one (35%).

We clearly observe that in many cases the same total volume fractions are easier achieved by generating spheres than cylinders, which is reasonable, since the cylinder intersection verification is longer. There is however a little saturation effect in the extreme case: when there are a lot of cylinders, representing a relatively low volume in total - this apparently is influenced by our choice of the "cylinders first" strategy. It is also quite predictable that the same volume fraction is achieved faster with the smaller number of inclusions, outside the saturation effect certainly. We also see that assembling cylinders with a higher aspect ratio (ratio between its length and diameter) is more difficult than with a lower one, which is also intuitively understandable. The details of these tests can be found in tables [\ref=tab:RSA10] - [\ref=tab:RSA50] in the appendix 2.

During the tests we have fixed the maximal permitted generation time to 50 seconds. With this limitation we were able to reach the total volume fraction of 35% with almost any distribution of this volume between spheres and cylinders. Certainly if one is sufficiently patient it is possible to generate the RVEs with higher volume fraction (permitted by geometry), with however a necessity to eventually relaunch the program in the case of stagnating configuration. As a global conclusion, we see that the method is very efficient for low volume fractions, and the generation time increases rapidly for medium values of order 30 - 35%.

Time driven molecular dynamics

We have seen in the previous section that as expected, the RSA-type algorithms of generation the RVEs are efficient when the desired volume fraction is small enough. We have also observed that for higher volume fractions the time of generation grows substantially and one cannot guarantee that the desired number of inclusions will be reached even if the volume fraction is quite far from the theoretical value for a dense packing. This effect is perfectly explainable since it is rather easy to generate examples of "bad" geometries even with low number of inclusions.

In the introduction we mentioned other strategies of generation of RVEs based on improvements of the RSA-type algorithms or molecular dynamics. We have chosen to implement the so-called time driven version of the latter one. The scheme is the following: all the inclusions are generated not taking intersections in the account, then the interaction force is assigned to each couple of intersecting inclusions, the dynamics governed by these forces is described by a system of ODEs, that are solved numerically in order to achieve a relaxed configuration. In their dynamics the inclusions are also affected by damping forces that are supposed to slow the system down and make it stay in the relaxed configuration.

Before going into details let us explain the choice of this strategy in comparison to a couple of other possible ones. We could have applied the pattern presented in [\cite=levesque_ell] in the context of ellipsoids. The major problem there would be to formulate an efficient algorithm of collision time computation. We have seen in the section [\ref=sec:static_geometry] that the intersection condition for cylinders can be verified algebraically, however, in contrast to ellipsoids, there is no "nice" way to characterize it in terms of zeros of some function (to our knowledge at least). This means that using the rigid colliding cylinders for event-driven MD would lead to solving a complicated minimization problem at each step. Moreover the collision problem for two rigid cylinders is also more involved. That is we doubt this approach to be more efficient than just integrating the ODEs. The other possible option would be to modify the RSA algorithm using some random moves of the inclusions, like in [\cite=rsa+random]. There, the difficulty would be that because of the complexity of geometry under consideration one random move will not be enough to exclude all the intersections. A possible modification of this method is to consider several random moves to reorder the configuration - this boils down to a rather classical approach to minimization of the functional using the Monte Carlo techniques ([\cite=Monte-Carlo]) and needs the functional characterizing the intersection to be defined. We expect this approach to be very close to the direct time-driven MD both in the local relaxation trajectory and efficiency.

Let us now turn to the description of the interaction of inclusions. As we have outlined before the idea is to introduce the forces if two inclusions intersect. In our model the forces will be of linear elastic nature, that is the value of the force is proportional to the depth of overlapping domain. The direction will be certainly chosen to make the forces repulsive. For example for two spheres [formula], [formula]: if [formula], the force acting on S1 is [formula]. The force acting on the second sphere is certainly opposite: [formula].

For the forces acting on cylinders it is necessary to specify the point of application, since their motion also includes rotation. The table [\ref=tab:forces] recapitulates all the forces that can act on a cylinder depending on the type of intersection from the algorithms [\ref=alg:sp-cyl] - [\ref=alg:cyl-cyl], using the same notations as in section [\ref=sec:static_geometry]. The described forces always act on the first cylinder or the only one in the corresponding algorithm, the force acting on the other object is opposite and has the same application point. To compute the force between each couple of objects one needs to apply the algorithm [\ref=alg:sp-cyl] or [\ref=alg:cyl-cyl] and choose the corresponding expression from the table. Continuing the remark from the previous section let us note the intersections of types cd1 - cd3 and d1 - d2 can be combined, it means that one may need to consider simultaneously the forces coming from these types of intersection.

These forces will enter directly in the differential equations governing the motion of the spheres described by the position of the center of mass [formula] and its velocity [formula]. As for the motion of the cylinders we represent it as a composition of a translation characterized at every moment by the velocity [formula] of the center [formula] and a rotation around it characterized by the angular velocity [formula] (according to [\cite=arnold], this can always be done). If one knows these quantities at every moment this induces a relatively simple kinematic law of motion for the variables defining the position of the cylinder:

[formula]

For constant [formula] and [formula] these equations define the dynamics of a rigid body (cylinder) in the absence of external forces. The interaction with other inclusions results in additional evolution equations (that can be deduced using the techniques of Lagrangian mechanics [\cite=arnold]):

[formula]

where m is the mass of the cylinder, [formula] - its angular momentum, and [formula] is the moment of the external force [formula] applied at a point [formula]. At each moment there exists a linear operator relating [formula] and [formula], so in principle by inverting it, one can recover [formula]. However, this operation is not that much explicit. The total angular momentum of the rigid body is [formula], [formula] being the spatial variable running along the whole body; thus, the linear operator in general does depend on time, except for some specific choice of moving coordinate system that will have to be chosen independently for each body in the system at each timestep. To avoid this we make a couple of simplifications in the model. First, we assume that the mass in a cylinder is concentrated along its axis, i.e. dynamically the cylinder becomes a thin rod affected however by external forces applied to the whole volume. This simplification is legitimate since anyway we disregard the rotation of a cylinder around its symmetry axis. Already, this allows us to simplify the angular momentum to [formula], where α is the angle between the angular velocity vector and the axis of the cylinder, and [formula] is the (semi)length of the cylinder that remains constant. Note that this factor of sin 2(α) defines the relation between the translation and rotation acceleration. As we are not interested in the precise dynamics of the system provided that it is qualitatively acceptable, we can simplify the equations even further by replacing this factor by its spatial mean value of [formula]. So the mechanical equations that we are finally solving read:

[formula]

We will see that even this simplified model governs rather well the desired dynamics. But before discussing this, let us introduce the last ingredient of the model - the damping forces that we have already mentioned.

It is clear that without dissipation there is no reason for the system to stay in the relaxed configuration: even non-intersecting the inclusions will have non-zero velocity and can collide again. To deal with this fact we introduce dissipative forces to the system. We will consider two damping models: the usual viscous one and the so-called mechanical thermostats. The first one amounts simply to adding a force proportional to the velocity or the angular velocity of the body with a negative constant prefactor -  β. The second one is characterized by a non-linear damping force which is worth being commented on in more details. The idea of introducing mechanical thermostat comes directly from molecular dynamics or more specifically from the simulation of molecular systems at constant temperature. The key point is to introduce a damping force of the form [formula], where in contrast to ordinary viscous damping the coefficient γ depends on the temperature (i.e. the kinetic energy) of the whole system. In the Berendsen thermostat ([\cite=ber]) the prefactor is computed explicitly using the formula

[formula]

where α is a generally small constant coefficient, Ekin - the kinetic energy of the system, N - number of degrees of freedom, kB - Boltzmann's constant, T - desired temperature; the expression in brackets corresponds thus to the difference between the actual kinetic energy and its value corresponding to the temperature T. The idea is that when the energy is high, γ is positive and the force slows (cools) down the system, if on the contrary the energy is low, γ is negative and the force accelerates (heats up) the system. In the Nosé-Hoover thermostat ([\cite=nose] [\cite=hoover]) the logic is rather similar, but the coefficient is defined by the differential equation:

[formula]

It has been shown ([\cite=golo-shaitan1]) that the Berendsen thermostat indeed brings the system to the desired temperature (i.e. Ekin approaches [formula]), and does it exponentially fast. But it fails to reproduce the correct energy distribution against degrees of freedom ([\cite=golo-shaitan2]), namely the collective (corresponding to global translation or rotation as a rigid system) degrees of freedom are overheated, while the others are frozen. In the Nosé-Hoover model energy oscillations and resonance effects have been observed ([\cite=gss]). All these effects make it difficult to apply these thermostats in realistic molecular simulations; we can however profit from them for our purposes. Indeed, heating up the collective degrees of freedom by Berendsen thermostat will precisely mean that the inclusions tend not to intersect, otherwise the distance between them will oscillate. And oscillatory regimes of the Nosé-Hoover thermostat can help to spontaneously heat up the system to reshuffle it. Or even simpler one can consider these models at zero temperature to freeze the system fast close to the relaxed configuration. It turns out that a combination of these approaches can lead to a more efficient algorithm of relaxation. The full model thus includes the viscous damping, the Berendsen thermostat that are always present and the Nosé-Hoover one which is eventually "switched on" when the relaxation stagnates. The system of ODEs governing the model reads:

[formula]

where [formula] is the j-th force acting on the i-th sphere, and [formula] is the j-th force acting on the k-th cylinder; for the system of ns spheres and nc cylinders the number of degrees of freedom in the definition of thermostats N  =  3ns + 5nc. We have put all the masses equal to 1, although one can choose another convention, for instance the mass and the damping coefficient β can depend on the volume of the inclusion.

The last but not the least point in description of this method is the condition to stop the simulation. It is clear that a totally relaxed configuration corresponds to the volume occupied by all the inclusions equal to the desired one. Computation of the overlap volume at each integration step is rather long. To overcome this difficulty we introduce the notion of potential energy which is basically the sum of squares of norms of the internal forces (table [\ref=tab:forces]), that is it uses the quantities computed at each step anyway. The simulation is stopped when this energy is lower than some critical value, that we advise to determine for each family of simulations by performing several test runs. The figure [\ref=fig:stop-cond] shows that this energy is perfectly correlated with the real value of the overlap volume.

Having now the full model we have performed the above mentioned validation campaign in order to make sure that the dynamics governed by the simplified mechanical equations ([\ref=mech]) is acceptable. The figures ([\ref=fig:sp-sp] - [\ref=fig:cyl-cyl9]) in the Appendix 1 show typical intersections of couples of spheres and cylinders and their configuration after the relaxation process governed by the equations ([\ref=system]). As one sees the dynamics is precisely as expected from the physics of the model (see the figure captions for more details in each case).

Let us make several remarks concerning the implementation of the above relaxation method. As we have already mentioned we are not interested in high precision for the relaxation trajectory, as long as it does lead to the relaxed configuration. There is thus no need in involving advanced algorithms of numerical integration of ODEs: Leapfrog or velocity Verlet, or even trapezoid method already do the job rather well. Like in the previous section, we should not forget about the boundary conditions for the dynamics. To take them into account, an attribute of being close to the boundary is assigned to inclusions, and depending on it the periodic images are also taken into account to compute interaction forces. This attribute now has to be updated at each integration step.

Before turning to concrete computational results, let us also note that the described process allows one to introduce various numerical tricks, like reshuffling by the Nosé-Hoover thermostat, that we have already mentioned. Another one, which is useful for applications, is related to the fact that close to the relaxed configurations, the introduced forces necessarily become small, that slows down the process. A natural way to speed it up is to rescale the forces when the energy decreases. In practice, we introduce a global prefactor for all the forces, which is increased every time when the energy decreases for an example by a factor of two. This allows one to have reasonable gradients in the beginning of the relaxation process and terminate the process rather fast. The figure [\ref=fig:force-factor] shows the acceleration of the relaxation process due to this idea.

As in the previous section, we have performed the tests to study the efficiency of the suggested method. The time of generation at low volume fractions is of the order 10- 1 seconds, which is slower than with the RSA-type algorithm. But the MD method allows us to achieve volume fractions of 50% and even more within several seconds, while for such values the RSA method almost never produces a result. The tendency is also roughly the same: spheres are easier to generate than cylinders, and it is more difficult to treat higher aspect ratio. We should note however, that there is no pronounced saturation effect with the MD method, i.e. one can achieve high volume fractions, conjecturally up to the theoretical limits. The tables [\ref=tab:MD10] - [\ref=tab:MD50] from the appendix 3 show these dependencies in more details.

Efficiency comparison

From the previous two sections one can already get the idea that the RSA algorithm is much more efficient for low volume fraction but the time driven MD allows one to achieve higher fractions, for which RSA stagnates: it is sufficient to compare the upper-left corners of tables [\ref=tab:MD10] - [\ref=tab:MD50] with [\ref=tab:RSA10] - [\ref=tab:RSA50]. This effect is perfectly understandable: every elementary step of the RSA method consists of the algorithm [\ref=alg:sp-cyl] or [\ref=alg:cyl-cyl] to be applied to the newly generated object and all the objects memorized before, while for MD the same algorithms are to be applied to all the couples of objects at each timestep. For relatively low volume fraction the collisions in the RSA method appear rather rarely, while the MD method still needs to make several steps to converge. When the volume fraction increases the number of rejected inclusions for the RSA grows fast and at some point the total computation time becomes greater than for the MD. The figures below show this comparison for some cases in more details.

First let us fix the volume fraction (0.3 for RSA and 0.5 for MD) and see how the time of generation depends on the distribution of this fraction between spheres (fsp) and cylinders (fcyl). The figures ([\ref=fig:RSA030]) and ([\ref=fig:MD050]) show that for MD it is clearly more difficult to treat the cylinders, and for RSA the same phenomenon takes place for high proportion of cylinders. The same saturation effect as before is observed for high proportion of spheres, which can be handled by changing the generation strategy.

The following pictures ([\ref=fig:cyls_only] - [\ref=fig:sp_only]) show the dependence of the generation time (as usual averaged over 20 runs) on the total volume fraction for spheres, cylinders, and their mixture. From them we clearly see the advantage of the RSA algorithm for small volume fractions as well as the capabilities of the MD method for higher ones. We have mentioned before that generating cylinders with higher aspect ratio a is more complicated for both algorithms. It is pretty obvious that for very high aspect ratio it is difficult even for rather low volume fraction of inclusions - we indeed observe this effect in the tests. To give an example, consider the generation of the RVE by the RSA technique with a mixture of spheres and cylinders at total volume fraction of 10%. At the aspect ratio a  =  5 it takes about 2  ·  10- 3 sec., for a  =  25 the time is close to 10- 2 sec., for a  =  50 it approaches 0.1 sec., and for a  =  100 it exceeds 10 sec. We should mention that the reason of the effect is twofold. First, with long cylinders it is easier to construct non-acceptable geometries of RVEs, especially in combination with a few large spheres. This makes the RSA algorithm get stuck and the MD to perform more verification steps. Second, and even more important, there is a limitation on the length of cylinders: we find it natural to consider inclusions that are smaller than the studied RVE, in particular an inclusion should not intersect its periodic image. This forces the lower bound on the number of cylinders: [formula]. One thus needs to apply the algorithm to a much bigger number of inclusions (150 in the above example for a  =  100) or review the notion of RVE for high aspect ratio.

Conclusion/outlook

In this paper we have presented the methods of generation of RVEs and performed the tests of their efficiency. We have seen that the RSA type algorithm allows us to generate the configuration extremely fast when the volume fraction is rather small. The MD-based algorithm does not have this limitation and permits us to achieve configurations even close to theoretical maximum of volume fraction.

As it follows from the title the main motivation for this work is to construct the RVE samples for computation of effective properties of composite materials. The computational methods that we use in the current work in progress are based on homogenization techniques using the Fast Fourier Transform or finite element method. Here we should mention that the methods described in this paper are very well adapted to such applications. First, the algorithms are very flexible towards the modifications of the input data. For example, instead of using the identical spheres and cylinders as we did for efficiency tests, one can introduce any deterministic or probabilistic law for the parameters of their geometry. The computation that we perform in order to study the effective properties of composites shows that such modifications do not spoil the efficiency of the methods. Second, the format of the output of the algorithms is very convenient for further usage in the computations, namely having all the information about the RVE encoded in the concise vector form we can on the one hand pixelize it to have a natural discretization of the analyzed sample, and on the other hand keep track of orientations of the inclusions (see figures [\ref=fig:RVE02], [\ref=fig:RVE04]). In the context of composite analysis, pixelization is also a powerful tool. One can for instance introduce deformations of inclusions, detect the boundary and assign various properties to it, add defects etc. The figure [\ref=fig:waved] shows the section of an RVE with waved cylinders and spheres and a highlighted interphase between the matrix and the inclusions. Moreover from the pixelized RVE we can easily construct a mesh for validation of the computation by Finite Elements method (taking the voxels as elements). Third, the main criteria of efficiency that we studied was the time of generation, which is reasonable since the methods are not memory consuming. To give an idea, let us mention that one computation of the homogenized stiffness tensor for a 3D sample discretized at the resolution [formula] can take several hours for high contrast between the properties of the matrix and the inclusions. It means that the suggested methods are indeed efficient as the time of generation of the sample is negligible in comparison to the time of computation.

The presented methods are very flexible towards various fine-tuning procedures. For example in the description of the methods we potentially authorized the tangent contacts between the inclusions (which is reasonable for our applications), but it is possible to avoid them by just modifying the effective interaction distances. One can also construct more complex geometries by authorizing some types of intersections, which is easy to check since all the information of the geometry of the sample is encoded in a concise vector form. More precisely in the MD-based methods one can impose fixed distances or angles between some inclusions to produce interesting figures. Because of the natural form of the evolution equations ([\ref=system]) these restrictions can be implemented using a well-developed formalism of mechanical systems with constraints and Lagrange multipliers ([\cite=lagrange]).

Let us also note that the presented methods can be useful for a purely mathematical purpose of studying the dense packings of simple geometric objects. For example with MD we managed to generate a configuration which is very close to the periodic one described by Gauss to realize the maximal volume fraction occupied by identical spheres.

Appendix 1. Validation of dynamics

The figures [\ref=fig:sp-sp] - [\ref=fig:cyl-cyl9] represent typical intersections of spheres and cylinders and the result of application of the relaxation procedure to them.

Appendix 2. Time needed for generation using the RSA algorithm

The tables ([\ref=tab:RSA10] - [\ref=tab:RSA50]) show the dependence of time of construction of the RVEs following the algorithm [\ref=alg:mc_gen] on various parameters of them: volume fractions fs,fc, number of inclusions, their geometry. The couples of numbers in the cells of the tables correspond to two values of the aspect ratio a of cylinders (ratio between its length and diameter). The time estimation (in seconds) is averaged over 20 runs.

Appendix 3. Time needed for generation using the MD method

The tables ([\ref=tab:MD10] - [\ref=tab:MD50]) show the dependence of time of construction of the RVEs using the time-driven MD relaxation method on various parameters of them: volume fractions fs,fc, number of inclusions, their geometry. The couples of numbers in the cells of the tables correspond to two values of the aspect ratio a of cylinders (ratio between its length and diameter). The time estimation (in seconds) is averaged over 20 runs.