Lemma Corollary

Thin Tree Position

Introduction

A number of problems in machine learning, data mining and signal processing require that one find a partition of a graph with small boundary weight, but whose subsets have relatively large interior weights. These graphs may directly represent the given data (as in the case of social networks) or be derived from vector data via a heuristic such as k-nearest neighbors. In either case, these graphs often have millions of vertices, making a brute force search for efficient partitions infeasible.

In the present paper, we introduce an approach we call Thin Tree Position (TTP) for finding efficient partitions of graphs by carrying out a more targeted search, using intuition from three dimensional geometry/topology. This approach builds on the TILO/PRC (Topological Intrinsic Lexicographic Order / Pinch Ratio Clustering) algorithm introduced in [\cite=thingraphs] and [\cite=sdm13prc], but improves on a number of deficiencies of this approach. The TILO/PRC approach consists of two steps: First, the TILO algorithm assigns a linear ordering to the vertices of the graph G and then progressively improves this ordering with respect to a carefully chosen metric. Next, the PRC algorithm picks out consecutive blocks in the final TILO ordering that make up the partition.

Both TILO and TTP are algorithms that use ideas from low dimensional topology, specifically the concept of thin position of knots and 3-manifolds [\cite=Gabai] [\cite=st:thin]. As such, these methods rely on the broad shape of the data set instead of its exact geometry. Carlsson has argued that algorithms of this type should perform well for certain problems and can give more information than existing methods [\cite=Carlsson09]. We expect that TTP will be useful for clustering as well as other applications in topological data analysis.

The present approach addresses two major issues with TILO/PRC: First, the linear nature of TILO/PRC forces it to treat the subsets of the partition at the front and back of the TILO ordering differently from the subsets in the middle. As we describe in Section [\ref=sect:tpts], the TTP algorithm replaces the linear ordering with a trivalent tree structure that allows all the subsets to be treated consistently. As we discuss in Section [\ref=sect:compare], this structure is a natural generalization of TILO orderings.

Second, the gradient-like TILO step of the TILO/PRC is relatively constrained. In order to make the search space reasonable, TILO only looks for ways to shift a single vertex at a time forward or backward in the ordering. Because TPT uses a tree structure, the equivalent step in TPT is able to move entire branches, which would be equivalent to allowing TILO to shift arbitrary subsets of consecutive vertices. However, as we describe in Section [\ref=sect:reduction], this tree structure has a very simple reduction criterion analogous to that of TILO/PRC.

Thin position trees

Consider an undirected graph G  =  (V,E) in which every edge e∈E has two distinct vertices and every edge is assigned a positive real number w(e) called its edge weight. In many cases, each edge weight will simply be 1. The weight of a subset of edges F  ⊂  E will be the sum of the weights of those edges, [formula]. An edge is also specified by the two endpoints f  =  (vi,vj) for f∈E,vi,vj∈V. A short hand of the weight function is used for vertices and for sets A  ⊂  V,B  ⊂  V,

A 3-Cayley tree [\cite=CayleyTrees2012] is a connected acyclic graph in which every non leaf vertex has degree of exactly three. We call the leaf vertices boundary vertices and the degree three vertices interior vertices.

A 3-Cayley tree is also know as a boron tree [\cite=BoronTrees2013] in which the interior vertices correspond to boron atoms and the boundary vertices correspond to hydrogen atoms. The number of interior vertices of a 3-Cayley tree is always two less than the number of boundary vertices; this can be proved, for example, using an inductive argument, or from the fact that the Euler characteristic of a tree is one.

We will use 3-Cayley trees to study general graphs as follows:

Given a finite graph G, possibly with weighted edges, a tree position for G is a pair [formula] where C is a 3-Cayley tree and [formula] is a one to one map from the vertices of G onto the boundary vertices of C.

Figure [\ref=fig:treeposition] presents example tree positions [formula] and [formula] for the graph at the top of the figure. The outlined circles represent interior vertices, while the filled in circles are boundary vertices of a tree position. In this figure, the relative positions of the vertices of the graph are maintained in displaying the boundary vertices of the tree positions.

Given a tree position [formula] for a graph G, let v,w be vertices of G spanned by an edge e. Because C is a tree, there is a unique simple path in C from [formula] to [formula]. We say that the edge e passes through each of these edges of C. In other words, if f is an edge of C then for any topological map from the realization of G to the realization of C, as in the picture of Figure [\ref=fig:topomap], the image of e would be forced to intersect f. For an edge f of C, let R(f) be the set of edges of G that pass through f.

Given a subtree T of a tree position [formula] of G = (V,E), the set of vertices of V that are the image of the boundary vertices in T is [formula].

Let f and g be two distinct edges of a tree position [formula]. Two subtrees of C are defined by cutting the edge f. The subtree containing g is denoted , and the subtree not containing g is denoted .

Note that one endpoint of f is in and the other is in . Thus cutting an edge f of a tree position [formula] divides the vertices of G into two disjoint sets: and .

Given a tree position [formula] for a graph G, the width b(f) of an edge f in C is the sum of the weights of the edges of G that pass through f:

[formula]

or for some edge g of C with g  ≠  f.

Note that we indicate the width of f by b(f) rather than w(f) because it is equal to the area of the boundary of the subset of G defined by the boundary vertices in either of the subtrees of C defined by removing f. This notation is also in line with the notation in [\cite=thingraphs]. A notion of width for a tree position, analogous to the width of a TILO ordering, is created by placing the widths of all of the tree edges into a multiset and sorting in nonincreasing order. Tree widths can then be compared by a lexicographic ordering of the widths. In Figure [\ref=fig:treeposition] the edges of graph G have weight one and the edges of the tree positions are denoted with their width. The width of [formula] is (3,3,3,3,2,2,2) and the width of [formula] is (3,3,3,2,2,2,2). Since the width of [formula] is less than the width of [formula], we say that tree position [formula] is thinner than tree position [formula]. As with linear TILO, we would like to find tree positions whose widths are as low as possible. To do this, a branch shift operation that is analogous to the TILO shift is defined. A branch shift is described by two equivalent operations: first an edit operation of removing and reattaching a vertex (see Figure [\ref=fig:bsEdit]), and second a cyclic shifting of edges (see Figure [\ref=fig:bsCycle]).

Given a 3-Cayley tree C, let x and y be edges of C that do not share a common endpoint. Since C is a tree, there is a unique simple path from x to y. Let vertex u be the endpoint of x that is shared with the first edge of the path, e. Let edge f be other edge sharing vertex u. Removing vertex u from C is the operation of disconnecting edge e from vertex v (the other endpoint of e), disconnecting edge f from vertex u, and attaching the free end of f to vertex v. Let vertex s be the common endpoint of y and the last edge of the path. Let edge g be adjacent to y and the last edge of the path. Adding vertex u to C is the operation of disconnecting edge g from from vertex s, attaching the free end of edge e to vertex s, and attaching the free end of edge g to vertex u. See Figure [\ref=fig:bsEdit] for an example in which the original tree position is at the top, the middle is the tree position after modifying the edges but not moving any vertices in the display, and the bottom is the same tree position but with vertex u moved in the display.

An alternative view of a branch shift operation is that of a cyclic shift of the edges adjacent to the path from x to y. In this view, x, y, and all of the non-path edges sharing a vertex in the interior of the path are disconnected. Edge x is reattached at edge y's old location. The rest of the edges are reattached one vertex over in the direction of x. See Figure [\ref=fig:bsCycle] for an example.

The difference between viewing the branch shift as a cyclic shift of edges and the edit operation is just a relabelling of edges and internal nodes. The cyclic shift of edges will be used when making a connection to shift operations on TILO linear orderings. A typical software implementation will use the edit operation. Applying the branch shift move on C creates the new tree C' and is described as shifting x to y. Note that shifting y to x produces a different tree than shifting x to y.

If we perform a branch shift on a 3-Cayley tree C, the boundary vertices of C are not touched. There is thus a canonical map from the boundary vertices of C to the boundary vertices of C'. If [formula] is a tree position for a graph G then composing [formula] with this canonical map defines a one to one map φ' from the vertices of G to the boundary vertices of C', which in turn defines a new tree position for G. In this paper, C and C' will share the same set of boundary vertices and the canonical map is just the identity map, = [formula].

The tree position (C',φ) is a branch shift of (C,φ) when C' is a branch shift of C.

The new tree position defined by a branch shift has its own width, which may be higher or lower than the original.

A tree position [formula] is weakly reducible if there is a branch shift that produces a new tree position with strictly lower width. Otherwise, [formula] is strongly irreducible or a thin tree position.

Comparing TILO tree position orderings to TILO linear orderings

Initially, the idea of tree position may appear to be completely different from the linear orderings used in the original TILO algorithm. However, as we will see in this section, it is in fact a very natural generalization.

The TILO algorithm as described in [\cite=thingraphs] begins with a linear ordering of the vertex set V, i.e. a one to one function from V onto the set [formula], where N is the number of vertices in V. We will call this function a TILO ordering. A TILO ordering of V defines a sequence of subsets Ai  =  {v∈V | o(v)  ≤  i}. This, in turn, defines a sequence of boundary widths [formula] where [formula] is the complement of Ai. Given a TILO ordering o:V  →  [0,N  -  1], we say that a second TILO ordering o' is the result of a shift on o from a to b if o' of the composition of o with a cyclic permutation of the block

[formula]

that sends a to position b. For example, for N  =  8, a shift of 2 to 5 takes the sequence 0,1,2,3,4,5,6,7 to 0,1,3,4,5,2,6,7. The shift from 5 to 2 takes the initial sequence to 0,1,5,2,3,4,6,7. The width of a TILO ordering is the multiset of widths bi sorted in nonincreasing order. Lexicographic order is used to compare widths.

A TILO linear ordering o is called weakly reducible if it satisfies the reduction criteria in Lemma [\ref=lem:TILOreduction]. A TILO linear ordering is called strongly irreducible if it is not weakly reducible.

By definition, a weakly reducible ordering admits a shift that decreases its width. The TILO algorithm performs the series of shifts determined by Lemma [\ref=lem:TILOreduction] that reduce the width until it finds a strongly irreducible ordering. (Because there are a finite number of orderings, at least one must be strongly irreducible.) To present Lemma [\ref=lem:TILOreduction], we first need to define slope si,k with respect to order o is as the sum of the edges from vertex vo(k) to other vertices in [formula] minus the sum of edges from vo(k) to other vertices in Ai: where [formula] means set difference. The adjacency ai,j with respect to order o is the edge weight between the i-th and j-th vertices of order o: ai,j  =  w(vo(i),vo(j)). The following lemma is a slight rewording of [\cite=thingraphs] for the case of shifting a vertex earlier in a ordering with a vertex later in the ordering.

A TILO linear ordering o is weakly reducible if for some i and k such that k  <  i the following conditions hold: In this case, shifting k to i reduces the width of o.

The analogous result for when k  >  i also holds but is not needed for this paper.

To make a connection between a linear ordering and a path view of a tree ordering, the following structures are defined. Recall that a partition P of a set A is a collection of pairwise disjoint subsets [formula] of A whose union is A. In other words, each element of A is in exactly one subset Pj.

Given a graph G = (V,E) and a partition P of V, the quotient graph Q  =  Q(G,P) is a weighted graph whose vertices correspond to elements Pj of P and whose edges are defined as follows: if vs∈Pi, vt∈Pj, i  ≠  j, and (s,t)∈E then there is an edge (i,j) in Q with weight w(Pi,Pj).

Note that the quotient graph only accounts for edges that go between different sets in the partition and ignores edges between vertices that are in the same subset Pj. The quotient graph corresponds to a coarsening of the original graph in multilevel graph algorithms [\cite=multilevelGraph] [\cite=karypis1998parallel].

A tree position (C,φ) for a graph G can be used to define a number of different partitions of G. This paper is interested in a partitioning related to the branch shift operation with the following definition.

Given a tree position [formula] for a graph G and any pair of nonadjacent edges x and y, we can construct a partition of the vertices of G using the following approach. Denote the edges in the unique simple path from x to y as pt with t = 1 for the edge adjacent to x and t = i for the edge adjacent to y. Label the edges sharing a common vertex with adjacent path edge pairs as follows: p0 for pair x and p1, pi + 1 for pair y and pi, and ft for pair pt - 1 and pt with 2  ≤  t  ≤  i. See Figure [\ref=fig:bsqg] for an example. Define the sets Pt as

[formula]

We will call the quotient graph created using the partition [formula] the branch shift quotient graph of G induced from x, y, and [formula].

The partitions Pj of a branch shift quotient graph are disjoint. The only vertices not in the union of subtrees cut from C are the vertices along the path from x to y, which must be interior vertices. Hence all of the boundary vertices are covered by the subtrees and the mapping back to G covers all of the vertices of G. Thus P is indeed a partition of V.

The smallest number of partitions in a branch shift quotient graph of G induced from x, y, and [formula] is four. This occurs when the path from x to y is just a single edge. The largest possible number of partitions in a branch shift quotient graph is |V|, the number of vertices in G. This occurs when the path from x to y contains every interior vertex of C. Each partition is then a singleton set.

TILO uses a linear ordering of vertices. A natural ordering of the vertices of Q is to use an identity map. That is, if uj is the vertex of Q corresponding to subset Pj then it is in the jth position of the linear order. We demonstrate a connection between this TILO ordering and the tree position with a series of Lemmas.

Given a branch shift quotient graph Q induced from edges x, y, and tree position [formula], the t-th width bQ(t) using the identity map ordering on Q is equal to b(pt), the width of edge pt on the tree position [formula] where path edges pt are defined in Definition [\ref=def:bsqg].

The t-th width using the identity map linear ordering of vertices is the sum of edge weights for edges (j,k)∈Q such that vj is in set [formula] and vk is in set [formula]. Since edge weight (j,k) is defined as weight w(Pj,Pk), this becomes Recall that the boundary at an edge in C can be defined in terms of all the edges of G that pass through it, [formula], or in terms of the edges between the sets of vertex images of the subtrees created by cutting at pt, Edge pt is not contained in any subtree used to define the partitions in Definition [\ref=def:bsqg] therefore each subtree (and corresponding partition) must be completely on one side of the cut of edge pt. Thus

[formula]

Since subsets Pj, Pk form a partition and

[formula]

then

[formula]

With the two pair of sets being equal, the weights are also equal:

[formula]

A branch shift on tree position [formula] creates a new tree position [formula] for G. Let the branch shift be the shifting of edge x to edge y for any pair x and y of nonadjacent edges of C. Let Q be the branch shift quotient graph of G induced from x, y, and [formula]. Using the notation from Definition [\ref=def:bsqg], the before and after views of a branch shift are presented in Figures [\ref=fig:bsqg] and [\ref=fig:shifted]. Note that the edges p0 to pi + 2 are not modified nor are the subtrees opposite the cut of edges x', y', f2' to fi'. Let Q' be the branch shift quotient graph of G induced from f2', x', and [formula].

The branch shift quotient graph Q' defined above is equal to the original branch shift quotient graph Q.

The each Pj of the partition used by the original branch shift quotient graph is defined in Definition [\ref=def:bsqg] using the subtree from the far side cut of an edge adjacent to, but not on, the path between x and y. The branch shift operation cuts these edges and then reattaches them to vertices on the path between x and y. This operation does not touch the subtree on the far side cut of the edge. Thus the subsets Pk' used by Q' are just a relabelling of original subsets; explicitly, P0'  =  P0, Pi + 2' = Pi + 2, Pi + 1' = P1, and Pt' = Pt + 1 for 1  ≤  t  ≤  i. Therefore, the partition defined after the branch shift is the same as the partition before the shift and hence the quotient graphs are equal.

Since the quotient graphs are equal, i.e. Q'  =  Q, we can compare the linear TILO orderings on Q defined by the tree positions (C,φ) and (C',φ).

The TILO ordering on Q defined by (C',φ) is the result of starting with the ordering defined by (C,φ) and cyclicly shifting the vertex at position 1 to position i + 1.

Let uj and uj' be the vertices of Q and Q', respectively. As noted in the proof of Lemma [\ref=lem:branchmovequotient], the subsets Pk' used by Q' are relabelling of the subsets Pj used by Q. This results in the following relabelling of vertices: u0'  =  u0, ui + 2' = ui + 2, ui + 1' = u1, and ut' = ut + 1 for 1  ≤  t  ≤  i. The identity map linear ordering of Q' is [formula]. Substituting Q vertices into this sequence yields the vertex order [formula]. This is precisely the result of applying a cyclic shift of vertex u1 to vertex ui + 1 of the identity map linear ordering of Q.

A tree position (C,φ) of a graph G is weakly reducible if there is a pair of edges in C such that the TILO ordering of the induced branch shift quotient graph Q of G is weakly reducible.

Note that if (C',φ) is the result of a branch shift of edge x to edge y on a tree position (C,φ) then the width of the edges that are not along the path from x to y do not change. The only widths that change are along the path from x to y, and by Lemma [\ref=lem:branchshiftTILO], the way they change is determined by the changes to the induced orderings of the quotient graph.

Assume there is a path in which the induced ordering on the quotient graph is weakly reducible, i.e. admits a shift that reduces its width. This TILO shift determines a branch shift of the tree position. Under this branch shift, the widths of the edges outside the path do not change. Along the path, some of the widths may increase, but at least one width strictly decreases and no width increases to a value greater than or equal to the highest width that strictly decreases. The same condition is true of the overall multiset of widths of the tree position, so the width of the resulting tree position is strictly less than the original width.

Reduction criteria

Corollary [\ref=coro:wrquotient] suggests a straightforward way to find strongly irreducible tree positions of graphs: take all pairs of edges, form the induced branch shift quotient graph, look for valid TILO shifts, and apply the corresponding branch shifts on the tree position. Repeat this process until there are no valid TILO shifts, and then perform a more comprehensive check to ensure that the tree position is indeed strongly irreducible. However, such an approach involves a great deal of redundant computation. In particular, if two paths overlap along a stretch of edges, then there will be TILO moves in the two different quotients that correspond to the same branch shifts. In a naive implementation these will be checked multiple times. We therefore define criteria for weak reducibility of a tree position that are determined by the quotient graphs but do not require explicitly computing them.

Given a tree position (C,φ) and a pair of edges e,g of C, define the adjacency weight to be the sum of the weights of the edges of G that pass through both e and g or equivalently the sum of the weights of edges of G between boundary vertices in and boundary vertices in .

Define the slope

[formula]

to be the sum of the weights of the edges of G that pass through g but not through e minus the sum of the weights of edges of G that pass through both edges. The slope s(e,g) is the amount that the width of edge e changes if edge g is disconnected from the tree and reattached on the far side of e.

From the definitions, it follows that

[formula]

From basic set theory,

[formula]

where the sets [formula] and [formula] are disjoint. Thus we have b(g)  =  a(e,g)  +  a(e,g)  +  s(e,g). Rearranging this gives us an alternate way to calculate s(e,g):

The slope s(e,g) can also be calculated by the equation

[formula]

If we think of the vertices ue and ug in a quotient graph that correspond to the subtrees and , respectively, then the adjacency weight a(e,g) is the weight of edge (e,g) of the quotient graph. If ue and ug are vertices in a branch shift quotient graph then the slope s(e,g) is ±  se,g, the slope (as defined in [\cite=thingraphs]) of a linear ordering of the vertices of the induced quotient graph. In particular, we have the following:

Given Q, a branch shift quotient graph of graph G induced by edges x, y, and tree position [formula], let e = pi, an edge on the path from x to y and g = fk, a non-path edge adjacent to a path edge from x to y. Using the identity map induced linear TILO ordering on Q, we find that

[formula]

where the slope si,k of a linear order is defined in ([\ref=eqn:slopeTILO]).

Using the notation from Definition [\ref=def:bsqg] and Lemma [\ref=lem:widthEquiv], the path edge pi corresponds to the location between quotient graph vertices ui and ui + 1 in the identity map linear ordering. The edge fk corresponds to vertex uk of the quotient graph. Recall that si,k is defined as the sum of the weights of edges from vertex vk to vertices with indices strictly greater than i minus the sum of the edge weights from vertex vk to vertices with indices less than or equal to i.

[formula]

Cutting at edge pi and set subtracting Pk creates the sets corresponding to the two unions in the above equation. When k > i this is [formula] and [formula] with [formula]. Using [formula] and substituting into the above equation yields

[formula]

which is the definition of slope s(e,g). When k  ≤  i, then the unions swap their correspondence to and yielding si,k  =   - s(e,g).

A tree position (C,φ) is weakly reducible if for some pair of nonadjacent edges x and y the following conditions hold: where the edges of the simple path connecting x to y is denote by pt for t from 1 to i. Moreover, if this is the case then shifting x to y strictly reduces the width of the tree position.

Let Q be the branch shift quotient graph of G induced by x, y, and [formula] with an identity map linear TILO ordering of Q's vertices ut. In terms of Definition [\ref=def:bsqg], x is associated with u1 and y is associated with ui + 1. In terms of Lemma [\ref=lem:TILOreduction], k = 1 as u1 is being shifted to ui + 1. The resulting weakly reducible conditions are a nonincreasing sequence of boundaries from u1 to ui, si,1 > 0, and si,1  -  si,i + 1  -  2a1,i + 1 > 0. By Lemma [\ref=lem:slopetranslation], we have si,1  =   - s(pi,x) and si,i + 1  =  s(pi,y). By Definitions [\ref=def:quotientgraph] and [\ref=def:adjwSlope], we have a1,i + 1  =  a(x,y). By Lemma [\ref=lem:widthEquiv], we have bQ(t) = b(pt). Therefore by substituting, we find that the TILO ordering of the quotient graph Q is weakly reducible if By Corollary [\ref=coro:wrquotient], the tree position is weakly reducible if this condition holds. Multiplying the slope inequalities by - 1 gives us the condition stated above.

Condition ([\ref=eqn:treduceB]) of the lemma gives the amount by which the width of edge pi changes due to shifting x to y,

[formula]

where b'(pi) is the width after the branch shift operation.

Properties of thin tree positions useful for clustering and implementation

The properties of a thin tree position of a graph G = (V,E) can be used to find pinch clusters of G (see [\cite=thingraphs]). A subset A  ⊂  V is a pinch cluster if for any sequence of vertices [formula], if adding [formula] to A or removing [formula] from A creates a new set with smaller boundary, then for some k < m, adding or removing [formula] to or from A creates a set with strictly larger boundary. Recall that, given a subset A  ⊆  V, we say that the boundary of A is [formula].

In linear TILO, pinch clusters are determined by local minima in the width values defined by the TILO ordering. Any path in a thin tree position with local minimums of edge widths determines pinch clusters of the quotient graph by cutting the graph at the local minimum. These clusters can be refined to create pinch clusters of the original graph by creating a linear ordering of vertices compatible with the tree position and checking for any TILO shifts. Limiting the search for refinement shifts and approximating the pinch ratios by effective bounds calculated from a tree position will be explored in future papers. Some pinch clusters of G can be determined without futher refinement. These occur at locations defined as follows.

Given a graph G and a tree position [formula] for G, we say that an edge e of C is a local minimum if each endpoint of e is shared with an edge of C that has strictly greater width than e and whose second endpoint is not a boundary vertex.

When an edge is a local minimum of a tree position then it is a local minimum of every path through it in the tree. Thus the edge determines pinch clusters in every quotient graph induced by a path through the edge. The next theorem shows that a local minimum edge finds a pinch cluster of the original graph.

If e is a local minimum of a strongly irreducible tree position [formula] of a graph G then the two subsets of G defined by the subtrees that result from cutting C at e are pinch clusters.

Assume e is a local minimum of a tree position [formula]. We will prove that e is a local minimum in a strongly irreducible TILO ordering on G.

Let {P1,P2} be the partition of the vertices of G defined by the local minimum e, i.e., [formula] for some other edge g in C. Let o be a TILO ordering of G that has minimal width among all orderings for which every vertex of P1 appears before every vertex of P2. In other words, P1 consists of the vertices [formula], while P2 consists of vertices [formula] (where the subscript indicates the TILO ordering). Note the the width bk between vk and vk + 1 is precisely b(e).

If bk - 1 > bk and bk + 1 > bk then by the second condition of Lemma [\ref=lem:TILOreduction] it is not possible for a valid shift of a vertex between P1 and P2 of the ordering. With the initial assumption that ordering o has minimal width within the partitions, this means that o is a strongly irreducible TILO ordering on G.

Let x be the edge in C that has [formula] as an endpoint. If x and e share an endpoint then b(x) = bk - 1. Since e is a local minimum, b(x) > b(e) and thus bk - 1 > bk. Assume that x and e do not share an endpoint and denote the edges of the simple path from x to e as [formula]. Let y be the edge adjacent to e and pi. Assume bk - 1  <  bk. Then sk - 1,k  =  bk  -  bk - 1  >  0 and by Lemma [\ref=lem:slopetranslation], s(e,x)  =   - sk - 1,k  <  0. For path edges k  >  j, [formula] and a(pk,x)  ≤  a(pj,x). Using the slope definition in Lemma [\ref=lem:equivslopedef], s(pj,x) = b(x) - 2a(pj,x)  ≤  b(x) - 2a(pk,x)  =  s(pk,x). Since e is at the end of the path, s(pj,x)  ≤  s(e,x). This is also the same path from x to y. Consider a branch shift of x to y. After shifting x to y, b'(pi) is bk - 1 as cutting at pi induces the partitions of G as [formula] and [formula]. Shifting x to y strictly reduces the width b(pj) for every path edge pj since s(pj,x)  <  0. No other widths are changed. Thus shifting x to y reduces the width of the tree position [formula]. But this contradicts the original assumption that [formula] is strongly irreducible. Thus bk - 1 can not be less than bk.

A symmetric argument implies that bk + 1 can not be less than bk. In the case that bk - 1 = bk, the argument can be extended to show that the closest nonequal boundary in each direction can not be less than bk. So bk must be a local minimum of the TILO ordering. By [\cite=thingraphs], this implies that T1 and T2 are pinch clusters.

In addition to the conceptual advantages of thin tree position noted in the introduction, this method is more amenable to efficient implementation. Width, slope, and adjacency weight are defined both in terms of a weight of sets of edges and in terms of a weight between sets of vertices. The edge based definition is better for accumulating and propagating the tree position reduction calculations over sparse matrices. The vertex based definition is better for accumulating and propagating these calculations over dense matrices.

The following relationships between the width, slope, and adjacency weight of edges sharing a common vertex are useful when accumulating and propagation calculations across a tree position. Given edges e, f, and g sharing a common interior vertex of a tree position, we have

[formula]

The reduction checks of Lemma [\ref=lem:treeReducible] can be done in parallel. Since a branch shift of x to y does not modify the subtrees off the path from x to y, sets of branch shift operations can be applied in parallel if the paths are independent (do not intersect).