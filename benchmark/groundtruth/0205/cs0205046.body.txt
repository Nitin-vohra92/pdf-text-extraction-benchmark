On the Number of Iterations for Dantzig-Wolfe Optimization and Packing-Covering Approximation Algorithms

Neal Young

Introduction

We start with definitions given by Plotkin, Shmoys, and Tardos [\cite=PlotkinST]. Given [formula], [formula] and a polytope [formula], the fractional packing problem is to find an x∈P such that Ax  ≤  b if such an x exists. An ε-approximate solution to this problem is an x∈P such that Ax  ≤  (1 + ε)b. An ε-relaxed decision procedure always finds an ε-approximate solution if an exact solution exists.

A Dantzig-Wolfe-type algorithm for a fractional packing problem x∈P,Ax  ≤  b is an algorithm that accesses P only by queries to P of the following form: "given a vector c, what is an x∈P minimizing c  ·  x?"

There are Dantzig-Wolfe-type ε-relaxed decision procedures (e.g. [\cite=PlotkinST]) that require [formula] queries to P, where ρ is the width of the problem instance, defined as follows:

[formula]

where Ai denotes the ith row of A.

In this paper we give a natural probability distribution of fractional packing instances such that, for an instance chosen at random, with probability 1 - o(1) any Dantzig-Wolfe-type ε-relaxed procedure must make at least [formula] queries to P. This lower bound matches the aforementioned upper bound, providing evidence that the unfortunate linear dependence of the running times of these algorithms on the width and on ε- 2 is an inherent aspect of the Dantzig-Wolfe approach.

The specific probability distribution we study here is as follows. Given m and ρ, let A be a random {0,1}-matrix with m rows and [formula] columns, where each entry of A has probability 1 / ρ of being 1. Let P be the n-simplex, and let b be the m-vector whose every entry is some v, where v is as small as possible so that Ax  ≤  b for some x∈P.

The class of Dantzig-Wolfe-type algorithms encompasses algorithms and algorithmic methods that have been actively studied since the 1950's through the current time, including:

an algorithm by Ford and Fulkerson for multicommodity flow [\cite=FordF],

Dantzig-Wolfe decomposition (generalized linear programming) [\cite=DantzigW],

Benders' decomposition [\cite=Benders],

the Lagrangean relaxation method developed by Held and Karp and applied to obtaining lower bounds for the traveling salesman problem [\cite=HeldK1] [\cite=HeldK2],

the multicommodity flow approximation algorithms of Shahrokhi and Matula [\cite=ShahrokhiM], of Klein et al. [\cite=KleinPST94], and of Leighton et al. [\cite=LeightonMPSTT95],

the covering and packing approximation algorithms of Plotkin, Shmoys, and Tardos [\cite=PlotkinST] and the approximation algorithms of Grigoriadis and Khachiyan [\cite=GrigoriadisK94] for block-angular convex programs, and many subsequent works (e.g. [\cite=Young95] [\cite=GargK]).

In a later section we discuss some of the history of the above algorithms and methods and how they relate to the fractional packing problem studied here.

To prove the lower bound we use a probabilistic, discrepancy-theory argument to characterize the values of random m  ×  s zero-sum games when s is much smaller than m. From the point of view proposed in [\cite=Young95], where fractional packing algorithms are derived using randomized rounding (and in particular the Chernoff bound), the intuition for the lower bound here is that it comes from the fact that the Chernoff bound is essentially tight.

Some of the multicommodity flow algorithms, and subsequently the algorithms of Plotkin, Shmoys, Tardos and of Grigoriadis and Khachiyan, use a more general model than the one described above. This model assumes the polytope P is the cross-product [formula] of k polytopes. In this model, each iteration involves optimizing a linear function over one of the polytopes Pi. It is straightforward to extend the our lower bound to this model by making A block-diagonal, thus forcing each subproblem to be independently solved. In this general case, the lower bound shows that the number of iterations must be [formula], where ρi is the width of Pi. This lower bound is also tight within a constant factor, as it matches the upper bounds of Plotkin, Shmoys, and Tardos.

Previous Lower Bounds.

In 1977, Khachiyan [\cite=Khachiyan] proved an Ω(ε- 1) lower bound on the number of iterations to achieve an error of ε

In 1994, Grigoriadis and Khachiyan proved an Ω(m) lower bound on the number of iterations to achieve a relative error of ε = 1. They did not consider the dependence of the number of iterations on ε for smaller values of ε.

Freund and Schapire [\cite=FreundS], in an independent work in the context of learning theory, prove a lower bound on the net "regret" of any adaptive strategy for playing repeated zero-sum games against an adversary. This result is related to, but different from, the result proved here.

Proof of Main Result

For any m-row n-column matrix A, define the value of A (considered as a two-player zero-sum matrix game) to be

[formula]

where Ai denotes the ith row of A and x ranges over the n-vectors with non-negative entries summing to 1.

Our main result is based on the following technical theorem.

Fix any [formula] and ε  >  0. Let s  =   ln (m) / (pε2).

Let A be a random {0,1} m  ×  n matrix with i.i.d. entries, each being 1 with probability p.

Suppose that n = Θ(m0.5) and s = O(m0.5 - δ) for some constant δ > 0.

Then with probability 1 - o(1), V(A)  ≥  Ω(p) and for every r  ≤  s, every m  ×  r submatrix B of A satisfies

[formula]

For [formula], n = Θ(m0.5), and p∈(0,1 / 2), let A be a random {0,1} m  ×  n matrix with i.i.d. entries, each being 1 with probability p. Let  > 0.

With probability 1 - o(1),

V(A)  =  Ω(p), and

for s  ≤   min {( ln m) / (p2),m0.5 - δ} (where δ > 0 is fixed), every m  ×  s submatrix B of A satisfies

[formula]

where c is a constant depending on δ.

Our main result follows as a corollary.

Let [formula], ρ > 2, and ε > 0 be given such that ρε- 2  =  O(m0.5 - δ) for some constant δ > 0.

For p = 1 / ρ, and n = m0.5, let A be a random {0,1} m  ×  n matrix as in the theorem. Let b denote the m-element vector whose every element is V(A). Let [formula] be the n-simplex.

Then with probability 1 - o(1), the fractional packing problem instance x∈P,Ax  ≤  b has width O(ρ), and any Dantzig-Wolfe-type ε-relaxed decision procedure requires at least Ω(ρε- 2 log m) queries to P when given the instance as input.

Assuming the theorem for a moment, we prove the corollary. Suppose that the matrix A indeed has the two properties that hold with probability 1 - o(1) according to the theorem. It follows from the definition of V(A) that there exists x*∈Pn such that Ax*  ≤  b. That is, there exists a (non-approximate) solution to the fractional packing problem.

To bound the width, let x̄ be any vector in P. By definition of P and A, for any row Aj of A we have Aj  ·  x̄  ≤  1. On the other hand, from the theorem we know that V(A)  =  Ω(p)  =  Ω(1 / ρ). Since bj  =  V(A), it follows that Aj  ·  x̄  /  bj is O(ρ). Since this is true for every j and x̄∈P, this bounds the width.

Now consider any Dantzig-Wolfe-type ε-relaxed decision procedure. Suppose for a contradiction that it makes no more than s  ≤  ρ(cε)- 2 ln m calls to the oracle that optimizes over P. In each of these calls, the oracle returns a vertex of P, i.e. a vector of the form

[formula]

Let S be the set of vertices returned, and let P(S) be the convex hull of these vertices. Every vector in P(S) has at most s non-zero entries, for its only non-zero entries can occur in positions for which there is a vector in S having a 1 in that position. Hence, by the theorem with   =  ε / c, there is no vector x∈P(S) that satisfies Ax  ≤  (1 + ε)b.

Consider running the same algorithm on the fractional packing problem Ax  ≤  b,x∈P(S), i.e. with P(S) replacing P. The procedure makes all the same queries to P as before, and receives all the same answers, and hence must give the same output, namely that an ε-approximate solution exists. This is an incorrect output, which contradicts the definition of a relaxed decision procedure.

Proof of Theorem [\ref=theorem1]

For any m-row n-column matrix A, define the value of A (considered as a two-player zero-sum matrix game) to be

[formula]

where Ai denotes the ith row of A and x ranges over the n-vectors with non-negative entries summing to 1.

Before we give the proof of Theorem 1, we introduce some simple tools for reasoning about V(X) for a random {0,1} matrix X.

By the definition of V, V(X) is at most the maximum, over all rows, of the average of the row's entries. Suppose each entry in X is 1 with probability q, and within any row of X the entries are independent. Then for any δ with 0 < δ < 1, a standard Chernoff bound implies that the probability that a given row's average exceeds (1 + δ)q is exp ( - Θ(δ2qnX)), where nX is the number of columns of X. Thus, by a naive union bound  Pr [V(X)   ≥   (1  +  δ)q]  ≤  mX exp ( - Θ(δ2qnX)) where mX is the number of rows of X. For convenience we rewrite this bound as follows. For any q∈[0,1] and β∈(0,1], assuming mX  /  β  →    ∞  ,

[formula]

We use an analogous lower bound on V(X). By von Neumann's Min-Max Theorem

[formula]

(where X' denotes the transpose of X). Thus, reasoning similarly, if within any column of X (instead of any row) the entries are independent,

[formula]

assuming nX  /  β  →    ∞  . We will refer to ([\ref=naiveub]) and ([\ref=naivelb]) as the naive upper and lower bounds on V(X), respectively.

Proof of Theorem 1.

The naive lower bound to V(A) shows that

[formula]

Thus, V(A)  ≥  Ω(p) with probability 1 - o(1).

Let s =  min {( ln m) / (p2),m0.5 - δ}. Assume without generality that s = ( ln m) / (p2) (by increasing [formula] if necessary).

We will show that with probability 1 - o(1) any m  ×  s submatrix B of A has value

[formula]

The definition of value implies that V(B')  ≥  V(B) for any m  ×  s' submatrix B' of B (where s'  ≤  s). Thus we obtain ([\ref=value-inequality]) for such submatrices B' as well.

For any of the m rows of B, the expected value of the average of the s entries is p. We will show at least r = s2 ln n of the rows have a higher than average number of ones and by focusing on these rows we will show that V(B) is likely to be significantly higher than V(A).

For appropriately chosen δ1, the probability that a given row of B has at least [formula] ones is at least [formula]. (That is, the Chernoff bound is essentially tight here up to constant factors in the exponent.) Call any such row good and let G denote the number of good rows. In particular choosing some

[formula]

the probability that any given row is good is at least 2r / m and the expectation of G is at least 2r. Since G is a sum of independent random {0,1} random variables, Pr [G   <   r]  <   exp ( - r / 8).

By the choice of r, this is o(1 / ns), so with probability 1 - o(1 / ns), B has at least r good rows.

Suppose this is indeed the case and select any r good rows. Let C be the r  ×  s submatrix of B formed by the chosen rows. In any column of C, the entries are independent and by symmetry each has probability at least p(1 + δ1) of being 1. Applying the naive lower bound ([\ref=naivelb]) to V(C), we find

[formula]

By the choice of r, δ2  =  o(δ1). Thus (1 + δ1)(1 - δ2)  =  1  +  Ω(δ1). Since V(B)  ≥  V(C), we find that, for any m  ×  s submatrix B, V(B)  ≥  p(1 + Ω(δ1)) with probability 1 - o(1 / ns).

Since there are at most [formula] distinct m  ×  s submatrices B of A, the probability that all of them have value p(1 + Ω(δ1)) is 1 - o(1). Finally, applying the naive upper bound to V(A) shows that

[formula]

Since δ3  =  o(δ1), the result follows.

Historical Discussion

Historically, there are three lines of research within what we might call the Dantzig-Wolfe model. One line of work began with a method proposed by Ford and Fulkerson for computing multicommodity flow. Dantzig and Wolfe noticed that this method was not specific to multicommodity flow; they suggested decomposing an arbitrary linear program into two sets of constraints, writing it as

[formula]

and solving the linear program by an iterative procedure: each iteration involves optimizing over the polytope P. This approach, now called Dantzig-Wolfe decomposition, is especially useful when P can be written as a cross-product [formula], for in this case minimization over P can be accomplished by minimizing separately over each Pi. Often, for example, distinct Pi's constrain disjoint subsets of variables. In practice, this method tends to require many iterations to obtain a solution with value optimum or nearly optimum, often too many to be useful.

Dantzig and Wolfe stated as one of their assumptions that a feasible solution be available to start off the iterative process, but pointed out that the same iterative method could help in finding a feasible solution (via the well-known two-phase procedure of linear programming). This

Lagrangean Relaxation

A second line of research is represented by the work of Held and Karp [\cite=HeldK1] [\cite=HeldK2]. In 1970 they proposed a method for estimating the minimum cost of a traveling-salesman tour. Their method was based on the concept of a 1-tree, which is a slight variant of a spanning tree. They proposed two ways to calculate this estimate; one involved formulating the estimate as the solution to the mathematical program

[formula]

where P is the polytope whose vertices are the 1-trees. They suggested an iterative method to find an optimal or near-optimal solution: While they given some initial assignment to u, find a minimum-cost 1-tree with respect to the edge-costs c - uA. Next, update the node-prices u based on the degrees of the nodes in the 1-tree found. Find a min-cost 1-tree with respect to the modified costs, update the node-prices accordingly, and so on.

Like Dantzig and Wolfe's method, this method's only dependence on the polytope P is via repeatedly optimizing over it. In the case of Held and Karp's estimate, optimizing over P amounts to finding a minimum-cost spanning tree. Their method of obtaining an estimate for the solution to a discrete-optimization problem came to be known as Lagrangean relaxation, and has been applied to a variety of other problems.

Held and Karp's method for finding the optimal or near-optimal solution to ([\ref=max-min-program]) turns out to be the subgradient method, which dates back to the early sixties. Under certain conditions this method can be shown to converge in the limit, but, like Dantzig and Wolfe's method it can be rather slow. (One author refers to the "the correct combination of artistic expertise and luck" [\cite=Shapiro] needed to make progress in subgradient optimization.)

Fractional Packing and Covering

The third line of research, unlike the first two, provided guaranteed convergence rates. Shahrokhi and Matula [\cite=ShahrokhiM] gave an approximation algorithm for a special case of multicommodity flow. Their algorithm was improved and generalized by Klein, Plotkin, Stein, and Tardos [\cite=KleinPST94], Leighton et al. [\cite=LeightonMPSTT95], and others. Plotkin, Shmoys, and Tardos [\cite=PlotkinST] noticed that the technique could be generalized to apply to the problem of finding an element of the set

[formula]

where P is a convex set and A is a matrix such that Ax  ≥  0 for every x∈P. In particular, as discussed in the introduction, they gave an ε-relaxed decision procedure that required [formula] queries to P, where ρ is the width of the problem instance.

A similar result was obtained independently by Grigoriadis and Khachiyan [\cite=GrigoriadisK94]. Many subsequent algorithms (e.g. [\cite=Young95] [\cite=GargK]) built on these results. Furthermore, many applications for these results have been proposed.

This method of Plotkin, Shmoys, Tardos and Grigoriadis, Khachiyan improves on Dantzig-Wolfe decomposition and subgradient optimization in that it does not require artistry to achieve convergence, and it is effective for reasonably large values of ε. However, for small ε the method is frustratingly slow. Might there be an algorithm in the Dantzig-Wolfe model that converges more quickly?

Our aim in this paper has been to address this question, and to provide evidence that the answer is no. However, our lower bound technique is incapable of proving a lower bound that is superlinear in m, the number of rows of A. The reason is that for any m-row matrix A, there is an m-column submatrix B such that V(B) = V(A). This raises the question of whether there is a Dantzig-Wolfe-type method that requires a number of iterations polynomial in m but subquadratic in 1 / ε.