Creating superpositions that correspond to efficiently integrable probability distributions

It is well known that probabilistic algorithms are sometimes more powerful (and often more practical!) than their deterministic counterparts in classical computing. Such algorithms generically make use of some source of random bits. It has been shown [\cite=aharonov] however, that giving a quantum computer access to random bits does not, in fact, further empower it.

There has been some attention recently to the problem of using quantum computers to generate certain probability distributions, in particular by looking at the properties of quantum random walks [\cite=aharonov2].

In this short note, we will look at the question of whether, given a certain probability distribution {pi}, we can efficiently create a quantum superposition of the form

[formula]

where the |i〉 are an orthonormal set of states. We are, of course, particularly interested in the case where the index i ranges over some exponentially large set of possibilities N.

We have not solved the general problem of when a state of the form (1) can be efficiently created. However we will show here that if an efficient classical algorithm exists to integrate a certain probability distribution p(x), then we can efficiently create a state of the form (1) for the discretized version {pi} of p(x). A well known set of probability density functions which are efficiently integrable by monte carlo methods are log-concave distributions. (A log-concave distribution is one for which [formula].) Most important statistical distributions (including the exponential and normal families) are log-concave. The task of sampling and/or integrating such distributions frequently arises for problems of determining the (multidimensional) volumes of solids [\cite=applegate].

Clearly if an efficient classical algorithm exists, then we can certainly create a quantum computer in the mixed state [formula]. Our interest in creating a state of the form (1) is thus not simply to be able to measure the state |i〉 with probability pi. Rather we hope that generating the distribution in a coherent fashion will allow further (uniquely quantum) processing of this distribution. At the end we discuss some possibilities along these lines.

We will illustrate the procedure considering only a probability distribution over a single random variable, although the method can be easily extended to multivariable distributions.

We let n =  log N, where N is the total number of points over which we wish to discretize this distribution. Imagine the distribution is divided into some number 2m of regions, and that we already have a m qubit state

[formula]

where, as usual, the integer i, is interpreted in binary as the tensor product sequence of qubit states. Here p(m)i is the probability for the random variable x to lie region i; thus p(m)0 is the probability for x to lie in the far leftmost region, p(m)1 is the probability for it to lie in the region adjacent to this and so on. Our goal is to show that we can now efficiently subdivide these 2m regions to yield a 2m + 1 region discretization of p(x). That is we wish to add one qubit to the state (2), such that we achieve the evolution

[formula]

where α (resp. β) is the probability for x to lie in the left (resp. right) half of region i. If we can achieve such an evolution, then the new state of our m + 1 qubits is

[formula]

This process is then repeated until m = n, i.e. until we have created the desired superposition (1) over all N = 2n states. If such an evolution is possible, then clearly it is efficient.

To show how an evolution of the form (3) can be achieved, we first define xiL and xiR to be the left and right boundaries of region i. We then define the function

[formula]

f(i) is simply the probability that, given x lies in region i, it also lies in the left half of this region. Since [formula] is efficiently computable classically, we can take an ancilla register initially in the state [formula], and construct a circuit which efficiently performs the computation

[formula]

where [formula]. We now perform a controlled rotation of angle θi on the m + 1'th qubit:

[formula]

and we then uncompute the register containing |θi〉 to leave us in a state of the form (3) as desired. Note that the efficient classical algorithm to perform the integration may well be probabilistic, however it can always be implemented on a quantum computer in the required coherent manner by using an ancilla register initially prepared containing the string of random bits to be used in the computation.

Having seen that we can create a state of the form (1), we now give some examples of why creating such a state might be interesting.

(i) Non-uniform priors for quantum searching The quantum search algorithm [\cite=lov] is typically envisioned as a search over a large number of possible solutions to a problem, where every potential solution is a-priori equally likely. In many instances however, we might believe that the correct solution is more likely to be found in a certain region of state space than another. Thus we might wish to input a non-uniform prior distribution into the search algorithm. If this prior distribution is log-concave (e.g. gaussian, poissonian etc) then the procedure outlined above can be used to generate it.

(ii) Sampling of non-log-concave distributions A state of the form (1) is clearly of little value if we were to just measure the qubits and obtain outcome |i〉 with probability pi, since such sampling is possible classically. The fundamental difference between a quantum superposition and a classical sample however, is quantum interference. In particular, we may perform unitary transformations on this state to take it to some other state of the form

[formula]

Each of the new probabilities qj can in some sense be functions of the full set of pi's, and we may obtain "interference" between the probabilities that has no classical analogue. For example, a simple Walsh-Hadamard transformation on each of the the qubits produces the new distribution

[formula]

and this distribution is not log-concave.

(iii) Estimating the magnitude of a fourier component. A state of the form (1) can be fourier transformed efficiently [\cite=shor]. If we are interested in the magnitude of a partciular fourier component, then techniques exist for the process of amplitude estimation, and these proceed quadratically faster than their classical counterparts.