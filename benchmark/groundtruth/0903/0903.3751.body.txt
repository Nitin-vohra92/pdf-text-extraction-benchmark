The Conjugacy Problem in Amalgamated Products I: Regular Elements and Black Holes

Alexei G. Myasnikov

Vladimir N. Remeslennikov

Theorem Lemma Proposition Proposition Fact

Definition Question Example Remark Notation

Introduction

Motivation

This is the first paper in a series of four written on the Word and Conjugacy Problems in free products with amalgamation and HNN extensions. In this introduction we mention few results from the other parts as well when this improves the presentation of the main concepts.

Free products with amalgamation and HNN extensions are among the most studied classical constructions in algorithmic and combinatorial group theory. Methods developed to study the Word and Conjugacy Problems in these groups became the classical models much imitated in other areas of group theory. We refer to Magnus, Karrass, and Solitar book [\cite=mks] for amalgamated free products techniques and to Lyndon and Schupp book [\cite=LS] for HNN extensions.

In 1971 Miller proved that the class of free products [formula] of free groups A and B with amalgamation over a finitely generated subgroup C contains specimens with algorithmically undecidable conjugacy problem [\cite=miller1]. This remarkable result shows that the conjugacy problem can be surprisingly difficult even in groups whose structure we seem to understand well. In a few years more examples of HNN extensions with decidable word problem and undecidable conjugacy problem followed (see the book by Bokut and Kukin [\cite=bk]). The striking undecidability results of this sort scared away any general research on the word and conjugacy problems in amalgamated free products and HNN extensions. The classical tools of amalgamated products have been abandoned and replaced by methods of hyperbolic groups [\cite=bf] [\cite=km] [\cite=Mikhailovskii], or automatic groups [\cite=bgss] [\cite=Eps], or relatively hyperbolic groups [\cite=Bum] [\cite=Osin].

In this and the subsequent paper [\cite=amalgam2] we make an attempt to rehabilitate the classical algorithmic techniques to deal with amalgams. Our approach treats both decidable and undecidable cases simultaneously. We show that, despite the common belief, the Word and Conjugacy Problems in amalgamated free products are generically easy and the classical algorithms are very fast on "most" or "typical" inputs. In fact, we analyze the computational complexity of even harder algorithmic problems which lately attracted much attention in cryptography (see [\cite=AAG] [\cite=KL] [\cite=petrides], and surveys [\cite=DHorn] [\cite=S]), the so-called Search Normal Form and Search Conjugacy Problems. Our analysis is based on recent ideas of stratification [\cite=M] and generic complexity [\cite=multiplicative] [\cite=KMSS], which we briefly discuss below.

Stratification of the set of inputs

We start with a general formulation of our approach to algorithmic problems and then specify it to algorithmic problems in groups. We follow the book Computational Complexity of Papadimitriou [\cite=Papa] for our conventions on computational complexity.

Let M be a set with a fixed size function [formula] and A a partial algorithm with inputs from M. Denote by DomA  ⊆  M the set of inputs on which A halts. For w∈DomA by TA(w) we denote the number of steps required for the algorithm A to halt on the input w. If [formula] is a standard complexity time bound, say f(x)  =  xn, or f(x)  =  nx, [formula], then we say that f(x) is a worst case time upper bound for A (with respect to the size function [formula]) if there exists a constant [formula] such that for every w∈M

[formula]

The set

[formula]

is called the f-stratum of A.

Assume now that the set M comes equipped with a (finitely additive) measure μ which takes values in

[formula]

M= M

[formula]

M = {w ∈ M | size(w) = i}.

[formula]

[formula]

ρ(Q) = lim

[formula]

→ 1

[formula]

Search problems in groups

The Word and Conjugacy Problems are two classical algorithmic problems introduced by M. Dehn in 1912. Since then much of the research in combinatorial group theory was related to these problems. We refer to surveys [\cite=AdD] [\cite=miller1] [\cite=miller2] [\cite=RR] on algorithmic problems in groups.

Let H be a fixed group given by a finite presentation H  =  〈X;R〉, and M(X)  =  (X±  1)* a free monoid over the alphabet X±  1. Sometimes, slightly abusing notations, we identify words in M(X) with their canonical images in the free group F(X).

In general, an algorithmic problem over H can be described as a subset D of a Cartesian power M(X)k of M(X). The problem is decidable if there exists a decision algorithm A which on a given input w∈M(X)k halts and outputs "Yes" if w∈D, otherwise it outputs "No". Notice, that, on the first glance, decidability of the problem depends on the given presentation 〈X;R〉 of H. However, if the problems under consideration are "algebraic", i.e., concerning elements, subgroups, automorphisms, etc., then they are decidable relative to one finite presentation if and only if they are decidable relative to any finite presentation.

Most of the algorithmic problems for groups come in three variations: specific, uniform, and search.

The classical formulations of the Word and Conjugacy Problems are specific, i.e., for a fixed presentation H  =  〈X;R〉 find an algorithm (specific to this group presentation) to solve these problems in H. However, this particular meaning of an algorithmic problem has changed somewhat in recent years under influence of practical computations with groups. Development of software packages for computing in groups often requires implementation of uniform decision algorithms that are able to deal with a given algorithmic problem in various classes of presentations of groups. This might change the flavor and computational complexity of the problem dramatically. For example, the uniform Word Problem for a class of presentations P has a pair: a presentation 〈X;R〉∈P and a word w∈F(X) - as its input, and it requires to verify whether or not w is equal to 1 in the group H  =  〈X;R〉. To see the difference, assume that one solves the (specific) Word Problem in a nilpotent group H  =  〈X;R〉. Since H has a faithful matrix representation [formula] for a suitable n one can replace the generators x∈X by their images ρH(x) and perform matrix multiplication to check if ρH(w)  =  1 or not. In the case of the uniform variation of the Word Problem the algorithm above would require first to find a faithful representation ρP for a given finite presentation P∈P - not easy task in itself. Similarly, if the group H  =  〈X;R〉 is hyperbolic then one can use the famous Dehn algorithm to solve the (specific) Word Problem in H. Namely, let P'  =  〈X;R'〉 be an arbitrary finite Dehn presentation of H (it always exists in this case). It is known that w  =  1 in H if and only if the Dehn algorithm relative to P' rewrites the word w into the empty word. The described algorithm is very fast (linear time in the length of w, see [\cite=Anshel]), but it relies on the knowledge of the Dehn Presentation P'. If P is the class of all finite presentations of hyperbolic groups then the uniform version of the algorithm would require for a given presentation P∈P to compute a Dehn presentation P' for the group H - which is again very demanding (there are no polynomial time algorithms known at the moment).

In this paper we study uniform algorithms for the Word and Conjugacy Problems in the class of groups which are free products with amalgamation given by their standard presentations.

Observe, that the uniformity of the problem may appear on different levels, not related to sets of presentation at all. For example, the specific Membership Problem in H is decidable for a given fixed finitely generated subgroup D of H if there exists an algorithm which for every word w∈F(X) decides whether the element represented by w in H belongs to D or not. Meanwhile, decidability of the uniform Membership Problem for H requires an algorithm which would solve the specific Membership Problem for every finitely generated subgroup D of H.

Finally, the search variation of an algorithmic problem D requires to decide whether a given w belongs to D or not, and if it belongs, to provide a "reasonable proof" that w is, indeed, in D. For instance, the Search Word Problem for H  =  〈X;R〉 usually requires to check if w∈F(X) is equal to one in H, and if so, represent w as a product of conjugates of relators from R. The Search Word Problem is sometimes provably harder then the solution of the original Word Problem. Indeed, the group BS(1,2)  =  〈a,b;a- 1ba  =  b2〉 has a polynomial time decision algorithm for the Word Problem, but its Dehn function is exponential [\cite=Gersten], so it requires, in the worst case, at least exponential time to represent w as a product of conjugates of the relator. This new requirement for the search decision problems to provide a "proof", or a "witness", of the correct decision brings quite a few new algorithmic aspects, which were not studied in group theory. We refer to [\cite=KMSS] [\cite=MU] for a more detailed discussion of the Search Problems in groups.

Search problems could also be uniform or specific. It is convenient to treat uniform and specific forms as particular cases of problems which are uniform relative to a given class of objects Φ. More precisely, let D be an algorithmic problem on a set of inputs I. We say that D is decidable on a subset Φ  ⊆  I if there exists a partial algorithm A with a halting set Dom(A)  ⊆  I that correctly solves D on every input from Dom(A) and such that Φ  ⊆  Dom(A).

For example, the membership problem for a class of subgroups Φ of H solves the specific membership problem for every subgroup D from Φ. If the set Φ is the whole set of elements, finitely generated subgroups, etc., of H then we omit it from the notation. This relative approach is very natural, since there are groups in which the uniform version of a particular algorithmic problem is undecidable, but still there are interesting subclasses of objects Φ for which this problem is uniformly decidable. Moreover, even if the uniform version of the problem is decidable the class of all objects in the question can be partition into different subclasses with respect to different complexities of the decision algorithms.

Below we list some algorithmic problems for H in their uniform relative to a subclass search variation. These algorithmic problems involve different subsets of H (subgroups, cosets, double cosets, regular sets, etc.) given by some natural effective (constructive) descriptions. For example, finitely generated subgroups D are given by finite generating sets (which are given as words from F(X)), cosets wD are given as pairs (D,w), regular sets are given either by finite automata or by regular expressions, etc. Usually, we do not specify any particular descriptions of these subsets, unless it is required by complexity issues or by a particular algorithm.

The Search Word Problem for finitely presented groups has several formulations which depend on the form of the witness. The following is, perhaps, the most typical one.

The Word Search Problem for a given subset of elements Φ ([formula]): Let Φ be a given subset of elements from H (given as words from F(X)). For a given w∈Φ decide whether w  =  1 in H or not? If w  =  1 then find a presentation of w as a product of conjugates of relators from R.

However, in free products with amalgamation it is convenient to consider the following variation of the Search Word problem. Let N be a fixed set of normal forms (viewed as words in M(X)) of elements from G, and [formula] a representative of w in N.

The Normal Forms Search Problem for a given subset of elements Φ ([formula]) of H: Let Φ be a given subset of elements from H (given as words from F(X)). For a given w∈Φ find its normal form [formula].

In free products with amalgamation and HNN extensions it is convenient to begin with the reduced forms of elements and then specify the normal forms and cyclically reduced normal forms among them. One can introduce similarly the Search Problems for reduced and cyclically reduced normal forms. We leave it to the reader.

The Conjugacy Search Problem for a given set of pairs of elements Φ ([formula]): Let Φ be a given set of pairs of elements from H. For a given pair (u,v)∈Φ determine whether u is a conjugate of v in H or not, and if it is then find a conjugator.

The Membership Search Problem for a set of subgroups Φ ([formula]) of H: Let Φ be a set of finitely generated subgroups of H. For a given D∈Φ and a given w∈F(X) determine whether w belongs to D or not, and if so, find a decomposition of w as a product of the given generators of D.

The Conjugacy Membership Search Problem for a set of subgroups Φ ([formula]): Let Φ be a set of finitely generated subgroups of H. For a given D∈Φ and a given w∈F(X) determine whether w is a conjugate of an element from D, and if so, find such an element in D and a conjugator.

The Coset Representative Search Problem for a set of subgroups Φ ([formula]): Let Φ be a set of finitely generated subgroups of H. For a given D∈Φ find a recursive set S of representatives of D in H and an algorithm AS which for a given word w∈F(X) finds a representative for Dw in S

Observe that to solve [formula] for a given D∈Φ it suffices to find the algorithm AS, since w∈S if and only if w is the output of AS on the input w.

To formulate the next algorithmic problem we need the following definition. Let M be a subset of a group H. If u,v∈H then the set uMv is called a shift of M. For a set M of subgroups of H denote by Φ(M,H) the least set of subsets of H which contains M and is closed under shifts and intersections.

The Cardinality Search Problem for Φ(M,H) ([formula]): Let M be a collection of subsets of H. Given a set D∈Φ(M,H) decide whether D is empty, finite, or infinite and, if D is finite non-empty, list all elements of D.

Results

We show below that, under some reasonable assumptions about the groups in the free product with amalgamation [formula], the Normal Forms Search Problem for the classical normal forms in G is decidable and the Search Conjugacy Problem is decidable for the set of regular elements in G. Moreover, we analyze the time complexity of these problems (modulo the corresponding algorithms in the factors A, B).

In Section [\ref=se:can] we study time complexity of the standard Algorithm II for computing the normal forms of elements in amalgamated free products (as, basically, described in [\cite=mks]).

The direct inspection of the algorithms reveals two key issues that determine its time complexity. The first one is related to the time complexity of the decision algorithms of the relevant algorithmic problems that have to be decidable in the factors (the Subgroup Membership Search Problem and the Subgroup Representatives Search Problem). The second issue concerns with the following phenomena that occurs when computing the required form (normal or reduced) for the input [formula], [formula] in the group [formula]. While in progress, Algorithm I gradually rewrites the words in generators of A and B representing the elements gi, possibly increasing their length. It happens sometimes that the accumulated increase in length is exponential in terms of the original length.

These two issues are very different in nature, the algorithmic difficulties of the first type come with the factors and we view them as part of the given data. Meanwhile, the ones of the second type are intrinsic to the construction itself. To deal with the first issue we elected to specify precisely which basic algorithmic problems are required to be decidable in the factors and study algorithms for [formula] "modulo" the time complexity of the basic problems in the factors A,B. In this case one can view every instance of execution of a basic algorithm (a decision algorithm corresponding to a basic problem) as one "elementary step". It turns out that if the complexity of the basic algorithms, as well as the intrinsic complexity, is known then one can estimate the total complexity of Algorithms I.

As an example of this kind of analysis we give the following result for free products of free groups in Section [\ref=se:comp-Alg-I].

Theorem 3.7

Let [formula] be a free product of free groups with finitely generated amalgamated subgroup C. Then Algorithm II has at most exponential time complexity function (in the syllable length of the input words);

There are finitely generated free groups A and B and a finitely generated subgroup C in A and B for which the lower (and upper) bounds on the time complexity of Algorithm II are exponential.

In Section [\ref=se:4] we study the time complexity of the Search Conjugacy Problem in [formula]. More precisely, we study the time complexity of the search variation of the standard decision algorithm for the Conjugacy Problem in amalgamated free products (following the description in [\cite=mks]). The main result of this paper shows that this algorithm solves the Search Conjugacy Problem in G for all cyclically reduced regular elements, and their conjugates, provided the relevant basic algorithmic problems in the factors are decidable. We would like to emphasize that the algorithm is partial, i.e., it halts and gives the answer (always the correct one) only for inputs from a subset of G (though a very big one). This is a crucial aspect of our approach, since, as we have mentioned above, the Conjugacy Problem in some of these groups is undecidable, hence there are no total decision algorithms for the Conjugacy Problem in these groups. We show in the subsequent papers that this partial algorithm is, perhaps, as good as a total one, and may be even better on the most typical inputs (if the total algorithm becomes very inefficient when trying to accommodate all non-regular inputs).

To describe the regular elements in G we need the following definitions. The set

[formula]

is called the generalized normalizer of C in G [\cite=bmr]. Its "dual" is defined by

[formula]

Now in the group [formula] the set

[formula]

is called a Black Hole, and its complement [formula] is called the Regular Part of A, meanwhile the elements from RP are called regular.

The following result shows that under reasonable assumptions on the factors the Membership Problem for the set of regular elements is decidable in G.

Theorem 4.1 Let [formula] be a free product of finitely presented groups A and B amalgamated over a finitely generated subgroup C. Assume also that A and B allow algorithms for solving the following problems:

The Search Membership Problem for the subgroup C.

Coset Representative Search Problem for the subgroup C.

Cardinality Search Problem for Φ(Sub(C),A) in A and for Φ(Sub(C),B) in B.

The Membership Problem for [formula], [formula] and ZA(C), ZB(C).

Then there exists an algorithm to determine whether a given element in G is regular or not.

Theorem 4.18 Let [formula] be a free product of finitely presented groups A and B amalgamated over a finitely generated subgroup C. Assume also that A and B allow algorithms for solving the following problems:

The Membership Search Problem for the subgroup C.

Coset Representative Search Problem for the subgroup C.

Cardinality Search Problem for Sub(C) (see Section [\ref=se:alg-prob]).

Conjugacy Search Problem.

Conjugacy Membership Search Problem for C.

Then the Conjugacy Search Problem in G is decidable for cyclically reduced regular elements from G and their conjugates.

Corollary 4.19 Let [formula] be a free product of free groups A and B with amalgamated finitely generated subgroup C. Then the Conjugacy Search Problem in G is decidable for cyclically reduced regular elements and their conjugates.

It is worthwhile to mention that the conjugacy problem for elements of the syllable length greater than 1 is somewhat easier (it requires less conditions on the factors).

Theorem 4.15 Let [formula] be a free product of finitely presented groups A and B amalgamated over a finitely generated subgroup C. Assume also that A and B allow algorithms for solving the following problems:

The Membership Search Problem for the subgroup C.

Coset Representative Search Problem for the subgroup C.

Cardinality Search Problem for Sub(C).

Then the Conjugacy Search Problem in G is decidable for cyclically reduced regular elements g of syllable length l(g)  >  1.

At the end of this section we briefly discuss some connections with the subsequent papers of the series.

In the paper [\cite=amalgam2] we give asymptotic estimates of the size of the regular part RP and the black hole BH in free products of free groups with amalgamation. This enables us to show that Algorithm II, as well as the algorithm that solves the Search Conjugacy Problem in such groups, both have a polynomial generic case time complexity.

In the paper [\cite=HNN1] the main results on the normal forms and the Conjugacy Search Problem in the free products with amalgamation are generalized to HNN extensions. To this end we introduce the so called transfer machines which allow one to "transfer" effectively the results on the classical algorithmic problems for free products with amalgamation to the corresponding HNN extensions of groups.

In the paper [\cite=HNN2] we apply the general results obtained in the papers [\cite=amalgam2] [\cite=HNN1] to the Miller's groups which are particular types of HNN extensions. In particular, we show that, despite the conjugacy problem is undecidable in these groups, there exists an algorithm that solves the Conjugacy Search Problem in the Miller's groups in polynomial time on "most inputs".

Preliminaries

Amalgamated products

In this section we briefly discuss definitions and some known facts about free products with amalgamation. We refer to [\cite=mks] for details.

Let A, B, C be groups and [formula] be monomorphisms. Then one can define a group

[formula]

called the amalgamated product of A and B over C (the monomorphisms φ,ψ are suppressed from notation). If A and B are given by presentations

[formula]

and a generating set Z is given for the group C, then the group G has presentation

[formula]

Notice that if the groups A and B are finitely presented and C is finitely generated then the group G is finitely presented. If [formula] and we denote

[formula]

then G has presentation

[formula]

The groups A and B a called factors of the amalgamated product G  =  A  *  CB, they are isomorphic to the subgroups in G generated respectively by X and Y. We identify A and B with these subgroups via the identical maps x  →  x, y  →  y (x∈X,  y∈Y). If we put

[formula]

then

[formula]

Normal forms of elements

Let [formula] be an amalgamated product of groups as in ([\ref=eq:0]). Denote by S and T fixed systems of right coset representatives of C in A and B. Throughout this paper we assume that the representative of C is the identity element 1.

The following notation will be in use throughout the paper. For an element [formula] we define F(g)  =  A if g∈A and F(g)  =  B if g∈B.

An arbitrary element g in G  =  A * CB can be uniquely written in the normal form with respect to S and T

[formula]

where c∈C, [formula], and F(gi)  ≠  F(gi + 1), [formula], [formula].

Every element g∈A * CB can be written in a reduced form

[formula]

where [formula], and F(gi)  ≠  F(gi + 1), [formula], [formula]. This form may not be unique, but the number n is uniquely determined by g. Moreover, g  =  1 if and only if n  =  0 and c  =  1.

Let [formula] and [formula] be a reduced form of g. Then the number n is called the length of g and it is denoted by l(g). Observe, that [formula]

Let [formula]. A reduced form [formula] is called cyclically reduced if one of the following conditions is satisfied:

n = 0;

n = 1 and g is not a conjugate of an element in C;

[formula] and F(g1)  ≠  F(gn).

Notice that our definition of cyclically reduced forms is slightly different from the standard one (see, for example, [\cite=mks]). Usually, the condition (b) is not required, but the difference is purely technical, and it is convenient to have (b) when dealing with conjugacy problems. Observe also, that if one of the reduced forms of g is cyclically reduced then all of them are cyclically reduced. In this event, g is called cyclically reduced element.

Let [formula]. Then g is a conjugate of some element g0 in a cyclically reduced normal form. This element g0 is not uniquely defined, but its length l(g0) is uniquely determined by g.

The normal form of g0 is called a cyclically reduced normal form of g. The uniquely determined number l(g0) is called the cyclic length of g and it is denoted by l0(g). Observe that

[formula]

The conjugacy criterion

[\cite=mks] Let [formula] be an amalgamated product, and let g be a cyclically reduced element in G.

If l0(g) = 0, i.e., g∈C, and g is conjugate to an element c∈C then there exists a sequence of elements [formula], where ci∈C and adjacent elements ci and ci + 1, [formula], are conjugate in A or in B.

If l0(g)  =  1, i.e., [formula], and g' is a cyclically reduced element which is a conjugate of g in G then l(g')  =  1, F(g)  =  F(g') and g and g' are conjugate in F(g).

Let [formula] and [formula] be a cyclically reduced form of g. Assume that g is a conjugate of a cyclically reduced element [formula] in G. Then r = s and h can be obtained from g by a cyclic permutation of the elements [formula] followed by a conjugation by an element from C.

Malnormal subgroups

Recall, that a subgroup H of a group G is called malnormal in G if [formula] for all [formula].

It follows immediately from the conjugacy criterion ( Theorem [\ref=th:conjugacycriterion]) that free factors A and B are malnormal in the free product [formula]. It is known that maximal abelian subgroups (= proper centralizers) are malnormal in torsion-free hyperbolic groups, in particular in free groups. We refer to [\cite=GKM] for results on malnormality of maximal abelian groups in free products with amalgamation and HNN extensions.

Let G be a group and H be a subgroup of G. The generalized normalizer N*G(H) is a set of all elements g∈G such that [formula].

Notice that, NG(H)  ⊆  N*G(H), and, in general, N*G(H) is not a subgroup. It is obvious that if g∈N*G(H) then N*G(H) contains the whole double coset HgH. A set of representatives {gi|i∈I} of double cosets of H is called a double transversal of H in N*G(H), in this event

[formula]

If H is a finitely generated subgroup of a free group G then H has a finite double transversal in N*G(H), moreover such a transversal can be found algorithmically [\cite=bmr]. A more convenient algorithm (in terms of subgroup graphs) can be found in [\cite=km].

For an element g∈G define

[formula]

and put

[formula]

Even though Zg(H) is a subgroup of G for every g∈G, the set ZG(H) may not be a subgroup. Observe, that for any u,v∈H

[formula]

Hence if T is a double transversal of H in N*G(H) then ZG(H) is union of conjugacy classes:

[formula]

In particular, if the transversal T is finite then ZG(H) is union of finitely many conjugacy classes of subgroups Zt(H).

Let G be a group equipped with a map [formula] and H be a subgroup of G. For an element g∈G define LH(g) as the minimal value of L on the double coset HgH. Then the malnormality degree md(H) of H in G with respect to L is the smallest number r such that [formula] for all g∈G with [formula], if it exists, and ∞   otherwise.

For example, the malnormality degree of subgroups can be defined in free groups, free products with amalgamation, and HNN extensions of groups with respect to the canonical length functions. In the sequel we always assume that for [formula] the degree md(H) is viewed with respect to the canonical length function [formula]

Obviously, if a subgroup H has a finite double transversal in N*G(H) then md(H) is finite.

Let G  =  A * CB and [formula]. Then

If C is malnormal in A and B then md(D)  =  1.

If C is malnormal in one of the groups A and B then [formula].

Let [formula] be a reduced form of an element g∈G. Suppose [formula], in particular, [formula]. Suppose also that c,c'∈C. If

[formula]

then gncg- 1n∈C. Assume that C is malnormal in both A and B. This implies that gn∈C -contradiction. Then n = 0 and therefore md(D) = 1.

If C is malnormal either in A or in B then similar argument shows that [formula].

Let [formula] and H be a finitely generated subgroup of G. Assume that the malnormality degree mdG(C) of C in G is finite, and H contains no elements of length [formula].

Is it true that md(H) is finite?

Is it true that N*G(H) is union of finitely many double cosets of H?

Computing normal forms

Computing reduced forms: Algorithm I

In this Section we discuss the standard algorithm to compute reduced forms of elements of a group G = A * CB. Suppose that the Membership Search Problem MSP for C is decidable in A and B.

Observe, that given a word [formula] one can effectively present it as a product

[formula]

where [formula] are reduced words in X or in Y and if gi is a word in X then gi + 1 is a word in Y and vice versa.

Algorithm I: Computing Reduced Forms.

Input: a product [formula] in the form ([\ref=eq:dontknow]).

If gi∈F(X) then rewrite gi into a product [formula] of the given generators of Cφ, replace gi by [formula], using substitution [formula], and then replace [formula] by [formula], where [formula];

If gi∈F(Y) then rewrite gi into a product [formula] of the given generators of Cψ, replace gi by [formula], using substitution [formula], and then replace [formula] by [formula], where [formula];

thus decreasing the syllable length l(g) of g. Go to Step 1.

Output: The word

[formula]

which is a reduced form of g.

Notice that to carry out this algorithm one needs to be able to verify whether or not a given word gi∈F(X) (gi∈F(Y)) belongs to the subgroup Cφ in A (Cψ∈B), and, if so, then to rewrite gi as a word in the given generators U of Cφ (V of Cψ). Hence, the Search Membership Problem [formula] has to be decidable for the subgroup C in A and B.

Let G = A * CB and MSP is decidable for C in A and in B then Algorithm I finds a reduced form of elements of G.

Computing normal forms: Algorithm II

In this section we discuss the following algorithmic problem.

Normal Forms Search Problem: Let [formula] and let S,T be recursive sets of representatives of A and B modulo C. Give an algorithm which for a given [formula] finds the normal form of g in G with respect to the sets S and T.

Now we describe the standard known decision algorithm for the problem above (see, for example, [\cite=miller1]) provided we are given decision algorithms for the Membership Search Problem MSP and the Coset Representatives Search Problem CRSP for the subgroup C in A and in B (relative to the sets S and T).

Given a word [formula] one can effectively present it as a product

[formula]

where [formula] are reduced words in X or in Y, and if gi is a word in X, then gi + 1 is a word in Y, and vice versa.

Modulo decision algorithms for problems MSP and CRSP for the subgroup C in the groups A and B the process of computing the normal form is the following.

Algorithm II: Computing Normal Forms.

Input: a word [formula] in the form ([\ref=eq:1]).

If gk is a word in X, then:

Write it as gk  =  ckuk with uk∈S, ck∈C given as a word [formula] in the given generators U of Cφ (using MSP and CRSP).

Then rewrite [formula] into [formula].

If uk  ≠  1 then replace [formula] by [formula], where [formula]. Go to Step 2.

Otherwise replace [formula] by [formula]. Go to Step 1.

Write it as gk  =  ckuk with uk∈T ck∈C given as a word [formula] in the fixed generators V of Cψ (using MSP and CRSP).

Then rewrite [formula] into [formula].

If uk  ≠  1 then replace [formula] by [formula], where [formula]. Go to Step 2.

If uk  =  1 then replace [formula] by [formula]. Go to Step 1.

where [formula] is in the normal form, do:

Execute Step 1 on [formula].

If the outcome of the Step 1 on [formula] is [formula], i.e., ui  =  1, then replace [formula] by [formula] and go to Step 2.

If the outcome of the Step 1 on [formula] is [formula], i.e., ui  ≠  1, then:

If both ui and ui + 1 are in S (or both of them are in T), rewrite uiui + 1 into c'u'i where c'∈C, given as a word [formula] (or [formula]), and u'i∈S (or u'i∈T).

If u'i  ≠  1 then replace [formula] by [formula], where gi - 1''  =  gi - 1'c'. Go to Step 2.

If u'i  =  1 then replace [formula] by [formula], where gi - 1''  =  gi - 1'c'. Go to Step 2.

Output: The word

[formula]

which is the normal form of g relative to the set of representatives S and T.

We summarize the discussion above as the following theorem

Let [formula] and the problems MSP and CRSP are decidable in A and in B for the subgroup C. Then Algorithm II finds the normal form of g for every given element g∈G.

Complexity of Algorithm II

Now we discuss briefly time-complexity of Algorithm II. Recall that the time function TA of an algorithm A is defined on an input g of A as the number of steps required by the algorithm A to halt on the input g.

Obviously, the complexity of the time function TI of the Algorithm II depends on complexity of the time functions of decision algorithms for MSP and CRSP for C relative to A and B. Also, it depends on how the length of the words ci grows during the execution of Algorithm II.

Complexity of MSP and CRSP depends on particular groups A, B, and C. For example, if A and B are free groups, then these problems have linear time complexity for a fixed subgroup C (see, for example, [\cite=km]).

Estimating the complexity of the rewriting process (a) is more demanding, even in the case of amalgamated products of free groups. Recall, that in the rewriting process (a), executing the instructions (a.2) or (b.2), we rewrite a word [formula] into a word [formula]. Set

[formula]

Then we have an upper bound estimate on the increase of the length

[formula]

Similarly, in the case when we rewrite a word cj + 1 given in the generators vi into a word in generators ui we have an estimate with the factor λ(v,u). Therefore, if we denote

[formula]

then at any rewriting step one has increase in length of at most by the factor λ.

Now suppose, for simplicity, that the length of cj increases in executing all other instructions, different from for (a.2) and (b.2), at most by M  +  |gj| where M is a fixed constant (we make this assumption to focus on the processes (a.2) and (b.2)). Under these assumptions

[formula]

In particular, if the length of cj does not increase at all in the rewriting processes other than (a.2), (b.2), then in k steps we will have an exponential estimate

[formula]

where k  =  l(g). So if λ  >  1 then we might have exponential growth of the length of the words ci. The example below shows that this happens in the worst case scenario.

Let A  =  F(a,b,d),B  =  F(ã,,d̃) be two free groups of ranks 3. Consider two subgroups of rank 2:

[formula]

where [formula] is an integer. Then the map φ defined by φ(ak)  =  ã,φ(b)  =  k gives rise to an isomorphism φ:C  →  . Put

[formula]

Let S be a recursive set of representatives of A modulo C such that the representative in S of the coset Cdapm is b- pmdapm for all integers m. In particular,

[formula]

It is not difficult to construct such S since the set of elements of the type dapm is recursive, as well as cosets of C. Similarly, let T be a recursive set of representatives of B modulo [formula] such that the representative in T of the coset d̃pm is ã- pmd̃pm for all integers m, which implies that

[formula]

Now consider the following element in G:

[formula]

Then, in the notations of Algorithm II, the rewriting processes (a.2) and (b.2) go as follows:

[formula]

[formula]

Now the next step will be

[formula]

Hence

[formula]

In this case λ  =  p, lengths of the words ci do not change in the rewriting processes other then (a.2), (b.2), so the word ci grows every step by a factor of p, hence

[formula]

where k  =  l(g) - 1.

Let A = F(a,b), B = F(a',b') be two free groups of rank 2. Consider two subgroups of rank 2, [formula], [formula], where [formula] is an integer. Then the map φ defined by φ(a) = a'b' and φ(ab) = a'p gives rise to an isomorphism φC  →  C'. Put

[formula]

Let S be a recursive set of representatives of A modulo B such that every element from [formula] is in S. Analogously, T is the set of representatives B modulo C' such that every element from [formula] is in T. Now consider the following element in G:

[formula]

Rewriting of this element into the normal form involves the exponential growth of the lengths of intermediate words ci.

Now we turn to the complexity of rewriting processes in Algorithm II other than (a.2), (b.2). In general, this complexity depends on the particular algorithms for solving MSP and CRSP for C in A and B. In the case of free groups A and B the decision algorithm in [\cite=km] for solving MSP and CRSP have some important features. If we denote by [formula] the representative of the coset Cw produced by the algorithm on the input word w, then the following conditions hold:

For a given w∈A the representative [formula] of the coset Cw has the minimal possible length in Cw.

There exists a constant M such that for a given w∈A if w  =  c for a (unique) c∈C then [formula].

the time spent by the algorithm on an input w is bounded from above by L|w| for some fixed constant L.

This allows one to estimate the complexity of Algorithm II in the case of free groups. From now on we assume that Algorithm II has subalgorithms for solving MSP and CRSP which satisfy the conditions above.

Let [formula] be a free product of free groups with finitely generated amalgamated subgroup C. Then the lengths of the words ci that occur in computations with Algorithm II on an input w is bounded from above by

[formula]

where k = l(w).

Let [formula] be an input for Algorithm II in the form ([\ref=eq:1]), where k  =  l(w). It requires k steps for Algorithm II to produce the input. According to ([\ref=eq:step1]) on each step the length of the word cj is bounded by

[formula]

Hence in k steps we will have the following estimate on the lengths of the words cj, [formula].

[formula]

as required.

Let [formula] be a free product of free groups with finitely generated amalgamated subgroup C. Then the time spent by Algorithm II on an input w is bounded above by

[formula]

where L1 is a fixed constant and k  =  l(w).

Indeed, Algorithm II works k steps on an input w with l(w)  =  k. On each step it rewrites a current word cj of the length bounded from above in ([\ref=eq:length]). The rewriting involves the subalgorithms for solving MSP and CRSP. These algorithms spend at most linear time with respect to the length of the input. Putting all the estimates together we have the resulting estimate above.

Combining the corollaries above with the example we have the following result.

Let [formula] be a free product of free groups with finitely generated amalgamated subgroup C. Then Algorithm II has at most exponential (in the length of the input words) time complexity function bounded by:

[formula]

where k,L1,λ,M, and w are as above;

There are finitely generated free groups A and B and a finitely generated subgroup C in A and B such that in the free product with amalgamation [formula] the Algorithm II has precisely the exponential time complexity as above.

However, we will show in the subsequent paper [\cite=amalgam2] that the situation in the example above is very rare, and in every free product with amalgamation [formula] of free groups with a finitely generated group C the Algorithm II is very fast on generic inputs.

Computing cyclically reduced normal forms: Algorithm III

In this section, we shall discuss the standard algorithm to find a cyclically reduced normal form of an element g of a group [formula]. As before, we assume that the element g is given in the form ([\ref=eq:1]):

[formula]

where [formula] and gi∈F(X) if and only if gi + 1∈F(Y).

We work under assumption that the Membership Search Problem MSP, the Coset Representative Search Problem CRSP, and the Conjugacy Membership Search Problem CMSP are decidable in A and B for the subgroup C, and we have the decision algorithms in our possession. Notice that we need CMSP only because we have a slightly stronger notion of reduced forms than the usual one (see Section [\ref=sec:1.2]).

Observe, that the uniform version of CMSP is decidable in free groups and the decision algorithm has linear time complexity (in the length of the input word w) for a given finitely generated subgroup C [\cite=km].

Algorithm III: Computing Cyclically Reduced Forms.

Input: a word g in the form ([\ref=eq:1]).

Observe that l(g)  =  k and for every gi we know its factor F(gi).

If l(g) = 0 then g is already in cyclically reduced from.

If l(g) = 1, for example, if g∈A, then check whether g is a conjugate of an element c∈C or not, using the algorithm for CMSP. In the former case, c is a cyclically reduced form of g and the algorithm for CMSP gives one of such elements c. In the latter case, g is already in cyclically reduced form.

Let [formula].

If F(g1)  ≠  F(gk), then g is already in a cyclically reduced normal form.

If F(g1)  =  F(gk). Then g is conjugate to

[formula]

Now apply the decision algorithms for MSP and CRSP to the word (gkcqg1) to find the normal form c'g'1 of it. If g'1  ≠  1 then

[formula]

is a cyclically reduced normal form of g. Otherwise,

[formula]

and we apply the procedure above to [formula]

Let [formula] and the problems MSP and CRSP are decidable in A and B for the subgroup C. Then there exists an algorithm that for a given element g∈G finds an element g'∈G such that g' is a conjugate of g and if l(g')  >  1 then g' is a cyclically reduced normal form of g.

Direct analysis of Algorithm III shows that a decision algorithm for the problem CMSP is used only when executing instructions in the case (b). However, if we modify Algorithm III in such a manner that it stops immediately when the case (b) occurs, then the modified algorithm satisfies the requirements of the lemma.

Let [formula] and the problems MSP, CRSP, and CMSP are decidable in A and B for the subgroup C. Then for a given element g∈G Algorithm III finds a cyclically reduced normal form of g in time TIII(g) which can be bounded from above as follows:

[formula]

where TII, TSMP, TCMSP, TCRSP are the time functions, correspondingly, of Algorithm II, and the decision algorithms for CMSP,CRSP, K is a constant. In particular, if A and B are free groups then

[formula]

where K1 is a constant (depending on C ) and |g| is the length of the input g given as a word in [formula].

Regular Elements and black holes

Bad pairs

Let [formula].

We say that (c,g)∈C  ×  G is a bad pair if [formula], and gcg- 1∈C.

Notice that if (c,g) is a bad pair then [formula] and c∈Zg(C). The following lemma gives a more detailed description of bad pairs.

Let [formula] and [formula]. If [formula] is the normal form of g then (c,g) is a bad pair if and only if the following system Bc,g has a solution [formula] with ci∈C:

[formula]

Moreover, in this case [formula] and [formula].

This lemma is a particular case of Lemma [\ref=le:systems].

Observe, that consistency of the system Bc,g does not depend on a particular choice of representatives of A and B modulo C. Sometimes we shall treat c as a variable, in which case the system will be denoted Bg. If [formula] is a solution of Bg then we call it a nontrivial solution of Bg.

Now we will study slightly more general equations of the type gc  =  c'g' and their solutions c,c' in C.

Let [formula], [formula] be elements given by their normal forms:

[formula]

Then the equation gc  =  c'g' has a solution c,c'∈C if and only if the following system Sg,g' in variables [formula] has a solution in C:

[formula]

Proof. Let c,c'∈C be a solution to the equation gc = c'g'. We then rewrite the equality gc = c'g' as

[formula]

Notice that the right hand side of this equality is in the normal form. Following Algorithm II we shall rewrite the left hand side of this equality into the normal form. After rewriting the both sides must coincide as the normal forms of the same element. This gives rise to the system of equations for some elements [formula], as above. Conversely, if the system Sg,g' has a solution then the elements c,c' give a solution of the equation gc = c'g'. [formula]

The first k equations of the system Sg,g' form what we call the principal system of equations, we denote it by PSg,g'. In what follows we consider PSg,g' as a system in variables [formula] which take values in C, the elements [formula] are constants.

Regular elements

Now we specify, in our particular context, the general concepts of a "black hole" and "regular part" as discussed in the Introduction.

The set

[formula]

is called a black hole. Elements from BH are called singular, and elements from [formula] regular.

Notice that if the subgroup C has a finite malnormality degree in G then every element g with l0(g)  >  mdG(C) is regular. In particular, it follows from Lemma [\ref=le:mal-deg] that if C is malnormal in A or in B then every element g∈G with [formula] is regular. Notice also, that if [formula] is regular then all elements in CgC are regular.

Observe, that the condition 1) in the Conjugacy Criterion, indeed, does not apply for regular elements.

The following description of singular elements follows from Lemma [\ref=le:B].

Let [formula]. Then:

an element [formula] is singular if and only if the system Bg,c has a solution [formula], where c,ci are non-trivial elements from C;

[formula]

As we have seen already, an element g∈G is singular if and only if the system gc  =  c1g has a nontrivial solution c,c1 in C.

Effective recognition of regular elements

Let M be a subset of a group G. If u,v∈G then the set uMv is called a G-shift of M. For a set M of subgroups of G denote by Φ(M,G) the least set of subsets of G which contains M and is closed under G-shifts and intersections.

Let G be a group and C be a subgroup of G. If D∈Φ({C},G), [formula] then there exist elements [formula] such that

[formula]

In particular, non-empty sets in Φ({C},G) are particular cosets from G.

Induction on the number of operations required to construct D from C. For a tuple [formula] of elements from G put

[formula]

Let [formula] for some ∈Gn,h∈G. Then for any a,b∈G:

[formula]

where [formula], i.e., aDb is in the required form.

Observe, that for arbitrary subgroups [formula] and elements a,b∈G if [formula] then

[formula]

Therefore, if [formula], then

[formula]

where [formula] is concatenation of [formula] and [formula].

Let [formula]. Then for given two elements g,g'∈G in their normal forms

[formula]

the set Eg,g', of all elements c in C for which the system PS(g,g') has a solution [formula], is equal to

[formula]

In particular, if [formula] then Eg,g'  =  Cg,g'cg,g' for some subgroup [formula] and some element cg,g'∈C.

Let

[formula]

Denote by Vi the set of all solutions [formula] of the system formed by the first i equations of PS(g,g'). Let Dm,i be the projection of Vi onto its m-s component.

The first equation of the system PS(g,g') gives:

[formula]

where for uniformity we denote c by c0. Therefore,

[formula]

and (c0,c1)∈V1 if and only if

[formula]

Clearly, the sets D0,1 and D1,1 are in ΦC.

Now we rewrite the i-s equation pk - i + 1ci - 1  =  cip'k - i + 1 of the system PS(g,g') in the form

[formula]

It follows that

[formula]

where [formula] and D0,0  =  C. In particular

[formula]

Clearly, [formula] is a solution of the system PS(g,g') if and only if ck∈Dk,k and ci - 1  =  p- 1k - i + 1cip'k - i + 1. More precisely, since

[formula]

it follows now that,

[formula]

In particular,

[formula]

So Eg,g'∈Φ(C,G). By Lemma [\ref=le:5b]

[formula]

for some subgroup [formula] and u∈G. Now we can see from ([\ref=eq:Cosets]) that

[formula]

for some subgroup [formula] and cg,g'∈C, as required.

Denote buy Sub(C) the set of all subgroups of C. By Lemma [\ref=le:5b] non-empty sets from Φ(Sub(C),A) (respectively, from Φ(Sub(C),B)) are some cosets of subgroups from A (respectively, from B).

Let [formula]. If the Cardinality Search Problem is decidable for Φ(Sub(C),A) in A and for Φ(Sub(C),B) in B then given g,g' as above, one can effectively find the set Eg,g'. In particular, one can effectively check whether or not Eg,g' is empty, singleton, or infinite.

In notations of Lemma [\ref=le:PS]

[formula]

Therefore it suffices to solve the cardinality problem for the set Dk,k. The quality [\ref=eq:Dii)]

[formula]

and Lemma [\ref=le:5b] show that each Di - 1,i - 1 is a coset of the type Cici where [formula] and ci∈C. Moreover, since the Cardinality Search Problem is decidable for Φ(Sub(C),A) in A, and for Φ(Sub(C),B) in B, the equality ([\ref=eq:Cosets]) shows how one can effectively find the element ci and the direct expression for the subgroup Ci (in terms of shifts and intersections). Therefore, in k steps one can find Dk,k, and hence the set Eg,g'. Moreover, on each step one can find the cardinality of the set Di,i. This proves the corollary.

Let [formula] and g,g'∈G. If [formula] and the system PS(g,g') has more then one solution in C then the elements g,g' are singular.

Let [formula] and [formula] be two distinct solutions of the principal system PS(g,g'). Denote for uniformity c0  =  c,b0  =  b. Hence we have the following systems of equations:

[formula]

[formula]

[formula]

[formula]

Expressing p'k from the first two equations in the system above, and then p'k - 1 from the next two equations, and so on, we get the following equalities:

[formula]

[formula]

[formula]

[formula]

Rewriting these equalities we obtain:

[formula]

[formula]

[formula]

[formula]

Observe that all the elements bic- 1i are non-trivial. By Lemma [\ref=le:B] the element g is singular. Similar argument shows that g' is also singular.

The next result shows that one can effectively determine whether a given element g∈G is regular or not.

Let [formula] be a free product of finitely presented groups A and B amalgamated over a finitely generated subgroup C. Assume that the following algorithmic problems are decidable:

The Search Membership Problem for the subgroup C in A and in B.

The Coset Representative Search Problem for the subgroup C in A and in B.

The Cardinality Search Problem for Φ(Sub(C),A) in A and for Φ(Sub(C),B) in B.

The Membership Problem for [formula] and ZA(C) in A, and for [formula] and ZB(C) in B.

Then there exists an algorithm to determine whether a given element in G is regular or not.

For a given g∈G we can find the normal form of g using Algorithm II. Now there are two cases to consider.

1) If l(g)  >  1 then by Lemma [\ref=le:B] g is a singular element if and only if the system Bc,g has a nontrivial solution [formula]. Observe, that if the system Bc,g has two distinct solutions then one of them is non-trivial (i.e., [formula]).

Now if Bc,g has no solutions in C (and we can check it effectively) then g is regular. If Bc,g has precisely one solution then we can find it and check whether it is trivial or not, hence we can find out whether g is regular or not. If Bc,g has more then one solution (and we can verify this effectively) then g is not regular.

2) If l(g)  =  1 then [formula]. In this case g is regular if and only if [formula]. Since the sets [formula] and [formula] are recursive one can algorithmically check if g is regular or not.

3) If l(g)  =  0 then g is regular if and only if [formula]. By Corollary [\ref=co:DescReg] [formula]. Since the sets ZA(C) and ZB(C) are recursive one can check whether or not g is regular. This proves the theorem.

Let [formula] be a free product with amalgamation of free groups A,B. Then the set of regular elements in G is recursive.

The decision algorithm for checking whether a given element is regular or not is fast "modulo" Algorithm II and the algorithm B for finding cardinality of sets of the type Eg,g'. In general, both Algorithm II and B can be exponential in the worst case. However, we will show later that generically both the algorithms are fast.

One can improve on Theorem [\ref=le:BHeff] in the following way. Denote by CR the set of all elements in G which have at least one regular cyclically reduced normal form of length greater than 1, i.e., CR is the set of elements in G which are conjugates of cyclically reduced regular elements. Now by CR> 1 we denote a subset of CR consisting of elements of cyclically reduced length grater than 1, so CR> 1 is the set of elements in G which are conjugates of cyclically reduced regular elements of length greater than 1.

Let [formula]. Assume that the following algorithmic problems are decidable:

The Search Membership Problem for the subgroup C in A and B.

The Coset Representative Search Problem for the subgroup C in A and B.

The Cardinality Search Problem for Φ(Sub(C),A) in A and for Φ(Sub(C),B) in B.

The Membership Problem for [formula] and ZA(C) in A and for [formula] and ZB(C) in B.

Then there exists an algorithm that for a given element g∈G decides whether g belongs to CR> 1 or not, and if so, then finds a regular cyclically reduced normal form of g.

Let g∈G. By Lemma [\ref=le:modified-III] one can effectively find an element g'∈G such that g' is a conjugate of g and if l(g') > 1 then g' is a cyclically reduced normal form of g. It follows that if l(g')  ≤  1 then [formula]. Suppose l(g') > 1. We claim that in this case g has a cyclically reduced regular normal form, say g1, if and only if at least one of the cyclic permutations of g' is regular. Indeed, observe that g' and g1 are conjugated in G, hence by the conjugacy criterion g1  =  πi(g')c for some i-cyclic permutation πi(g') of g' and some c∈C. Since g1 is regular this implies that πi(g')  =  gc- 11 is also regular (easy calculation). It follows that one of cyclic permutations of g' is regular. Now one can effectively list all cyclic permutations πj(g') of g' and apply the decision algorithm from Theorem [\ref=le:BHeff] to each cyclic permutation πj(g') to verify if there is a regular one among them. This proves the result.

Denote by CR0 a subset of CR consisting of elements of cyclically reduced length 0.

Let [formula] be a free product of finitely presented groups A and B amalgamated over a finitely generated subgroup C. Assume that the following algorithmic problems are decidable:

The Search Membership Problem for C in A and B.

The Coset Representative Search Problem for C in A and B.

The Conjugacy Membership Search Problem for C in A and B.

The Membership Problem for ZA(C) and ZB(C).

Then there exists an algorithm that for a given element g∈G decides whether g belongs to CR0 or not, and if so, then finds a regular cyclically reduced normal form of g.

Let g∈G. By Theorem [\ref=th:AlgII] one can use Algorithm III to find a cyclically reduced normal form of g. So we may assume from the beginning that g is already in a cyclically reduced normal form. If l(g) > 0 then [formula]. Suppose l(g)  =  0, i.e., g∈C. We claim that g∈CR0 if and only if it is regular. Indeed, by conditions of the lemma g is a conjugate of some regular cyclically reduced element g' which must be in C (since it has length 0 as g). But then since g' is regular the elements g and g' are conjugates in C. Hence g is regular since g' is regular. Observe, that g∈C is regular if and only if [formula]. By Corollary [\ref=co:DescReg] [formula]. Now, since the Membership problem for for ZA(C) and ZB(C) is decidable in A and B, one can check algorithmically if g belongs to ZG(C) or not, thus solving the question if g is in CR0 or not.

Corollary [\ref=le:CR] claims that the Search Membership Problem for the set CR> 1 is decidable in [formula] under corresponding conditions on the factors A, B.

The Conjugacy Search Problem and regular elements

In this section we study the Conjugacy Search Problem in a group [formula].

We start with the following particular case of the the Conjugacy Search Problem.

Let [formula] be a free product of finitely presented groups A and B amalgamated over a finitely generated subgroup C. Assume that the following algorithmic problems are decidable:

The Word Problem in A and in B.

The Search Membership Problem for the subgroup C in A and in B.

The Coset Representative Search Problem for the subgroup C in A and in B.

The Cardinality Search Problem for Φ(Sub(C),A) in A and for Φ(Sub(C),B) in B.

Then the Conjugacy Search Problem in G is decidable for all pairs from CR> 1  ×  G.

Let g∈CR> 1 and h∈G. By Corollary [\ref=le:CR] one can find a regular cyclically reduced normal form g' of g. Meanwhile, by Lemma [\ref=le:modified-III] one can find and element h'∈G such that h' is a conjugate of h and if l(h')  >  1 then h' is a cyclically reduced normal form of h. Since g∈CR> 1 its cyclically reduced length is greater then 1, hence if l(h')  ≤  1 then h is not a conjugate of g. Suppose now that l(h')  >  1, in this case h' is a cyclically reduced normal form of h. This shows that we may assume from the beginning that g is regular and g, h are given in cyclically reduced normal forms:

[formula]

According to the conjugacy criterion, the elements g and h are conjugate in G if and only if [formula] and for some cyclic permutation π(h) of h the equation c- 1gc  =  π(h) has a solution c in C. By Lemma [\ref=le:systems] the equation c- 1gc  =  π(h) has a solution in C if and only if the system Sg,π(h) has a solution in C. Since g is regular the system PSg,π(h) has at most one solution in C. Decidability of the Cardinality Search Problem problems for Φ(Sub(C),A) in A and for Φ(Sub(C),B) in B allows one to check whether PSg,π(h) has a solution in C or not, and if it does, one can find the solution. Now one can verify whether this solution satisfies the last equation of the system Sg,π(h) or not (using decidability of the word problem in A and B). If not, the system Sg,π(h) has no solutions in C, as well as the equation c- 1gc  =  π(h). Otherwise, the system Sg,π(h) and the equation c- 1gc  =  π(h) have solutions in C and we have found one of these solutions. This proves the theorem.

Now we study conjugacy search problem for regular elements of length [formula].

Let [formula] be a free product of finitely presented groups A and B amalgamated over a finitely generated subgroup C. Assume that the following algorithmic problems are decidable:

The Search Membership Problem for the subgroup C in A and in B.

The Coset Representative Search Problem for the subgroup C in A and in B.

The Conjugacy Membership Search Problem for C in A and B.

The Conjugacy Search Problem in C.

Then the Conjugacy Search Problem in G is decidable for all pairs from CR0  ×  G.

Let (g,h)∈G  ×  G. Since the Membership Search Problem for the set CR0 is decidable (Theorem [\ref=le:reg-C]) one can algorithmically check if g∈CR0, and if so, find a regular element g' given in a cyclically reduced normal form which is a conjugate of g. By Theorem [\ref=th:AlgII] one can apply Algorithm III to find a cyclically reduced normal form of h. Clearly, h is a conjugate of g if and only if h' is a conjugate of g'. Replacing (g,h) by (g',h') if necessary we may assume that g and h are already in their cyclically reduced normal forms and g is regular. It follows that g∈C since g∈CR0. By the conjugacy criterion, if [formula] then h is not a conjugate of g. If h∈C then by the conjugacy criterion there is a sequence of elements [formula], where ci∈C and adjacent elements ci and ci + 1, [formula], are conjugate in A or in B. Since g  =  c0 is regular - it does not belong to ZG(C). By Corollary [\ref=co:DescReg] [formula]. This implies that the element that conjugates c0 into c1 must be in C. Hence, c1 is also regular. By induction on t, all the pairs ci,ci + 1 are conjugated in C, as well as elements g and h. Thus the Search Conjugacy Problem for g and h in G is reduced to the Search Conjugacy Problem for g and h in C - which is decidable.

Let [formula] be a free product of finitely presented groups A and B amalgamated over a finitely generated subgroup C. Assume that the following algorithmic problems are decidable:

The Search Membership Problem for the subgroup C in A and in B.

The Coset Representative Search Problem for the subgroup C in A and in B.

The Conjugacy Membership Search Problem for C in A and in B.

The Conjugacy Search Problem in A and in B.

Then the Conjugacy Search Problem in G is decidable for all pairs (g,h)∈G  ×  G, where g has cyclically reduced length 0.

Using Algorithm III (Theorem [\ref=th:AlgII]) one can find cyclically reduced forms of a given pair of elements (g,h)∈G  ×  G. In particular, one can verify if the cyclically reduced length of g and h is equal to 0. If so, then [formula]. By the conjugacy criterion g,h belong to one and the same factor A or B, and they are conjugates there. Since the Search Conjugacy Problem is decidable in A and B the last condition is decidable. This proves the lemma.

The decision algorithms from Theorem [\ref=th:main] and Lemmas [\ref=le:reg-0] and [\ref=le:reg-1], have polynomial time complexity "modulo" the algorithms for finding normal forms of elements and the decision algorithms for the problems listed in the statements.

Combining Theorem [\ref=th:main], Lemmas [\ref=le:reg-0] and [\ref=le:reg-1], [\ref=le:reg-C] and Corollary [\ref=le:CR] altogether one can get the following general result.

Let [formula] be a free product of finitely presented groups A and B amalgamated over a finitely generated subgroup C. Assume the following algorithmic problems are decidable:

The Membership Search Problem for C in A and in B.

The Coset Representative Search Problem for the subgroup Cin A and B.

The Cardinality Search Problem for Φ(Sub(C),A) in A and for Φ(Sub(C),B) in B.

The Conjugacy Search Problem in A and in B.

The Conjugacy Membership Search Problem for C in A and B.

The Membership Problem for [formula] and ZA(C) in A, and [formula] and ZB(C) in B.

Then the Conjugacy Search Problem in G is decidable for arbitrary pairs from CR  ×  G.

Let [formula] be a free product of free groups A and B with amalgamated finitely generated subgroup C. Then the Conjugacy Search Problem in G is decidable for arbitrary pairs from CR  ×  G.

Let G  =  A  *  CB and C is malnormal in A. Assume the following algorithmic problems are decidable:

The Membership Search Problem for C in A and in B.

The Coset Representative Search Problem for the subgroup C.

The Cardinality Search Problem for Φ(Sub(C),A) in A and for Φ(Sub(C),B) in B.

The Conjugacy Membership Search Problem for C in A and B.

The Conjugacy Search Problem decidable in A and in B.

Then the Conjugacy Search Problem is decidable in G.

Let (g,h)∈G  ×  G. Using Algorithm III (Theorem [\ref=th:AlgII]) one can find cyclically reduced forms of the elements g,h. Assume for simplicity that g and h are cyclically reduced. If their cyclically reduced lengths are not equal, then they are not conjugates in G. Therefore we may assume that l0(g)  =  l0(h).

1) Suppose l(g)  =  ł(h)  ≥  2. Since C is malnormal in A every element g∈G with [formula] is regular (see Lemma [\ref=le:mal-deg]). Hence, in this case by Theorem [\ref=th:main] the Conjugacy Search Problem for every pair (g,h) with [formula] is decidable.

2) Suppose l0(g)  =  l0(h)  =  1. In this case the argument from the proof of Lemma [\ref=le:reg-1] applies and gives the result.

3) Suppose l0(g)  =  l0(h)  =  0, i.e., g,h∈C. By the conjugacy criterion, there exists a sequence of elements [formula] from C such that the neighboring elements are conjugate either in A or in B. By malnormality of C in A this implies that the neighboring elements are, in fact, conjugate in B. The latter is algorithmically decidable since the Conjugacy Search Problem is decidable in B.

This proves the corollary.