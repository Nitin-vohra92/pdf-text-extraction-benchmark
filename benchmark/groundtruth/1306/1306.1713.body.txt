The Worst Case Number of Questions in Generalized AB Game with and without White-peg Answers

Introduction

The AB game is a variant of the famous Mastermind game, which has attracted much attention in literature in the longer and recent past. Mastermind leads to a rich source of recreational [\cite=Knu76] [\cite=KL93] and combinatorial open problems [\cite=Ch83]. Recently, theoretical results considering the hardness of Mastermind have been presented [\cite=DW12] [\cite=SZ06] [\cite=Vig12]. On the other hand, there are also many interesting applications of Mastermind, e.g., in cryptography [\cite=FL12] and bioinformatics [\cite=GET11]. Most research has been done on the expected-case and worst-case behavior of Mastermind strategies, e.g., [\cite=CLH07]. In this context also methods from completely different fields have shown to be helpful, e.g., graph partitioning [\cite=CLH04] and evolutionary algorithms [\cite=GCG09].

Many variants of Mastermind have been considered, e.g., Black-peg Mastermind [\cite=Good09] [\cite=JP11] and static Mastermind [\cite=God03]. Another variant of Mastermind is the AB game, which is the topic of this work and which has already been considered in [\cite=CL04] [\cite=HL09]. It is also known as "bulls and cows" game. Whereas the most popular version of the AB game is played with 4 pegs and 10 colors, the Generalized AB game is played with p pegs and c colors, where c  ≥  p. We denote this game by [formula]. Two players are involved in this game, which are called the codemaker and the codebreaker. In the beginning of the game, the codemaker chooses a secret containing p pegs, each of different color. The codebreaker tries to identify the secret by asking questions which also contain p pegs, each of different color. The codemaker answers the questions using black and white pegs. The number of black pegs informs, how many pegs in the question match pegs in the secret in position and color. The number of white pegs gives the information, how many further pegs in the question match pegs in the secret only in color, but not in position. The goal of the codebreaker is to minimize the number of questions needed to guess the secret. The game ends when a question is answered with p black pegs, where this last question is counted to the total number of asked questions. Note that the only difference to Mastermind is that in the AB game all pegs in both, the secret and the questions must have distinct colors. Generalized Black-peg AB game, denoted as [formula], is a modification of the AB game, where the answers contain only black pegs. This modification is analogous to the modification of Mastermind to Black-peg Mastermind [\cite=JP11]. We denote by [formula] and [formula] the worst case number of questions in the [formula] and [formula] game, respectively. If the game has c colors, we name the colors using consecutive numbers: [formula]. Analogously, if the game has p pegs, we name the pegs using consecutive numbers: [formula]. We denote a question by [formula], where the color ki is asked at position i for [formula].

It has been proved in [\cite=CL04] that

[formula]

and in [\cite=HL09] that

[formula]

We agree that the above formula is correct. However, we think that the proof given in [\cite=HL09] is wrong or at least not complete. In particular, it is not well justified that the state after the structural reduction is as hard as or harder than the initial state [\cite=HL09].

We consider the [formula] game in Section [\ref=sec:ab]. We prove equations ([\ref=eq:ab2]) and ([\ref=eq:ab3]) independently using the approach introduced in [\cite=JP09] and then extended in [\cite=JP11] (see Sections [\ref=sec:ab2] and [\ref=sec:ab3]). Compared to [\cite=CL04] and [\cite=HL09], where different methods are proposed, our proof benefits from the same auxiliary results (see Section [\ref=sec:abaux]). Furthermore, it is much simpler and only needs to check some values received by a computer program. Moreover, our approach allows us to give in Section [\ref=sec:ab4] a similar result for four pegs, namely Theorem [\ref=thm:ab4].

It holds:

[formula]

We close Section [\ref=sec:ab] with some considerations about the value of [formula] in Section [\ref=sec:abeq].

The whole Section [\ref=sec:abb] is devoted to the lower and upper bounds for the worst case number of questions in the [formula] game. We receive Theorem [\ref=thm:abb].

It holds:

[formula]

The results presented in this paper are obtained with the help of a computer program, which is a modification of the program used in our previous papers about Mastermind [\cite=JP09] [\cite=JP11]. A compressed archive with the complete source code of the program and scripts for reproducing all computations can be downloaded from [\cite=ABcode].

AB Game with White Pegs in Answers

We verified equations ([\ref=eq:ab2]) and ([\ref=eq:ab3]) for [formula], using the computer program. Additionally, we computed the values for p = 4. The results are presented in Table [\ref=tbl:ab]. We have adapted the approach introduced in [\cite=JP09] and extended in [\cite=JP11] to obtain formulas for an arbitrary number of colors. As previously, we introduce two auxiliary games: [formula] and [formula].

The [formula] game is the [formula] game in which an additional color c in questions is allowed. Note that the additional color cannot appear in a secret and that the additional color can appear in a question more than twice, but all other "normal" colors only once. As asking a question containing p times the additional color does not makes any sense, we do not need to consider such questions in the computer program.

The [formula] game, where [formula] with px  ≤  c, is the [formula] game, where the beginning x questions are fixed, namely question k is [formula] [formula] for [formula]. Note that the [formula] game is equivalent to the [formula] game. We denote by [formula] and [formula] the worst case number of questions in the [formula] and [formula] game, respectively.

Auxiliary Results

Every strategy for [formula] using at most q questions allows to win [formula] using also at most q questions. Hence, we have [formula]. We can easily transform a strategy for [formula] into a strategy for [formula] by changing the additional color c + 1 of the [formula] game into the color c which is unused in secrets of the [formula] game and plays the role of an additional color in [formula]. Hence, [formula]. If we ask the first question containing m  ≤  p "normal" colors in the [formula] game and the adversary gives us the empty answer, we are forced to play the [formula] game. Hence, we have Consequently for c  ≥  c0 we have

[formula]

On the other hand, every strategy for [formula] is a proper strategy for [formula]. Hence, we have [formula]. Now, let the number of colors be c = px + m, where x  ≥  p and [formula]. We consider a strategy for the [formula] game. There are at least x - p empty answers among the first x questions which discard (x - p)p colors. Hence, the game is reduced to the [formula] game and we have

[formula]

In the following subsections we combine the inequalities ([\ref=eq:ablowerbound]), ([\ref=eq:abupperbound]) with computed values to obtain lower and upper bounds for the worst case number of questions in the [formula] game for a fixed number of pegs and an arbitrary number of colors.

Two Pegs

For two pegs the computer program yields [formula] and [formula]. Using equation ([\ref=eq:ablowerbound]) for c0 = 3, we receive for c  ≥  3 that Moreover, by equation ([\ref=eq:abupperbound]), for x  ≥  2 and m = 1,2 we have which implies for c  ≥  5 that it holds The above inequalities together with the values from Table [\ref=tbl:ab] confirm equation ([\ref=eq:ab2]).

Three Pegs

For three pegs the computer program yields [formula] and [formula]. Using equation ([\ref=eq:ablowerbound]) for c0 = 8, we receive for c  ≥  8 that Moreover, by equation ([\ref=eq:abupperbound]), for x  ≥  3 and m = 5,6,7 we have which implies for c  ≥  14 that it holds The above inequalities together with the values from Table [\ref=tbl:ab] confirm equation ([\ref=eq:ab3]).

Four Pegs

For p = 4 we cannot give an exact formula, but we present close lower and upper bounds, where the gap between the bounds does not exceed one question.

The program yields [formula]. Using equation ([\ref=eq:ablowerbound]) for c0 = 13, we receive for c  ≥  13 that which confirms inequality ([\ref=eq:ab4lower]). By the computer program, [formula], [formula], [formula], [formula] hold. Note that in these cases we do not know the exact values, but only upper bounds. Using equation ([\ref=eq:abupperbound]) for x  ≥  4 and m = 1,2,3,4 we have which implies that it holds for c  ≥  17 We computed directly upper bounds for the three missing values, namely 14, 15 and 16 colors. The program returned the bounds [formula], [formula] and [formula]. This closes the proof of inequality ([\ref=eq:ab4upper]). Table [\ref=tbl:ab] contains the values up to 13 colors, which confirms equation ([\ref=eq:ab4eq]).

Equal Number of Pegs and Colors

The games [formula] and [formula] are equivalent, as the equality p = c implies b + w = p, where b is the number of black pegs in the answer and w is the number of white pegs in the answer. Hence, if the number of colors is equal to the number of pegs, w is uniquely determined by b. Therefore, it holds [formula], which is the motivation to consider the only-black-peg version of the game.

The lower bound [formula] has been proved in [\cite=KT86]. This result can be reformulated as follows. We have p! possible secrets. There are c possible answers to each question, namely the number of black pegs could be 0, 1, 2, [formula], p - 2, p. Note that the answer p - 1 black pegs is not possible. As the answer p black pegs finishes the game, for every question we have at most p - 1 possible continuations of the game. Therefore, if p > 2 and we ask q questions, we can solve at most secrets and it must hold p!  ≤  T(p,q). Note that T(2,q) = q. Using Stirling's approximation p!  >  (p / e)p, we obtain an asymptotic lower bound

The upper bound [formula] has been shown in [\cite=KT86].

Table [\ref=tbl:abpp] contains exact values for [formula], computed by the program, in the second row. The last row contains the smallest value of q satisfying the inequality p!  ≤  T(p,q), which gives a lower bound for [formula].

AB Game without White Pegs in Answers

Lower Bounds

We prove lower bounds of the [formula] game by showing a counterstrategy for the codemaker. The counterstrategy is parametrized with two numbers [formula], where r  ≥  p and these parameters depend on p, but not on c.

The counterstrategy starts with the initial phase, where the codemaker answers the first c - r questions with zero black pegs. This strategy is valid, as after that at each peg position there are at least r possible colors. If the codemaker chooses an arbitrary color for the first peg, and an arbitrary unused color for the following pegs, then this process leads to a possible secret which would receive the answer of zero black pegs in the c - r questions. On the other hand, it is not always possible for the codemaker to answer the first c - p + 1 (or more) questions with zero black pegs. This can be seen by the following example.

Example. Consider the game [formula], and let the codebreaker ask the c - p + 1 = 4 questions: [formula], [formula], [formula], [formula]. If the codemaker would answer all these questions with zero black pegs, then the only possible colors for a secret would be 4, 5, 6, but no secret exists with 4 pegs and only 3 different colors.

After the initial phase an end-game is played, where the goal of the codemaker is to force the codebreaker to ask more than q questions. To ease the analysis of the end-game, we transform the set of possible secrets, but we define only transformation rules which do not increase the worst case number of questions in the end-game. As some transformation rules change colors, they also affect the set of questions. To overcome this problem, we extend the set of allowed questions. The codebreaker is not restricted to ask only questions with distinct colors in the end-game. Although extending the set of questions could decrease the worst case number of questions required to win the end-game, by choosing a suitable value of the counterstrategy parameter r we receive the desired tight lower bounds.

After answering the c - r questions with zero black pegs, some colors are excluded from being present at some positions in the secret. For every peg position, we consider a set of possible colors for that position. The cardinality of that set is at least r. The sequence of such sets for all positions is called an end-game state or simply a state for short. We represent the state by a table containing p rows. The row i contains the colors which are still possible at peg position i. In the following, we denote for a given color the set of row numbers of the state, where this color appears in, as its row set. We denote a row set of cardinality 1, 2, 3 or 4 as single row set, pair row set, triple row set and quadruple row set, respectively.

Below we formally write all state transformation rules. An application example is shown in Figure [\ref=fig:abbl:rulesex].

Rule 1. Any color can be removed from any row.

Rule 2. Colors can be permuted.

Rule 3. Rows can be permuted.

Rule 4. If the colors k1 and k2 have disjoint row sets, then the color k2 can be replaced by the color k1.

Rule 1 is correct, as the set of possible secrets is not increased by omitting a color for a fixed peg. However, we cannot remove too many colors, because this would result in decreasing the worst case number of questions. It is also clear that Rules 2 and 3 are correct, as they do not change the worst case number of questions.

The proof of Rule 4 is more complicated. Let S1 and S2 be states before and after applying Rule 4, respectively, and let R1 and R2 be the row sets of the colors k1 and k2, respectively. We need to show the implication that if the codebreaker can win S1 in q questions, then he or she can win S2 also in q questions. Let the codebreaker have a q-question winning strategy X1 for S1. We construct a strategy X2 allowing the codebreaker to win S2 in q questions. We replace in X1 the color k2 by the color k1 in all secrets. We exchange in X1 the colors k1 and k2 in all questions, but only at positions which are in the row set R2. The assumption that the row sets R1 and R2 are disjoint is important, because it implies that the secret distinctness is preserved and then answers are preserved. Formally, if in X1 the question q1 answers the secret s1 with b black pegs, q1 is mapped to q2, and s1 is mapped to s2, then in X2 the question q2 answers the secret s2 also with b black pegs. The questions in X2 remain valid, because we allowed the codebreaker to ask all combinations of colors. Some secrets, namely those containing the colors k1 and k2 in S1, become not valid in S2, because in S2 they contain two times the color k1. This causes no problems, as by omitting these secrets the worst case number of questions can only become smaller, but not larger. Finally, the transformation described by Rule 4 is an onto function, i.e., if s2 is a valid secret in S2, then there must be a valid secret s1 in S1, such that Rule 4 maps s1 to s2.

Now, to prove the lower bound for a given p, we consider all possible states and we apply the above rules to them. The goal is to reduce all states to a small set of non-reducible ones. The number of these states and the states itself must not depend on c. We leave exactly r colors for each row, using Rule 1. After that we eliminate all disjoint row sets by Rule 4. As all rows contain the same number of colors, this will also eliminate all single row sets. Because of Rule 2, we can assume that the state contains exactly the colors 0, 1, [formula], c0. Rule 3 is used to throw out isomorphic states. As the colors c0 + 1, c0 + 2, [formula], c - 1 cannot appear in the secret, we can replace all of them by c0 + 1 (here we assume that c0 + 1  ≤  c - 1). In other words, we need to consider only c0 + 2 colors in questions, namely the colors 0, 1, 2, [formula], c0 + 1, where the number c0 does not depend on c, because c0 < pr. This allows us to solve the end-game by the computer program. We check whether all non-reducible states can be finished in q questions. If the result is negative, we have the lower bound [formula].

The above considerations are taken under the assumption that the number of colors is sufficiently large. We require that c is the maximum number of colors used in all checked states, i.e., the maximum over the values of c0 + 2 in all states. As we will see later, for a smaller number of colors some states are impossible. This does not invalidate the lower bound. Moreover, if we prove a lower bound for a given state and c0 + 2 colors, then the lower bound also holds for the state, when the codebreaker has less than c0 + 2 colors. Therefore, we conclude that the lower bound holds for all c  ≥  r.

Two Pegs

For p = 2 we choose q = 1 and r = 2. After applying Rule 1, each row of the state contains 2 colors. As 2 colors with disjoint single row sets can be merged into 1 color by Rule 4, we only have pair row sets. By applying Rule 2, all states are reducible to the single state [formula]. As the state has 2 secrets, the end-game cannot be won in 1 question, which implies the lower bound [formula] for [formula]. Therefore, we have shown the inequality "≥  " in equation ([\ref=eq:abb2]).

Three Pegs

For p = 3 we choose q = r = 5. In the following, we will show that all states are reducible to the only 3 ones which are shown in Figure [\ref=fig:abbl:states3]. After applying Rule 1, each row of the state contains 5 colors. After that, if the state contains a single row set, then it must contain another row set which is disjoint with it. These row sets can be merged by Rule 4. Hence in the following, we assume that the state does not contain single row sets and the state table contains exactly 15 elements. We consider four cases distinguishing the number of triple row sets in the state.

An even number of colors has a triple row set. Then there is an odd number of remaining elements in the state table. This would mean that 1 color has a single row set, and we have a contradiction.

5 colors have a triple row set. Then after applying Rule 2, we receive table A1 of Figure [\ref=fig:abbl:states3].

3 colors have a triple row set. There are 6 remaining elements in the state table. There must be 3 colors, each having a pair row set. By applying Rules 2 and 3, we receive table A2 of Figure [\ref=fig:abbl:states3].

1 color has a triple row set. There are 12 remaining elements in the state table. There must be 6 colors, each having a pair row set. By applying Rules 2 and 3, we receive table A3 of Figure [\ref=fig:abbl:states3].

The computer experiment shows that neither of the states A1, A2 and A3 can be solved in 5 questions, which yields [formula] for c  ≥  5. Note that for smaller values of c, some states are impossible in the end-game. Only A1 appears for c = 5, only A2 for c = 6, but for c  ≥  7 all three states could appear. The same lower bound for 3  ≤  c  ≤  4 is quite easy to check directly by the computer program. Hence, we have shown the inequality "≥  " in equation ([\ref=eq:abb3]).

Four Pegs

For p = 4 we also choose q = r = 5. We will show that all states are reducible to the only 8 ones which are shown in Figure [\ref=fig:abbl:states4]. First, we apply Rule 1 so that each row of the state contains exactly 5 colors. Next, we apply Rule 4 as long as all disjoint row sets are eliminated. Among others this eliminates all single row sets. The following observation is easy to see.

Observation. Consider a state containing only n pairwise non-disjoint pair row sets. Then there exists an empty row or a row containing n different colors.

Patterns of pairwise non-disjoint pair row sets are shown in Figure [\ref=fig:abbl:patterns2].

The observation implies that a state contains at most 4 colors with a pair row set, which can be seen as follows. Assume that a state contains more than 4 colors with a pair row set. The state table contains 20 elements. Thus it contains 1 color with a quadruple row set and 2 colors with a triple row set, or 2 colors with a quadruple row set, or 2 colors with a triple row sets, or 1 color with a quadruple row set, or no other colors. Then there exists a row with at most 3 colors or at least 6 colors, which is a contradiction.

The observation also implies that if a state contains the same number of colors in each row and a color with a pair row set, it must also contain a color with a triple row set. We consider six cases distinguishing the number of quadruple row sets.

5 colors have a quadruple row set. Then after applying Rule 2, we receive table B1 of Figure [\ref=fig:abbl:states4].

4 colors have a quadruple row set. There are 4 remaining elements in the state table. This means that 2 disjoint pair row sets exist, which is a contradiction.

3 colors have a quadruple row set. There are 8 remaining elements in the state table. By the second conclusion of the observation, 2 colors have a triple row set and 1 color has a pair row set. The triple row sets are distinct, as otherwise one row would contain 6 colors. By applying Rules 2 and 3, we receive table B2 of Figure [\ref=fig:abbl:states4].

2 colors have a quadruple row set. There are 12 remaining elements in the state table. By the first conclusion of the observation, we have two sub-cases.

2 colors have a triple row set and 3 colors have a pair row set. If the triple row sets are distinct, then there exists a row with at most 4 colors or at least 6 colors. Therefore, the triple row sets must be equal. By applying Rules 2 and 3, we receive table B3 of Figure [\ref=fig:abbl:states4].

4 colors have a triple row set. All triple row sets are distinct, as otherwise a row would contain at most 4 colors. By applying Rules 2 and 3, we receive table B4 of Figure [\ref=fig:abbl:states4].

1 color has a quadruple row set. There are 16 remaining elements in the state table. By the first conclusion of the observation, 4 colors have a triple row set and 2 colors have a pair row set. We have to distinguish the relations between the 4 triple row sets.

There are 4 different triple row sets. Then there exists a row which contains 4 or 6 colors. We have a contradiction.

There are 3 equal triple row sets. Then there exists a row which contains at most 4 colors. We have a contradiction.

There are exactly 2 equal triple row sets and 2 further equal triple row sets. Then by applying Rules 2 and 3, we receive table B5 of Figure [\ref=fig:abbl:states4].

There are exactly 2 equal triple row sets and 2 further different triple row sets. Then by applying Rules 2 and 3, we receive table B6 of Figure [\ref=fig:abbl:states4].

0 colors have a quadruple row set. There are 20 remaining elements in the state table. By the first conclusion of the observation, we have two sub-cases.

4 colors have a triple row set and 4 colors have a pair row set. It is not possible that a row exists which contains no colors of pair row sets, as otherwise this row would contain not more than 4 colors. By the observation, a row exists which contains 4 colors of pair row sets. Thus this row contains only 1 color of triple row sets. This means that 1 color has a triple row set and further 3 colors have another equal triple row set. Now, the pair row sets are uniquely determined. By applying Rules 2 and 3, we receive table B7 of Figure [\ref=fig:abbl:states4].

6 colors have a triple row set and 1 color has a pair row set. We have to distinguish the relations between the 6 triple row sets.

There are at least 3 equal triple row sets R1. W.l.o.g., let R1  =  {0,1,2}. Then row 3 contains at most 4 colors, which leads to a contradiction.

There are 2 equal triple row sets R1, 2 further equal triple row sets R2, and 2 further equal triple row sets R3. W.l.o.g., let R1  =  {0,1,2}, R2  =  {0,1,3}, R3  =  {0,2,3}. Then row 0 contains at least 6 colors, which leads to a contradiction.

There are 2 equal triple row sets R1, 2 further equal triple row sets R2, and 2 further different triple row sets R3, R4. W.l.o.g., let R1  =  {0,1,2}, R2  =  {0,1,3}, R3  =  {0,2,3}, R4  =  {1,2,3}. Then the pair row set of the remaining color is uniquely determined as {2,3}. By applying Rules 2 and 3, we receive table B8 of Figure [\ref=fig:abbl:states4].

The computer experiment shows that neither of the states B1, B2, [formula], B8 can be solved in 5 questions, which yields [formula] for c  ≥  5. Again for smaller values of c, some states are impossible, e.g., for c = 7 state B7 cannot appear. The same lower bound for c = 4 is quite easy to check directly by the computer program. Hence, we have shown the inequality ([\ref=eq:abb4lower]).

Upper Bounds

We prove upper bounds of the [formula] game by showing a strategy for the codebreaker. Questions of the following form will play a major role in the strategy: for a given [formula] (not necessarily in [formula]). We will denote such a question by [formula] for short. The strategy consists of two phases: the reduction and the end-game.

The reduction. The codebreaker starts with the question [formula] and asks totally at most x questions. He or she follows three rules.

Rule 1. If the codemaker answers with p black pegs, the game is finished.

Rule 2. As long as the codemaker answers with zero black pegs, the codebreaker continues with consecutive questions in decreasing order: [formula], [formula], [formula], etc.

Rule 3. If question [formula] is the first one answered with b black pegs, where 1  ≤  b  ≤  p - 1, the codebreaker begins to ask questions in increasing order, i.e., instead of asking [formula], he or she asks questions [formula], [formula], etc., as next.

The end-game. After the x questions of the reduction phase, if the game has not yet been finished, the codebreaker plays using all possible questions.

This two phase strategy is based on three ideas. First, for a given fixed number of pegs all end-games with an arbitrary large number of colors can be reduced to an end-game with a finite and small number of colors. Second, the end-game can be effectively solved by a variant of the computer program. Third, the Rule 3 is substantial. Without it the tight upper bound cannot be obtained.

The state of the game after the reduction phase is uniquely determined by the set of pairs "question--answer", where the order of the questions is not important. Moreover, if we permute the colors, the worst case number of questions remains unchanged. In our case, it suffices to rotate the colors. Hence, we can restrict our considerations to the sequence of questions [formula], where either all answers are zero black pegs or the first asked question [formula] is answered with at least one black peg. Two examples are shown in Figure [\ref=fig:abbu:reduct_upp]. In the top example, all questions are answered with zero black pegs. In the bottom example, some questions are answered with a non-zero number of black pegs.

Observe that in the reduction phase, if the number of colors is large, the most questions are answered with zero black pegs. In fact, only at most p questions can get another answer. As a color used at a given position in a question answered with zero black pegs cannot appear at this position in the secret, after the reduction phase the most colors are excluded from being in the secret.

To be more formally, consider two games [formula] and [formula], where c1  ≥  c0. Let the number of questions in the reduction phase be x1 = c1 - y and x0 = c0 - y, respectively, where [formula] with y  ≤  c0. We want to use the strategy of the [formula] end-game in the [formula] end-game, which for c1 = c0 are obviously the same strategies. The idea relies on color mapping, which must take into account all colors not excluded in the reduction phase, and only these colors. In particular, we should consider p questions with a pairwise disjoint set of colors and each answered with one black peg. Hence, we must additionally assume that c0  ≥  p2 and x0  ≥  p2 - p + 1. Examples are shown in Figure [\ref=fig:abbu:mapping]. The left column contains the questions and answers after the reduction phase of [formula]. The right column contains the questions and answers after the reduction phase of [formula]. The examples cover three important situations. In the top example, all answers are zero black pegs. The colors 5 and 6 are allowed at position 0, and the colors 0 and 6 at position 1. In the middle example, at least one answer received a non-zero number of black pegs, but the sum of received black pegs is less than the number of pegs. The colors 0, 5 and 6 are allowed at position 0, and the colors 0, 1 and 6 at position 1. In the bottom example, the sum of received black pegs is equal to the number of pegs. The colors 0 and 3 are allowed at position 0, and the colors 1 and 4 at position 1. Finally, if there exists a q such that we find a winning strategy for every [formula] end-game in at most q - x0 questions, then the end-strategy is applicable to the [formula] end-game as well. Therefore, [formula].

Now, to prove the upper bound for a given p, we choose appropriate values of c, q and x, where

[formula]

We check by the computer program whether the [formula] end-game can be finished in q - x questions. Let [formula] be a sequence of answers in the reduction phase. As argued above, we have to consider only sequences of answers, where either [formula] or [formula].

Two Pegs

For p = 2 we choose c = q = 5 and x = 3. There are four sequences of answers: (0,0,0), (1,0,0), (1,1,0), (1,0,1). The computer experiment shows that all four end-games can be finished in q - x = 2 questions, which yields the desired c-question upper bound (i.e., [formula]) for c  ≥  5. The computer program finds a c-question strategy for c = 2,3,4, which can also be easily checked by hand. Hence, we have shown the inequality "≤  " in equation ([\ref=eq:abb2]).

Three Pegs

For p = 3 we choose c = 9, q = 10 and x = 7. The 36 possible sequences of answers are shown in Figure [\ref=fig:abbu:36]. By further symmetries they can be reduced to only 17 ones, shown in Figure [\ref=fig:abbu:17]. The computer experiment shows that all end-games are finished in q - x = 3 questions, which yields the (c + 1)-question upper bound for c  ≥  9. The same upper bound for 3  ≤  c  ≤  8 can be quite easy checked by the computer program. Hence, we have shown the inequality "≤  " in equation ([\ref=eq:abb3]).

Four Pegs

For p = 4 we choose c = 16, q = 18 and x = 13. There are 560 sequences of answers, which are reducible to only 117. However, there are still too many cases to be presented here. The computer experiment shows that all end-games are finished in q - x = 5 questions, which yields the (c + 2)-question upper bound for c  ≥  16.

An optimal (c + 1)-question strategy for 4  ≤  c  ≤  7 can be easily found in a few seconds by the computer program. The cases 8  ≤  c  ≤  15 need some more effort. To reduce computation time we search only for two phase strategies. Note that we omit the assumptions ([\ref=eq:abbu:assumption]), because we want only a strategy for a fixed number of colors. For c = 8,9,10 we apply q = c + 1 and x = c - 4. We receive 35, 56, 84 cases, respectively. For 11  ≤  c  ≤  15 we apply q = c + 2 and x = c - 3. We receive 165, 220, 286, 364, 455 cases, respectively. Some of the cases are isomorphic. However, the time spending on eliminating isomorphisms would be longer than the time needed to solve all cases. Therefore, we omit this step. And again all end-games finish in q - x = 5 questions, which finally confirms that we have shown inequality ([\ref=eq:abb4upper]).

Conclusions and Future Work

In this paper we have proved exact values for [formula], [formula], [formula], [formula], and tight bounds for [formula] and [formula]. These proofs for p = 2, 3, 4 are all based on the idea of reducing the game with an arbitrary number of colors to a game with a small number of colors and solving it by computer. This idea is general and may be applicable for any constant number of pegs. However, there are two problems, namely generating the growing number of end-games and solving all these end-games. The latter problem seems to be computationally harder and requires new ideas, as the end-games need to be played with approximately p2 colors. This is still too much for p  ≥  4, as the number of possible secrets (and thus the computational complexity) increases asymptotically like cp. Another interesting case is the game with equal number of pegs and colors, where the AB game and the ABB game equal. For this case we proved only a lower bound. We need new ideas here, as the strategies leading to the values for a fixed number of pegs do not seem to be well applicable for it.

Looking at the presented results, one can conjecture that for the [formula] game the number of questions in the worst case grows like the fraction c / p, but for the [formula] game with at least 3 pegs it seems to be independent of the number of pegs and to be equal to c + 1. Note that if the formula [formula] for p  ≥  3 could be proved, we would have a complete formula for the Generalized Black-peg AB game. This would be rather interesting, as this game would not become more difficult for increasing p.

Further work should concentrate on closing the gap between lower and upper bounds for 4 pegs, on the case of 5 pegs and on the case of equal number of pegs and colors.