A Deterministic Approximation Algorithm for Computing a Permanent of a 0,1 matrix

Introduction

A permanent of an n by n matrix A = (ai,j) is [formula], where σ runs over the elements of the permutation group on the set [formula]. When A is a zero-one matrix, [formula] counts the number of perfect matching in the graph corresponding to the adjacency matrix A. Permanent is naturally related to the determinant of A (signs in front of products are removed). Yet, while the determinant of a matrix can be computed in polynomial time, the problem of computing a permanent belongs to the #  P class even when A is a zero-one matrix [\cite=valiantPermanent]. Thus, modulo a basic complexity theoretic conjecture, no polynomial time algorithm exists for computing permanents.

A lot of research was devoted to constructing approximation algorithms for computing a permanent of a matrix. The first breakthrough came from Jerrum and Sinclair [\cite=JerrumSinclair] who constructed a randomized fully polynomial time approximation scheme (FPTAS) for 0,1 matrices satisfying certain "polynomial growth" condition. This condition relates the ratio of perfect to near-perfect matchings and requires that this ratio is at most a polynomial in n. The algorithm is based on a rapidly mixing Markov chain which runs on perfect and near perfect matchings. Using this algorithm as a black-box Jerrum and Vazirani constructed a randomized approximation algorithm for an arbitrary zero-one matrix, but with mildly exponential running time [formula]. A recent dramatic improvement was obtained by Jerrum, Sinclair and Vigoda [\cite=JerrumSinclairVigoda], who constructed FPTAS for an arbitrary matrix with non-negative entries.

Unfortunately, the randomization aspect of the algorithm of [\cite=JerrumSinclairVigoda] is quite crucial. It is not known how to derandomize their algorithm and the best known deterministic approximation algorithm was given by Linial, Samoridnitsky and Wigderson [\cite=LinialSamorodnitskyWigderson], who provide only en multiplicative approximation factor. Their algorithm is based on a FPTAS for a related matrix scaling problem and uses van der Waerden's conjecture, which states that a permanent of every doubly stochastic matrix is at least n! / nn. The en approximation factor can be improved to (k / (k - 1))kn for the case of of matrices with row and column sums bounded by k, using the Schrijver's bound [\cite=SchrijverBound]. For generalizations and simplified proof of Schrijver's bound see Gurvits [\cite=GurvitsSB]. Thus approximation of a permanent is one of the famous algorithmic problems where the existing gap between the randomized and deterministic algorithms is so profound.

In this paper we establish the following two results. First we construct a polynomial time algorithm which for every ε provides (1 + ε)n multiplicative approximation factor for a permanent of a 0,1 matrix, when the underlying graph is a constant degree expander. The definition of the latter is given in the subsequent section. While our algorithm is polynomial, it is not fully polynomial, as the term 1 / ε appears in the exponent of the running time. Thus we significantly improve the en factor of [\cite=LinialSamorodnitskyWigderson] for this class of graphs. Next we construct an algorithm providing the same approximation factor (1 + ε)n for a permanent of an arbitrary 0,1 matrix. The running time of the algorithm [formula]. The main technical ingredient of our results is the reduction of the problem to computing a partition function (see the next section for the definition) corresponding to the collection of all partial and full matchings of the graph. Recently there was a progress in constructing deterministic approximation algorithms for various counting problems without the usage of Markov chain based methods. The approach was introduced by Bandyopadhyay and Gamarnik [\cite=BandyopadhyayGamarnikCounting], and Weitz [\cite=weitzCounting] and is based on correlation decay property originating in statistical physics literature. Subsequent works in this direction include Gamarnik and Katz [\cite=GamarnikKatz] and Bayati et al. [\cite=BayatiGamarnikKatzNairTetali]. It is the second of these two works which provides the basis of our work. Specifically, a polynomial time approximation algorithm is constructed in [\cite=BayatiGamarnikKatzNairTetali] for computing the partition function corresponding to partial matchings of a an arbitrary constant degree graph. The same algorithm solves the underlying problem for an arbitrary graph but with the running time [formula]. In this paper obtain appropriate bounds on the permanent of a matrix in terms of the partition function of partial matchings of a graph. Additionally, our second result corresponding to arbitrary graphs relies heavily on the expander decomposition technique developed by Jerrum and Vazirani [\cite=JerrumVazirani] for constructing a mildly exponential approximation algorithm for computing a permanent of a 0,1 matrix.

The remainder of the paper is organized as follows. Definitions, preliminaries and the statements of the main results are subject of the following section. Section [\ref=section:ConstantExpander] is devoted to constructing approximation algorithm for the case when the underlying graph is a constant degree expander. The general case is considered in Section [\ref=section:General]. We conclude with some possible further directions in Section [\ref=section:conclusions].

Preliminaries and the main result

Consider a simple undirected n by n bi-partite graph [formula] with the node set [formula], |V1| = |V2| = n. Let E be the set of edges of the graph. [formula] denotes the set of neighbors of v∈V and [formula] denotes the degree of the node v. The degree of the graph is [formula]. Given a set of nodes A, we denote by N(A) or specifically by [formula] the set of neighbors of A (in [formula]). Given α > 0, a graph [formula] is defined to be an expander or specifically α-expander if for every set of nodes A  ⊂  Vi,i = 1,2 such that |A|  ≤  n / 2, the inequality |N(A)|  ≥  (1 + α)|A| holds. We also define

[formula]

to be the expansion of the graph [formula], where the maximum is over all subsets A  ⊂  Vi,i = 1,2 with |A|  ≤  n / 2. Clearly, [formula] is α-expander if its expansion is at least α.

A matching is a subset M  ⊂  E such that no two edges in M share a node. For every k  ≤  n let M(k) be the number of size k matchings in [formula]. Specifically, M(n) is the number of full matchings.

Given a graph [formula] let A = (aij) be the corresponding adjacency matrix. The rows and columns of A are indexed by nodes of V1 and V2 respectively, and aij = 1 if (vi,vj)∈E and aij = 0 otherwise. It is immediate that [formula].

A parameter λ > 1 is fixed called the activity. The partition function corresponding to λ is defined as

[formula]

A partition function is an important object in statistical physics. The case of matching is usually called monomer-dimer model in the statistical physics literature.

The following result was established in [\cite=BayatiGamarnikKatzNairTetali].

There exist a deterministic algorithm which provides a FPTAS for computing [formula] for an arbitrary graph/activity pair [formula] when Δ and λ are constants. The complexity of the same algorithm is [formula] for general Δ and λ.

The case λ = 1 corresponds to counting the number of partial matchings of a graph. In this paper we use the algorithm underlying Theorem [\ref=theorem:Matchings] as a subroutine to devise an approximation algorithm for computing a permanent. For this purpose we will be making λ to be appropriately large. Throughout the paper we assume λ > 10.

We now state the main two results of this paper. In the next and the following results the notion of (1 + ε)n multiplicative approximation factor of [formula] corresponds to obtaining a value Ẑ satisfying [formula].

Let [formula] be an n by n bi-partite α-expander and let ε > 0. There exist a deterministic (1 + ε)n approximation algorithm for computing [formula] with running time [formula]. Moreover, the running time is polynomial in n whenever Δ,α are constants.

Our algorithm corresponding to the second part of the theorem, while polynomial, is not strongly polynomial. As we shall see, the dependence of the running time on the approximation parameter ε is of the form [formula]. While our approximation factor (1 + ε)n is a far cry from PTAS (namely 1 + ε approximation factor), it is still a significant improvement over en factor constructed in [\cite=LinialSamorodnitskyWigderson].

Our second result does not require any restrictions on the underlying graph.

There exist a deterministic (1 + ε)n approximation algorithm for computing [formula] of an arbitrary n by n bi-partite graph [formula] which runs in time [formula].

Thus, similarly to [\cite=JerrumVazirani], our algorithm provides a mildly exponential algorithm for approximating a permanent (with a weaker approximation factor (1 + ε)n).

Constant degree expanders

Proof of Theorems [\ref=theorem:MainResultPermConst] is given in this section. We begin by establishing some preliminary results. We assume without the loss of generality that M(n)  ≥  1. Consider an arbitrary k matching M between sets A1  ⊂  V1,A2  ⊂  V2,|A1| = |A2| = k. A path [formula] is defined to be an alternating path wrt M if [formula], if (v2l,v2l + 1)∈M,1  ≤  l  ≤  r - 1 and (v2l - 1,v2l)∉M,1  ≤  l  ≤  r. Observe that given M and an alternating path P one can construct a k + 1 matching, by subtracting from M all the edges (v2l,v2l + 1),1  ≤  l  ≤  r and adding all the edges (v2l - 1,v2l),1  ≤  l  ≤  r - 1. The length of this alternating path is defined to be 2r.

Let M be a k matching between A1 and A2 for k  ≤  n - 1. For every set [formula] with |L|  ≥  (n - k) / 2 there exists an alternating path P with end points in L and [formula] and with length at most

[formula]

The proof is similar to the argument of Lemma 2 [\cite=JerrumVazirani]. Let [formula]. Let Lr be the set of nodes in V2 reachable from L en route of alternating paths with length at most 2r. Let r0 be a minimum r satisfying (1 + α)r(n - k) / 2 > n. Note [formula]. Since |L|  ≥  (n - k) / 2, then [formula]. For every r  ≤  r0, by the expansion property either [formula], or [formula] for some r'  ≤  r. In the second case we found an alternating path with length ≤  l(r0). In the first case we have |Lr0| > n / 2. We now claim that for every r > r0 either [formula] or [formula]. Indeed, let Lr'  ⊂  V1 be the set of nodes matched to Lr. In particular |Lr'| > n / 2. Since |Lr + 1| = |N(Lr')| > n / 2, then

[formula]

and the assertion is established by induction. For r  ≥  2r0 we obtain [formula] and thus we must have [formula]. We established that for some r  ≤  2r0 there exists an alternating path with an end points in L and [formula]. The length of this path is [formula]. This completes the proof.

For every k  ≤  n - 1

[formula]

As a result

[formula]

Fix an arbitrary k matching M between A1  ⊂  V1 and A2  ⊂  V2. We claim that there exist at least (n - k) / 2   k + 1-matchings obtained from M via an alternating path with length at most the value given by ([\ref=eq:alternatinglength]). Indeed, consider the set of all nodes v in [formula] such that the shortest alternating path starting from v is larger than the required bound. By Lemma [\ref=lemma:alternatinglength] this set contains less than (n - k) / 2 nodes and the assertion follows.

Now consider the following bi-partite graph. The nodes on the left (right) are all k (k + 1)-matchings. We put an edge between two matchings M,M' if M' is obtained from M via an alternating path with length at most ([\ref=eq:alternatinglength]). The total number of edges in this graphs is at least M(k)(n - k) / 2 by our observation above. For every matching M' on the right side of the graph the number of edges pointing to it is at most the number of alternating paths with length at most ([\ref=eq:alternatinglength]) which result in M'. For every possible starting node of an alternating path, the number of such alternating paths is at most

[formula]

The number of starting nodes is bounded by n. Then the total number of edges in this graph is at most [formula]. We conclude that

[formula]

The bounds ([\ref=eq:Mkk+1]) then follows. From this bound we also obtain

[formula]

where the Stirling's approximation was used in the equality. This is the required bound ([\ref=eq:Mkn]).

The inequality [formula] is immediate. We focus on the second inequality in ([\ref=eq:twosidebounds]). We need to analyze the ratio

[formula]

We set [formula] for simplicity. Applying the second part of Lemma [\ref=lemma:Mkn]

[formula]

Consider the problem of maximizing

[formula]

in the range x∈[1,n]. The boundary cases x = 1,n give respectively values log (2en / λ), - n log (λ / 2e). The second quantity is negative when λ > 2e (recall our assumption λ > 10). To find another candidate for the largest value, we take the derivative with respect to x and equating it to zero we obtain

[formula]

giving x = 2n / λ. Evaluating g(x) at this value simplifies to 2n / λ and this gives the largest value of g when n is larger than some λ dependent constant. We conclude that the left-hand side of ([\ref=eq:Mratio]) is at most [formula], implying

[formula]

Fix an arbitrary constant ε > 0. We select the smallest λ so that exp (O(λ- 1 log - 1(1 + α) log Δ)) < 1 + ε. It is clear that λ = O(ε- 1α- 1 log Δ). We compute an ε-approximation [formula] of [formula] using an algorithm from Theorem [\ref=theorem:Matchings] for computing [formula]. By Corollary [\ref=coro:nlambda], it satisfies

[formula]

Then   /  λn provides the required approximation. The complexity of this algorithm is

[formula]

and the first part of the theorem is established.

For the second part we observe that λ = O(ε- 1α- 1 log Δ) is a constant whenever α and Δ are constants. We recall from Theorem [\ref=theorem:Matchings] that the algorithm for computing [formula] is polynomial time, under these assumptions.

General graphs

Our approach borrows heavily from the Jerrum-Vazirani expander decomposition approach [\cite=JerrumVazirani]. The idea is to decompose the underlying graph into a collection of subgraphs with a suitable expansion properties and apply an algorithm for computing a permanent recursively. In [\cite=JerrumVazirani] the subroutine used is based on the algorithm relying on rapidly mixing Markov chain. Here we use the deterministic algorithm constructed in the proof of Theorem [\ref=theorem:MainResultPermConst].

The following result is established in [\cite=JerrumVazirani] (Lemma 4). There exists and algorithm, called TestExpansion which on input [formula] either identifies that [formula] is an α-expander, or identifies a set A  ⊂  V1,|A|  ≤  n / 2 such that N(A)  ≤  (1 + 2α)|A|. The running time of the algorithm is exp (O(αn log n)).

Given an arbitrary set A  ⊂  V1 it is straightforward to observe that

[formula]

where [formula] and [formula] is the permanent of the subgraph induced by A and B. Based on this observation we propose the following recursive algorithm for computing [formula]. We suppose that we have an algorithm Ar which computes (1 + ε)r factor approximation of a permanent of any r by r bipartite graph in time g(r), for every r  ≤  n - 1. We use it to construct An as follows. Set α = n- 1 / 3. Run algorithm TestExpansion on [formula]. The running time is [formula]. If the algorithm returns no set A, then the underlying graph is an α-expander and we use algorithm of Theorem [\ref=theorem:MainResultPermConst] to obtain an (1 + ε)n approximation of [formula]. The running time is [formula], and the overall running time is [formula]. Let c0 be the constant hidden in O(  ·  ). From now on, treating ε as constant, we hide [formula] in the O(  ·  ) term. In the end we observe that the dependence of the running time on ε is of the form [formula].

Otherwise the algorithm TestExpansion identifies a set A with |N(A)|  ≤  (1 + 2α)|A|. We estimate [formula] and [formula] using algorithm Ar with r = |A|,|Ac| respectively. Then we estimate [formula] using the expression ([\ref=eq:product]). For every product [formula] our approximation factor is (1 + ε)|A|(1 + ε)|Ac| = (1 + ε)n by the recursive assumption.

Now we obtain an upper bound on g(n) and specifically show that it is [formula]. Let c > c0 be a very large constant. By the recursive assumption [formula]. The function g satisfies the following bound

[formula]

Here the term [formula] comes from performing the computation over all subsets B of N(A) with size |B| = |A|. This term is trivially upper bounded by

[formula]

Now, by the recursive assumption we have for r  ≤  n / 2 that [formula], which gives

[formula]

provided that 1 + (3 / 4)c < (7 / 8)c. As for g(n - r), we have for sufficiently large n

[formula]

where in (a) we use [formula] (obtained for example using Taylor's expansion around [formula]); and in (b) we use r  ≥  1 and c > 8. Using [formula] for large n, we obtain that for every 1  ≤  r  ≤  n - 1

[formula]

Combining with ([\ref=eq:gn]) we obtain the required bound [formula].

Conclusions

We proposed a new deterministic approximation algorithm for computing a permanent of an n by n 0,1 matrix. Our algorithm provides a multiplicative approximation factor (1 + ε)n and runs in polynomial time for a matrix corresponding to a constant degree expander, and in time [formula] for an arbitrary matrix. Our algorithm is based on a recent deterministic approximation algorithm for counting the number of partial matchings of a graph [\cite=BayatiGamarnikKatzNairTetali]. It is natural to try to extend our results in several directions. One possibility is lifting 0,1 requirement. This entails extending the result of [\cite=BayatiGamarnikKatzNairTetali] to the case of weighted graphs. It is reasonable to expect that for some special cases such a program will work. In this case one can try to extend the results of the present paper to the case of general matrix entries.

A second interesting direction is utilizing the ideas in [\cite=JerrumSinclairVigoda], developed in the Markov chain setting, as a possibility of getting stronger deterministic approximation algorithms for computing a permanent. The technique developed in [\cite=JerrumSinclairVigoda] allow one to deal with the case when the ratio M(n - 1) / M(n) is exponentially large. Since obtaining amenable bounds on the ratios M(k) / M(n) was required for our algorithms to work, this might be indeed a fruitful direction for further research.

Acknowledgements

The authors gratefully acknowledge several important references obtained from Alexander Barvinok and Leonid Gurvits.