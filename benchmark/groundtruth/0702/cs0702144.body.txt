=1

Slope One Predictors for Online Rating-Based Collaborative Filtering

Anna Maclachlan

Keywords: Collaborative Filtering, Recommender, e-Commerce, Data Mining, Knowledge Discovery

In SIAM Data Mining (SDM'05), Newport Beach, California, April 21-23, 2005.

Introduction

An online rating-based Collaborative Filtering CF query consists of an array of (item, rating) pairs from a single user. The response to that query is an array of predicted (item, rating) pairs for those items the user has not yet rated. We aim to provide robust CF schemes that are:

easy to implement and maintain: all aggregated data should be easily interpreted by the average engineer and algorithms should be easy to implement and test;

updateable on the fly: the addition of a new rating should change all predictions instantaneously;

efficient at query time: queries should be fast, possibly at the expense of storage;

expect little from first visitors: a user with few ratings should receive valid recommendations;

accurate within reason: the schemes should be competitive with the most accurate schemes, but a minor gain in accuracy is not always worth a major sacrifice in simplicity or scalability.

Our goal in this paper is not to compare the accuracy of a wide range of CF algorithms but rather to demonstrate that the Slope One schemes simultaneously fulfill all five goals. In spite of the fact that our schemes are simple, updateable, computationally efficient, and scalable, they are comparable in accuracy to schemes that forego some of the other advantages.

Our Slope One algorithms work on the intuitive principle of a "popularity differential" between items for users. In a pairwise fashion, we determine how much better one item is liked than another. One way to measure this differential is simply to subtract the average rating of the two items. In turn, this difference can be used to predict another user's rating of one of those items, given their rating of the other. Consider two users A and B, two items I and J and Fig. [\ref=figsimple]. User A gave item I a rating of 1, whereas user B gave it a rating of 2, while user A gave item J a rating of 1.5. We observe that item J is rated more than item I by 1.5  -  1  =  0.5 points, thus we could predict that user B will give item J a rating of 2  +  0.5  =  2.5. We call user B the predictee user and item J the predictee item. Many such differentials exist in a training set for each unknown rating and we take an average of these differentials. The family of slope one schemes presented here arise from the three ways we select the relevant differentials to arrive at a single prediction.

The main contribution of this paper is to present slope one CF predictors and demonstrate that they are competitive with memory-based schemes having almost identical accuracy, while being more amenable to the CF task.

Related Work

Memory-Based and Model-Based Schemes

Memory-based collaborative filtering uses a similarity measure between pairs of users to build a prediction, typically through a weighted average [\cite=Empirical] [\cite=Personality] [\cite=GroupLens1994] [\cite=Lightweight]. The chosen similarity measure determines the accuracy of the prediction and numerous alternatives have been studied [\cite=NonPersonalized]. Some potential drawbacks of memory-based CF include scalability and sensitivity to data sparseness. In general, schemes that rely on similarities across users cannot be precomputed for fast online queries. Another critical issue is that memory-based schemes must compute a similarity measure between users and often this requires that some minimum number of users (say, at least 100 users) have entered some minimum number of ratings (say, at least 20 ratings) including the current user. We will contrast our scheme with a well-known memory-based scheme, the Pearson scheme.

There are many model-based approaches to CF. Some are based on linear algebra (SVD, PCA, or Eigenvectors) [\cite=FactorAnalysis] [\cite=Competitive] [\cite=EigentasteFull] [\cite=Fuzzy] [\cite=DimensionalityReduction] [\cite=incrementalsvd]; or on techniques borrowed more directly from Artificial Intelligence such as Bayes methods, Latent Classes, and Neural Networks [\cite=Neural] [\cite=Empirical] [\cite=hofmann:latent]; or on clustering [\cite=Nannen:Thesis:2003] [\cite=chee01rectree]. In comparison to memory-based schemes, model-based CF algorithms are typically faster at query time though they might have expensive learning or updating phases. Model-based schemes can be preferable to memory-based schemes when query speed is crucial.

We can compare our predictors with certain types of predictors described in the literature in the following algebraic terms. Our predictors are of the form f(x)  =  x + b, hence the name "slope one", where b is a constant and x is a variable representing rating values. For any pair of items, we attempt to find the best function f that predicts one item's ratings from the other item's ratings. This function could be different for each pair of items. A CF scheme will weight the many predictions generated by the predictors. In [\cite=Item-based], the authors considered the correlation across pairs of items and then derived weighted averages of the user's ratings as predictors. In the simple version of their algorithm, their predictors were of the form f(x) = x. In the regression-based version of their algorithm, their predictors were of the form f(x) = ax + b. In [\cite=Regression-based], the authors also employ predictors of the form f(x) = ax + b. A natural extension of the work in these two papers would be to consider predictors of the form f(x) = ax2 + bx + c. Instead, in this paper, we use na�ve predictors of the form f(x) = x + b. We also use na�ve weighting. It was observed in [\cite=Item-based] that even their regression-based f(x) = ax + b algorithm didn't lead to large improvements over memory-based algorithms. It is therefore a significant result to demonstrate that a predictor of the form f(x) = x + b can be competitive with memory-based schemes.

CF Algorithms

We propose three new CF schemes, and contrast our proposed schemes with four reference schemes: Per User Average, Bias From Mean, Adjusted Cosine Item-Based, which is a model-based scheme, and the Pearson scheme, which is representative of memory-based schemes.

Notation

We use the following notation in describing schemes. The ratings from a given user, called an evaluation, is represented as an incomplete array u, where ui is the rating of this user gives to item i. The subset of the set of items consisting of all those items which are rated in u is S(u). The set of all evaluations in the training set is χ. The number of elements in a set S is card(S). The average of ratings in an evaluation u is denoted ū. The set Si(χ) is the set of all evaluations u∈χ such that they contain item i (i∈S(u)). Given two evaluations u,v, we define the scalar product 〈u,v〉 as [formula]. Predictions, which we write P(u), represent a vector where each component is the prediction corresponding to one item: predictions depend implicitly on the training set χ.

Baseline Schemes

One of the most basic prediction algorithms is the Per User Average scheme given by the equation P(u)  =  ū. That is, we predict that a user will rate everything according to that user's average rating. Another simple scheme is known as Bias From Mean (or sometimes Non Personalized [\cite=NonPersonalized]). It is given by

[formula]

That is, the prediction is based on the user's average plus the average deviation from the user mean for the item in question across all users in the training set. We also compare to the item-based approach that is reported to work best [\cite=Item-based], which uses the following adjusted cosine similarity measure, given two items i and j:

[formula]

The prediction is obtained as a weighted sum of these measures thus:

[formula]

where the regression coefficients αi,j,βi,j are chosen so as to minimize [formula] with i and j fixed.

The Reference Scheme

Since we wish to demonstrate that our schemes are comparable in predictive power to memory-based schemes, we choose to implement one such scheme as representative of the class, acknowledging that there are many documented schemes of this type. Among the most popular and accurate memory-based schemes is the Pearson scheme [\cite=GroupLens1994]. It takes the form of a weighted sum over all users in χ

[formula]

where γ is a similarity measure computed from Pearson's correlation:

[formula]

Following [\cite=Empirical] [\cite=NonPersonalized], we set

[formula]

with ρ = 2.5, where ρ is the Case Amplification power. Case Amplification reduces noise in the data: if the correlation is high, say Corr = 0.9, then it remains high ([formula]) after Case Amplification whereas if it is low, say Corr = 0.1, then it becomes negligible ([formula]). Pearson's correlation together with Case Amplification is shown to be a reasonably accurate memory-based scheme for CF in [\cite=Empirical] though more accurate schemes exist.

The Scheme

The slope one schemes take into account both information from other users who rated the same item (like the Adjusted Cosine Item-Based) and from the other items rated by the same user (like the Per User Average). However, the schemes also rely on data points that fall neither in the user array nor in the item array (e.g. user A's rating of item I in Fig. [\ref=figsimple]), but are nevertheless important information for rating prediction. Much of the strength of the approach comes from data that is not factored in. Specifically, only those ratings by users who have rated some common item with the predictee user and only those ratings of items that the predictee user has also rated enter into the prediction of ratings under slope one schemes.

Formally, given two evaluation arrays vi and wi with [formula], we search for the best predictor of the form f(x)  =  x  +  b to predict w from v by minimizing [formula]. Deriving with respect to b and setting the derivative to zero, we get [formula]. In other words, the constant b must be chosen to be the average difference between the two arrays. This result motivates the following scheme.

Given a training set χ, and any two items j and i with ratings uj and ui respectively in some user evaluation u (annotated as u∈Sj,i(χ)), we consider the average deviation of item i with respect to item j as:

[formula]

Note that any user evaluation u not containing both uj and ui is not included in the summation. The symmetric matrix defined by j,i can be computed once and updated quickly when new data is entered.

Given that j,i + ui is a prediction for uj given ui, a reasonable predictor might be the average of all such predictions

[formula]

where Rj  =  {i|i∈S(u),i  ≠  j,card(Sj,i(χ))  >  0} is the set of all relevant items. There is an approximation that can simplify the calculation of this prediction. For a dense enough data set where almost all pairs of items have ratings, that is, where card(Sj,i(χ))  >  0 for almost all i,j, most of the time Rj  =  S(u) for j∉S(u) and Rj  =  S(u) - {j} when j∈S(u). Since [formula] for most j, we can simplify the prediction formula for the Slope One scheme to

[formula]

It is interesting to note that our implementation of Slope One doesn't depend on how the user rated individual items, but only on the user's average rating and crucially on which items the user has rated.

The Scheme

One of the drawbacks of Slope One is that the number of ratings observed is not taken into consideration. Intuitively, to predict user A's rating of item L given user A's rating of items J and K, if 2000 users rated the pair of items J and L whereas only 20 users rated the pair of items K and L, then user A's rating of item J is likely to be a far better predictor for item L than user A's rating of item K is. Thus, we define the Weighted Slope One prediction as the following weighted average

[formula]

where cj,i = card(Sj,i(χ)).

The Scheme

While weighting served to favor frequently occurring rating patterns over infrequent rating patterns, we will now consider favoring another kind of especially relevant rating pattern. We accomplish this by splitting the prediction into two parts. Using the Weighted Slope One algorithm, we derive one prediction from items users liked and another prediction using items that users disliked.

Given a rating scale, say from 0 to 10, it might seem reasonable to use the middle of the scale, 5, as the threshold and to say that items rated above 5 are liked and those rated below 5 are not. This would work well if a user's ratings are distributed evenly. However, more than 70% of all ratings in the EachMovie data are above the middle of the scale. Because we want to support all types of users including balanced, optimistic, pessimistic, and bimodal users, we apply the user's average as a threshold between the users liked and disliked items. For example, optimistic users, who like every item they rate, are assumed to dislike the items rated below their average rating. This threshold ensures that our algorithm has a reasonable number of liked and disliked items for each user.

Referring again to Fig. [\ref=figsimple], as usual we base our prediction for item J by user B on deviation from item I of users (like user A) who rated both items I and J. The Bi-Polar Slope One scheme restricts further than this the set of ratings that are predictive. First in terms of items, only deviations between two liked items or deviations between two disliked items are taken into account. Second in terms of users, only deviations from pairs of users who rated both item I and J and who share a like or dislike of item I are used to predict ratings for item J.

The splitting of each user into user likes and user dislikes effectively doubles the number of users. Observe, however, that the bi-polar restrictions just outlined necessarily reduce the overall number of ratings in the calculation of the predictions. Although any improvement in accuracy in light of such reduction may seem counter-intuitive where data sparseness is a problem, failing to filter out ratings that are irrelevant may prove even more problematic. Crucially, the Bi-Polar Slope One scheme predicts nothing from the fact that user A likes item K and user B dislikes this same item K.

Formally, we split each evaluation in u into two sets of rated items: Slike(u) = {i∈S(u)|ui  >  ū} and Sdislike(u) = {i∈S(u)|ui  <  ū}. And for each pair of items i,j, split the set of all evaluations χ into Slikei,j  =  {u∈χ|i,j∈Slike(u)} and Sdislikei,j  =  {u∈χ|i,j∈Sdislike(u)}. Using these two sets, we compute the following deviation matrix for liked items as well as the derivation matrix devdislikej,i.

[formula]

The prediction for rating of item j based on rating of item i is either plikej,i  =  likej,i  +  ui or pdislikej,i  =  dislikej,i  +  ui depending on whether i belongs to Slike(u) or Sdislike(u) respectively. The Bi-Polar Slope One scheme is given by

[formula]

where the weights clikej,i  =  card(Slikej,i) and cdislikej,i  =  card(Sdislikej,i) are similar to the ones in the Weighted Slope One scheme.

Experimental Results

The effectiveness of a given CF algorithm can be measured precisely. To do so, we have used the All But One Mean Average Error (MAE) [\cite=Empirical]. In computing MAE, we successively hide ratings one at a time from all evaluations in the test set while predicting the hidden rating, computing the average error we make in the prediction. Given a predictor P and an evaluation u from a user, the error rate of P over a set of evaluations χ', is given by

[formula]

where u(i) is user evaluation u with that user's rating of the ith item, ui, hidden.

We test our schemes over the EachMovie data set made available by Compaq Research and over the Movielens data set from the Grouplens Research Group at the University of Minnesota. The data is collected from movie rating web sites where ratings range from 0.0 to 1.0 in increments of 0.2 for EachMovie and from 1 to 5 in increments of 1 for Movielens. Following [\cite=NonPersonalized] [\cite=LemireIR2003], we used enough evaluations to have a total of 50,000 ratings as a training set (χ) and an additional set of evaluations with a total of at least 100,000 ratings as the test set (χ'). When predictions fall outside the range of allowed ratings for the given data set, they are corrected accordingly: a prediction of 1.2 on a scale from 0 to 1 for EachMovie is interpreted as a prediction of 1. Since Movielens has a rating scale 4 times larger than EachMovie, MAEs from Movielens were divided by 4 to make the results directly comparable.

The results for the various schemes using the same error measure and over the same data set are summarized in Table [\ref=tableresults]. Various subresults are highlighted in the Figures that follow.

Consider the results of testing various baseline schemes. As expected, we found that Bias From Mean performed the best of the three reference baseline schemes described in section [\ref=ssec:base]. Interestingly, however, the basic Slope One scheme described in section [\ref=ssec:slopeone] had a higher accuracy than Bias From Mean.

The augmentations to the basic Slope One described in sections [\ref=ssec:weightSone] and [\ref=ssec:bipolar] do improve accuracy over EachMovie. There is a small difference between Slope One and Weighted Slope One (about 1%). Splitting dislike and like ratings improves the results 1.5-2%.

Finally, compare the memory-based Pearson scheme on the one hand and the three slope one schemes on the other. The slope one schemes achieve an accuracy comparable to that of the Pearson scheme. This result is sufficient to support our claim that slope one schemes are reasonably accurate despite their simplicity and their other desirable characteristics.

Conclusion

This paper shows that an easy to implement CF model based on average rating differential can compete against more expensive memory-based schemes. In contrast to currently used schemes, we are able to meet 5 adversarial goals with our approach. Slope One schemes are easy to implement, dynamically updateable, efficient at query time, and expect little from first visitors while having a comparable accuracy (e.g. 1.90 vs. 1.88 MAE for MovieLens) to other commonly reported schemes. This is remarkable given the relative complexity of the memory-based scheme under comparison. A further innovation of our approach are that splitting ratings into dislike and like subsets can be an effective technique for improving accuracy. It is hoped that the generic slope one predictors presented here will prove useful to the CF community as a reference scheme.

Note that as of November 2004, the Weighted Slope One is the collaborative filtering algorithm used by the Bell/MSN Web site inDiscover.net.