The polynomial algorithm for graphs' isomorphism testing

In this paper we use the term "graph" for any partition of the cartesian square V2 of the set of n vertices V. In other words, the graph G(V) denotes a color digraph with color vertices.

It is known [\cite=Weis] that the graphs' isomorphism problem is equivalent to the problem of determination of orbits of graph's automorphism group. We will construct the polynomial algorithm for latter problem.

Lemma

Let A,B be permutation groups on V, and Orb(A),Orb(B) be corresponding systems of orbits on V then a partition [formula] is the system of orbits Orb(C) of group C generated by subgroups A,B (where the union of partitions means the union of its classes containing non-empty intersection).

Proof

As any permutation a∈A keeps partition Orb(A) and any permutation b∈B keeps partition Orb(B) then any product of permutations from A,B keeps partition Q.

Let U be a class of Q and points x,y∈U then there exists a sequence of classes [formula] so that Vi∈Orb(A), Wi∈Orb(B), any two of nearby classes have non-empty intersection and points x,y are located in the utmost classes. It follows that there exists a product of elements from A,B that transforms x in y.

Algorithm

Let A be a polynomial algorithm that colors vertices of the graph G(V) in ordered colors and thus determines an ordered partition on the set V. Let a graph AG obtained from graph G by action of algorithm A has the same automorphism group as graph G. Let also this algorithm recognize graphs with trivial automorphism group so that it colors every vertex of such graph in its unique color.

Now we can construct a polynomial algorithm that finds the orbits of automorphism group of any graph G(V).

Obtain graphs R = AG, R(x1) = AG(x1), R(x1,x2) = AG(x1,x2), , [formula] consecutively, by a consecutive coloring of vertices [formula] from the set V, until the graph [formula] with regular automorphism group from the initial graph G is obtained.

It means that the graph [formula] has a non-trivial automorphism group, but for any other vertex xk + 1 a graph [formula] obtained from the graph [formula] by coloring a vertex xk + 1 has the trivial automorphism group.

Of course, if G has trivial automorphism group, the algorithm stops immediately.

By testing the graphs [formula] on isomorphism, construct the system of orbits of the group [formula].

It is possible to iterate steps 1 and 2 taking every time a new sequence of fix-vertices so as to obtain a new automorphic partition (a system of orbits of some subgroup of Aut(G)) on V. By union of automorphic partitions we will every time (accordingly to Lemma) obtain a larger and larger automorphic partition until we will have obtained a system of orbits of automorphism group of initial graph G.

We can notice that the larger automorphic partition is the more restricted is the possibility for the choice of fix-vertices, because all vertices in the same orbit are identical for such choice.

By finding the isomorphic graphs we find not only automorphic partitions, but also automorphisms. So by constructing the system of orbits of Aut(G) we also obtain a defining system of this group.

How to select fix-vertices

At first we can see that it is sufficient to find at most n - 1 automorphic partitions, having non-trivial intersection, in order to obtain the system of orbits of Aut(G) as union of these partitions. More precise, if a system of orbits Q of some subgroup of Aut(G) is already found then it is sufficient to discover further at most |Q| - 1 corresponding automorphic partitions.

It can be used different strategies for separation of fix-vertices. One of these can be based on a partial order of set V that orders vertices by its number of previous fixations.

The main problem is to verify whether an obtained system of orbits Q is Orb(Aut(G)). Let O1,O2∈Q. Now we will give the verifying algorithm that verifies whether there exists an automorphism of graph G connecting these two orbits (suborbits). It is sufficient to search a corresponding automorphism for any pair of vertices o1∈O1 and o2∈O2.

By fixation of vertices, obtain the graph [formula] relative to that the vertices o1,o2 are equivalent (have the same color), but for any other vertex xk + 1 the graph [formula] distinguishes the vertices o1 and o2.

Obtain the graphs [formula] and [formula].

If connecting automorphism for o1 and o2 exists then the graphs T(o1) and T(o2) are isomorphic and, accordingly to the result of the previous step, have the empty intersection of the same color classes.

Using the whole algorithm from beginning, find a system of orbits of automorphism groups of graphs T(o1) and T(o2) and examine these graphs on isomorphism.

It is clear that, in order to finish the verifying algorithm, we need to examine some tree of graphs.

It is clear that the number of levels of consecutive pairs of vertices (the same as o1,o2) of such tree is smaller than log 2n, because the graphs T(o1), T(o2) halve the set [formula]. And hence the total number of graphs of this tree is smaller than n.

This consideration is sufficient for polynomiality of whole algorithm.

There is one more property of the base tree of whole algorithm that ascertains the polynomiality of the described algorithm: the total number of graphs of the base tree, that need to be investigated, has a non-principal difference for various cases and is by order not greater than n2, because

the greater the number of levels of the tree, the smaller the number of branches of every level (as for complete graph in the limit, that requires algorithm A for about n2 graphs )

and vice versa,

the greater the number of branches that levels of tree have, the smaller the number of levels of the tree (as for graph with regular automorphism group in the limit, that gives n graphs for testing of their pairs on isomorphism).

The complexity of algorithm A is obviously greater than the complexity of graphs isomorphism testing for graphs with trivial automorphism group. Hence the case "more levels" has greater complexity than the case "more branches". It follows that the whole algorithm has its greatest complexity for complete graph and this complexity is equal n2|A|, where |A| is complexity of algorithm A.

Conclusion

Algorithm A

The sequence of graph stabilization algorithms can be constructed in the way B. Weisfeiler described in [\cite=Weis]. We will denote such algorithms as Ak. The algorithm Ak stabilizes the graph G by stabilizing the structure on Vk, generated by this graph. B. Weisfeiler examined the algorithm A2 and began to examine the algorithm A3.

The given algorithm puts up a question whether there exists a natural l so that for all k  ≥  l algorithm Ak recognizes the graphs with trivial automorphism group. To author an existence of counter-example for l = 3 is unknown, i.e. an existence of graph with trivial automorphism group in that any two isomorphic triangles have the same number of spanning isomorphic quadrangles.

Perspectives

The algorithms Ak present a combinatorial direction of investigation of graphs' symmetries. This direction for k > 2 cannot have a two-place algebraic interpretation. It is obviously more difficult but substantially stronger for considered problem than a generalization of A2 on the algorithms acting on V2 that leads to conception of distance-regular graph systematically described in [\cite=Bannai].

On the way to solve the graphs isomorphism problem Author has discovered the original combinatorial objects, that was, most likely, not investigated earlier. These combinatorial objects present the transformation of principal properties of graph symmetries on the set Ck of k + 1 classes from Vk that leads to conception of being Ck assembled or non-assembled in the subset of Vk + 1. The simplest example of this representation on V2 we obtain in the next matrix notation:

Assembled case:

Non-assembled case:

Both sets C' and C'' have the same projection on the set V that consists of subsets

The investigation of these objects for greater dimensions shows the way of the problem solution.

Related problems

The existence of the polynomial algorithm of graphs' isomorphism testing allows to suggest the existence of a full polynomial invariant of a graph and then the existence of a full polynomial invariant of any finite group, because any finite group G has a special for this group graph representation as a partition of the set G2 generated by the left (right) action of group G on the set G2. Indeed, this graph can be simplified to a d + 1 color digraph (where one color is empty) with geometrical structure of many-dimensional tore by dimension d being equal to a number of group's generators. The canonization of group's generating system can allow to identify a group by full invariant of its graph.

On the other hand, the existence of the polynomial algorithm of graphs' isomorphism testing shows a possible existence of the full polynomial invariant of a partition of Vl. It gives a different approach for group identification as a permutation representation of minimal degree, acting on V, and then as automorphism group of its system of orbits on Vl for minimal possible l; where for symmetric group l = 1, for graph automorphism group l = 2, for alternating group l = n - 1.

It can be seen that described symmetries are equivalent to symmetry of the set of left (right) cosets of cyclic subgroups of group G generated by the group's generators. This shows that considered approach is different from the group symmetry investigation through the structure of the set of its normal subgroups.

It should be said further if above considerations are correct then it follows that an independent natural full invariant of an abstract group is needed to exist. An investigation of invariants of described symmetrical objects generated by these groups gives the way for obtaining this full invariant.

Acknowledgements

I would like to express many thanks to Dr. M.Tabachnikov for the proposal (in 1983) to solve this problem, to Dr.V.Grinberg for productive contacts, to Dr. M.Klin for acquainting with contemporary achievements in this field and to my sons Dr. S. Golubchik and R. Golubchik for priceless computer assistance.