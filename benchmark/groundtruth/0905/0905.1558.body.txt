PARAMETRIC MIXED SEQUENT CALCULUS

Introduction

The systems which represent classical and intuitionistic logics have often been studied separately. For each of these logics we establish its proper properties. Although the systems which represent intuitionistic logic are sub-systems of those which represent classical logic, we usually do not find in the literature studies of the properties of these systems at the same time. We mainly find many external translations from classical to intuitionistic logic. The main novelty of the system which we look for is that intuitionistic and classical logics appear as fragments. For instance a proof of an intuitionistic formula may use classical lemmas without any restriction. This approach is radically different from the one that consists in changing the rule of the game when we want to change the logic. We want only one logic which, depending on its use, may appear classical or intuitionistic.

J.-Y. Girard presented in [\cite=LU] a single sequent calculus (denoted LU) common to classical, intuitionistic and linear logics. Each formula is given with a polarity: positive, neutral and negative. For each connective the rules depend on the polarity of the formulas. On the other hand the system LU has a cut-elimination theorem and then the sub-formula property. Although the system LU is an answer to our question, we seek a simpler and more intuitive system only for classical and intuitionistic logics.

The usefulness of finding a system which mixes classical and intuitionistic logics is more and more recognized. For example, J.-L. Krivine and the second author introduced a second order mixed logic in order to type storage and control operators in λC-calculus (see [\cite=KN]). Indeed, they needed intuitionistic logic to characterize the operational behavior of the storage operators and classical logic for the control operators. The theoretical properties of this system are not difficult to prove because the only connectives are →   and [formula]. Recently, C. Raffalli introduced in [\cite=Ra] a second order mixed logic which is slight extension of that of [\cite=KN] in order to extract a program for some classical proofs. He applied his method to extract a program from a classical proof of Dickson's lemma.

In the paper [\cite=NN], the second author and A. Nour presented a propositional logic with all connectives (denoted PML) containing three kinds of variables: minimal, intuitionistic and classical. The absurdity rules are restricted to the formulas containing the corresponding variables. They introduced for the system PML a Kripke semantics and they showed a completeness theorem. They deduced from this theorem a very significant result which is the following: "for a formula to be derivable in a logic, it is necessary that the formula contains at least a variable which corresponds to this logic". They also presented a sequent calculus version of this system. The systems presented in [\cite=NN] are not satisfactory because they do not have cut-elimination results.

We propose in this paper another approach to solve this problem. We fix a set of formulas P which represents intuitively the set of formulas on which we can do classical reasoning. A sequent is a pair of multisets of formulas, denoted [formula], where Δ  ⊆  P and Π contains at most one formula. We introduce a list of classical rules on the multiset Δ and intuitionistic rules on Π. Certain rules will require conditions on the membership of some formulas to the set P. We prove a cut-elimination theorem and thus deduce the sub-formula property. We show how to code systems LK and LJ in our system which is coded in system LL.

The paper is organized as follows. In section [\ref=Def] we present the rules of our system. We prove in section [\ref=Prop] the cut elimination properties of the system. The codings of systems LK and LJ in our system are given in section [\ref=Codings]. We present in section [\ref=LL] a coding of the system in system LL.

The MLP sequent calculus

The set of formulas is defined by the following grammar:

[formula]

where X ranges over a set of propositional variables V.

Let P be a subset of formulas. A P-sequent is a pair of multisets of formulas, denoted [formula], where Δ  ⊆  P and Π contains at most one formula. The set Δ is called the body and Π (the space after ";") is called the stoup. A P-derivation may be constructed according to one of the rules below.

AXIOM/CUTS

[formula]

STRUCTURE

LOGIC

We write [formula] if the P-sequent [formula] is derivable in system MLP.

The conditions which we add on the set P in some left logical rules are necessary to obtain a cut-elimination theorem. Indeed without these conditions the cuts on the principal formulas of the rules ([formula] 2  ≤  i  ≤  4 and [formula]) or ([formula] 3  ≤  i  ≤  4 and [formula]) or (→  2r and →  1l) cannot be eliminate.

We can remove the rules [formula] and [formula] and replace the rule [formula] by the following rule:

[formula]

In this new system, the results of sections [\ref=Prop] and [\ref=Codings] remain true but not those of section [\ref=LL].

We chose an additive "or" to facilitate the embedding of our system in LL. The results of sections [\ref=Prop] and [\ref=Codings] remain true if we add the two following left rules:

If we consider the connector [formula] as primitive, we can add the following rules:

If [formula], we derive [formula] and [formula].

Properties of system MLP

The Hauptsatz holds for MLP.

The degree of a cut-rule in a P-derivation is the pair of integers (l,k) where l is the length of the cut-formula and k is defined by:

k = 3, if it is the rule cut2.

k = 2, if it is the rule cut1 and the cut-formula of the stoup of the left premise is the principal formula of a logical rule.

k = 1, if it is the rule cut1 and the cut-formula of the stoup of the left premise is the principal formula of a logical rule but not the cut-formula of the right premise.

k = 0, if it is the rule cut1 and the cut-formulas are the principal formulas of logical rules.

The order we consider on degrees is the lexicographic order.

The degree of a P-derivation is the finite list of increasing degrees of its cuts. We consider also the lexicographic order on these degrees.

Let D be a P-derivation. We will explain how to reduce a cut in D to obtain a P-derivation of smaller degree.

We consider a cut of degree (l,k) where its premises are derivable without the cut-rules.

If k = 0, we replace this cut by other cuts of degrees (l',k') where l' < l.

If k = 1, we move up the left premise in the P-derivation of the right premise at the places where the cut-formula was the principal formula of a logical rule. We thus replace this cut by other cuts of degrees (l,0).

If k = 2, we move up the right premise in the P-derivation of the left premise at the places where the cut-formula was the principal formula of a logical rule. We thus replace this cut by other cuts of degrees (l,1) or (l,0).

If k  =  3, we move up the right premise in the P-derivation of the left premise at the places where the cut-formula was introduced using the rules der, wr or 0. We thus replace this rule cut2 by other rules cut1 of degrees (l,k') where 0  ≤  k'  ≤  2.

We notice that in each case the degree of the obtained P-derivation decreases strictly.

The MLP has the sub-formula property.

By theorem [\ref=cut].

If [formula], then [formula] or [formula] or [formula] or [formula].

If [formula] and [formula], then [formula] or [formula].

We consider a normal derivation of [formula] and we look at the last used rule.

Codings of LK and LJ in MLP

We consider systems LK and LJ constructed respectively over the sets of variables [formula] and [formula]. We suppose that [formula] (resp. 0) is the symbol for the absurdity of LK (resp. LJ). We will give some conditions to code separately systems LK and LJ in MLP.

A set of formulas S is said to be stable iff

for every [formula], if AcB∈S, then A,B∈S

Let K be a stable set such that K  ⊆  P and [formula].

If Γ,Δ  ⊆  K, then [formula] iff [formula].

⇒   : If we replace ";" by ",", the rules of MLP are rules of LK.

⇐ : We consider a derivation D of [formula]. We check that we can move up the rules used in D without putting formulas in the stoups. The rule cut and the left rules of LK correspond to the rules cut2, cl, wl, [formula], [formula],[formula] and →  3l (without stoups). The axiom and the right rules of LK correspond to ax, cr, wr, [formula], [formula], [formula] and →  2r using the rule der.

The set K  =  P of all formulas on [formula] satisfies the hypothesis of theorem [\ref=LK].

For every formula A on [formula], let KA be the finite set of the sub-formulas of A. If KA  ⊆  P, then [formula] iff [formula].

Let I be a stable set such that [formula] and [formula].

If Γ,A  ⊆  I, then [formula] iff [formula].

⇒   : We consider a normal P-derivation D of [formula]. The fact that Γ,A  ⊆  I allows to move up the rules using in D without putting formulas in the bodies. Then the only rules used in D are intuitionistic rules.

⇐ : The rules of LJ correspond to the rules ax, cut1, cl, wl, 0, [formula], [formula], [formula], [formula], [formula], →  1l and →  1r (without bodies).

Let [formula]. The set I of all formulas on [formula] satisfies the hypothesis of theorem [\ref=LJ].

Let A be a formula on [formula]. We have [formula] iff [formula].

To code, at the same time, the two systems, it is necessary to realize all the conditions of theorems [\ref=LK] and [\ref=LJ]. We give an example of such a system.

We suppose that we have two disjoint sets of propositional variables: Vi  =  {Xi,Yi,Zi,...} the set of intuitionistic variables and Vc  =  {Xc,Yc,Zc,...} the set of classical variables. Let [formula].

If A is a formula, we denote by var(A) the set of variables and constants of A.

Let [formula] be the set of all formulas,

=  {F∈ / [formula] the set of classical formulas,

=  {F∈ / [formula] the set of intuitionistic formulas and

=    -  .

If Γ,Δ  ⊆  , then [formula] iff [formula].

If Γ,A  ⊆  , then [formula] iff [formula].

We use theorems [\ref=LK] and [\ref=LJ].

Coding of MLP in LL

We define the following two translations b and t from MLP to LL:

if [formula], then b(A)  =  t(A)

if A∈P, then b(A)  =  ?t(A)

and

[formula]

t(X)  =  !X, for every X∈V

[formula]

[formula]

[formula]

If Γ  =  A1,...,An, then t(Γ)  =  t(A1),...,t(An).

If [formula], then [formula].

If [formula], then [formula].

If [formula], then [formula].

If [formula], then [formula].

See [\cite=DJS].

If [formula], then [formula]

By induction on a P-derivation of [formula]. We look at the last rule used.

For the rules ax, cut1, der, cr, wr, 0, [formula], [formula], [formula] and →  1l, the proof is easy.

For the rules cl and wl, we use 1. and 2. of lemma [\ref=trad].

For the rules cut2, [formula], [formula] and →  2l, we use 3. of lemma [\ref=trad].

For the rules [formula] (1  ≤  i  ≤  4), [formula] (1  ≤  i  ≤  4) and →  il (1  ≤  i  ≤  2), we use 4. of lemma [\ref=trad].

For the rule →  3l, we have, by induction hypothesis, [formula] and [formula]. We deduce that

[formula]