Algorithms for two variants of Satisfaction Approval Voting

Introduction

Multi-winner voting rules based on approval ballots have received increased attention in recent years [\citep=ABC+14c] [\citep=BKS07a] [\citep=BMS06a] [\citep=Kilg10a] [\citep=MPRZ08a]. A natural way is in which the candidates with the highest number of approvals are selected. However is not very good at representing diverse intetests and other rules based on approval ballots have been devised. In particular Satisfaction Approval Voting () and its variants have been proposed [\citep=BrKi14a] [\citep=KiMa12a]. We show that the winning set can be computed in polynomial time for two prominent variants of .

Approval-based rules

We consider the social choice setting there is a set of agents [formula] and a set of candidates [formula]. Each agent i∈N expresses an approval ballot Ai  ⊂  C that represents the subset of candidates that he approves of, yielding a set of approval ballots [formula]. Approval-based multi-winner rules that take as input [formula] and return the subset W  ⊆  C of size k that is the winning set. Some rules may not return a winning set of a specific size and the size can vary from 1 to m. We consider the following rules.

Satisfaction Approval Voting ([formula])

finds a set W  ⊆  C of size k that maximizes [formula].

Constrained Satisfaction Approval Voting ([formula])

finds a set W  ⊆  C that maximizes [formula].

Modified Satisfaction Approval Voting ([formula])

finds a set W  ⊆  C that maximizes [formula].

In contrast to , and coincide with for the case of k = 1. In this sense, they can be considered as proper generalization of for larger k. [formula] and [formula] can also be used to select a winning set of a given size k by selecting a set of size k with the highest CSat and MSat scores respectvely. Note that if the size of the winning set is not specified, then whereas [formula] gives the set of all candidates the highest score, [formula] and [formula] may not give the set of all candidates the highest score. We consider both the problem of computing the winning set of a particular size as well as the problem of computing the winning set of any size.

Computational results

[\citet=AGG+14a] showed that can be implemented in polynomial time. We show that and winning set can also be computed in polynomial time.

There exists a polynomial-time algorithm to compute a set of size k with the maximum CSat score.

Note that for |W| = k,

[formula]

where we say that [formula] is the CSat score of an individual candidate with respect to set size k. Hence computing a winning set of size k is equivalent to selecting k candidates with the highest CSat scores with respect to set size k. Since the CSat score of a particular candidate can be computed in polynomial time, a set of size k with the highest CSat score can be computed in polynomial time by selecting k candidates with the highest CSat scores.

There exists a polynomial-time algorithm to compute a set of arbitrary size with the maximum CSat score.

For k = 1 to |C|, compute a k-set with the maximum CSat score. Identify the k for which the k-set with the maximum CSat score has the maximum CSat score among all ks. Return such a k-set.

There exists a polynomial-time algorithm to compute a set of size k with the maximum MSat score.

Note that for |W| = k,

[formula]

where we say that [formula] is the MSat score of an individual candidate with respect to set size k. Hence computing a winning set of size k is equivalent to selecting k candidates with the highest MSat scores with respect to set size k. Since the MSat score of a particular candidate can be computed in polynomial time, a set of size k with the highest MSat score can be computed in polynomial time by selecting k candidates with the highest MSat scores.

There exists a polynomial-time algorithm to compute a set of arbitrary size with the maximum MSat score.

For k = 1 to |C|, compute a k-set with the maximum MSat score. Identify the k for which the k-set with the maximum MSat score has the maximum MSat score among all ks. Return such a k-set.

We see that just like the , two prominent variants of can computed in polynomial time.