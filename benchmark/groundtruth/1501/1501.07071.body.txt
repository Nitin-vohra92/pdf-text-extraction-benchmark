Spatial Search by Continuous-Time Quantum Walk with Multiple Marked Vertices

Introduction

Schrödinger's equation [\cite=Schrodinger1926] [\cite=Sakurai1993] is the fundamental equation of quantum mechanics that describes the evolution of a quantum state ψ in continuous time:

[formula]

We have set 1, and H is the Hamiltonian that characterizes the total energy of the system. For a particle of mass m in free space, the Hamiltonian is simply the kinetic energy operator:

[formula]

where [formula] is the Laplace operator.

The continuous-time quantum walk [\cite=FG1998b] is simply the discrete-space analogue of this. That is, the particle is confined to discrete positions in space, which can be expressed as the vertices of a graph, and to transitions expressed as the edges of the graph. Then the Laplace operator [formula] is replaced by its discrete version L  =  A  -  D, where A is the adjacency matrix of the graph (Aij  =  1 if two vertices i and j are adjacent, and 0 otherwise), and D is the diagonal degree matrix ([formula]). With this discrete substitution, the Hamiltonian for a continuous-time quantum walk is

[formula]

where we have also grouped the coefficients together into γ, which is the jumping rate (i.e. amplitude per time) of the walk. Evolution by Schrödinger's equation with this Hamiltonian is precisely the definition of a continuous-time quantum walk [\cite=FG1998b] [\cite=CG2004].

As an algorithmic tool, continuous-time quantum walks have been used for a variety of applications, including evaluating boolean formulas [\cite=FGG2008], identifying graph isomorphism [\cite=Rudinger2012], and performing universal computation [\cite=Childs2009]. In this paper, we focus on their application to search [\cite=CG2004] on regular graphs. This leads to two changes to the Hamiltonian. First, since we assume that the graph is regular, the degree matrix D is simply a multiple of the identity matrix, so it can be dropped by rezeroing the energy or by factoring out a global, unobservable phase. Thus we can use the adjacency matrix A instead of the graph Laplacian L. Second, we introduce a term that acts as a "Hamiltonian oracle" [\cite=Mochon2007], which marks the k vertices to search for by potentials. With these two changes, the search Hamiltonian is

[formula]

The goal is to evolve the system [formula] by this Hamiltonian for as little time possible, from initially being in an equal superposition [formula] over all the vertices,

[formula]

to a state that, when measured, collapses to a marked vertex with high probability. Note that beginning in this state expresses our initial lack of knowledge of where the marked vertices might be, so it guesses each vertex with equal probability. Furthermore, this state is an eigenstate [formula], so the quantum walk alone does not change our information about where the marked vertices might be--it only changes when including the oracle, as in [\eqref=eq:H].

As an example, let us consider the continuous-time quantum walk formulation of Grover's algorithm [\cite=Grover1996] [\cite=FG1998a]. Since Grover's algorithm solves the unstructured search problem, one can move from any vertex to any other. So this is simply search on the complete graph of N vertices [\cite=CG2004], an example of which is shown in Figure [\ref=fig:complete].

By symmetry, the marked vertices evolve identically, as do the non-marked vertices. So we respectively group identically-evolving vertices together, as shown by identical colors and labels in Figure [\ref=fig:complete]:

[formula]

Then the system evolves in a two-dimensional subspace spanned by [formula], in which the search Hamiltonian [\eqref=eq:H] is

[formula]

Following the analysis of [\cite=WongDissertation], but generalized to k marked vertices, this has eigenstates

[formula]

with gap in the corresponding eigenvalues E0 and E1

[formula]

When γ takes its critical value of γc  =  1 / N, the eigenstates are proportional to [formula] with an energy gap of [formula], so the system evolves from [formula] to [formula] in time [formula] (see Section 3 of [\cite=Wong2015b] for an explicit calculation). This is the quadratic speedup of Grover's algorithm over a classical computer's O(N / k). As a check, Figure [\ref=fig:complete_evolution_a] shows the probability of measuring the quantum walker at a marked vertex as a function of time, and it reaches 1 at time [formula], as expected.

From a straightforward calculation in [\cite=Wong2015c] (generalized to multiple marked vertices), γ must be chosen within o(1 / N3 / 2) of its critical value of 1 / N for the algorithm to evolve from [formula] to the marked vertices in time [formula] for large N. This can be relaxed to evolve to the marked vertices with constant probability in time [formula] if γ is chosen within O(1 / N3 / 2) of its critical value of 1 / N. If γ is further away from its critical value than this, then the initial state [formula] converges to an eigenstate of H for large N. So asymptotically, the system stays in [formula] throughout its evolution, only picking up a global phase. This is shown in Figure [\ref=fig:complete_evolution_a] with γ  =  2γc  =  2 / N; this is far enough from the critical value of 1 / N such that the success probability plotted as a function of time converges to a flat, horizontal line for large N.

Since Grover's search problem is unstructured, the problem is unchanged no matter which k vertices are marked. For example, the two configurations in Figure [\ref=fig:complete_move] are equivalent (i.e., isomorphic). Since the location of the marked vertices does not change the structure of the problem, the algorithm (the critical jumping rate γc  =  1 / N, the evolution, the runtime of [formula], etc.) is unchanged.

Even for search on non-complete graphs, which is called spatial search, it is possible to retain this property that the location of the marked vertices does not matter. The most common way is to search a vertex-transitive graph for a single marked vertex. This includes the hypercube [\cite=CG2004], arbitrary-dimensional periodic square lattices [\cite=CG2004], strongly regular graphs [\cite=JMW2014], the "simplex of complete graphs" [\cite=MeyerWong2014], and complete bipartite graphs [\cite=Novo2015]. For example, two possible ways to mark k  =  1 vertex on the simplex of complete graphs (defined more formally later) are shown in Figure [\ref=fig:simplex_one], and they are clearly equivalent (i.e., isomorphic). Another way to make the arrangement of marked vertices irrelevant is by marking a cluster of vertices, such that moving the cluster leaves the search problem unaltered [\cite=WongAmbainis2015].

Even though the location of a unique (k  =  1) marked vertex on a vertex-transitive graph does not affect the search problem, when there are multiple marked vertices (k  >  1), their locations generally do make a difference in spatial search. For example, there are five inequivalent ways to arrange k  =  2 marked vertices on the simplex of complete graphs, and they are shown in Figure [\ref=fig:simplex_two]. The simplex of complete graphs is the M-simplex with each of its M + 1 vertices replaced by a complete graph of M vertices, so it has a total of N  =  M(M + 1) vertices. In this paper, we explicitly solve spatial search by continuous-time quantum walk for these five configurations, plus four more with a greater number of marked vertices. In doing so, we show that different arrangements of marked vertices can dramatically change the critical jumping rate γc that is needed for the algorithm to succeed.

This shows that the algorithm is dependent on the configuration of the marked vertices. Although such a dependence has been shown for discrete-time quantum walks [\cite=Kempe2003], this explicit demonstration seems new for continuous-time quantum walks. This result also highlights differences between the two approaches. While γc is primarily affected for continuous-time quantum walks, discrete-time quantum walks do not have this parameter. Instead, they are typically governed by a "coin" [\cite=Meyer1996a] [\cite=Meyer1996b], and this coin is chosen in different ways to define a search problem [\cite=AKR2005]. For example, with the choice from [\cite=SKW2003], one gets an algorithm that efficiently searches arbitrary-dimensional periodic square lattices with any configuration of two marked vertices [\cite=AKR2005]. With more marked vertices, the runtime can change [\cite=NR2015a], even to the point of having no improvement over classically guessing [\cite=AR2008]. With a different coin that yields precisely the phase flip in Grover's algorithm [\cite=AKR2005] [\cite=Wong2015b], there are other exceptional configurations that cause no improvement over classical as well [\cite=NR2015b]. Using Szegedy's [\cite=Szegedy2004] method of defining a discrete-time quantum walk, one can also obtain a quadratic improvement in search over a classical random walk's "extended" hitting time when searching with multiple marked vertices [\cite=KMOR2014]. This vast number of results for discrete-time quantum walks with multiple marked vertices dwarfs those for continuous-time quantum walks, of which this seems to be the first.

We choose the simplex of complete graphs for our analysis because it has enough structure to reveal interesting properties, yet enough symmetry to be analytically tractable. It was first used in quantum search to prove that connectivity is a poor indicator of fast quantum search [\cite=MeyerWong2014], and it has since been used to introduce a search algorithm that takes multiple walk-steps for each oracle query [\cite=WongAmbainis2015] and to demonstrate faster search on a weighted graph [\cite=Wong2015e].

In the next section, we solve spatial search on the simplex of complete graphs with two marked vertices, whose five possible configurations were shown in Figure [\ref=fig:simplex_two]. In doing so, we show that the first case's critical jumping rate γc differs from the other four. Afterwards, we solve search with a greater number of marked vertices--two cases with M + 1 marked vertices and two cases with 2(M + 1) marked--showing that the critical jumping rate changes in a similar manner to the k  =  2 case. This shows that for spatial search by continuous-time quantum walk, the critical jumping rate γc is dependent on the arrangement of the marked vertices.

Two Marked Vertices

The five possible configurations with k  =  2 marked vertices were shown in Figure [\ref=fig:simplex_two], where the marked vertices are indicated by double circles. As shown, case (a) has both marked vertices in the same complete graph, and the remaining four cases (b), (c), (d), and (e) have them in different complete graphs.

As with search with a single marked vertex [\cite=MeyerWong2014], we get two-stage algorithms for each of these five cases, where the system evolves with one critical jumping rate γc1 for some time, and then with a second critical jumping rate γc2 for a (likely different) amount of time. The detailed calculations for all five cases, including the generalization of the first case to any constant number of marked vertices in a single complete graph, are in Appendix [\ref=appendix:two], and the main results are summarized in Table [\ref=table:simplex_two].

To give a sense of the calculations in Appendix [\ref=appendix:two] and explain the evolutions summarized in Table [\ref=table:simplex_two], consider the first case in Figure [\ref=fig:simplex_two1]. The system evolves in an 8-dimensional subspace, independent of M, because there are only eight different kinds of vertices, as shown by the eight unique colors and labels in Figure [\ref=fig:simplex_two1]. We group identically-evolving vertices into basis vectors [formula], [formula], , [formula] for the 8D subspace. Then writing the search Hamiltonian [\eqref=eq:H] in this 8D subspace, we find that for most values of γ, the initial state [formula] is asymptotically an eigenvector of H, which means the system does not evolve except for acquiring a global, unobservable phase.

For the system to evolve, we must choose the jumping rate γ to be within o(1 / M5 / 2) of its critical value γc1  =  3 / M so that [formula] experiences a "phase transition" [\cite=CG2004], where it becomes supported by two eigenvectors of H instead of one. This can be found using degenerate perturbation theory [\cite=JMW2014] [\cite=Wong2014], and it causes two eigenvectors of the Hamiltonian [\eqref=eq:H] to be asymptotically proportional to [formula] with an energy gap of [formula]. Since the equal superposition state [formula] is asymptotically [formula] for large N (because the white g vertices in Figure [\ref=fig:simplex_two1] overwhelming comprise most of the vertices in the graph for large N), near γ  =  γc, the system evolves from [formula] to [formula] in time [formula]. From Figure [\ref=fig:simplex_two1], this means probability has now collected at the correct complete graph (i.e., at the blue b vertices), but is not yet at the marked red a vertices within that complete graph. This is summarized in the first row of information in Table [\ref=table:simplex_two].

For the second stage of the algorithm, we want to move the probability from [formula] to the marked vertices [formula]. As shown in Appendix [\ref=appendix:two], the Hamiltonian has two eigenstates that are asymptotically proportional to [formula] when the jumping rate γ takes the critical value γc2  =  1 / M with an energy gap of [formula]. So the system now evolves from [formula] to [formula] in time [formula]. This causes the system to evolve from the blue b vertices to the red a vertices, which are marked, accomplishing the search. This is summarized in the second row of information in Table [\ref=table:simplex_two].

The success probability for the entire evolution of the algorithm is shown in Figure [\ref=fig:simplex_two1_evolution_a] as the solid black curve. For most of the time, the system is in the first stage of the evolution, where probability asymptotically builds up at [formula]. Any buildup in [formula] during this time is due to higher-order contributions that are negligible for large N. Then in the second stage of the algorithm, the probability quickly shifts from [formula] to [formula], indicated by the sudden spike in success probability in Figure [\ref=fig:simplex_two1_evolution_a].

Examining search for all five configurations in Table [\ref=table:simplex_two] reveals that the first configuration behaves differently from the other four--it has a different critical jumping rate for the first stage of the algorithm γc1, and the runtime of both stages is different. Of these, the important difference is the critical jumping rate, which truly is different because 3 / M and 2 / M are separated by a gap of more than o(1 / M5 / 2). Thus evolving by the wrong configuration's value would cause the system to asymptotically stay in its initial state [formula] throughout its evolution, only acquiring a global, unobservable phase. This is shown in Figure [\ref=fig:simplex_two1_evolution_a], where the dashed red curve is search for the first configuration, but incorrectly using the critical γ's and runtimes from the other cases. Note that the probability stays small, and any buildup from higher-order corrections vanishes for large N. Similarly, Figure [\ref=fig:simplex_two2_evolution_a] shows search with vertices in the second configuration in Figure [\ref=fig:simplex_two2]--with the correct critical γ's and runtimes, success probability builds up as desired, but with the wrong values from the first configuration, it fails to build up. Note that the second, third, fourth, and fifth configurations corresponding to Figures [\ref=fig:simplex_two2], [\ref=fig:simplex_two3], [\ref=fig:simplex_two4], and [\ref=fig:simplex_two5], have identical critical jumping rates and runtimes. So while rearranging marked vertices can change the critical jumping rate substantially, it could also do nothing.

Given the extensive calculations in Appendix [\ref=appendix:two] that are needed to derive the results in Table [\ref=table:simplex_two], manually working through all configurations of k marked vertices on the simplex of complete graphs is impractical using the current method. We do analyze in the next section, however, four additional configurations with a greater number of marked vertices, two of which show that moving marked vertices again changes the critical jumping rate, and two that show no change.

Larger Examples

Let us consider four examples with a larger number of marked vertices. The first two are shown in Figure [\ref=fig:simplex_M1], and they are just two of the many ways to arrange M + 1 marked vertices on the simplex of complete graphs; in subfigure (a), they are distributed so that each complete graph has one marked vertex, and in subfigure (b), all the marked vertices are clustered in a single complete graph, except for one. The other two configurations are shown in Figure [\ref=fig:simplex_2M1], and they are just two of the many ways to distribute 2(M + 1) marked vertices so that each complete graph has two marked vertices.

Unlike search with a single marked vertex [\cite=MeyerWong2014] or two marked vertices in the previous section, search on these graphs are single-stage algorithms. The detailed proofs are given in Appendix [\ref=appendix:larger], and they use the same techniques as the configurations with two marked vertices. The results are summarized in Table [\ref=table:simplex_larger], and they show that the critical jumping rate γc for the two configurations in Figure [\ref=fig:simplex_M1] differ substantially enough that the search algorithm will fail (i.e., the system will asymptotically stay in its initial state) if the wrong γc is used. In Figure [\ref=fig:simplex_2M1], however, the critical jumping rate γc and runtime are the same. So again, we see that rearranging the marked vertices can change the critical jumping rate substantially, but it also might not change it at all.

Conclusion

We have shown that when there are multiple marked vertices, their configuration on a graph can affect the critical jumping rate γc of the continuous-time quantum walk. Previous work on search by continuous-time quantum walk has avoided this effect by restricting search to a single marked vertex on vertex-transitive graphs, or by clustering marked vertices together. This highlights a difference between continuous- and discrete-time quantum walks as they are used for search, since discrete-time quantum walks do not have the jumping rate as a parameter.

This work leaves open how general configurations of multiple marked vertices affect search on the simplex of complete graphs, since our analysis only examined nine specific arrangements. As a curious observation, our results follow a pattern: the critical jumping rate γc is affected by the number of marked vertices in each complete graph, not by their arrangement within them. That is, going from Figure [\ref=fig:simplex_M1]a to Figure [\ref=fig:simplex_M1]b moves marked vertices across complete graphs, changing the number within each, which changes γc. On the other hand, going from Figure [\ref=fig:simplex_2M1]a to Figure [\ref=fig:simplex_2M1]b moves marked vertices within complete graphs, and this rearrangement within complete graphs makes no difference to γc. This behavior is consistent with two marked vertices in Figure [\ref=fig:simplex_two], and it might stem from each complete graph being sufficiently connected within itself that the arrangement of marked vertices within them does not matter. Whether this pattern holds in general is a subject of further investigation, as is how continuous-time quantum walks search other graphs with multiple marked vertices.

Details for Two Marked Vertices

In this appendix, we employ degenerate perturbation theory [\cite=Sakurai1993] [\cite=JMW2014] [\cite=Wong2014] to find the critical γ's and runtimes for search with two marked vertices, of which there are five cases, as summarized in Table [\ref=table:simplex_two].

Two Marked, Case 1, Generalized to Constant Marked Vertices

Instead of having just 2 marked vertices in a single complete graph, we generalize the problem to k constant marked vertices. Even with this generalization, the system still evolves in an 8-dimensional subspace, as shown in Figure [\ref=fig:simplex_two1], spanned by

[formula]

In this subspace, the search Hamiltonian [\eqref=eq:H] is

[formula]

where Mk  =  M - k and Mk1  =  M  -  k  -  1.

Using the diagrammatic approach in [\cite=Wong2014] as a guide, this Hamiltonian can be visualized as a graph with eight vertices, as shown in Figure [\ref=fig:simplex_two1_diagrams]a. For the first stage of the algorithm, the leading-order Hamiltonian H(0) can be visualized as shown in Figure [\ref=fig:simplex_two1_diagrams]b, where we have excluded edges that scale less than [formula]. From this, the eight eigenvectors of H(0) are easily seen: two are linear combinations of [formula] and [formula], three are linear combinations of [formula], [formula], and [formula], and the final three are linear combinations of [formula], [formula], and [formula]. They correspond to the eigenvectors of Since [formula], and we want probability to move towards the marked vertices [formula], we want to choose γ so that a linear combination of [formula], and [formula] is degenerate with a linear combination of [formula] and [formula]. In particular, the eigenstates that we want to be degenerate are

[formula]

with corresponding eigenvalue

[formula]

and

[formula]

with corresponding eigenvalue

[formula]

Written this way, u and v are unnormalized, whereas [formula] and [formula] are their normalized versions. These eigenstates are degenerate when γ takes its critical value of

[formula]

The perturbation H(1), which restores terms of constant weight, causes certain linear combinations

[formula]

of these states to be eigenstates of H(0)  +  H(1) [\cite=Sakurai1993] [\cite=JMW2014]. The coefficients αu and αv can be found by solving

[formula]

where Huv  =  〈u|H(0)  +  H(1)|v〉, etc. Solving this, the perturbed eigenvectors for large N with their corresponding eigenvalues are Since [formula] and [formula] for large N, the system evolves from [formula] to [formula] in time [formula], which is

[formula]

Diagrammatically, the perturbation H(1) restores edges of constant weight in Figure [\ref=fig:simplex_two1_diagrams]b, and probability flows between [formula] and [formula] since they are the most dominant terms.

Using the approach of Section VI of [\cite=Wong2015e], if γ is within ε of its critical value of γc1  ≈  (1 + k) / M, then the eigenvalues of [formula] and [formula] now include leading-order (in ε) terms -  εM. In the perturbative calculation, this introduces terms scaling as εM due to Huu and Hvv, so for this to not influence the energy gap Θ(1 / M3 / 2), we must have εM  =  o(1 / M3 / 2), or ε  =  o(1 / M5 / 2). Thus for the first stage of the algorithm to asymptotically evolve from [formula] to [formula], we require γ  =  γc1  +  o(1 / M5 / 2). Note if we relax this to evolve to [formula] with constant probability, then γ  =  γc1  +  O(1 / M5 / 2) suffices.

For the second stage of the algorithm, we take the leading-order Hamiltonian H(0) to only include edges of weight Θ(M), and its diagram is shown in Figure [\ref=fig:simplex_two1_diagrams]c. From this, the eight eigenvectors of H(0) are simply the basis vectors [formula], [formula], , [formula] with corresponding eigenvalues - 1, -  γM, , 0. When γ takes its critical value of

[formula]

the eigenstates [formula], [formula], [formula], and [formula] of H(0) are degenerate with eigenvalue - 1. Then the perturbation H(1), which restores terms [formula], causes certain linear combinations

[formula]

of these states to be eigenstates of H(0)  +  H(1). The coefficients αa, αb, αd, and αg can be found by solving

[formula]

where Hab  =  〈a|H(0)  +  H(1)|b〉, etc. Solving this, the perturbed eigenvectors with their corresponding eigenvalues are So the system evolves from [formula] to [formula] in time [formula]:

[formula]

Diagrammatically, the perturbation H(1) restores edges [formula] in Figure [\ref=fig:simplex_two2_diagrams]c, and probability flows between [formula] and [formula].

We can again use the method of [\cite=Wong2015e] to find how precisely γ must be chosen to its critical value γc2  =  1 / M--a straightforward calculation shows that it must be within o(1 / M3 / 2).

For k  =  2 marked vertices, the critical γ's and runtimes are

[formula]

all of which are in agreement with Table [\ref=table:simplex_two].

Two Marked, Case 2

As shown in Figure [\ref=fig:simplex_two2], the system evolves in a 4-dimensional subspace spanned by

[formula]

where the labels have been chosen this way to match the behavior of the vertices in the first case in Figure [\ref=fig:simplex_two1]. In this subspace, the search Hamiltonian [\eqref=eq:H] is

[formula]

This Hamiltonian can be visualized as shown in Figure [\ref=fig:simplex_two2_diagrams]a. For the first stage of the algorithm, the leading-order Hamiltonian H(0) excludes edges that scale less than [formula], and it can be visualized as shown in Figure [\ref=fig:simplex_two2_diagrams]b. The two eigenstates of H(0) that we want to be degenerate are

[formula]

with corresponding eigenvalue

[formula]

and

[formula]

with corresponding eigenvalue

[formula]

These are degenerate when γ takes its critical value of

[formula]

The perturbation H(1), which restores terms of constant weight, causes certain linear combinations [formula] to be eigenstates of H(0)  +  H(1). Doing the perturbative calculation to find the coefficients (as in the first case), the perturbed eigenstates for large N are Since [formula] and [formula] for large N, the system evolves from [formula] to [formula] in time [formula]:

[formula]

Diagrammatically, the perturbation H(1) restores edges of constant weight in Figure [\ref=fig:simplex_two2_diagrams]b, and probability flows between [formula] and [formula] since they are the most dominant terms.

As in the first case in the precious section, we can use the method of [\cite=Wong2015e] to find how precisely γ must be chosen to its critical value γc1  =  2 / M--a straightforward calculation shows that it must be within o(1 / M5 / 2).

For the second stage of the algorithm, we take the leading-order Hamiltonian H(0) to only include edges of weight Θ(M), and its diagram is shown in Figure [\ref=fig:simplex_two2_diagrams]c. When γ takes its critical value of

[formula]

the eigenstates [formula], [formula], and [formula] of H(0) are triply degenerate. Then the perturbation H(1), which restores terms [formula], causes certain linear combinations [formula] of them to be eigenstates of H(0)  +  H(1). Doing the perturbative calculation to find the coefficients (as in the first case), the perturbed eigenstates for large N are So the system evolves from [formula] to [formula] in time [formula]:

[formula]

Diagrammatically, the perturbation H(1) restores edges [formula] in Figure [\ref=fig:simplex_two2_diagrams]c, and probability flows between [formula] and [formula].

We can again use the method of [\cite=Wong2015e] to find how precisely γ must be chosen to its critical value γc2  =  1 / M--a straightforward calculation shows that it must be within o(1 / M3 / 2).

These γc's and runtimes are in agreement with Table [\ref=table:simplex_two].

Two Marked, Case 3

As shown in Figure [\ref=fig:simplex_two3], the system evolves in an 8-dimensional subspace spanned by

[formula]

Note there are no h type vertices. Instead, there's a new type, which we call i. In this subspace, the search Hamiltonian [\eqref=eq:H] is

[formula]

where M2  =  M - 2 and M3  =  M - 3.

This Hamiltonian can be visualized as shown in Figure [\ref=fig:simplex_two3_diagrams]a. For the first stage of the algorithm, the leading-order Hamiltonian H(0) excludes edges that scale less than [formula], and it can be visualized as shown in Figure [\ref=fig:simplex_two3_diagrams]b. As with the last two cases, there are two eigenvectors that we want to be degenerate. The first is

[formula]

with corresponding eigenvalue

[formula]

The second eigenvector is messy, but can be approximated nicely. The leading-order Hamiltonian corresponding to [formula], [formula], and [formula] is

[formula]

The eigenvalues λ of this satisfy the characteristic equation

[formula]

When γ takes its critical value of

[formula]

one of these eigenvalues, which we will call Ev, and Eu both equal - 2  -  270 / M3  +  O(1 / M4), making them approximately degenerate. To find the corresponding eigenvector v, we use the first and third lines of the eigenvalue equation H(0)a,b,iv  =  Evv:

[formula]

This yields

[formula]

The perturbation H(1), which restores terms of constant weight, causes certain linear combinations [formula] to be eigenstates of H(0)  +  H(1). Doing the perturbative calculation to find the coefficients, the perturbed eigenstates for large N are Since [formula] and [formula] for large N, the system evolves from [formula] to [formula] in time [formula]:

[formula]

Diagrammatically, the perturbation H(1) restores edges of constant weight in Figure [\ref=fig:simplex_two3_diagrams]b, and probability flows between [formula] and [formula] since they are the most dominant terms.

We can again use the method of [\cite=Wong2015e] to find how precisely γ must be chosen to its critical value γc1  =  2 / M--a straightforward calculation shows that it must be within o(1 / M5 / 2).

The second stage of the algorithm is similar to the previous two cases, where we take the leading-order Hamiltonian H(0) to only include edges of weight Θ(M). When γ takes its critical value of

[formula]

then [formula] and [formula] are degenerate eigenvectors (among others) of H(0). The perturbation H(1) restores terms of order [formula], which causes probability to flow between [formula] and [formula]. Doing the calculation, we find eigenstates of the perturbed system that are proportional to [formula] with eigenvalues [formula], so the system evolves from [formula] to [formula] in time [formula]:

[formula]

As before, a straightforward calculation using the method of [\cite=Wong2015e] shows that γ must be chosen within o(1 / M3 / 2) of its critical value γc2  =  1 / M.

These γc's and runtimes are in agreement with Table [\ref=table:simplex_two].

Two Marked, Case 4

As shown in Figure [\ref=fig:simplex_two4], the system evolves in an 11-dimensional subspace spanned by

[formula]

In this subspace, the search Hamiltonian [\eqref=eq:H] is

[formula]

where M3  =  M - 3 and M4  =  M - 4.

This Hamiltonian can be visualized as shown in Figure [\ref=fig:simplex_two4_diagrams]a. For the first stage of the algorithm, the leading-order Hamiltonian H(0) excludes edges that scale less than [formula], and it can be visualized as shown in Figure [\ref=fig:simplex_two4_diagrams]b. As with the last two cases, there are two eigenvectors that we want to be degenerate. The first is

[formula]

with corresponding eigenvalue

[formula]

The second eigenvector is messy, but can be approximated nicely. The leading-order Hamiltonian corresponding to [formula], [formula], [formula], and [formula] is

[formula]

The eigenvalues λ of this satisfy the characteristic equation

[formula]

When γ takes its critical value of

[formula]

one of these eigenvalues, which we will call Ev, and Eu both equal - 2  -  640 / M3  -  O(1 / M4), making them approximately degenerate. To find the corresponding eigenvector v, we use the eigenvalue equation H(0)a,b,i,jv  =  Evv:

[formula]

This yields

[formula]

The perturbation H(1), which restores terms of constant weight, causes certain linear combinations [formula] to be eigenstates of H(0)  +  H(1). Doing the perturbative calculation to find the coefficients, the perturbed eigenstates for large N are Since [formula] and [formula] for large N, the system evolves from [formula] to [formula] in time [formula]:

[formula]

Diagrammatically, the perturbation H(1) restores edges of constant weight in Figure [\ref=fig:simplex_two4_diagrams]b, and probability flows between [formula] and [formula] since they are the most dominant terms.

We can again use the method of [\cite=Wong2015e] to find how precisely γ must be chosen to its critical value γc1  =  2 / M--a straightforward calculation shows that it must be within o(1 / M5 / 2).

The second stage of the algorithm is similar to the previous three cases, where we take the leading-order Hamiltonian H(0) to only include edges of weight Θ(M). When γ takes its critical value of

[formula]

then [formula] and [formula] are degenerate eigenvectors (among others) of H(0). The perturbation H(1) restores terms of order [formula], which causes probability to flow between [formula] and [formula]. Doing the calculation, we find eigenstates of the perturbed system that are proportional to [formula] with eigenvalues [formula], so the system evolves from [formula] to [formula] in time [formula]:

[formula]

As before, a straightforward calculation using the method of [\cite=Wong2015e] shows that γ must be chosen within o(1 / M3 / 2) of its critical value γc2  =  1 / M.

These γc's and runtimes are in agreement with Table [\ref=table:simplex_two].

Two Marked, Case 5

As shown in Figure [\ref=fig:simplex_two5], the system evolves in a 13-dimensional subspace spanned by

[formula]

In this subspace, the search Hamiltonian [\eqref=eq:H] is

[formula]

where M2  =  M - 2 and M3  =  M - 3.

This Hamiltonian can be visualized as shown in Figure [\ref=fig:simplex_two5_diagrams]a. For the first stage of the algorithm, the leading-order Hamiltonian H(0) excludes edges that scale less than [formula], and it can be visualized as shown in Figure [\ref=fig:simplex_two5_diagrams]b. The initial equal superposition state [formula] is approximately [formula] for large N, and we want it to evolve to the marked vertices [formula] and [formula]. So we will need leading-order eigenstates that are approximately each of these to be triply degenerate. The first is

[formula]

with corresponding eigenvalue

[formula]

Note this is the same eigenvalue as Eu from Case 3. For the other two leading-order eigenstates, Figure [\ref=fig:simplex_two5_diagrams]b reveals that H(0)a,b,i and H(0)c,d,h are identical with a  ~  d, b  ~  h, and i  ~  c, so their corresponding eigenstates are always degenerate. Furthermore, they are identical to H(0)a,b,i from Figure [\ref=fig:simplex_two3_diagrams]b from Case 3. So the eigenvectors and eigenvalues carry over: including the critical γ

[formula]

at which the eigenvalues Eu, Ev, and Ew all equal - 2  -  270 / M3  +  O(1 / M4), making them approximately degenerate.

With the perturbation H(1), which restores terms of constant weight, we have the same behavior and runtime

[formula]

as Case 3, except the system evolves from [formula] to [formula]. So the probability gets split between the two paths. Diagrammatically, the perturbation H(1) restores edges of constant weight in Figure [\ref=fig:simplex_two5_diagrams]b, and probability flows from [formula] to [formula] and [formula] since they are the most dominant terms.

We can again use the method of [\cite=Wong2015e] to find how precisely γ must be chosen to its critical value γc2  =  1 / M--a straightforward calculation shows that it must be within o(1 / M5 / 2).

The second stage of the algorithm is similar to the previous cases, where we take the leading-order Hamiltonian H(0) to only include edges of weight Θ(M). When γ takes its critical value of

[formula]

then [formula] and [formula] are degenerate eigenvectors, as are [formula] and [formula], of H(0). The perturbation H(1) restores terms of order [formula], which causes probability to flow from [formula] to [formula] and from [formula] to [formula]. The runtime from Case 3 carries over:

[formula]

As before, a straightforward calculation using the method of [\cite=Wong2015e] shows that γ must be chosen within o(1 / M3 / 2) of its critical value γc2  =  1 / M.

These γc's and runtimes are in agreement with Table [\ref=table:simplex_two].

Details for Larger Examples

In this appendix, we employ degenerate perturbation theory [\cite=Sakurai1993] [\cite=JMW2014] [\cite=Wong2014] to find the critical γ's and runtimes for search with a larger number of marked vertices, the results which are summarized in Table [\ref=table:simplex_larger].

One Marked Per Complete

As shown in Figure [\ref=fig:simplex_M1]a, the system evolves in a 3-dimensional subspace spanned by In this subspace, the search Hamiltonian [\eqref=eq:H] is

[formula]

This Hamiltonian can be visualized as shown in Figure [\ref=fig:simplex_M1a_diagrams]a. The leading-order Hamiltonian H(0) excludes edges that scale less than M, and it can be visualized as shown in Figure [\ref=fig:simplex_M1a_diagrams]b. Clearly, the eigenstates of this are [formula], [formula], and [formula] with corresponding eigenvalues - 1, -  γM, and 0. Since [formula], we choose γ so that [formula] and [formula] are degenerate, i.e.,

[formula]

The perturbation H(1), which restores edges of weight [formula], causes certain linear combinations [formula] to be eigenstates of H(0)  +  H(1). The coefficients can be found by solving

[formula]

where Hab  =  〈a|H(0)  +  H(1)|b〉, etc. With γ  =  γc, this yields eigenstates and eigenvalues So the system evolves from [formula] to [formula] in time [formula]:

[formula]

Using the method Section VI of [\cite=Wong2015e], if γ is within ε of its critical value of γc  =  1 / M, then the eigenvalue of [formula] is now -  γM  =   - 1  -  εM. In the perturbative calculation, this introduces a leading-order (in ε) term εM due to Hbb. For this to not influence the energy gap [formula], we require [formula], or ε  =  o(1 / M3 / 2). Thus for the algorithm to asymptotically evolve from [formula] to [formula], we require γ  =  γc  +  o(1 / M3 / 2).

This γc and runtime are in agreement with Table [\ref=table:simplex_larger].

Fully Marked Complete, Plus One

As shown in Figure [\ref=fig:simplex_M1]b, the system evolves in a 7-dimensional subspace spanned by

[formula]

In this subspace, the search Hamiltonian [\eqref=eq:H] is

[formula]

This Hamiltonian can be visualized as shown in Figure [\ref=fig:simplex_M1b_diagrams]a. The leading-order Hamiltonian H(0) excludes edges that scale less than [formula], and it can be visualized as shown in Figure [\ref=fig:simplex_M1b_diagrams]b. The two eigenstates of H(0) that we want to be degenerate are

[formula]

with corresponding eigenvalue

[formula]

and

[formula]

with corresponding eigenvalue

[formula]

These are degenerate when γ takes its critical value of

[formula]

The perturbation H(1), which restores terms of constant weight, causes certain linear combinations [formula] to be eigenstates of H(0)  +  H(1). Doing the perturbative calculation to find the coefficients, the perturbed eigenstates for large N are

[formula]

[formula]

Since [formula] and [formula] for large N, the system evolves from [formula] to [formula], which is marked, in time [formula]:

[formula]

We can again use the method of [\cite=Wong2015e] to find how precisely γ must be chosen to its critical value γc  =  1  +  3 / M--a straightforward calculation shows that it must be within o(1 / M3 / 2).

This γc and runtime are in agreement with Table [\ref=table:simplex_larger].

Two Marked Per Complete Graph, Case 1

As shown in Figure [\ref=fig:simplex_2M1]a, the system evolves in a 2-dimensional subspace spanned by In this subspace, the search Hamiltonian [\eqref=eq:H] is

[formula]

We can find the eigenvectors and eigenvalues of this directly without perturbation theory. They are

[formula]

with corresponding eigenvalue

[formula]

and

[formula]

with corresponding eigenvalue

[formula]

When γ takes its critical value of

[formula]

these become for large N

[formula]

[formula]

So the system evolves from [formula] to [formula] in time [formula]:

[formula]

An explicit calculation as in [\cite=Wong2015c] shows that γ must be chosen within o(1 / M3 / 2) of its critical value γc  =  1 / M for this evolution to occur asymptotically.

This γc and runtime are in agreement with Table [\ref=table:simplex_larger].

Two Marked Per Complete Graph, Case 2

As shown in Figure [\ref=fig:simplex_2M1]b, the system evolves in a 3-dimensional subspace spanned by

[formula]

In this subspace, the search Hamiltonian [\eqref=eq:H] is

[formula]

This Hamiltonian can be visualized as shown in Figure [\ref=fig:simplex_2M1b_diagrams]a. The leading-order Hamiltonian H(0) excludes edges that scale less than M, and it can be visualized as shown in Figure [\ref=fig:simplex_2M1b_diagrams]b. Clearly, the eigenstates of this are [formula], [formula], and [formula] with corresponding eigenvalues - 1, -  γM, and 0. Since [formula], we choose γ so that [formula] and [formula] are degenerate, i.e.,

[formula]

The perturbation H(1), which restores edges of weight [formula], causes certain linear combinations [formula] to be eigenstates of H(0)  +  H(1). The coefficients can be found in the usual way, and they yield perturbed eigenstates

[formula]

[formula]

So the system evolves from [formula] to [formula] in time [formula]:

[formula]

We can again use the method of [\cite=Wong2015e] to find how precisely γ must be chosen to its critical value γc  =  1 / M--a straightforward calculation shows that it must be within o(1 / M3 / 2).

This γc and runtime are in agreement with Table [\ref=table:simplex_larger].