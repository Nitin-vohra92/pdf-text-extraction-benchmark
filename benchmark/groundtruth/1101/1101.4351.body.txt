Building a Chaotic Proved Neural Network

Introduction

Due to the widespread use of the Internet and new digital technologies in nowadays life, security in computer applications and networks never was such a hot topic. Digital rights managements, e-voting security, anonymity protection, and denial of services are examples of new security concerns appeared this last decade. Tools on which this security is based are, among others: hash functions, pseudo-random number generators, cryptosystems, and digital watermarking schemes. Due to their wide use in security protocols, these tools are targeted everyday by hackers and new threats are frequently revealed. For example, security flaws have been recently identified in the previous standard in hash functions called SHA-1 [\cite=rijmen05]. As the new standards (SHA-2 variants) are algorithmically similar to SHA-1, stronger hash functions using new concepts are desired.

New approaches based on chaos are frequently proposed as an alternative to solve concerns which recurrently appear in the computer science security field [\cite=guyeux10] [\cite=bg10:ip] [\cite=wbg10:ip]. The advantage of the use of chaotic dynamics for security problems lies in their unpredictability proved by the mathematical theory of chaos. This theory brings many qualitative and quantitative tools, namely ergodicity, entropy, expansivity, and sensitive dependence to initial conditions [\cite=GuyeuxThese10]. These tools allow the study of the randomness of the disorder generated by the considered system [\cite=guyeuxTaiwan10].

Recently, many researchers have built chaotic neural networks in order to use it as a component of new proposed hash functions [\cite=springerlink:10.1007/s00521-010-0432-2], pseudo-random number generators, cryptosystems [\cite=dalkiran10] [\cite=Lian20091296], and digital watermarking schemes. Since the first introduction by McCulloch and Pitts in 1959, artificial neural networks have been shown to be efficient non-linear statistical data modeling tools which can implement complex mapping functions. Hence, they may be trained to learn a chaotic process and also, by construction, exhibit suitable properties: data confusion and diffusion, one-way function and compression. Security is not the only application domain of such new tools: the existence of chaos in our brain has been recently revealed, and the use of a chaotic artificial neural network as a model can serve, for example, neuroscientists in their attempts to understand how the brain works.

However, using an element of chaos as a component of the scheme is not sufficient, in our opinion, to be able to claim that the whole process behaves chaotically. We believe that this claim is not so evident and must be proven. Let us notice that up to now the proposed chaotical neural networks have failed to convince the mathematics community due to a lack of proof. This is why it is explained in this paper how it is possible to build an artificial neural network that behaves chaotically, as it is defined by Devaney [\cite=Devaney]. We will establish a correspondence between particular neural networks and chaotic iterations, which leads to the definition of the first artificial neural network proven chaotic, according to Devaney.

The remainder of this paper is organized as follows. The next section is devoted to some recalls on chaotic iterations and Devaney's chaos, followed by a brief description of artificial neural networks (ANNs). Section [\ref=sec:RelatedW] presents a review of some works related to chaotic neural networks. Our approach, which consists in building a global recurrent ANN whose iterations are chaotic, is formalized and discussed in Section [\ref=sec:KoANN]. Concrete examples of chaotic neural networks also show the relevance of our method. Finally in Section [\ref=sec:Conclusion] we conclude and outline future work.

Basic Recalls

In the sequel Sn denotes the nth term of a sequence S and Ei denotes the ith component of a vector E. [formula] is for the kth composition of a function f. Finally, the following notation is used: [formula].

Chaotic iterations versus Devaney's chaos

Chaotic Iterations

Let us consider a system with a finite number [formula] of elements (or cells), so that each cell has a boolean state. A sequence of length [formula] of boolean states of the cells corresponds to a particular state of the system. A sequence which elements belong to [formula] is called a strategy. The set of all strategies is denoted by [formula]

The set [formula] denoting {0,1}, let [formula] be a function and [formula] be a strategy. The so-called chaotic iterations are defined by [formula] and

[formula]

In other words, at the nth iteration, only the Sn  -  th cell is iterated . Note that in a more general formulation, Sn can be a subset of components and [formula] can be replaced by [formula], where k < n, describing for example, delays transmission [\cite=Robert1986]. Finally, let us remark that the term "chaotic", in the name of these iterations, has a priori no link with the mathematical theory of chaos, recalled below.

Devaney's chaotic dynamical systems

Consider a topological space (X,τ) and a continuous function f on X.

f is said to be topologically transitive if, for any pair of open sets U,V  ⊂  X, there exists k > 0 such that [formula].

An element (a point) x is a periodic element (point) for f of period [formula] if fn(x) = x.

f is said to be regular on (X,τ) if the set of periodic points for f is dense in X: for any point x in X, any neighborhood of x contains at least one periodic point.

f is said to be chaotic on (X,τ) if f is regular and topologically transitive.

The chaos property is strongly linked to the notion of "sensitivity", defined on a metric space (X,d) by:

f has sensitive dependence on initial conditions if there exists δ > 0 such that, for any x∈X and any neighborhood V of x, there exists y∈V and [formula] such that [formula].

δ is called the constant of sensitivity of f.

Indeed, Banks et al. have proven in [\cite=Banks92] that when f is chaotic and (X,d) is a metric space, then f has the property of sensitive dependence on initial conditions (this property was formerly an element of the definition of chaos). To sum up, quoting Devaney in [\cite=Devaney], a chaotic dynamical system "is unpredictable because of the sensitive dependence on initial conditions. It cannot be broken down or simplified into two subsystems which do not interact because of topological transitivity. And in the midst of this random behavior, we nevertheless have an element of regularity". Fundamentally different behaviors are consequently possible and occur in an unpredictable way.

Chaotic iterations and Devaney's chaos

In this section we give outline proofs of the properties on which our study of chaotic neural networks is based. The complete theoretical framework is detailed in [\cite=guyeux09].

Denote by Δ the discrete boolean metric, Δ(x,y) = 0  ⇔  x = y. Given a function [formula], define the function Ff: [formula] such that

where + and . are the boolean addition and product operations, [formula] is for the negation of x.

Consider the phase space [formula] and the map where the shift function is defined by [formula], and the initial function i is the map which associates to a sequence, its first term: [formula].

Thus chaotic iterations can be described by the following iterations[\cite=guyeux09]

Let us define a new distance between two points [formula] by

where

[formula]

[formula]

This new distance has been introduced in [\cite=guyeux09] to satisfy the following requirements. When the number of different cells between two systems is increasing, then their distance should increase too. In addition, if two systems present the same cells and their respective strategies start with the same terms, then the distance between these two points must be small because the evolution of the two systems will be the same for a while. The distance presented above follows these recommendations. Indeed, if the floor value ⌊d(X,Y)⌋ is equal to n, then the systems [formula] differ in n cells. In addition, d(X,Y)  -  ⌊d(X,Y)⌋ is a measure of the differences between strategies S and [formula]. More precisely, this floating part is less than 10- k if and only if the first k terms of the two strategies are equal. Moreover, if the kth digit is nonzero, then the kth terms of the two strategies are different.

It is proven in [\cite=guyeux09] by using the sequential continuity that the vectorial negation [formula] satisfies the following proposition:

Gf0 is a continuous function on (X,d).

It is then checked, also in [\cite=guyeux09], that in the metric space (X,d), the vectorial negation fulfill the three conditions for Devaney's chaos: regularity, transitivity, and sensitivity. This has led to the following result.

Gf0 is a chaotic map on (X,d) in the sense of Devaney.

Neural Networks

An artificial neural network is a set of simple processing elements called neurons that are interconnected, usually with a layer structure. It takes some input values and produces some output ones. Like a biological neural network, the connections between neurons influence the outputs given by the artificial network. Thanks to a training process, an ANN is able to learn complex relationships between inputs and outputs. A neuron j computes an output y = φ(x,w) where φ() is the activation function, x is the input vector, and w the parameter vector. w can be used to parameterize φ or the neuron inputs. In this last case it means that the connections are weighted and a vector w component is then referred to as a synaptic weight. Figure [\ref=neuron] describes a neuron j with weighted connections. Its output yj satisfies:

[formula]

where x0 =  - 1, [formula], and w0j =  - bj defines the bias value.

Neural networks have a layered architecture, but they may differ in the way the output of a neuron affect himself. In fact, based on the connection graph, two kinds of networks can be distinguished: those having at least one loop and those without any one. A neural network which exhibits a loop is called a feedback (or recurrent) network, whereas a network belonging to the second class is said feed-forward. Obviously, a feedback network can be seen as a dynamical system. In the following sections, we use a recurrent version of the multi-layer perceptron (MLP), a well-known ANN architecture for which the universal approximation property has been proven in the feed-forward context [\cite=DBLP:journals/jpdc/Cybenko89]. Typically, a MLP consists in a layer of input neurons, in one or more layers of hidden neurons, and a layer of output neurons. Since an input neuron is simply used as a channel to dispatch an input to each neuron of the first hidden layer, we will not further consider the input layer. Usually, the neurons of a given layer have similar characteristics and each one is fully connected to the next layer. Finally, it can be noticed that the number of inputs and output neurons is completely specified by the considered problem, while the number of hidden neurons depends directly on the complexity of the relationships to be learned by the ANN.

As said previously, a neural network is designed to model relationships between inputs and outputs. In order to find a proper modeling, an ANN must be trained so that it provides the desired set of output vectors. The training (or learning) process consists mainly in feeding the network with some input vectors and updating the neurons parameters (weights and bias value) using a learning rule and some information which reflects the quality of the current modeling. When the expected output vectors (Dk) are known in advance, the quality can be expressed through the Mean-Squared Error [\cite=lecun-98b]:

[formula]

where N is the number of input-output vector pairs used to train the ANN (the pair set is called the training or learning set) and Yk denotes an output vector produced by the output layer for a given input vector Xk. Consequently, in that case the training process, which is said supervised, results in an optimization algorithm targeted to find the weights and biases that minimize the MSE. Various optimization techniques exist, they have given raise to distinct training algorithms performing iterative parameters update. Gradient based methods are particularly popular due to the backpropagation algorithm, but they are sensitive to local minima. Heuristics like simulated annealing or differential evolution permit to find a global minimum, but they have a slow convergence. To control the training process, two methods are the most commonly used: firstly the number of iterations, also called epochs, reaches an upper bound, secondly the MSE goes below a threshold value.

Related Work

Since a while neuroscientists discuss the existence of chaos in the brain. In the context of artificial neural networks, this interest has given raise to various works studying the modeling of chaos in neurons. The chaotic neuron model designed by Aihara et al. [\cite=Aihara1990333] is particularly used to build chaotic neural networks. For example, in [\cite=DBLP:conf/esann/CrookS01] is proposed a feedback ANN architecture which consists of two layers (apart from the input layer) with one of them composed of chaotic neurons. In their experiments, the authors showed that without any input sequence the activation of each chaotic neuron results in a positive average Lyapunov exponent, which means a true chaotic behavior. When an input sequence is given iteratively to the network the chaotic neurons reach stabilized periodic orbits with different periods, and thus potentially provide a recognition state. Similarly, the same authors have recently introduced another model of chaotic neuron: the non-linear dynamic state (NDS) neuron, and used it to build a neural network which is able to recognize learned stabilized periodic orbits identifying patterns [\cite=Crook2007267].

Today, another field of research in which chaotic neural networks have received a lot of attention is data security. In fact, chaotic cryptosystems are an appealing alternative to classical ones due to properties such as sensitivity to initial conditions or topological transitivity. Thus chaotic ANNs have been considered to build ciphering methods, hash functions, digital watermarking schemes, pseudo-random number generators, etc. In [\cite=dalkiran10] such a cipher scheme based on the dynamics of Chua's circuit is proposed. More precisely, a feed-forward MLP with two hidden layers is built to learn about 1500 input-output vector pairs, where each pair is obtained from the three nonlinear ordinary differential equations modeling the circuit. Hence, the proposed chaotic neural network is a network which is trained to learn a true chaotic physical system. In the cipher scheme the ANN plays the role of chaos generator with which the plain-text will be merged. Untrained neural networks have been also considered to define block ciphering [\cite=Lian20091296] or hash functions [\cite=springerlink:10.1007/s00521-010-0432-2]. The background idea is to exploit the inherent properties of the ANNs architecture such as diffusion and confusion.

A First Recurrent Neural Network Chaotic According to Devaney

Defining a First Chaotic Recurrent Neural Network

We will now explain how to build a chaotic neural network using chaotic iterations.

Let us reconsider the vectorial negation function denoted by [formula] and its associated map [formula]. Firstly, it is possible to define a MLP which recognize Ff0. That means, for all [formula], the response of the output layer to the input (k,x) is Ff0(k,x). Secondly, the output layer can be connected to the input layer as it is depicted in Figure [\ref=perceptron], leading to a global recurrent neural network working as follows:

At the initialization stage, the ANN receives a boolean vector [formula] as input state, and [formula] in its input integer channel i(). Thus, [formula] is computed by the neural network.

This state x1 is published as an output. Additionally, x1 is sent back to the input layer, to act as boolean state in the next iteration.

At iteration number n, the recurrent neural network receives the state [formula] from its output layer and [formula] from its input integer channel i(). It can thus calculate [formula], which will be the new output of the network.

In this way, if the initial state [formula] is sent to the network with a sequence [formula] applied in the input integer channel i(), then the sequence [formula] of the outputs is exactly the same than the sequence obtained from the following chaotic iterations: [formula] and

[formula]

From a mathematical viewpoint, the MLP defined in this subsection and chaotic iterations recalled above have the same behavior. In particular, given the same input vector [formula], they produce the same output vector [formula]: they are two equivalent reformulations of the iterations of Gf0 in X. As a consequence, the behavior of our MLP faithfully reflects the behavior of Gf0 which is chaotic according to Devaney.

Improving the Variety of Chaotic Recurrent Neural Networks

The approach proposed to build chaotic neural networks, explained in the previous subsection, is not restricted to an adhoc function [formula], it can be generalized as follows. The function Ff0 associated to the vectorial negation f0, which has been recognized by the neural network, can be replaced by any functions [formula] such that the chaotic iterations Gf are chaotic, as defined by Devaney.

To be able to define functions that can be used in this situation, we must firstly introduce the graph of iterations of a given function [formula].

Let be given a configuration x. In what follows the configuration [formula] is obtained by switching the i - th component of x. Intuitively, x and N(i,x) are neighbors. The chaotic iterations of the function f can be represented by the graph Γ(f) defined below.

In the oriented graph of iterations Γ(f), vertices are configurations of [formula] and there is an arc labeled i from x to N(i,x) iff Ff(i,x) is N(i,x).

We have proven in [\cite=GuyeuxThese10] that:

Functions [formula] such that Gf is chaotic according to Devaney, are functions such that the graph Γ(f) is strongly connected.

Since it is easy to check whether a graph is strongly connected, we can use this theorem to discover new functions [formula] such that the neural network associated to Gf behaves chaotically, as defined by Devaney.

The Discovery of New Chaotic Neural Networks

Considering Theorem [\ref=Th:Caracterisation_des_IC_chaotiques], it is easy to check that [formula] is such that Gf1 behaves chaotically, as defined by Devaney. Consequently, we can now obtain two chaotic neural networks by learning either Ff0 or Ff1.

To support our approach, a set of illustrative examples composed of five neural networks is given. The three first networks are respectively defined by:

[formula],

[formula],

[formula],

while the last ones are defined by:

g0(x1,x2,x3) = (x1,x2,x3),

[formula].

Due to Theorem [\ref=Th:Caracterisation_des_IC_chaotiques], the ANNs associated to f0,1, f0,2 and f1,1 behave chaotically, as defined by Devaney. Whereas it is not the case for the networks based on the boolean functions g0 and g1, since Γ(g0) and Γ(g1) are not strongly connected.

Experimental results

Among the five neural networks evoked in the previous subsection we decided to study the training process of three of them. Note also that for each neural network we have considered MLP architectures with one and two hidden layers, with in the first case different numbers of hidden neurons (sigmoidal activation). Thus we will have different versions of a neural network modeling the same iteration function. Only the size and number of hidden layer may change, since the numbers of inputs and output neurons (linear activation) are fully specified by the function. The neural networks are trained using the quasi-Newton L-BFGS (Limited-memory Broyden-Fletcher-Goldfarb-Shanno) algorithm in combination with the Wolfe linear search. The training is performed until the learning error (MSE) is lower than a chosen threshold value (10- 2).

Table [\ref=results] gives for each considered neural network the mean number of epochs needed to train them and a success rate which reflects a successful training in less than 1000 epochs. Both values are computed considering 25 trainings with random weights and biases initialization. These results highlight several points. Firstly, various MLP architectures can learn a same iteration function, with obviously a best suited one (a hidden layer composed of ten sigmoidal neurons). In particular the two hidden layer structure seems to be too complex for the functions to be learned. Secondly, training networks so that they behave chaotically seems to be more difficult, since they need in average more epochs to be correctly trained. However, the relevance of this point needs to be further investigated. Similarly, there may be a link between the training difficulty and the disorder (evaluation of their constants of sensitivity, expansivity, etc.) induced by a chaotic iteration function.

Conclusion and future work

Many chaotic neural networks have been developed for different fields of application, in particular for data security purpose where they are used to define ciphering methods, hash functions and so on. Unfortunately, the proposed networks are usually claimed to be chaotic without any proof. In this paper we have presented a rigorous mathematical framework which allows us to construct artificial networks proven chaotic, according to Devaney. More precisely, a correspondence between chaotic iterations, which are a particular case of topological chaos in sense of Devenay, and MLP neural networks with a global feedback is established. In fact, we have shown that an iteration function is chaotic if its graph of iteration is strongly connected (a property easily checked), and that a global recurrent MLP can learn such a function. Future research will study more carefully the performance of the training process and alternative neural network architectures.