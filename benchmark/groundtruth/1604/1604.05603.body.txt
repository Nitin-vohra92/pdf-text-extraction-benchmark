Online Ad Assignment with an Ad Exchange

Introduction

The market for display ads on the internet is worth billions of dollars and continues to rise. Not surprisingly, there are multiple ways of selling display advertisements. Traditionally, publishers signed long-term contracts with their advertisers, fixing the number of impressions, i.e. assigned ad slots views, as well as their price. In the last few years, however, spot markets, so called Ad Exchanges [\cite=Muthukrishnan2009], have been developed, with Amazon, Ebay, and Yahoo (to just name a few) all offering their own ad exchange. Thus, every time a user requests to download a page from a publisher, the publisher needs to decide (a) which of the ad impressions on this page should be assigned to which contracted advertiser, and (b) which should be sold at the ad exchange and at which reserve price.

Ad exchanges are interesting for publishers as (1) basically an unlimited number of ad impressions can be sold at ad exchanges, and (2) if the publishers have additional information about the user, they might sell an impression at a much higher price at the ad exchange than they could receive from their contracted advertisers. As ad impressions that did not receive a bid at or above the reserve price at the ad exchange can still be assigned to contracted advertisers, a revenue-maximizing publisher can offer every ad impression first at an ad exchange at a "high enough" reserve price and then afterwards assign the still unsold impressions to contracted advertisers. The question for the advertiser becomes, thus, (i) what reserve price to choose, and (ii) to which advertisers to assign the unsold impressions. We model this setting as an online problem and achieve the following two results: If the revenue achievable by the ad exchange for each ad impression is known, we give a constant competitive algorithm. Then we show how to convert this algorithm into a second algorithm that works in the setting where the revenue achievable from the ad exchange is not known. Assume that the auction executed at the ad exchange fulfills the following property P: If an ad impression is sold at the ad exchange, then the revenue achieved is independent of the reserve price chosen by the publisher. Thus, the reserve price influences only whether the ad impression is sold, not the price that is achieved. For example, a first price auction with reserve prices fulfills this condition. If the auction at the ad exchange fulfills this condition, then our second algorithm is constant competitive when compared with the optimum offline algorithm.

When modeling contracted advertisers we use the model with free disposal introduced in [\cite=FeldmanKMMP09]: Each advertiser a comes with a number na and the revenue that an algorithm receives from a consists of the na most valuable ad impressions assigned to a. Additional impressions assigned to a do not generate any revenue.

More formally we define the following Online Ad Assignment Problem with Free Disposal and an Ad Exchange. There is a set of contracted advertisers A and an ad exchange α. Each advertiser a comes with a number na of ad impressions such that a pays only for the na most valuable ad impressions assigned to a, or for all assigned ad impressions if fewer than na are assigned to a. To simplify the notation we set nα  =    ∞  . Now a finite sequence [formula] of sets Sl with [formula], of ad impressions arrives in order. When Sl arrives, the weights wi,a for each i∈Sl and [formula] are revealed and the online algorithm has to assign each i∈Sl before further sets Sl + 1,Sl + 2, etc. arrive. Let [formula] be an assignment of impressions to advertisers. An assignment is valid if no two impressions in the same set Sl are assigned to the same advertiser a∈A. Let IA(a) be the set of the na highest weighted impressions assigned to advertiser a by A. Then the revenue R(A) of A is [formula]. The goal of the algorithm is to produce a valid assignment A with maximum revenue R(A). The competitive ratio of an online algorithm is the minimum over all sequences S of the ratio of the revenue achieved by the online algorithm on S and the revenue achieved by the optimal offline algorithm on S, where the latter algorithm is given all of S before it makes the first decision.

Feldman et al. [\cite=FeldmanKMMP09] studied a special case of our problem, namely the setting without an ad exchange and where each set Sl has size one, i.e. where the impressions arrive consecutively. For that setting they gave a primal-dual based 0.5 competitive algorithm whose competitive ratio converges to (1  -  1 / e) ratio when all the na values go to infinity. More precisely let nA  =   min a∈Ana. Then their algorithm is [formula]-competitive. They also showed that this ratio is tight when considering deterministic algorithms [\cite=FeldmanKMMP09]. Let Ra for an advertiser [formula] be the revenue that the optimal algorithm receives from a. We extend their results in several ways. (1) We consider a setting with one advertiser, called ad exchange, that has infinite capacity. Moreover, we allow multiple ad slots on a page, with the condition that no two can be assigned to the same advertiser, i.e. for us |Sl| can be larger than 1. (2) The revenue of our algorithm depends directly on the na value, not on nA. More precisely, if no ad exchange exists, our algorithm receives a revenue of at least [formula]. When an ad exchange is added, our algorithm achieves a revenue of at least [formula]. (3) We show how to modify our algorithm for the setting where wi,α is unknown for all i. In this setting our algorithm computes a reserve price and sends every impression first to the ad exchange. The reserve price is set such that if the auction executed at the ad exchange fulfills property P then the above revenue bounds continue to hold, i.e. it achieves a revenue of at least [formula].

Techniques

Our algorithm is a modification of the standard primal-dual algorithms in [\cite=FeldmanKMMP09] but it is itself not a standard primal-dual algorithms as it does not construct a feasible primal and dual solution to a single LP. Instead in the analysis we use several primal and dual LPs, one for each advertiser a and use the dual solutions to upper bound Ra. However, the corresponding primal feasible solution is not directly related to the revenue the algorithm achieves from a. Instead, the solution constructed by the algorithm is a feasible solution for a primal program that is the combination of all individual LPs. This property is strong enough to give the claimed bounds. The crucial new ideas in our algorithms are (i) the observation that when deciding to whom an ad slot is assigned the publisher should be biased towards advertiser with large na and in particular towards the ad exchange and (ii) that based on the structure of the algorithm it can be easily modified to compute an reserve price for the auction in the ad exchange if the wi,α values are unknown.

Further Related Work

We describe prior work on the question whether the publisher should assign an impression to a contracted advertiser or an ad exchange. In [\cite=BalseiroFMM14] a scenario is studied, where the wi,a follow a joint distribution and no disposal is allowed. Gosh et al. [\cite=Ghosh2009] assume that for each impression i the wi,α values follow a known distribution and the contracted advertisers have a quality value depending on wi,α. They study the trade-off between the quality of the impressions assigned to the advertisers and revenue from the ad exchange. The work in [\cite=Alaei2009], like our work, does not make Bayesian assumptions but studies online algorithms in the worst case setting. The main difference to our work is that there the contracted advertisers also arrive online and that there is no free disposal.

Finally, Devanur et al. [\cite=DevanurHKMY13] extend [\cite=FeldmanKMMP09] to the scenario with multiple ad slots on a page and constraints on ads being assigned together, but they neither consider ad-exchanges nor consider the different capacities na in the competitive ratio.

Structure of the paper

In Section [\ref=sec:capone] we discuss why the algorithm from [\cite=FeldmanKMMP09] is not satisfying in our setting and present a simple online algorithm for the 1-slot case, which we improve in Section [\ref=sec:main] to achieve a revenue of at least [formula]. In Section [\ref=sec:multislot] we generalize this algorithm to the multi-slot setting. Finally, in Section [\ref=sec:extensions] we show how to adapt it if the wi,α values are unknown.

A Simple 1-Slot Online Algorithm

In Sections [\ref=sec:capone] and [\ref=sec:main] we consider algorithms for the 1-slot setting, i.e., where each Sl just contains a single impression i. Given an instance of such an online ad assignment problem we can build an equivalent instance where all capacities na = 1. Simply replace each advertiser a by na copies [formula] with the capacities 1 and for each impression i set wi,ap  =  wi,a for all 1  ≤  p  ≤  na. Thus in this section we assume na = 1 for each a∈A. Then we formulate the offline problem as an integer linear program (ILP), where the variable xi,a is set to 1 if i is assigned to advertiser a and to 0, otherwise.

[formula]

The first type of constraints ensures that each impression is assigned to at most one advertiser, while the second type of constraints ensures that each a∈A is assigned at most one impression. It has the following dual LP.

[formula]

For notational convenience we assume an additional variable βα which remains 0 for the whole algorithm. We next consider a straight forward generalization of the online algorithm in [\cite=FeldmanKMMP09], called Algorithm [\ref=alg:1], to our setting. This algorithm constructs a feasible integral solution for the Primal LP, corresponding to an ad assignment, and a feasible solution for the dual LP that is used to upper bound the revenue of the optimal assignment.

Algorithm [\ref=alg:1] constructs feasible solutions for both the Primal and the Dual: when impression i is assigned to advertiser j then xi,j is set to 1, βj is set to wi,j, and zi is set to [formula]. Note that the loss in revenue of Algorithm [\ref=alg:1] compared to the optimal assignment exclusively comes from the impression assigned to advertisers in A.

Let A be an ad assignment computed by Algorithm [\ref=alg:1], then R(OPT)  ≤  Rα(A)  +  2  ·  RA(A).

In the following we will use that R(A) equals the value of the primal solution and that the value of the dual solution is an upper bound on R(OPT). We prove the claim by induction on the assigned impressions. Clearly the base case where no impression is assigned is fine. Now consider an arbitrary i to be assigned and notice that, by (1.), βa is such that βa = 0 if no impression was assigned to a. Otherwise, by (2c), βa = wi',a where i' is the highest weighted impression assigned to a. We simultaneously consider the increase of the primal and the dual solution when adding a new impression i.

If Algorithm [\ref=alg:1] assigns i to an a∈A this is by rule (c). Let βna, βoa be the new and old value of βa. The statement xi,a = 1, [formula] increases the revenue R(A) by wi,a  -  βoa, as βoa is the value wi',a of the impression i' we have to drop. On the other side the statement zi = wi,a  -  βoa increases the objective of the Dual by the same amount. Additionally the objective of the Dual is affected by updating βa with βna = wi,a. This additionally increases the objective of the Dual by βna  -  βoa = wi,a  -  βoa. Thus, if i is assigned to an a∈A, the increase of the objective of the Dual is twice the increase of the objective of the primal, the revenue R(A).

If Algorithm [\ref=alg:1] assigns i to α this is by rule (b). By xi,α = 1 we increase the revenue by wi,α and by setting zi = wi,α we increase the objective of the Dual by the same amount. Hence, as in case (b) the βa are not affected, we obtain that R(OPT)  ≤  Rα(A)  +  2  ·  RA(A).

However, the Algorithm [\ref=alg:1] does not guarantee that impressions are sent to ad exchange when the optimal algorithm does. Thus the optimal offline assignment might send many impressions to the ad exchange, while the online assignment of the above algorithm does not and thus might only be an 1 / 2 approximation (Proposition [\ref=prop:1] guarantees that it is not worse.). Such a situation is given in Example [\ref=example:1].

Consider A = {a} with na = 1 and impressions 1  ≤  i  ≤  n with wi,α = 1 - ε and wi,a = i. Then the revenue R(A) of Algorithm [\ref=alg:1] after n impressions is n, while the optimal assignment achieves n + (n - 1)(1 - ε), where (n - 1)(1 - ε) is achieved by the ad exchange. For ε  →  0 and n  →    ∞   the ratio R(A) / R(OPT) is 1 / 2 although half of the revenue in the optimal assignment OPT comes from the ad exchange. [formula]

Thus the algorithm from [\cite=FeldmanKMMP09] is only 1 / 2-competitive, even when an ad exchange, i.e., an advertiser with infinite capacity, is added.

Given an ad assignment A let Rα(A) denote the revenue the assignment gets from impressions assigned to the ad exchange and let RA(A) denote the revenue the assignment gets from impressions assigned to contracted advertisers. Thus we have R(A) = Rα(A) + RA(A). Additionally, we use OPT to denote the optimal assignment. We present next Algorithm [\ref=alg:2], an online algorithm that receives as revenue at least Rα(OPT)  +  (1 / 2)Ra(OPT), which is already an improvement over Algorithm [\ref=alg:1]. It is based on the observation that assigning an impression that should be sent to the ad exchange to an advertiser in A is worse than sending an impression that should go to an advertiser in A to the ad exchange. Thus, the algorithm is biased towards the ad exchange. Specifically the algorithm assigns an impression to an advertiser a∈A only if it gives at least double the revenue on a than on α.

Let A be the ad assignment computed by Algorithm [\ref=alg:2] then R(A)  ≥  Rα(OPT)  +  1 / 2  ·  RA(OPT).

Proof of Theorem [\ref=thm:1]

Let IAOPT, resp. IαOPT, be the impressions assigned to A, resp. α, by the optimal (offline) assignment OPT. We give an LP PA for the advertisers A and impressions IAOPT and its dual DA such that any feasible solution for DA gives an upper bound dA for RA(OPT).

Note that the summation in PA and the constraints in DA are only over impressions in IAOPT. The objective value of the optimal solution of DA, is an upper bound for the objective of PA, and thus also for RA(OPT). However, there is no direct relationship between RA(A) and the objective of PA for A, as A might also assign impressions from IαOPT to A.

To upper bound RA(OPT) we construct a feasible solution for DA. We do this in a iterative fashion, that is whenever Algorithm [\ref=alg:2] assigns an impression i∈IAOPT we update the feasible solution for DA as follows:

For the βa variables we use the values currently set by the Algorithm [\ref=alg:2];

For the variable zi we set zi = wi,j  -  βoj, where βoa is the value of βa before i is assigned.

As wi,j  -  βoj = maxa∈A{wi,a  -  βa}, all the constraints for i are satisfied. Hence, doing this for all i∈IAOPT gives a feasible solution for DA and its objective dA fulfills dA  ≥  RA(OPT).

To show that the claim holds after each assignment of an impression i we investigate assigning one expression i and study the effect to both the upper bound and the revenue we achieve. To this end we introduce some notation:

ΔdA(i) is the increase of the objective dA when the algorithm assigns impression i, i.e., the change in dA caused by the change in the β-values and the assignment of the new zi value (if i∈IAOPT).

Δdα(i) = wi,α if i∈IαOPT and Δdα(i) = 0 otherwise.

ΔR(A,i) is the increase of the revenue when assigning i.

βna, resp. βoa, to denote the value of βa after, resp. before i is assigned

Note that by the definitions (a) [formula], (b) [formula] and (c) [formula]. We will also exploit the fact that βa is such that βa = 0 if no impression was assigned to a and otherwise βa = wi',a, where i' is the impression currently assigned to a.

Next, to relate the increase of the upper bound with the gain of revenue, we distinguish whether one assigns an impression i∈IαOPT or an impression i∈IAOPT

ΔR(A,i)  ≥  Δdα(i)  +  1 / 2  ·  ΔdA(i), for i∈IAOPT.

As i∈IAOPT, by definition, we have Δdα(i) = 0. Thus, we actually have to show that ΔR(A,i)  ≥  1 / 2  ·  ΔdA(i).

If Algorithm [\ref=alg:2] assigns i to an j∈A recall that we set zi = wi,j  -  βoj and the algorithm sets βnj = wi,j. Thus ΔdA(i) = 2  ·  (wi,j  -  βoj) and ΔR(A,i) is given by wi,j minus the value of the impression we have to drop (if any), given by β0a. As this values is stored in βoj we get ΔR(A,i) = wi,j  -  βoj and thus ΔR(A,i)  ≥  1 / 2  ·  ΔdA(i).

If Algorithm [\ref=alg:2] assigns i to α (although OPT does not), we know from Step 2c that (wi,j  -  βj)  ≤  2wi,α, where [formula]. As we set zi = wi,j  -  βoj and the algorithm keeps all βa unchanged we get ΔdA(i) = wi,j  -  βoj and as we assign i to α we have ΔR(A,i) = wi,α. Thus ΔR(A,i)  =  wi,α  ≥  1 / 2  ·  (wi,j  -  βj)  =  1 / 2  ·  ΔdA(i).

Hence, ΔR(A,i)  ≥  1 / 2  ·  ΔdA(i) = Δdα(i)  +  1 / 2  ·  ΔdA(i).

ΔR(A,i)  ≥  Δdα(i)  +  1 / 2  ·  ΔdA(i), for i∈IαOPT.

As i∈IαOPT, by definition, Δdα(i) = wi,α. Recall that no z-value is affected in this case. We have to show that ΔR(A,i)  ≥  wi,α  +  1 / 2  ·  ΔdA(i).

If Algorithm [\ref=alg:2] assigns i to the ad exchange then the βa are not changed. Thus ΔdA(i) = 0 and ΔR(A,i) is simply wi,α. Hence, ΔR(A,i)  =  wi,α  ≥  wi,α  +  1 / 2  ·  ΔdA(i).

If Algorithm [\ref=alg:2] assigns i to an a∈A we have (wi,a  -  βoa)  >  2wi,α and the algorithm sets βna = wi,a. Thus ΔdA(i) = wi,a  -  βoa. Furthermore, ΔR(A,i) is given by wi,a minus the value of the impression we have to drop (if any), given by β0a. Thus ΔR(A,i) = (wi,a  -  βoa) = 1 / 2  ·  (wi,a  -  βoa) + 1 / 2  ·  (wi,a  -  βoa)  ≥  wi,α  +  1 / 2  ·  ΔdA(i).

Hence, ΔR(A,i)  ≥  wi,α  +  1 / 2  ·  ΔdA(i) = Δdα(i)  +  1 / 2  ·  ΔdA(i).

When combining Lemma [\ref=theorem1:lem1] and Lemma [\ref=theorem1:lem2] we obtain that for each i∈I:

[formula]

Finally, when summing over all impression i∈I and using the above inequality we obtain the claim.

[formula]

This completes the proof of Theorem [\ref=thm:1].

An Online 1-Slot Algorithm Exploiting High Capacities

In this section we generalize the result from Section [\ref=sec:capone] to the setting where each advertiser a∈A has an individual limit na for the number of ad impressions he is willing to pay for and we present Algorithm [\ref=alg:3] that achieves an improvement in revenue for advertisers a with large na.

In Algorithm [\ref=alg:3] we consider variables βa which, for a∈A, are always set s.t.

[formula]

where the wj's are the weights of the impressions assigned to a in non-increasing order and ena = (1 + 1 / na)na. That is, βa stores a weighted mean of the na most valuable impressions assigned to a. Again we keep βα   =   0 in the whole algorithm. Next we consider how assigning a new impression to a affects βa.

Consider a new impression i being assigned to advertiser a. Let βoa, resp. βna denote the value of βa before, resp. after i was assigned and v the value of the impression dropped from βa (0 if no impression is dropped), then

[formula]

Lemma [\ref=lem:beta] was already shown in [\cite=FeldmanKMMP09] but to keep the paper self-explanatory we provide a proof.

Assume that wi,a is the impression with the k-th highest value.

[formula]

To obtain the inequality we exploited that wj   >   wi,a for j   <   k and that [formula] for j < j'. We proceed with standard transformations.

[formula]

From the last statement we obtain [formula].

Notice that in Algorithm [\ref=alg:3] for each a∈A we have that 1 / 2  ≤  ca  <  1  -  1 / e, i.e. for na = 1 we have ca = 1 / 2 and ca grows with na and converges to 1  -  1 / e. The idea is to bias the algorithm towards advertisers with larger na and in particular towards the ad-exchange.

We use Ra(A) for [formula] to denote the revenue the assignment A gets from advertiser a. Thus, [formula].

Let A be the assignment computed by Algorithm [\ref=alg:3] then [formula].

Theorem [\ref=thm:main] will be a direct consequence of Theorem [\ref=thm:multislot], which we will prove in the next section.

Finally let us briefly discuss whether the constants ca are chosen optimally. From a result in [\cite=KalyanasundaramP96] on online algorithms for b-matchings it follows immediately that the constants ca in Theorem [\ref=thm:main] are optimal for deterministic algorithms. Moreover, in [\cite=MehtaSVV07] it is shown that even randomized algorithms cannot achieve a better competitive ratio than (1 - 1 / e) . So for large values of na even randomized algorithms cannot improve over Algorithm [\ref=alg:3].

A Multi-Slot Online Algorithm

In practice publishers often have several ad slots at a single page and want to avoid to show multiple ads from the same advertiser on the same page to avoid annoying their users. This can be modeled as follows: A sequence [formula] of sets of impressions arrive in an online manner. Each set S has be assigned (a) before any future sets have arrived, and (b) such that non two impressions in S are assigned to the same advertiser in A. Note that we allow multiple impressions from S to be assigned to the ad exchange as we expect the ad exchange to return different advertisers for them. Let the set of all impressions [formula]. With Algorithm [\ref=alg:4] we present an online algorithm for this setting with the same competitive ratio as Algorithm [\ref=alg:3]. Note, however, that, unlike Algorithm [\ref=alg:3], it is compared to the optimal offline solution that respects the above restriction. More formally, we call a function [formula] assigning impressions S to advertisers valid if there are no i,i'∈S, [formula], a∈A such that [formula]. Our Algorithm [\ref=alg:4] generates a valid assignment and is compared to the revenue of the valid assignment generated by the optimal offline algorithm. Notice that the computation of arg   max in Algorithm [\ref=alg:4] is a weighted bipartite matching problem and thus can be computed efficiently.

Recall that Ra(OPT) for [formula] is the revenue that an optimal assignment generates from advertiser a. We show the following performance bound.

Let A be the assignment computed by Algorithm [\ref=alg:4] and OPT the optimal multi-slot ad assignment, then [formula].

The proof of Theorem [\ref=thm:multislot] generalizes ideas from the proof of Theorem [\ref=thm:1]. One of the main difference is that we now have to deal with several sets IaOPT instead of just one set IAOPT and thus also with several LPs.

Proof of Theorem [\ref=thm:multislot]

First we give a linear program Pa and its dual Da for each a∈A such that the final objective value of any feasible solution of Da is an upper bound of Ra(OPT). Note, that there is no direct relationship between the final objective values of the Pa's and the revenue of the algorithm. However, we are able to construct a feasible solution for each Da with objective value da such that the revenue R(A) of the algorithm is at least [formula]. Together with the observation that da  ≥  Ra(OPT) and a bound dα on Rα(OPT) this proves the theorem.

Let IaOPT be the impressions assigned to [formula] by the optimal (offline) assignment OPT. We consider the following LPs for each a∈A.

Note that the summation in the primal and the constraints in the Dual are only over the impressions in IaOPT, i.e., the impressions assigned to a by OPT. The objective value of the optimal solution for Da is an upper bound for the objective of Pa, and thus also for Ra(OPT). This implies that any feasible solution of Da, also the one we construct next, gives an upper bound for Ra(OPT). As there might be impressions assigned to a by the algorithm that do not belong to IaOPT, the objective value of Pa is, however, not necessarily related to Ra(A).

Next, we give a feasible solution for Da for all a∈A, as follows.

For the βa variables we use the values currently set by the Algorithm [\ref=alg:4];

Let [formula] be the assignment of the impressions in S by the optimal solution. For each i∈I, we set [formula] exactly when the algorithm assigns i.

Note that this results in a feasible dual solution for all a as each i belongs to exactly one set [formula] and zi is chosen exactly so as to make the solution of [formula] feasible, together with the current [formula] values. As [formula] only increases in the course of the algorithm the solution remains feasible at the end of the algorithm. Let da be the value of this feasible solution for Da for some a∈A then we have da  ≥  Ra(OPT).

To show that the claim holds after each assignment of a set of impressions S we investigate assigning one such set and study the effect to both the upper bound and the revenue we achieve. To this end we introduce some notation:

Δda(S) be the increase of the objective value da when the algorithms assigns S, i.e., the change in da caused by the change in the βa-values and the assignment of the zi-values for all [formula].

[formula].

ΔR(A,S) is the increase of revenue when S is assigned.

Note that by the definitions (a) [formula], (b) [formula] and (c) [formula].

[formula], for all S∈S.

To simplify the notation let [formula].

First consider ΔR(A,S): For a∈A let va be the value of the na-th valuable impression assigned to a (the impression we would "drop" by assigning a new one), and let vα = 0. If i is assigned to α then the gain in revenue is [formula] which equals [formula]. If i is assigned to a∈A then the gain in revenue is the difference between the revenue of the new impression and the impression we have to drop, i.e., again [formula]. Thus for S altogether it holds

Now consider Δd(S): Recall that [formula] is the assignment of the optimal solution for the impressions S and let [formula] be the assignment from Algorithm [\ref=alg:4]. For all a∈A let βoa, βna denote the value of βa right before, resp. right after this assignment. Recall that for a  =  α, it holds that βa = 0 throughout the algorithm. Now note that where the first term comes from the new variables zi which we set to [formula], and the second term comes from the updates of βa. By the choice of [formula] in the algorithm we get

[formula]

Next we bound the contribution of each i∈S separately by analyzing two cases:

If [formula] then we know that [formula] and [formula] . Thus

If [formula] then we can apply Lemma [\ref=lem:beta] to bound [formula] as follows

[formula]

In the last step we used that by definition ca = 1 - 1  /  ena for a∈A. By the above we obtain

Now consider that the set of impression is given by a series (Sj)0  ≤  j  ≤  n of pairwise disjoint sets of impressions that show up simultaneously. Exploiting Lemma [\ref=lem:multislot] we get:

[formula]

This completes the proof of Theorem [\ref=thm:multislot].

An Algorithm for Computing Reserve Prices

In our model we assumed the publisher knows exactly how much revenue he can get from the ad exchange, i.e., the wi,α values are given for all i∈I. The critical reader may interpose that this is not the fact in the real world or in the ad exchange model proposed in [\cite=Muthukrishnan2009]. Instead whenever sending an impression to the ad exchange an auction is run. However, the publisher can set a reserve price and if all the bids are below the reserve price then he can still assign it to one of the contracted advertisers.

One nice property of Algorithms [\ref=alg:2] & [\ref=alg:3] is that they allow to compute the minimal price we have to extract from the ad exchange such that it is better to assign an impression to the ad exchange than to a contracted advertiser. This price is given by [formula]. It follows that this price is also a natural choice for the reserve price. Assume the auction executed at the ad exchange fulfills the following property (P): If an ad impression is sold at the ad exchange, then the revenue achieved is independent of the reserve price chosen by the publisher. Thus, the reserve price influences only whether the ad impression is sold, not the price that is achieved. Then Theorem [\ref=thm:multislot] applies, i.e., the revenue of the algorithm is at least [formula], even though the algorithm is not given the wi,α values and it is compared to an optimal algorithm that does. The reason is that the algorithm makes exactly the same decisions and receives exactly the same revenue as Algorithm [\ref=thm:multislot] that is given the wi,α values.

Let A be the assignment computed by the Algorithm described above, i.e., without knowledge of the wi,α values. If the auction at the ad exchange fulfills property P, then [formula].

However, this technique does not work for Algorithm [\ref=alg:4]. When a set of impressions S is assigned the right reserve price for an impression i∈S depends on the assignment of the other impressions in S. In particular the optimal reserve price for one impression might depend on the outcome of an auction for another item in the same set. We leave integrating reserve prices in the multi-slot setting as an open question for future research.

Acknowledgments

The research leading to these results has received funding from the European Research Council under the European Union's Seventh Framework Programme (FP/2007-2013) / ERC Grant Agreement no. 340506 and from the Vienna Science and Technology Fund (WWTF) through project ICT10-002.

The authors are grateful to Claire Kenyon and Moses Charikar for useful discussions on formulating the model.

A preliminary version of this paper has appeared in the proceedings of the 12th International Workshop on Approximation and Online Algorithms [\cite=DvorakH14].