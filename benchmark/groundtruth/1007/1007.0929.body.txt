An Õ( log 2(N)) time primality test for Generalized Cullen Numbers

Introduction

The first major breakthrough in the general theory of primality testing was achieved by Adleman, Pomerance and Rumely (see [\cite=ADL]) giving a deterministic primality test running in log O( log  log  log n) time. This algorith, later improved by Cohen and Lenstra (see [\cite=COH]), is known as the APRCL algorithm.

In 2004 three scholars from Kanpur University (Agrawal, Kayal and Saxena) introduced the AKS algorithm (see [\cite=AGR]), which was the first deterministic primality test running in polynomial time. In the second verion of their paper they proved that the running time of their algorithm was Õ(( log n)7.5). Nevertheless, and despite being one of the cornerstones of Computational Number Theory, this algorithm has not been very useful in practice. This is because numbers for which AKS algorithm is faster than the usual ones are beyond current computation capacity. Even the so-called practical versions of the AKS algorithm (see [\cite=BER], for instance) are not fast enough. As a consequence, prime "hunters" focus in families of integers for which primality can be determined by useful algorithms.

For restricted families of integers much faster algorithms are known. The Lucas-Lehmer algorithm (see [\cite=LUK]), used for Mersenne Numbers, is deterministic and runs in Õ(( log n)2) time. Proth, in [\cite=PRO], gives an algorithm running also in Õ( log n)2) time, which applies to numbers such that [formula] where 2ν2(m) is the biggest power of 2 dividing m and provided an integer a is given such that the Jacobi symbol [formula]. Proth's algorithm is not deterministic for every n. Later, Williams [\cite=WIL] or Konyagin and Pomerance [\cite=KON] have extended these techniques to wider families of integers.

Positive integers of the form n2n + 1 are called Cullen Numbers and were first introduced by Father James Cullen in 1905 (see [\cite=CUL], [\cite=GUY] or [\cite=LUC] for instance). Primes of this form are very scarce (in fact, in [\cite=HOO] it is shown that almost all Cullen Numbers are composite). Primality criteria suitable for Cullen Numbers have been presented and discussed in [\cite=ROB]. The only known Cullen Primes are those for n equal to:

1, 141, 4713, 5795, 6611, 18496, 32292, 32469, 59656, 90825, 262419, 361275, 481899, 1354828, 6328548, 6679881.

The largest known Cullen prime is 6679881  ×  26679881 + 1. It is a megaprime with 2,010,852 digits and was discovered by a PrimeGrid participant from Japan. It is the fifteenth biggest known prime. In [\cite=BYF] a "quasi-deterministic" test for Cullen Numbers was given.

A quite straightforward generalization of these numbers are the so-called Generalized Cullen Numbers (GCN for short) which are integers of the form Cb(n): = nbn + 1. This family was introduced by H. Dubner in [\cite=DUB] and is one of the main sources for prime number "hunters". There exists a distributed computing project (http://www.primzahlenarchiv.de/) to find Generalized Cullen Primes (GCP for short) with the biggest GCP being C151(139948), an integer with 304,949 digits. Noteworthy, for 29 values of b smaller than 200 no GCP has been found.

To date, no specific primality test for Generalized Cullen Numbers has been introduced. This is the main goal of this work. The paper is organized as follows. In the second section we generalize some known divisibility properties of Cullen Numbers. In Section 3 we present two probabilistic primality tests for GCN. The first test (TEST1) is based in the fact that [formula] (mod Cb(n)) for every GCP Cb(n). This test is stronger and has less computational cost than Fermat's test (for bases b and n) and than Miller-Rabin's test (for base n) and seems to have very few pseudoprimes. Thus, the probability of error is extremely small: among the millions of numbers tested, only 4 pseudoprimes have been found. We also present another test (TEST2), more demanding than TEST1, for which no pseudoprime has been found. In the fourth section we present a "quasi-deterministic" version of TEST2, which has allowed to certify the primality of nearly every known GCP with the use of very modest technological resources in just a few minutes. We are convinced that, with the use of better technology directed to an efficient modular exponentiation, this algorith would help to break records for GCP. Finally, in Section 5, we stablish the computational complexity of the presented tests, we give the running time of our algorithm for various cases and we close the paper with an important conjecture.

Some divisibility properties

Although the main goal of the paper is to present primality tests for Generalized Cullen Numbers, it is interesting to study some divisibility properties of such numbers. First of all, we are interested in finding families of composite Generalized Cullen Numbers. A first result in this direction goes as follows.

Let nb(k,p) = (bk - k)(p - 1) - k and let p be a prime not dividing b. Then p divides Cb(nb(k,p)).

It is clear that [formula]. Now, since [formula] we have that:

[formula]

Observe that, if p divides Cb(n) then p does not divide b, so if n  ≠  nb(k,p), we can apply the previous proposition to find another composite Generalized Cullen Number with the same base. Nevertheless, this process can be applied only in one step; i.e., given a prime divisor of Cb(n) we only find (at most) another m such that p also divides Cb(m). Thus, it is interesting to find a process that allows us to construct infinite families of Generalized Cullen Numbers divisible by the same prime. The next proposition goes in this direction.

Let p be a prime dividing Cb(n) and let hp = expp(b); i.e., the smallest integer such that [formula]. Then p also divides Cb(n + mphp) for every integer m.

If m = 1 we have:

[formula]

and the result follows inductively.

The propositions above generalize known results for the case b = 2 that can be found in [\cite=KEL] and [\cite=CUN].

Now, given two Generalized Cullen Numbers, it can be interesting to study their common divisors. For example, if we consider Cb(n) and Cβ(n) it is easy to see that any common divisor of these numbers must also divide |bn  -  βn|. If we restrict ourselves to Generalized Cullen Numbers of the same base we can present a more interesting result.

Let Cb(n) and Cb(m) be two different Generalized Cullen Numbers with αn = βm. If d is a common divisor of Cb(n) and Cb(m), then d also divides |nα + ( - 1)α  +  β - 1mβ|.

First of all note that d cannot divide b. Also, since d is a common divisor, it must, assuming n  ≥  m, divide |Cb(n) - Cb(m)| = bn|n - mbm - n|. Consequently d divides |n - mbm - n|.

Now, d also divides nCb(n) = n2bn + n and it follows that d divides |n2bn + mbm - n|. If, for instance, n < m - n we get that d divides |n2 - mbm - 2n|. If m - n < n we would get that d divides |m + n2b2n - m|.

Clearly we can proceed in this way until both powers of b are the same. Furthermore, we will need to perform the previous computations exactly α  +  β - 1 times and at every step the middle sign changes and the exponent of either m or n increases by 1. Thus, the desired result is finally obtained. We omit the details.

It is worth remarking that the previous proposition does not depend on b. Thus, if Am,n = |nα + ( - 1)α  +  β - 1mβ| is a prime, then Cb(n) and Cb(m) are either coprime or their greatest common divisor is Am,n for every value of b.

Two probabilistic primality tests

This section is devoted to present two probabilistic primality tests for Generalizados Cullen Numbers. The first one will be compared with Fermat and Miller-Rabin for some witnesses. The second one will be the basis of a "quasi-deterministic" test which will we introduced in the next section.

The proposition below presents the property of GCP in which TEST1 will be based.

If Cb(n) is prime, then [formula] (mod Cb(n)).

Clearly, [formula] (mod Cb(n)). On the other hand, since b and Cb(n) are coprime, we have that [formula] (mod Cb(n)).

Now, taking this into account:

[formula]

from where it follows that:

[formula]

where negative exponents make sense since we are working over a field.

Let us relate now this test with Fermat and Miller-Rabin primality tests. In fact, we will se that our test is stronger than both of them in the sense that if a Generalized Cullen Number passes our test, it will also pass Fermat and Miller-Rabin tests for certain choices of the base.

If [formula] (mod Cb(n)) for an odd Cb(n), then Cb(n) is a Fermat (or weak) probable prime to base n.

We have that:

[formula]

since bn must be even.

Although TEST1 is very similar to Fermat's test to base n, it has turned to be more subtle. We have only found 4 pseudoprimes for our test. Namely: C80(2) = 12801, C3570(3) = 136497879001, C570(4) = 422240040001 and C1470(4) = 18677955240001). On the other hand, three more pseudoprimes (C7(4), C63336(2) and C2355990(2)) appear for Fermat's test to base n. Observe that C1470(4) and C570(4)) are Carmichael Numbers.

If [formula] (mod Cb(n)), then Cb(n) is a Fermat (or weak) probable prime to base b.

Since b and n are coprime with Cb(n), they both have an inverse modulo Cb(n). Moreover, [formula] (mod Cb(n)).

Now:

[formula]

Thus, [formula] (mod Cb(n)) and, consequently, [formula] (mod Cb(n)).

Although TEST1 is theoretically stronger than Fermat's test to base b, we have not found pseudoprimes for this test which are not pseudoprimes for TEST1.

If [formula](mod Cb(n)), then Cb(n) is a strong probable prime to base n; i.e., it passes Miller-Rabin primality test.

Put n = 2rh and b = 2sk with k,h odd integers and [formula]. Then, Cb(n) = 2rh(2sk)n + 1 = 2tm + 1 with t = r + ns and m = hkn. We have that [formula] (mod Cb(n)). Consequently [formula] (mod Cb(n)), since nb must be even. If [formula] (mod Cb(n)) it follows that [formula] (mod Cb(n)) and Cb(n) passes Miller-Rabin test to base n.

The following result is stronger than Proposition 4 and will give rise to another probabilistic test that we will denote by TEST2. This test involves cyclotomic polynomials of prime index and is more demanding than TEST1. It will be the basis of a "quasi-deterministic" test in the next section.

Proposition 4 implies that [formula] (mod Cb(n)). If i) does not hold, let K < mn be the biggest integer such that [formula] (mod Cb(n)). Put [formula]. Then [formula] (mod Cb(n)). The maximality of K implies that [formula] (mod Cb(n)) so, since Cb(n) is prime, [formula] (mod Cb(n)) and the proof is complete.

Every Generalized Cullen Number satisfying Theorem 1 for some p, prime divisor of b, will be certified as a probable prime for TEST2 to base p. If it is composite we will name it as a pseudoprime for TEST2 to base p. Among the four pseudoprimes found for TEST1, the only one that passes TEST2 for some prime divisor of b is the Carmichael number C1470(4) which is a pseudoprime for TEST2 to base 2. Nevertheless, C1470(4) is certified as composite since it does not pass TEST2 for any other prime divisor of 1470. The other three pseudoprimes for TEST1 do not pass TEST2 for any base. The authors have not found any composite Generalized Cullen Number passing TEST2 for every prime divisor of b. In fact they conjecture that such GCN does not exist.

A "quasi-deterministic" test

We will now see that passing TEST2, together with a bounding condition on K, gives a sufficient condition for primality.

If q is a prime divisor of Cb(n) we have that [formula] (mod q). It follows that the order of [formula] in [formula] is exactly pj and, consequently, the order of - n is a divisor of [formula]. Moreover, [formula] is not congruent with 1. For if it was, then [formula] (mod q) which is a contradiction being q and pj coprime. Thus, the order of - n does not divide [formula]. As a consequence, the order of - n is a multiple of pnrj - Kj and it follows that pnrj - Kj|q - 1. Finally we obtain that:

[formula]

This must hold for every q prime divisor of Cb(n). Clearly it is a contradiction unless q = Cb(n) is its only prime divisor and the result follows.

If b is a prime-power the previous result can be slightly simplyfied in the following way.

Let b = pm with p a prime. If [formula] (mod Cb(n)) with [formula], then Cb(n) is prime.

The previous Corollary generalizes [\cite=BYF] for b = 2 and m = 1. Observe that in such case Φ2(( - n)2K - 1) = n2K - 1 + 1.

Computational complexity

Let us present the pseudo code of an algorithm implementing TEST1 and TEST2. We will also justify its polynomial complexity.

The correctness of the algorithm is a straightforward consequence of Proposition 4 and Theorems 1 and 2. To study its complexity, we first need to present a technical lemma. Its proof is elementary and we omit.

Let [formula] a set with an  ≠  a0 and with the property as  ≠  a0  ⇒  as + 1  ≠  a0. If the computation of each ai is of complexity O(h), then the complexity of computing max {i | 0  ≤  i  ≤  n, ai = a0} is O(h log 2(n)).

Complexity of steps 1 and 2 is that of the modular exponentiation n(N - 1) / n (mod N). Taking into account that O(n) = O(W(N))  ⊂  O( log (N)) and that products modulo N can be performed by Schoenhage-Strassen algorithm (see [\cite=SCH]) with complexity

[formula]

we get the complexity of these two steps to be:

[formula]

Step 3 requires to perform at most log (nM) modular exponentiations with complexity analogous to that of step 1. Consequently, by the lemma above, the total complexity will be

[formula]

Steps 4 through 7 do not increase the complexity since they are mere verifications of equalities and inequalities.

From a computational point of view, this work is promising because it presents primality tests for GCN whose computational complexity is the same as that of modular exponentiation. This is the case, since only a relatively small number of modular power has to be computed. Other tests of general character are clearly inferior. For example, Lucas test, which seems appropriate here due to the easy factorization of Cb(n) - 1 has problems if n has many prime divisors. Altough the techology used by the authors limits to PowerMod command in [formula] 6.0 (in an Intel core2 Duo P7450 2.13 GHz with 4Gb of RAM), they have been able to certify primality for nearly every known GCP. We are sure that the tests presented in this work, using a better technology focused on efficient modular exponentiation, will allow to break records in the family of GCN.

Just to enlighten what we have just said, let us compare our primality test with the PrimeQ command implemented in [formula]. According to [formula] manual, this command uses the multiple Rabin-Miller test in bases 2 and 3 combined with a Lucas pseudoprime test. Below we present the runnig times for the certification of some known GCP (for b = 3, 8 and 20). We also show the number of modular exponentiations performed in the third step of the algorithm.

[formula]

[formula]

[formula]

Note that PrimeQ is a probabilistic test (even though according to [formula] manual no pseudoprime for this test has still been found). In the examples above our test certified primality in a deterministic way and faster (except for two cases) than PrimeQ. The deterministic version of PrimeQ implemented in[formula], ProvablePrimeQ, was so slow that it is not worth presenting the comparison.

To finish, we have to point out that the presented algorithm is not strictly a deterministic primality test. We could say it is a "quasi-deterministic" test in the sense that if the output is PRIME NUMBER, the tested integer is certainly a prime, but it could be possible that a GCP was not certified as such. Nevertheless, computational evidence suggest that this is not the case for moderately big values of n; in fact, such primes have be found only for n < b. Moreover, the experiments also suggest that in step 3 the value of K is always very small with respect to n. This leads us to the following conjecture.

If n > b, then the algorithm is deterministic.

Acknowledgememts

We are grateful to L. M. Pardo Vasallo for his help in computational complexity aspects. We are also grateful to P. Berrizbeitia and J.G. Fernandes for providing the prepint of their paper [\cite=BYF] that inspired this work.