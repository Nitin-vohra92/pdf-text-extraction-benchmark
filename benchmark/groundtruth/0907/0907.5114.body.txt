Lemma Definition Proposition Corollary Remark Example Theorem Lemma Definition Proposition Corollary Remark Example

(0,0)(,)

On Computing Geodesicsin Baumslag-Solitar Groups

Introduction

Baumslag-Solitar groups were introduced in [\cite=baumslag62some] and they enjoy many remarkable properties, see e.g. Lyndon and Schupp [\cite=ls77]. The Baumslag-Solitar group [formula] is a one-relator group defined by

The word problem is decidable in linear time, but it is still not known how to compute the geodesic length of elements efficiently. Polynomial time algorithms for this problem were known only for horcyclic elements, [\cite=fredenadams09] [\cite=fcs09] or in the case where [formula] is solvable, i.e., the case where p = 1, see [\cite=elder09linear]. As usual, a horocyclic element is an element of the subgroup [formula] generated by a. More precisely, the paper of Murray Elder [\cite=elder09linear] presents a linear time algorithm how to compute geodesic for all words, when [formula] is solvable.

The result of Elder is the starting point for our paper and we generalize his result to the case where p divides q, thereby giving a partial answer to Question 1 in [\cite=elder09some].

For this purpose we introduce the notion of peak normal form. The peak normal form is geodesic. Thus, it represents an element by a geodesic word in the Cayley graph of [formula]. There can be exponentially many different geodesic, the peak normal form chooses a unique one; and it is defined by a natural condition. For horocyclic elements the peak normal form and length-lexicographical normal form coincide.

Our main result is Theorem [\ref=thm:main]; it states that peak normal forms can be computed in quadratic time, if p divides q. Actually, we have a more precise result, which yields Elder's linear time bound for p = 1.

Our technique relies on the fact that length-lexicographical normal forms of horocyclic elements can be computed in linear time. See also [\cite=elder09linear] [\cite=fredenadams09] [\cite=fcs09] for similar approaches. We also extend the linear time result to elements which we call hills. These are words whose Britton reduction can be written in the form

[formula]

where all αi and βj are horocyclic. Moreover, we give a linear time reduction of the problem of computing geodesics to that of computing geodesics for Britton-reduced words where the t-sequence starts with t- 1 and ends with t.

For the general case of arbitrary p and q it is clear that the geodesic length can be computed in exponential time and linear space by a straightforward algorithm. The decision problem of testing whether a given word is geodesic is in the complexity class Co-NP, since one can guess a shorter word. Both assertions hold for any group where the word problem is in P, i.e., solvable in polynomial time. (For standard notions in complexity and formal language theory we refer e.g. to the textbook [\cite=HU79].) However, to this date it is unclear whether computing geodesics in Baumslag-Solitar groups is in P in the case where p does not divide q. It might be that the problem is actually Co-NP-complete. The investigation of the general case remains a challenging research project.

Notation and preliminaries

Throughout the paper, let 1  ≤  p < q be fixed positive integers. By α,αi,β,βi,γ,γi,δ,μ,ν,ρ,σ,τ we always mean integers. We reserve special fixed letters t, T, a, and A. By θ,θi we mean either t or T.

The alphabet [formula] is ordered by putting t < T < a  <  A, and it is equipped with an involution by [formula], [formula], [formula], and [formula].

The involution is extended to words by

[formula]

We read A = a- 1 and T = t- 1 in the Baumslag-Solitar group: Every word [formula] can be read as [formula] and, of course, [formula].

The Baumslag-Solitar group [formula] is an HNN-extension of [formula] with stable letter t, and the HNN-extension is defined by the canonical homomorphism between the subgroups [formula] and [formula] mapping the subgroup generator p to q. The group [formula] can also be defined by a confluent and terminating string rewriting system BS over the alphabet [formula] with the following rules, where 0 denotes the empty word:

[formula]

Termination is not completely obvious, but the proof is standard with string rewriting techniques as explained e.g. in the textbook [\cite=jan88eatcs].

The rewriting system BS defines a congruence relation

[formula]

This gives normal forms by computing [formula] such that ŵ is irreducible. Since BS is confluent, two words u and v are equal in [formula] if and only if [formula] if and only if there is some ŵ with [formula]. Moreover, if ŵ is irreducible, it is uniquely defined by u.

In the following we write u  ~  v if [formula]. Thus, u = v means identity as strings, whereas u  ~  v means equality in [formula].

The problem is that the length of ŵ can be exponential in the length of w. To see this, consider e.g. p = 1 and the word tnaTn. Its irreducible descendant has length qn.

The purpose of the system BS is therefore mainly to provide simple proofs for all basic properties about Baumslag-Solitar groups, see also [\cite=ddm09] for more background about this approach.

We investigate the problem of computing geodesics, i.e., given a word w over the generators a and t and their inverses A = a- 1 and T = t- 1, find a shortest word g(w) over the alphabet [formula] such that w and g(w) describe the same element of the group [formula]. The geodesic word g(w) is not unique, but its length [formula] is well-defined. It is called the geodesic length of w.

There might be exponentially many different geodesic words g(w) for a word w. So we are interested in unique normal forms as well. The length-lexicographical linear order is defined on words u and v by letting [formula] if either [formula] or first [formula] and second u is not behind v in the lexicographical order, which is defined by t < T < a < A.

The length-lexicographicalnormal form of a word w is denoted by [formula]. It is the first word v in this order satisfying v  ~  w. Obviously, [formula] is geodesic. Later we will introduce another (and more symmetric) geodesic normal form: the peak normal form.

Confluence and termination of the rewriting system BS imply that the word problem for [formula] is solvable. Therefore computing geodesic (or any decidable geodesic normal form) is possible in finite (though using this naïve approach at least exponential) time. On input w just enumerate all words up to length [formula] and check if they are equivalent to w.

Throughout, we identify the word aα with the integer α, and we identify Aα with -  α. As a consequence, the free product [formula] of [formula] with the free monoid [formula] becomes both a quotient monoid (by a  ↦   + 1 and A  ↦   - 1) and at the same time a subset of [formula], where 0 denotes the empty word. For elements of this subset [formula] we use normal forms. In other words [formula] is always represented as a sequence which alternates between integers and elements from [formula].

More precisely, we identify [formula] with the set of sequences of words which alternate between words in [formula] and letters in [formula]. Thus, (42,t,t,3,T,t) is allowed, but (43, - 1,t,t,3,T,t) is not, although they denote the same element in [formula]. (This means [formula] becomes the regular subset of [formula], which is defined by forbidding factors aA and Aa.)

Note that mapping a word [formula] to the corresponding word [formula] does not increase the length. It is also clear that all geodesic words in [formula] belong to the subset [formula].

Every word [formula] can uniquely be written as a sequence

[formula]

with k  ≥  0, [formula], and [formula]. Its length is

[formula]

Let [formula] denote the geodesic length of an integer α. We define the norm [formula] of u by

[formula]

Let [formula] be the geodesic length of u. Then we get

[formula]

having equalities when u is geodesic.

The objective is therefore to compute on input u a word v which minimizes [formula] among all words v with u  ~  v. In the next section we show that, given a word, we can compute an equivalent Britton-reduced word in polynomial time. Thus, in order to compute geodesic we only have to consider Britton-reduced words.

Observe that [formula] for an integer α implies [formula], and as soon as [formula], we find a geodesic using letters t (and T). This is trivial, because μq  ~  tμpT. It is also well-known (and shown in Section [\ref=sec:ghw]) that, if there exists some geodesic using the letter t, then there is some geodesic g1(α) which starts with the letter t, and there is some geodesic g2(α) which ends with the letter T.

As a consequence, let w be a word and let [formula] minimize [formula] for all u  ~  w. Consider some 0  ≤  i < k where θi + 1  =  t. No geodesic of αi can end in a T, so [formula]. As we have (  ±  q)t  ~  t(  ±  p) we see that actually [formula]. The same happens if 1  ≤  j  ≤  k and θj  =  T, then [formula], too.

Thus, large values [formula] can be found at local peaks of u, only. A local peak of u is a position [formula] such that 0  ≤  i  ≤  k and θi  ≠  T and θi + 1  ≠  t. Note that 0 is a local peak for k = 0. For k > 0 it is a local peak if θ1  =  T.

The notion originates from the shape of the path of u, if reading a T means going one step downwards and reading a t means going one step upwards, as illustrated by the following figure for the word u = ATa2taTattA10TaTa2tta42T:

As integers αi with large absolute value [formula] can only be found at local peaks of u, the number of local peaks is an important parameter. However, for technical reasons which will not become apparent until later, we prefer to count the number of sinks. A sink is dual to a local peak. Formally, a sink of a word [formula] is a position [formula] such that θi  ≠  t and θi + 1  ≠  T. Note that 0 is a sink for k = 0. For k > 0 it is a sink if θ1  =  t. The difference between the number of local peaks and the number of sinks is bounded by ±  1. For example, if p = 1 (which means that [formula] is solvable) Britton-reduced words may have 1 or 2 local peaks, but always exactly 1 sink. Here are the pictures for words having one sink and one or two local peaks:

We emphasize this is in a special notation: Let [formula] be a word. The number of sinks is denoted by s(u) which is defined as

[formula]

Britton reduction

Let [formula] be a word in [formula]. A Britton reduction step means replacing in [formula] either a factor tμpT by μq or a factor Tμqt by μp, where [formula]. After that, we rewrite the new sequence by the corresponding word without factors aA and Aa in the free product [formula]. So a Britton reduction step decreases the number of letters from [formula] but it may increase the length. If e.g. θiαiθi + 1  =  tμpT, then one Britton reduction step yields

[formula]

A Britton reduction may increase the length by a factor q / p, but the important point is that [formula]. Indeed the geodesic length of αi - 1  +  μq  +  αi + 1 is at most [formula] A Britton reduction neither increases the number of local peaks nor the number of sinks.

A word is Britton-reduced, if no Britton reduction step is possible. As the coefficients αi can increase exponentially, from now on we keep all integers in binary notation. The number of bits remains linear in the input length because the sum over [formula] is never greater than [formula]. For complexity considerations it is convenient to assume that an arithmetic operation on n-bit integers (with [formula]) can be performed in constant time. Then each step in a Britton reduction needs constant time. So we can produce a Britton-reduced equivalent word (with integers written in binary) in linear time. The number of bit operations is actually not worse than quadratic (if polylog terms are ignored).

Britton-reduced forms are far from being unique. On the contrary, there can be exponentially many Britton-reduced equivalent words. But if [formula] and u is Britton-reduced, then the t-sequence

[formula]

is uniquely determined by the word w. (This can easily be seen with the help of the rewriting system BS defined above since applying its rules leaves a Britton-reduced word Britton-reduced.)

Thus, as a Britton reduction never increases the norm, we can assume that the input word [formula] is Britton reduced and the integers αi are written in binary. The objective is therefore reduced to minimizing the norm [formula] (and to computing geodesic normal forms) for Britton-reduced words and to computing geodesic of horocyclic elements.

As usual, a word [formula] is called horocyclic, if its image in [formula] belongs to the horocyclic subgroup [formula] generated by a. We adopt this notion here. Thus, a Britton-reduced word [formula] is horocyclic if and only if k  =  0. As a consequence, membership of the horocyclic subgroup can be tested in linear time.

The next step is to compute geodesics of horocyclic words.

Geodesics for horocyclic words

Techniques for computing geodesic for horocyclic words can also be found elsewhere, see [\cite=elder09linear] [\cite=fredenadams09] [\cite=fcs09]. Corollary [\ref=allesreg] and Remark [\ref=rem:ft] have been inspired by recent results by Freden et al., see [\cite=fcs09]. Since our presentation is however quite different from other approaches we give full proofs.

The strategy to compute length-lexicographical normal forms for horocyclic words [formula] relies on the following simple observations:

Horocyclic elements commute in [formula].

If [formula] is small, then we can use table lookup.

If [formula] is large, then [formula] begins with t, see Lemma [\ref=danksprung].

If w  ~  tuTv, where the indicated letters t and T match in a Britton reduction, then [formula] and [formula].

If w  =  uw'v and [formula], then [formula].

We begin with a lemma which might be of independent interest.

Let w  ~  α be horocyclic and g(w) be a geodesic representation. Then we can write:

[formula]

Moreover, there are also geodesic representations g1(w) and g2(w) such that

[formula]

We also find such geodesic representations with k  ≥  1 as soon as [formula].

The shape [formula] is obvious because in the Britton reduction all t and T must vanish. Clearly, a2q  ~  ta2pT and A2q  ~  tA2pT, so the assertions are trivial for k = 0. Let k  ≥  1.

Let g(w)  =  uv be the product of shorter horocyclic words. If both u and v have geodesic representations using the letter t (or T), then we can write g(w)  ~  g2(u)g1(v) with [formula]. But g2(u)g1(v) is not geodesic, because the first letter of g1(v) is t and the last letter of g2(u) is T. Since g(w)  ~  vu  ~  uv, we may assume that v  =  αk. The claims follow by induction, because elements of [formula], such as αk and βk commute with horocyclic elements.

If g(w) is not the product of shorter horocyclic words, then we have βk  =  αk  =  0 and either g(w)  =  Tut or g(w)  =  tuT. If g(w)  =  tuT, then we are done by induction. So assume by contradiction g(w)  =  Tut.

Let k  ≥  2 and g(w)  =  Tut. This is impossible, because k  ≥  2, therefore g(w)  ~  Tg1(u)t, and g1(u) has t as its first letter.

Let k = 1 and g(w)  =  Tαt. Then we have [formula], so g(w)  =  Tμqt for some [formula]. But Tμqt  ~  μp and [formula]. Thus we find a contradiction again.

Let p = 1 and q = 2. Our techniques will show that tka(Ta)k is a geodesic representation. The word is obviously horocyclic. It is also clear that Lemma [\ref=danksprung] can be generalized such that in this case we find exactly 2k geodesic representations:

[formula]

The first phase in our computation to produce the length-lexicographical normal form for horocyclic elements will a greedy linear time reduction to compute the length-lexicographical normal form of Britton-reduced words where all θi are equal to T. For this purpose we introduce the following notion. A slope is a word w which has the form

[formula]

In [\cite=elder09linear] slopes are called words of type N.

Let [formula] be a horocyclic word with [formula]. Then we can compute in linear time a slope u and a natural number [formula] such that

[formula]

We begin with some precomputational steps.

Replace w by the corresponding word [formula] in the free product [formula].

Compute a Britton-reduced equivalent word [formula] keeping integers in binary representation. If [formula], then w was not horocyclic and we can stop.

Now we may assume that [formula].

Next, we perform a greedy linear time algorithm. By symmetry we assume [formula]. The basic idea is that as long as α  ≥  2q, the unary notation [formula] is not a length-lexicographically first representation, because ta2pT < lla2q. This motivates rewriting α  =  qμ  +  β with 0  ≤  β  <  q. We can replace α by tpμTβ, and we have 0  ≤  pμ  <  α. Repeating this greedy process for μp as long as pμ  ≥  2q yields in linear time a representation [formula] with [formula], 0  ≤  βi  <  q for i  ≠  0, and 0  ≤  β0  <  2q.

Define [formula]. For each i we found μi  ≥  0 such that αi  =  qμi  +  βi and

[formula]

We have [formula] and is enough to show that the word [formula] begins with ti for each α' with αi  ≤  α'. This is trivial for i = 0. Now let i  ≥  1. We know 2q  ≤  αi  ≤  α', so by Lemma [\ref=danksprung] we obtain:

[formula]

for some i'  ≥  1. Moreover, [formula]. We have [formula]. Hence there exists μ'  ≥  1 with α'  =  μ'q  +  βi'' Recall that αi  =  μiq  +  βi where 0  ≤  βi  <  q. Therefore αi  ≤  α' implies μi  ≤  μ'. Induction applies, and we can conclude that [formula] begins with ti - 1. Thus, [formula] begins with ti.

By Proposition [\ref=fritzchen] it is enough to compute length-lexicographical normal forms for slopes. Essentially, this can be performed by a finite transducer. Our algorithm relies on dynamic programming and needs some preparation.

Let R denote the set (of constant size) defined by

[formula]

where in this section the constant r is the least positive integer such that

[formula]

Actually, minimizing the concrete value of r is of little importance. All we need is that for all constants c  ≥  0 there is a positive integer r  =  r(c) such that

[formula]

So, in Eq. [\ref=eq:fred] the constant c was chosen to be q - 1, which guarantees in particular that [formula] implies β∈R.

There is a linear time algorithm (where the number of bit-operations is linear, too) which on input a slope [formula] with

[formula]

computes the length-lexicographical normal form [formula]. Moreover, we have

[formula]

with k∈O(1).

Note that the slope u given by Proposition [\ref=fritzchen] satisfies ([\ref=eq:smallbetas]). Thus:

The length-lexicographical normal form of horocyclic elements can be computed in linear time (where the cost of arithmetic operations is considered to be constant).

The input [formula] is Britton-reduced.

We initialize a table with entries [formula] for all [formula] with [formula] in constant time. The desired form of the entries is guaranteed by Lemma [\ref=danksprung]. For [formula] we find the information in this table because [formula]. Now, let [formula].

For each [formula] and each γ∈R we define the word u(i,γ) by

[formula]

We show that we can compute [formula] efficiently by table lookup. Recall that [formula].

If i = 0 then u(0,γ) = γ is a small integer, and [formula] is in the precomputed table.

Let i  ≥  0 and assume for simplicity (and for a moment) that for all γ∈R the values [formula] have been computed and stored in a table of size [formula]. We wish to compute the length-lexicographical normal form of [formula] for each ρi + 1∈R. The word [formula] ends in some Tγ, where [formula] and [formula], because a slope is Britton-reduced. Thus, ρi + 1  =  μq  +  γ for some [formula] and we obtain Tρi + 1  ~  μpTγ. Now we have [formula]. Hence for i = 0 we obtain

[formula]

For i  >  0 we obtain

[formula]

Thus, in both cases we can compute by table lookup:

[formula]

where the minimum is taken over all ρi∈R and [formula] such that

[formula]

So far we have proven Proposition [\ref=fritz] except for the linear time bound. In fact, we have shown that the length-lexicographical normal form of slopes (and thus of horocyclic elements) can be computed in polynomial time. It remains to explain how we manage to find the minimum in constant time with a constant amount of information. Unfortunately, the explanation is slightly technical. If the reader is interested in polynomial time results only, he or she is invited to skip the rest of the proof. An example of how the method works can be found in the appendix.

For the explanation we observe first that

[formula]

for all ρ,τ∈R. One idea is therefore that instead of keeping the words [formula] in the table, we store in it only certain suffixes of these words of maximal length 2r.

This would be even more evident if it were enough to compute the geodesic length. Then the table would just need to store the length differences

[formula]

in addition to the absolute geodesic length of one of these elements, say, [formula].

As we are more ambitious than simply computing geodesic lengths, we need more subtle data structures. More precisely, factorize each [formula] as

[formula]

such that [formula], thus having [formula] for all ρ∈R. We modify the above algorithm so that after the i-th round we only the store the following information:

A list of the si,ρ for ρ∈R, and

the lexicographical ordering of the prefixes pi,ρ (ρ∈R).

Note that this information only takes a constant amount of space and that all pi,ρ have the same length.

It is clear now that we can perform the minimum search in constant time. Say, we need to compare [formula] and [formula]. As [formula] we can compare the length by looking at the lengths of si,ρTγ and si,τTδ. In case [formula] we check the ordering between pi,ρ and pi,τ. If pi,ρ = pi,τ, we finally compare si,ρTγ and si,τTδ.

The length of the shortest word [formula] (with ρ∈R) strictly increases from round i to round i + 1, since a factor of type Tγ is concatenated. So we can actually update the information in constant time. We simply have to compute new suffixes and a new linear order on R. As we need to recover pi + 1,ρ later, the algorithm outputs a column vector with the portions of the suffixes which were cut due to length constraints plus a pointer to the index of the preceeding column where the minimum was achieved.

The output of the algorithm can be viewed as a matrix with 2r + 1 rows and a linear number of columns. The entry (ρ,i) contains a word of constant length and a pointer to some (τ,i - 1). In the last round [formula] the output consists of the suffixes [formula] and, using these, the length-lexicographical normal form for each [formula] can be read by a single scan from right to left in the matrix, starting at position [formula] and following the pointers. In particular, we can read off [formula] in linear time.

Let [formula] be a horocyclic word with [formula] and let [formula] be the number computed in Proposition [\ref=fritzchen]. Then we have

[formula]

with [formula], [formula], [formula], [formula], and if k  >  0 then [formula].

Propositions [\ref=fritzchen] and [\ref=fritz] show that [formula] has the form [formula] with [formula]. The other assertions are a direct consequence: [formula], [formula], [formula], and if k  >  0, then [formula].

Let us call a slope [formula] semi-horocyclic, if there is a number k such that tku is horocyclic. Clearly, if such a k exists, then we have [formula], so k is unique.

Formally, Statement [\ref=ra] does not follow from assertion in Proposition [\ref=fritz], but analyzing its proof shows that all arithmetic computations concern only a constant number of integers of constant size. This can be done in the finite control. For accepting a length-lexicographical normal form, we do not need any output, we just have to check that the input agrees locally with a potential output. Again, this can be done in the finite control. The result follows.

Statement [\ref=rb] follows from [\ref=ra] because a test whether a slope is semi-horocyclic can be done by counting modulo p.

Statement [\ref=rc] follows from [\ref=rb], we simply have to check additionally that the number of t and T match. This can be done by a deterministic (one-counter) pushdown automaton, which translates to an unambiguous linear context-free grammar. The growth series of unambiguous linear context-free languages is rational, [\cite=MR42:4343].

Statement [\ref=rc] is essentially a result due to Freden et al., see [\cite=fcs09]. Statement [\ref=ra] is slightly more general than [\cite=fcs09] because our result holds for all p and q. There is a crucial difference for p|q. It is only when p|q that we can test with a push-down automaton whether an input word [formula] is horocyclic, see [\cite=fcs09]. So we need this as a promise in order to produce horocyclic words with the sort of finite transducer we used in the proof of Proposition [\ref=fritz]. A transducer cannot compare [formula]; and even if [formula], it cannot test whether the input is horocyclic. This part is however trivial for p|q by counting modulo p. This is why [\ref=rb] follows from [\ref=ra] easily in this case.

Peak normal forms

We consider [formula] as an infinite alphabet of symbols with the following linear order:

t  <  T  <  α

α  <  β, if [formula]

α  ≤  β, if [formula]

The length-lexicographical order on Δ+ transfers to a linear order [formula] on words of [formula].

Consider a word [formula] such that

For every position [formula] of w we define its height by h(0) = 0 and h(i) = h(i - 1) + 1 if θi'  =  t or h(i) = h(i - 1) - 1 when θi'  =  T. The height of w is defined by [formula].

Again, this notion arises from the shape of the path of u, if reading a T means going downwards and reading a t upwards, as we have done before. Consider e.g. w = ATa2taTattA10TaTa2tta42T:

For the peak normal form we compute some Britton reduction first. Thus, we let w  ~  u and where u is Britton-reduced. Recall that the sequence [formula] depends on w only.

We say that the position i is the peak of u, if i is maximal among all i with h(i) = h(u), i.e. it is the rightmost among the hightest local peaks. Define u1 by We obtain a natural factorization

[formula]

We say that a Britton-reduced word [formula] is the Britton peak normal formof w if

w  ~  u and [formula]

Among all choices satisfying w  ~  u and [formula] we choose the one where u1 is the first in the order [formula], after that we minimize [formula] in the order [formula].

We say that a word v is the peak normal formof w if

[formula]

where [formula] is in Britton peak normal form. The peak normal form of a word w is geodesic, and it is denoted as [formula] in what follows.

Difficult cases and solution for hills

Let [formula] be Britton-reduced. Due to Section [\ref=sec:ghw] we can compute the norm [formula] and length-lexicographical normal forms for each αi. Unfortunately, we are still not able to compute a geodesic for u efficiently, in general. But at least we can identify difficult cases and solve the the problem for so-called hills. A hill is a word w such that we have

[formula]

for some u and [formula].

Note that all horocyclic words are hills, so their length-lexicographical normal form is a hill representation. It is clear that w is a hill if and only if its Britton reduction already has the form [formula].

We show that we can compute the peak normal form for hills w very efficiently, see also [\cite=elder09linear]. If w is not a hill, then we can in linear time reduce the computation of the peak normal form of w to the the computation of the peak normal form of so-called difficult words, which are defined below.

For p|q we will solve the remaining difficult cases in the next section.

In this paper we call a word w difficult, if its Britton reduction is [formula] with θ1  =  T and θk  =  t, in other words it has the form αTvtβ.

Note that every Britton-reduced word u has a unique representation

[formula]

where either D  =  δ is horocyclic (making u a hill) or D = αTvtβ, i.e. D is difficult.

Assume that we have an algorithm that computes peak normal forms for difficult words. Let T(d) denote the maximal time to compute [formula] for [formula] for [formula]. We assume that T(d + c)∈O(T(d)) if c is a constant. We will show later that this assumption is justified in the case p|q. It remains reasonable in general, since it holds for every sensible complexity bound, such as polynomials or singly exponential functions.

The following result generalizes Proposition [\ref=fritz]. For its proof we use the constant r as defined in Eq. [\ref=eq:fred].

Let [formula] be Britton-reduced with D either horocyclic ([formula]) or D difficult.

If D is horocyclic, then we can compute the peak normal form [formula] in linear time.

If D is difficult, then we can compute the peak normal form [formula] in

[formula]

Applying a greedy algorithm similar to the one used in the proof of Proposition [\ref=fritzchen] we can ensure that [formula] for all 1  ≤  i  ≤  k, 1  ≤  j  ≤  m. Doing this, D might become longer, but this doesn't affect the case 1.) since we have a linear time algorithm for horocyclic words. In case 2.) it suffices to proove a time bound of [formula].

Now let

[formula]

By induction on i + j we prove that the theorem holds for every word u(i,j,ρ,δ) with [formula].

If i + j = 0, we need to compute the peak normal form of ρDδ, a word of length at most [formula]. If D is horocyclic, Corollary [\ref=cor:horopolytime] tells us that this can be done in linear time. If D is difficult, then we need [formula] which, by our assumption on T, is bounded by [formula].

Now consider i + j > 0. By symmetry we may assume that i > 0. Since D and u(i,j,ρ,δ) are Britton-reduced, [formula] starts with γt and we have [formula]. In addition, [formula], since [formula]. So, since the peak is inside of D, like in the horocyclic case, we have

[formula]

where the minimum is taken over all γ and [formula] such that [formula] and ρ  =  γ  +  μq and [formula]. Again, since ρ∈R, we have [formula], so induction applies.

For the implementation we use again a table of size [formula]. It stores the length information

[formula]

as well as the ordering between various words [formula] and [formula] as a linear order on R.

This allows the minimum search in constant time by table lookup in a table of constant size with constant size entries. Indeed the ordering between [formula] and [formula] is dominated by the length and next by the ordering between γt and δt. For γt  =  δt we can refer to the ordering between [formula] and [formula].

The table update is possible in constant time, too. The output is produced from right to left in this phase.

Let w be a hill. Then we can compute the peak normal form [formula] in linear time.

The proof of the following Corollary [\ref=peaknfhill] is rather technical. We do not use the result anywhere, so we leave its proof to the interested reader.

Let p divide q. Then the set of hills in peak normal form

[formula]

is a deterministic (and unambiguous) context-free language. Its growth series is a rational function.

Complete solution when p divides q

From now on we assume that p divides q. We give an algorithm for computing geodesics of any element in BS(p,q) which runs in quadratic time, assuming that arithmetic operations in [formula] take constant time. One reason why things simplify is that we have a canonical mapping

[formula]

which is induced by mapping a Britton-reduced word [formula] to: Using the confluent string rewriting system BS, we see that, in particular, the sequence [formula] depends on the image of u in [formula], only.

Recall that according to Eq. [\ref=eq:lp] the number of sinks is denoted by s(w). We have [formula]. Theorem [\ref=thm:main] is the main result of the paper.

Let p be a divisor of q. Let [formula] be an input word. Then we can compute a geodesic and its geodesic length in quadratic time [formula].

The rest of the paper is devoted to proving this result. The formal proof of Theorem [\ref=thm:main] is postponed to Section [\ref=thisistheendmyfriend]

We may start with a word [formula] such that

Recall the definition of the height from Section [\ref=sec:pnf]. The word w is called a valley, if h(u) = 0 and h(k) = 0.

A Britton reduction cannot increase the height and leaves the height of the last position invariant. Therefore, whether or not a word is a valley can be checked on its Britton reduction.

Valleys are generated by the following context-free grammar where S is an axiom:

The following lemma can be based on this grammar. The proof is straightforward, but it uses in a crucial way that p|q.

Let p|q. Let v be a valley. Then pv  ~  vp.

We have p + α  =  α  +  p in [formula]. If u  =  vw and v, w are valleys, then, by induction, pvw  ~  vpw  ~  vwp. If v  =  αTwβt, then

[formula]

Reduction to valleys

Remember that we assume p|q and it only remains to compute peak normal form for difficult Britton-reduced words u  =  αTvtβ. Let [formula]. There is a unique [formula] such that [formula] is a valley. The word [formula] is still Britton-reduced! By Corollary [\ref=gunnar] we can compute the peak normal form [formula] in quadratic time. The word [formula] has the form [formula]. Now, the sequence [formula] begins with [formula]. In other words, we obtain [formula]. Each of the first [formula] positions finds a matching position greater than [formula] of the same height. So, we can shift all integers αi for [formula] to the right by Lemma [\ref=comval] without increasing the length. Hence, the peak normal form begins actually with [formula]. For m = 0 we conclude that [formula] and we are done.

It remains to compute [formula] for m > 0. In this case we write

[formula]

where γ is the integer on the (rightmost) peak of [formula], which is also the (rightmost) peak of u. The peak of u is not the last position in u, because m > 0. Hence, u2 is a valley which begins with the letter T. Moreover, we may assume that either u1  =  0 or it ends with t.

Now we concentrate on the valley γu2. This time we compute, again in quadratic time the peak normal form from right to left. This means we compute

[formula]

where v2 begins with T.

We claim that [formula]. Indeed, let [formula] where v2' begins with T, π(v2)  =  π(v2') and either v1  =  0 or v1 ends in t.

Obviously, v1δv2  ~  v1'δ'v2' and [formula]. Now, [formula], hence [formula] and therefore v1' = v1.

As we have [formula] and v1' = v1 we must have [formula] and [formula]. Now, δv2  ~  δ'v2' and hence γu2  =  δv2tm  ~  δ'v2'tm. We conclude δv2  =  δ'v2', and finally δ  =  δ'.

Standard valleys

A word V is called a standard valley, if [formula] is a Britton-reduced valley such that β  =  0, [formula] for all 1  ≤  i  ≤  k, and [formula] whenever 1  ≤  i  ≤  k and θi  =  T.

Note that non-trivial standard valley end in the letter t. By Section [\ref=sec:rtov] we may assume that we start the computation of a peak normal form with a Britton-reduced valley. The next lemma is a key step for the sequel.

Let p|q and v be Britton-reduced valley, then we find in linear time a standard valley V and an integer [formula] such that v  ~  Vγ.

First note that Vγ is always Britton-reduced, because a non-trival standard valley ends in the letter t.

For [formula] we can choose V = 0.

Let v = uw where u, w are shorter valleys. By induction, there are a standard valley U and [formula] such that u  ~  Uβ and Uβ is Britton-reduced. Hence v  ~  Uβw and βw is a Britton-reduced valley. By induction, there are a standard valley W and [formula] such that v  ~  Uβw  ~  UWγ.

Let v  =  αTuβt. Then u is a Britton-reduced valley; by induction, there are a standard valley U and [formula] such that u  ~  Uδ. Write α  =  μp  +  α' with 0  ≤  α'  <  p, then we have

[formula]

Write δ  +  μq  +  β  =  νq  +  β' with 0  ≤  β'  <  q, then we have

[formula]

The word V  =  α'TUβ't is a standard valley.

By Lemma [\ref=lem:hugo] it is enough to compute geodesic normal forms for words u  =  Vw where V is a standard valley and w  ~  γ is horocyclic. Again, this can be done with a dynamic programming approach as we demonstrate in the next subsection.

Computing geodesics for Vw

In this section V is always a standard valley and w is word such that tw is Britton-reduced.

Every standard valley can be generated by the following context-free grammar:

Here S is the axiom and α, β denote intergers which are also viewed as terminal symbols and satisfy [formula] and [formula]. Actually, the grammar produces non-standard valley as well, because we can produce valleys which are not Britton-reduced. But this is not important for what follows.

The number of sinks (c.f. Eq. [\ref=eq:lp]) of a standard valley V admits a nice recursion:

We now choose a constant r similar as in Eq. [\ref=eq:otto], but this time using the constant c = 3q - 2. More precisely, we let [formula] be minimal such that

[formula]

The next step is to define for each standard valley V a range [formula] such that [formula]. The precise definition and necessary properties of R(V) are determined by the next rather technical lemma.

Let p|q and let r be the constant of Eq. [\ref=const]. Given a standard valley V as input, we can (define and) compute in linear time a range R(V) such that the following two properties hold:

[formula].

For all ρ∈R(V) there is a standard valley Vρ with V  ~  Vρρ.

For V = 0 define [formula].

Let V = UW and U  ≠  0  ≠  W. We define

[formula]

Clearly, ρ∈R(V) implies [formula].

Let σ∈R(U) and τ∈R(W). As [formula] we can write

[formula]

Let V  =  αTUβt. For σ∈R(U) consider in a first step all values α' with α  =  εp  +  α' and [formula]. We know [formula]. We can write

[formula]

Note that [formula]. Thus σ leads to some values β' and hence some values ρ such that σ  +  εq + β  =  μq  +  β' and [formula] and ρ  =  μp. Note that

[formula]

We define R(V) to be the set of all ρ which are possible outcomes for some σ∈R(V).

Of course, we can write

[formula]

Let p|q. We can design a quadratic time algorithm running in time [formula] which solves the following problem.

Input: A standard valley V

Problem: Compute for all ρ∈R(V) words Vρ in peak normal form such that the following condition is satisfied.

For all w, where tw is Britton-reduced, it holds:

[formula]

Note that for standard valley the length-lexicographical ordering coincides with ordering in peak normal form. Thus, if we wish to test later whether [formula], it is enough to remember the length-lexicographical ordering between prefixes of the same length, and in case they are equal we can compare suffixes. During the proof we will point out where this is used.

For V = 0 we let V0  =  0.

Let V = UW and U  ≠  0  ≠  W. We have

[formula]

for some σ∈R(U) and τ∈R(W). Thus, for each ρ we have:

[formula]

The minimum search is a little tricky, because Uσ's may have different length so that we are forced to scan through the word Wτ. The overall time we need for these comparisons can be bounded however by [formula] by similar techniques as used above in other proofs. (For polynomial time results such a tuning is not necessary, and can be omitted.) For creating smaller tables we used inductively the time [formula] We need another term O(s(U)s(W)) for computing the length [formula] and, in any case, we consider all σ∈R(U) and all τ∈R(V).

The time we need to do this for all ρ∈R(V) is bounded by

[formula]

This is within our time bound, because

[formula]

Let V  =  αTUβt. We have

[formula]

for some σ∈R(U) and some α' with α  =  εp  +  α' and [formula] and [formula].

Now,

[formula]

for some β' and ρ such that σ  +  εq + β  =  μq  +  β' and [formula] and ρ  =  μp.

Thus, for each ρ we may define:

[formula]

where the minimum is taken over all σ∈R(U), [formula], and [formula] satisfying:

[formula]

The time we need to do this for all ρ∈R(V) is bounded by

[formula]

This is within our time bound, because s(U) = s(V) and [formula].

Let p|q. We can design a quadratic time algorithm running in time [formula] which solves the following problem.

Input: A valley v

Problem: Compute the peak normal form [formula].

The Britton reduction of a valley is a valley and can be computed in linear time, keeping the integers in binary notation. Again in linear time we find a standard valley V and [formula] such that v  ~  Vγ. Theorem [\ref=whou] yields

[formula]

By Proposition [\ref=fritz] [formula] can be computed in linear time.

The final step takes time [formula] because [formula].

Proof of Theorem [\ref=thm:main]

We are now in a position to complete the proof of the main Theorem [\ref=thm:main]. Let [formula] be the input word. First we rewrite w as a word in [formula] and compute its Britton reduction u in linear time. We have [formula] and s(u)  ≤  s(w). Next, u is partitioned into [formula], where D is horocyclic or difficult. Again, we have [formula] and s(D)  ≤  s(u). In any case, the peak of u is inside D, so, using the reduction given in Theorem [\ref=thm:otto], it is sufficient to compute the peak normal form of a constant number of horocyclic or difficult words D' with [formula] and s(D')  =  s(D) and r is a constant. From that we get the peak normal form of u in linear time.

If D' is horocyclic, the peak normal form equals the length-lexicographical normal form which can be found in linear time, as demonstrated in Proposition [\ref=fritz].

For the case where D' is difficult, we have shown in Section [\ref=sec:rtov], that we can reduce the computation of the peak normal form to the computation of two valleys. The reduction takes linear time. Finally peak normal forms for all valleys under consideration can be found in quadratic time [formula] using Corollary [\ref=gunnar]. [formula]

Conclusion

We have seen how to compute the geodesic peak normal form in quadratic time in the case p|q. Actually, we have shown that the uniform problem is decidable in polynomial time. The uniform problem takes as input a word [formula] and two integers p and q written in unary with p|q. As the values r defined in Eqs. [\ref=eq:fred] and [\ref=const] are polynomial in q, our quadratic time non-unifom algorithm yields a polynomial time uniform algorithm.

For the general case, where p does not divide q, it remains to compute geodesics for difficult words, i.e., those, for which the t-sequence of the Britton reduction starts with t- 1 and ends with t.

It is open whether the remaining problem is in P or whether it is Co-NP complete or whether the complexity is somewhere in between.

stop

Appendix

Example: Computing length-lexicographical normal form of horocyclic elements

We give an example to illustrate how our algorithm for finding the length-lexicographical normal form of horocyclic elements works. Suppose we have p = 1, q = 3 and we want to find the length-lexicographical normal form of the word (of length 63)

[formula]

We proceed in several steps.

Now let's consider the optimized variant from the second part fo the proof. The computational steps are essentially the same, but only a constant amount of data is stored. For example for i = 1 we have [formula], so after having computed the column [formula] in Table [\ref=tab:horo1], we can cut off the first 5 letters of every entry, save their lexicographical order as an order on R (- 4 <  - 3 =  - 2 =  - 1 < 0 = 1 < 2 = 3 = 4), and output them. The complete output of the algorithm is shown in Table [\ref=tab:horo2].

Following the pointers and reading off the result, starting at (ρ,i) = (1,3), gives [formula]. Thus, we have

[formula]