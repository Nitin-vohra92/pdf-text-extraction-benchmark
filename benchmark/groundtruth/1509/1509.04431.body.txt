Lemma Corollary Definition Example Proposition Remark

Embedded discontinuous Galerkin transport schemes with localised limiters

Introduction

Recently there has been a lot of activity in the development of finite element methods for numerical weather prediction (NWP), using continuous (mainly spectral) finite elements as well as discontinuous finite elements [\citep=fournier2004spectral] [\citep=thomas2005ncar] [\citep=dennis2011cam] [\citep=kelly2012continuous] [\citep=kelly2013implicit] [\citep=marras2013simulations] [\citep=brdar2013comparison] [\citep=bao2015horizontally]; see [\citet=marras2015review] for a comprehensive review. A key aspect of NWP models is the need for transport schemes that preserve discrete analogues of properties of the transport equation such as monotonicity (shape preservation) and positivity; these properties are particularly important when treating tracers such as moisture. Discontinuous Galerkin methods can be interpreted as a generalisation of finite volume methods and hence the roadmap for the development of shape preserving and positivity preserving methods is relatively clear (see [\citet=cockburn2001runge] for an introduction to this topic). However, this is not the case for continuous Galerkin methods, and so different approaches must be used. In the NWP community, limiters for CG methods have been considered by [\citet=marras2012variational], who used first-order subcells to reduce the method to first-order upwind in oscillatory regions, and [\citet=guba2014optimization], who exploited the monotonicity of the element-averaged scheme in the spectral element method to build a quasi-monotone limiter.

In this paper, we address the problem of finding suitable limiters for the partially continuous finite element spaces for tracers that arise in the framework of compatible finite element methods for numerical weather prediction models [\citep=cotter2012mixed] [\citep=cotter2014finite] [\citep=staniforth2013analysis] [\citep=mcrae2014energy]. Compatible finite element methods have been proposed as an evolution of the C-grid staggered finite difference methods that are very popular in NWP. Within the UK dynamical core "Gung-Ho" project, this evolution is being driven by the need to move away from the latitude-longitude grids which are currently used in NWP models, since they prohibit parallel scalability [\citep=staniforth2012horizontal]. Compatible finite element methods rely on choosing compatible finite element spaces for the various prognostic fields (velocity, density, temperature, etc.), in order to avoid spurious numerical wave propagation that pollutes the numerical solution on long time scales. In particular, in three dimensional models, this calls for the velocity space to be a div-conforming space such as Raviart-Thomas, and the density space is the corresponding discontinuous space. Many current operational forecasting models, such as the Met Office Unified Model [\citep=davies2005new], use a Charney-Philips grid staggering in the vertical, to avoid a spurious mode in the vertical. When translated into the framework of compatible finite element spaces, this requires the temperature space to be a tensor product of discontinuous functions in the horizontal and continuous functions in the vertical (more details are given below). Physics/dynamics coupling then requires that other tracers (moisture, chemical species etc.) also use the same finite element space as temperature.

A critical requirement for numerical weather prediction models is that the transport schemes for advected tracers do not lead to the creation of new local maxima and minima, since their coupling back into the dynamics is very sensitive. In the compatible finite element framework, this calls for the development of limiters for partially-continuous finite element spaces. Since there is a well-developed framework for limiters for discontinuous Galerkin methods [\citep=biswas94parallel] [\citep=burbeau01:problem] [\citep=cockburn2001runge] [\citep=hoteit04:newgalerkin] [\citep=krivodonova04:shockdg] [\citep=tu05:slope] [\citep=kuzmin2010vertex] [\citep=zhang2011maximum], in this paper we pursue the three stage approach of (i) injecting the solution into an embedding discontinuous finite element space at the beginning of the timestep, then (ii) applying a standard discontinuous Galerkin timestepping scheme, before finally (iii) projecting the solution back into the partially continuous space. If the discontinuous Galerkin scheme is combined with a slope limiter, the only step where overshoots and undershoots can occur is in the final projection. In this paper we describe a localised limiter for the projection stage, which is a modification of element-based limiters [\citep=lohner1987finite] [\citep=fctools] previously applied to remapping in [\citet=Lohner2008] [\citet=kuzmin2010failsafe]. This leads to a locally bounded advection scheme when combined with the other steps.

The main results of this paper are:

The introduction of an embedded discontinuous Galerkin scheme which is demonstrated to be linearly stable,

The introduction of localised element-based limiters to remove spurious oscillations when projecting from from discontinuous to continuous finite element spaces, which are necessary to make the whole transport scheme bounded,

When combined with standard limiters for the discontinuous Galerkin stage, the overall scheme remains locally bounded, addressing the previously unsolved problem of how to limit partially continuous finite element spaces that arise in the compatible finite element framework.

Our bounded transport scheme can also be used for continuous finite element methods, although other approaches are available that do not involve intermediate use of discontinuous Galerkin methods.

The rest of the paper is structured as follows. The problem is formulated in Section [\ref=sec:formulation]. In particular, more detail on the finite element spaces is provided in Section [\ref=sec:spaces]. The embedded discontinuous Galerkin schemes are introduced in Section [\ref=sec:embedded]; it is also shown that these schemes are stable if the underlying discontinuous Galerkin scheme is stable. The limiters are described in Section [\ref=sec:bounded]. In Section [\ref=sec:numerics] we provide some numerical examples. Finally, in Section [\ref=sec:outlook] we provide a summary and outlook.

Formulation

Finite element spaces

We begin by defining the partially continuous finite element spaces under consideration. In three dimensions, the element domain is constructed as the tensor product of a two-dimensional horizontal element domain (a triangle or a quadrilateral) and a one-dimensional vertical element domain (i.e., an interval); we obtain triangular prism or hexahedral element domains aligned with the vertical direction. For a vertical slice geometry in two dimensions (frequently used in testcases during model development), the horizontal domain is also an interval, and we obtain quadrilateral elements aligned with the vertical direction.

To motivate the problem of transport schemes for a partially continuous finite element space, we first consider a compatible finite element scheme that uses a discontinuous finite element space for density. This is typically formed as the tensor product of the DGk space in the horizontal (degree k polynomials on triangles or bi-k polynomials on quadrilaterals, allowing discontinuities between elements) and the DGl space in the vertical. We consider the case where the same degree is chosen in horizontal and vertical, i.e. k = l, although there are no restrictions in the framework. We will denote this space as DGk  ×  DGk.

In the compatible finite element framework, the vertical velocity space is staggered in the vertical from the pressure space; the staggering is selected by requiring that the divergence (i.e., the vertical derivative of the vertical velocity) maps from the vertical velocity space to the pressure space. This means that vertical velocity is stored as a field in DGk  ×  CGk + 1 (where CGk + 1 denotes degree k + 1 polynomials in each interval element, with C0 continuity between elements). To avoid spurious hydrostatic pressure modes, one may then choose to store (potential) temperature in the same space as vertical velocity (this is the finite element version of the Charney-Phillips staggering). Figure [\ref=fig:com-fem] provides diagrams showing the nodes for these spaces in the case k = 1. Details of how to automate the construction of these finite element spaces within a code generation framework are provided in [\citet=mcrae2014automated].

Monotonic transport schemes for temperature are often required, particularly in challenging testcases such as baroclinic front generation. Further, dynamics-physics coupling requires that other tracers such as moisture must be stored at the same points as temperature; many of these tracers are involved in parameterisation calculations that involve switches and monotonic advection is required to avoid spurious formation of rain patterns at the gridscale, for example. Hence, we must address the challenge of monotonic advection in the partially continuous DGk  ×  CGk + 1 space.

In this paper, we shall concentrate on the case of DG1  ×  CG2. This is motivated by the fact that we wish to use standard DG upwind schemes where the advected tracer is simply evaluated on the upwind side; the lowest order space DG0  ×  CG1 leads to a first order scheme in this case. We may return to higher order spaces in future work.

Embedded Discontinuous Galerkin schemes

In this section we describe the basic embedded transport scheme as a linear transport scheme without limiters. The scheme, which can be applied to continuous or partially-continuous finite element spaces, is motivated by the fact that limiters are most easily applied to fully discontinuous finite element spaces. We call the continuous or partially-continuous finite element space V, and let V̂ be the smallest fully discontinuous finite element space containing V. A diagram illustrating V and V̂ in our case of interest, namely the finite element space for temperature described in the previous section, is shown in Figure [\ref=fig:vtheta-vthetadg].

Before describing the transport scheme, we make a few definitions.

For u∈V  ⊂  V̂, we denote I:V  →  V̂ the natural injection operator.

The injection operator does nothing mathematically except to identify Iu as a member of V̂ instead of just V. However, in a computer implementation, it requires us to expand u in a new basis. This can be cheaply evaluated element-by-element.

Let A:V̂  →  V̂ denote the operator representing the application of one timestep of an L2-stable discontinuous Galerkin discretisation of the transport equation.

For example, A could be the combination of an upwind discontinuous Galerkin method with a suitable Runge-Kutta scheme.

For û∈V̂ we define the projection P:V̂  →  V by

[formula]

In a computer implementation, this requires the inversion of the mass matrix associated with V.

We now combine these operators to construct our embedded discontinuous Galerkin scheme.

Let V  ⊂  V̂, with injection operator I, projection operator P and propagation operator A. Then one step of the embedded discontinuous Galerkin scheme is defined as

[formula]

The L2 stability of this scheme is ensured by the following result.

Let α > 0 be the stability constant of the the propagation operator A, such that

[formula]

where [formula] denotes the L2 norm. Then, the stability constant α* of the embedded discontinuous Galerkin scheme on V satisfies α*  <  α.

[formula]

as required. In the last inequality we used the fact that [formula], which is a consequence of the Riesz representation theorem.

For a given velocity field [formula], let AΔt denote the propagation operator for timestep size Δt. Let Δt* denote the critical timestep for AΔt, i.e.,

[formula]

Then, the critical timestep size [formula] for the embedded discontinuous Galerkin scheme PAΔtI is at least as large as Δt*.

If Δt  ≤  Δt*, then

[formula]

as required.

Hence, the embedded DG scheme is L2 stable whenever the propagation operator A is.

For the numerical examples in this paper, we consider the case V = DG1  ×  CG2 (our temperature space) and V̂ = DG1  ×  DG2. For a given divergence-free velocity field [formula], defined on the domain Ω and satisfying [formula] on the domain boundary ∂Ω, A represents the application of one timestep applied to the transport equation

[formula]

discretised using the usual Runge-Kutta discontinuous Galerkin discretisation (see [\citet=cockburn2001runge] for a review). To do this, first we define L:V̂  →  V̂ by

[formula]

where Γ is the set of interior facets in the finite element mesh, with the two sides of each facet arbitrarily labelled by +   and -  , the jump operator denotes [formula], and where [formula] is the upwind value of θ defined by

[formula]

Then, the timestepping method is defined by the usual 3rd order 3 step SSPRK timestepping method [\citep=shu1988efficient],

[formula]

Since the finite element space V is discontinuous in the horizontal, the projection P:V̂  →  V decouples into independent problems to solve in each column (i.e., the mass matrix for DG1  ×  CG2 is column-block diagonal).

Bounded transport

Next we wish to add limiters to the scheme. This is done in two stages. First, a slope limiter should be incorporated into the V̂ propagator, A; we call the resulting scheme Ã. A suitable limiter is defined in Section [\ref=sec:dg_limiter] After replacing A with Ã, the only way that the solution can generate overshoots and undershoots is after the application of the projection P. To control these unwanted oscillations, we apply a (conservative) flux correction to the projection, referred to as flux corrected remapping [\citep=kuzmin2010failsafe]

Slope limiter for the propagator A

In principle, any suitable discontinuous Galerkin slope limiter can be used in the propagator A. In this paper we used the vertex-based slope limiter of [\citet=kuzmin2010vertex]. This limiter is both very easy to implement, and supports a treatment of the quadratic structure in the vertical. Before presenting the limiter for V̂ = DG1  ×  DG2 (recall that this is the space we must use to obtain a transport scheme for our DG1  ×  CG2 space used for temperature), we first review the concepts in the simpler case of V̂ = DG1  ×  DG1. The basic idea for θ∈V̂ = DG1  ×  DG1 is to write

[formula]

where [formula] is the projection of θ into DG0, i.e. in each element [formula] is the element-averaged value of θ. Then, for each vertex i in the mesh, we compute maximum and minimum bounds θmax ,i and θmin ,i by computing the maximum and minimum values of [formula] over all the elements that contain that vertex, respectively. In each element e we then compute a constant 0  ≤  αe  ≤  1 such that the value of

[formula]

at each vertex i contained by element e. The optimal value of the correction factor αe can be determined using the formula of [\citet=barthjesp1989]

[formula]

where Ne is the set of vertices of element e and [formula] is the unconstrained value of the DG1 shape function at the i-th vertex.

For our temperature space DG1  ×  DG2 applied to numerical weather prediction applications, we assume that we have a columnar mesh. This means that the prismatic elements are stacked vertically in layers, with vertical sidewalls (but possibly with tilted top and bottom faces to facilitate terrain-following meshes, so that the elements are trapezia). This allows us to adopt a Taylor basis in the vertical, i.e. the basis in local coordinates is the tensor product of a Taylor basis in the vertical with a Lagrange basis in the horizontal. We write

[formula]

where θ1∈DG1  ×  DG1, and satisfies the following conditions:

1  =  ,

[formula] and [formula] take the same values along the horizontal element midline in local coordinates.

Then, [formula] whilst [formula].

First, we limit the quadratic component in the vertical (the third term in Equation [\eqref=eq:2d-decomp]), performing the following steps.

In each element, compute [formula], and evaluate the derivative at the horizontal cell midline to obtain [formula]. If the quadratic component θ  -  θ1 is limited to zero then [formula] will become equal to [formula].

In each column, at each vertex i, compute bounds [formula] and [formula] by taking the maximum value of [formula] at that vertex in the elements sharing that vertex in the column.

In each element, compute element correction factors α1,e according to

[formula]

This approach can also be extended to meshes in spherical geometry for which all side walls are parallel to the radial direction, having replaced [formula] by the radial derivative.

Second, we apply the vertex-based limiter to the DG1  ×  DG1 component θ1, obtaining limiting constants α0. We then finally evaluate

[formula]

To reduce diffusion of smooth extrema, it was recommended in [\citet=kuzmin2010vertex] to recompute the α0 coefficients according to

[formula]

However, this does not work in the case of DG1  ×  DG2 since there is no quadratic component in the horizontal direction, and hence nonsmooth extrema in the horizontal direction will not be detected. A possible remedy is to use α0,e for the horizontal gradient and max (α0,e,α1,e) for the vertical gradient or to limit the directional derivatives separately using an anisotropic version of the vertex-based slope limiter ([\citet=dg_anisotropic]).

This limiter is applied to the input to Ã and after each SSPRK stage, to ensure that no new maxima or minima appear in the solution over the timestep.

Flux corrected remapping

The final step of the embedded DG scheme is the projection P of the DG solution (which we denote here as [formula]) back into V. We obtain a high-order, but oscillatory solution, which we denote θH. To obtain a bounded solution, we introduce a localised element-based limiter that blends θH with a low-order bounded solution θL, such that high-order approximation is preserved wherever overshoots and undershoots are not present.

First, we must obtain the low-order bounded solution. Using the Taylor basis, we remove the quadratic part of [formula], to obtain ∈DG1  ×  DG1. A low-order bounded solution can then be obtained by applying a lumped mass projection,

[formula]

where the lumped mass M is defined by

[formula]

the projection matrix Q is defined by

[formula]

[formula] is a Lagrange basis for DG1  ×  DG1 and {φi}ni = 1 is a Lagrange basis for DG1  ×  CG2.

The lumped mass M and projection matrix Q both have strictly positive entries. This means that for each 1  ≤  i  ≤  n, the basis coefficient θLi is a weighted average of values of [formula] coming from elements that lie in S(i), the support of φi. The weights are all positive, and hence the value of θLi is bounded by the maximum and minimum values of [formula] in S(i). Hence, no new maxima or minima appear in the low order solution.

Next, we combine the low order and high order solutions element-by-element, in a process called element-based flux correction. Element based flux correction was introduced in [\citep=lohner1987finite] and formulated for conservative remapping in [\citep=Lohner2008] [\citep=kuzmin2010failsafe]. Here, we use a new localised element-based formulation, where element contributions to the low and high order solutions are blended locally and then assembled.

To formulate the element-based limiter, we note that the consistent mass counterpart of ([\ref=l2lumped]) is given by

[formula]

where

[formula]

First, by repeated addition and subtraction of terms, we write (with no implied sum over the index i)

[formula]

where

[formula]

This can be decomposed into elements to obtain

[formula]

where

[formula]

Importantly, the contributions fei of element e to its vertices sum to zero, since

[formula]

It follows that the total mass of the solution remains unchanged (i.e., [formula]) if all contributions of the same element are reduced by the same amount.

We can then choose element limiting constants αe to get

[formula]

where 0  ≤  αe  ≤  1 is a limiting constant for each element which is chosen to satisfy vertex bounds obtained from the nodal values of [formula].

The bounds in each vertex are obtained as follows. First element bounds θemax and θemin are obtained from [formula] by maximising/minimising over the vertices of element e. Then for each vertex i, maxima/minima are obtained by maximising/minimising over the elements containing the vertex:

[formula]

The correction factor αe is chosen so as to enforce the local inequality constraints

[formula]

Summing over all elements, one obtains the corresponding global estimate

[formula]

which proves that the corrected value [formula] is bounded by θmax ,i and θmin ,i.

To enforce the above maximum principles, we limit the element contributions fei using

[formula]

This definition of αe corresponds to a localised version of the element-based multidimensional FCT limiter ([\citep=lohner1987finite] [\citep=fctools]) and has the same structure as formula ([\ref=dglim]) for the correction factors that we used to constrain the DG1 approximation. A further advantage of the localised formulation is that the limited fluxes can be built independently in each element, before assembling globally and dividing by the global lumped mass by iterating over nodes.

Numerical Experiments

In this section, we provide some numerical experiments demonstrating the localised limiter for embedded Discontinuous Galerkin schemes.

Solid body rotation

In this standard test case, the transport equations are solved in the unit square Ω = (0,1)2 with velocity field [formula], i.e. a solid body rotation in anticlockwise direction about the centre of the domain, so that the exact solution at time t = 2π is equal to the initial condition. The initial condition is chosen to be the standard hump-cone-slotted cylinder configuration defined in [\citet=leveque96:highres], and solved on a regular mesh with element width h = 1 / 100 and Courant number 0.3. The result, shown in Figure [\ref=fig:solid], is comparable with the result for the DG1 discontinuous Galerkin vertex-based limiter shown in Figure 2 of [\citet=kuzmin2010vertex]; it is free from over- and undershoots and exhibits a similar amount of numerical diffusion. It is also hard to distinguish between the x-direction, where the finite element space is discontinuous, and the y-direction, where the space is continuous. This suggests that we have achieved our goal of constructing a limited transport scheme for our partially-continuous finite element space.

Advection of a discontinous function with curvature

In this test case, the transport equations are solved in the unit square Ω = (0,1)2 with velocity field [formula], i.e. steady translation in the x-direction (which is the direction of discontinuity in the finite element space). The initial condition is

[formula]

This test case is challenging because the height of the "plateau" next to the continuity varies as a function of y (i.e., in the direction tangential to the discontinuity); this means that the behaviour of the limiter is more sensitive to the process of obtaining local bounds.

The equations are integrated until t = 0.4 in a [formula] square grid and Courant number 0.3. The results are showing in Figure [\ref=fig:curvybump]. One can see qualitatively that the degradation in the solution due to the limiter and numerical errors is not too great.

Convergence test: deformational flow

In this test, we consider the advection of a smooth function by a deformational flow field that is reversed so that the function at time t = 1 is equal to the initial condition. As is standard for this type of test, we add a translational component to the flow and solve the problem with periodic boundary conditions to eliminate the possibility of fortuitous error cancellation due to the time reversal.

The transport equations are solved in a unit square, with periodic boundary conditions in the x-direction. The initial condition is

[formula]

and the velocity field is

[formula]

where [formula]. The problem was solved on a sequence of regular meshes with square elements at fixed timestep Δt = 0.000856898, and the L2 error was computed. A plot of the errors is provided in Figure [\ref=fig:convergence]. As expected, we obtain second-order convergence (the quadratic space in the vertical does not enhance convergence rate because the full two-dimensional quadratic space is not spanned).

Summary and Outlook

In this paper we described a limited transport scheme for partially-continuous finite element spaces. Motivated by numerical weather prediction applications, where the finite element space for temperature and other tracers is imposed by hydrostatic balance and wave propagation properties, we focussed particularly on the case of tensor-product elements that are continuous in the vertical direction but discontinuous in the horizontal. However, the entire methodology applies to standard C0 finite element spaces. The transport scheme was demonstrated in terms of convergence rate on smooth solutions and dissipative behaviour for non-smooth solutions in some standard testcases.

Having a bounded transport scheme for tracers is a strong requirement for numerical weather prediction algorithms; the development of our scheme advances the practical usage of the compatible finite element methods described in the introduction. The performance of this transport scheme applied to temperature in a fully coupled atmosphere model will be evaluated in 2D and 3D testcases as part of the "Gung Ho" UK Dynamical Core project in collaboration with the Met Office. In the case of triangular prism elements we anticipate that it may be necessary to modify the algorithm above to limit the time derivatives as described in [\citet=kuzmin2013slope].

A key novel aspect of our transport scheme is the localised element-based FCT limiter. This limiter has much broader potential for use in FCT schemes for continuous finite element spaces, which will be explored and developed in future work.

Acknowledgements

Colin Cotter acknowledges funding from NERC grant NE/K006789/1. Dmitri Kuzmin acknowledges funding from DFG grant KU 1530/12-1.