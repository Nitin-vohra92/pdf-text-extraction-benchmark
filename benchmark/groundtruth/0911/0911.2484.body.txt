Introduction

In recent years, motivated primarily by the proliferation of wireless networks and GPS devices, much research has been done on routing algorithms for geometric networks [\cite=gior03]. In this research a network is modelled as a geometric graph G = (V,E) whose vertex set V is a set of points in [formula]. We say that a routing algorithm A works for G if, for any pair of vertices s,t∈V, the algorithm always find a path from s to t in a finite number of steps.

The research on geometric routing algorithms largely focuses on utilizing geometric properties of a class of geometric graphs to reduce the complexity of, and information required by, routing algorithms. For example, when G is the unit disk graph of the points in V, then an algorithm, called Face-1, of Bose et al [\cite=bose01] (see also Karp and Kung [\cite=kk00]) works for G and requires no preprocessing of G or additional state information at the vertices of G and requires only a constant size header associated with each packet. An extremely general result in this vein, based on logspace construction of universal exploration sequences, shows that, using a header containing only O( log n) bits, one can visit all the vertices of any graph (and hence reach t) in a polynomial number of steps [\cite=b08].

A particularly interesting and restricted class of routing algorithms are so-called memoryless routing algorithms. A memoryless routing algorithm is one in which the decision about the next edge on the route to t for a packet currently located at node v is based only on the coordinates of v, t, and the neighbourhood, N(v), of v. More precisely, a deterministic memoryless routing algorithm is a function [formula] that satisfies f(v,t,N(v))∈N(v) and f(t,t,N(t))  =  t for all inputs.

Note that a memoryless routing algorithm makes each routing step without using information obtained in previous routing steps and without any global information about G. Memoryless algorithms are different from oblivious routing algorithm [\cite=mr95] which select a path from s to t having total knowledge of G (but without knowledge of other source/destination pairs).

Bose and Morin [\cite=bose04] show that if G is Delaunay triangulation or a regular triangulation then deterministic memoryless routing algorithms, named Greedy and Compass, respectively, work for G. Bose et al [\cite=bose02] subsequently show a stronger result; a deterministic memoryless routing algorithm, named Greedy-Compass, works for any triangulation G.

Memoryless routing algorithms are so simple, elegant, and practical that researchers have spent considerable effort designing geometric embeddings of graphs so that memoryless routing algorithms can be applied to the resulting embeddings. A famous example in this vein is due to Leighton and Moitra [\cite=lm08] who prove that every 3-connected planar graph [formula] admits an embedding G in [formula] such that Greedy works on G. The combination of the embedding and routing algorithm represents a form of compact routing [\cite=l94].

Unfortunately, deterministic memoryless routing algorithms have severe limitations. These stem from the fact that these algorithms can not visit the same vertex more than once without looping forever. Bose et al [\cite=bose04] show that there exists 17 convex subdivisions, [formula], each with 17 vertices such that any deterministic memoryless routing algorithm does not work for at least one of these subdivisions. Thus, convex subdivisions form a class of geometric graphs that are too rich for deterministic memoryless routing algorithms [\cite=bose02].

The same authors [\cite=bose02] [\cite=bose04] observe that randomization can be used to overcome this limitation. A randomized memoryless routing algorithm is one in which the decision about the next edge on the route to t for a packet currently located at node v is based only on v, t, the neighbourhood, N(v), of v, and a sequence B of fresh random bits. More precisely, a randomized memoryless routing algorithm is defined by a function [formula] that satisfies f(v,t,N(v),B)∈N(v) and f(t,t,N(v),B)  =  t for all inputs. The final argument B is a sequence of random bits that are chosen fresh for each step taken by the routing algorithm. Bose et al describe a randomized memoryless algorithm, named Random-Compass, that uses one random bit per step works for any convex subdivision. They do not analyze the efficiency of Random-Compass except to note that, for some convex subdivisions G, and some pairs s,t∈V, the expected number of steps taken by Random-Compass when routing from s to t is Ω(|V|2).

Observe that, by the theory of random walks (c.f. [\cite=mr95]), the expected time required for a random walk on G to travel from a particular vertex s to a particular vertex t is O(n2). Therefore, a random walk is at least as efficient, in the worst case, as the Random-Compass algorithm. Nevertheless, one might expect that Random-Compass is more likely to find short routes, since it uses geometry to find a route that is specifically directed towards the target vertex t. Thus, we might intuit that Random-Compass is a heuristic that is usually better than a random walk and never much worse.

In the current paper, we show that this intuition about Random-Compass could not be further from the truth. Indeed, for any n > 0, there exists a convex subdivision (in fact, a triangulation) G with n vertices and having two vertices s and t such that the expected number of steps taken by Random-Compass when routing from s to t is 2Ω(n). This triangulation has diameter 3.

Next we study whether any randomized memoryless routing algorithm for convex subdivisions can outperform a random walk. We show that, for any randomized memoryless routing algorithm A and any n, there exists a convex subdivision G = G(A) = (V,E) of size n and a pair of vertices s,t∈V such that the expected number of steps taken by A when routing from s to t is Ω(n2). Therefore, at least in the worst-case, no algorithm significantly outperforms a random walk.

A Bad Example for Random-Compass

The Random-Compass algorithm works by using a coin toss to select among the (at most two) neighbours [formula] and [formula] of the current node v that make the minimum and maximum angle, respectively, with the segment vt (see Figure [\ref=fig:random-compass].a). When applied on a convex subdivision G = (V,E), Bose et al show that, in the directed graph G' that contains the edges [formula] and [formula] for all v∈V, there exists at least one directed path P(v,t) from every vertex v to t (see Figure [\ref=fig:random-compass].b). This, and Wald's Equation, immediately imply that the expected time to reach t from any vertex is at most 2n; from any vertex v, Random-Compass has probability at least 1 / 2|P(v,t)|  ≥  1 / 2n - 1 of reaching t by following P(v,t), and the expected number of steps it takes on P(v,t) before falling off P(v,t) is at most 2.

The example in Figure [\ref=fig:bad-unbiased] shows that the above analysis of Random-Compass, although very coarse, is about the best one can do. It shows a geometric graph G whose vertex set has size n = 4k + 1 and whose vertices are organized as a central vertex t and four paths leading from the outer face to t. The space between these paths is triangulated so that, at any point, Random-Compass chooses between an edge that leads one step closer to t or that returns to the outer face.

If we consider the directed graph G' defined above, then we see that, at any point the packet is at some distance i from t and that, it can, with equal probability, move to a vertex of distance i - 1 or move to a vertex (on the outer face) of distance k. If we denote by Ti the expected number of steps required by Random-Compass to reach t given that it is currently at distance i from t, we see that

[formula]

Expanding the value of Tk gives

[formula]

and rewriting this gives Tk  =  2k(2 - 1 / 2k)  =  Ω(2n / 4). This proves:

For any n > 1, there exists a triangulation G having two vertices s and t such that the expected number of steps taken by [formula] when routing from s to t is 2Ω(n).

Note that the base in the exponent can be improved by using a construction with 3 paths instead of 4. In this case, the lower bound becomes Ω(2n / 3). Furthermore, up to a factor of 2, the lower bound on Theorem [\ref=theorem:random-compass] holds for all choices of the source vertex s since, for any vertex s  ≠  t, the expected time to route from s to t is at least (1 / 2)Tk.

A Lower Bound for Any Algorithm

In this section we develop an Ω(n2) lower bound for routing on convex subdivisions using any randomized memoryless routing algorithm A. The outline of the lower bound is as follows: We start with a lemma about Markov chains whose transition graphs are paths. We show that, when starting at the midpoint of the path, there is at most one endpoint of the path that can be reached in subquadratic expected time. This lemma is relevant since, if A finds itself in the interior of a path of degree 2 vertices in G, it will behave like such a Markov chain until it reaches one of the endpoints of this path.

Next, we observe how A behaves on certain paths of degree 2 vertices and show that, because A can only reach one endpoint of any path in subquadratic time, that we can always find a subset of these paths that can be pieced together to form a convex subdivision in which A takes at least quadratic expected time to route from some vertex s to some vertex t.

Markov Chains

Consider a Markov chain on [formula], n  >  1, where transitions only take place between neighbors. If pi,j is the probability of a transition from i to j, then we have

[formula]

[formula]

where [formula] are fixed probabilities. The vector of these probabilities is denoted by π. We will set π1  =  1, πn  =  0, to be consistent, as the extreme states are reflecting. When πi  =  1 / 2 for 2  ≤  i  ≤  n - 1, we obtain a standard random walk on a finite interval with reflecting barriers.

We denote the Markov chain by [formula], and denote the hitting times by Ti,j:

[formula]

For a standard random walk, it is known that

[formula]

[\cite=m73]. The standard random walk is in fact the best possible chain in the following sense:

For any vector of probabilities π, and any n  >  1,

[formula]

The lemma is obviously true if any πi, 2  ≤  i  ≤  n - 1, is either zero or one as that would imply that at least one of the hitting times is infinite. Thus, we assume that all probabilities are strictly in (0,1). It is also trivial if n = 2, so assume n  >  2. Define

[formula]

and note that PiQi  =  1. If needed, we formally set P1  =  Qn  =  0.

We need an explicit formula for [formula]. Let us introduce the chains on [formula] with reflecting barriers at i and n, but with the same πj values associated with non-terminal states. Let T+i,j with j  ≥  i, denote the hitting time from i to j in the chain [formula] defined this way. Clearly,

[formula]

Next,

[formula]

where Wj are independent lengths excursions from n - 1 to n - 1 on the chain {n - 1,n}, and Z (possibly zero) is the number of such excursions. Obviously, Z is geometrically distributed, and [formula]. Because [formula], and because Z is a stopping time, we have, by Wald's identity,

[formula]

This argument is easily extended by induction, and we obtain for 1  ≤  i  <  n - 1,

[formula]

By flipping sides, and denoting by T- the hitting times for the Markov chains on [formula] with reflecting bariers at 1 and i, we obtain in a similar fashion, for 2  <  i  ≤  n,

[formula]

Furthermore, [formula].

With these calculations out of the way, we note that

[formula]

and

[formula]

Clearly,

[formula]

which concludes the proof.

Next we present a simple corollary of Lemma [\ref=lemma:backandforth] that is used in our lower bound.

Consider a random walk with reflecting barriers on [formula], n  >  0. In this chain,

[formula]

We prove this by contradiction. Set c  =  2 / 3. Assume that

[formula]

By Theorem 1,

[formula]

and

[formula]

Observe for this that 0 is not a reflecting barrier, but this makes [formula] only larger, so Theorem 1 does indeed apply. By our assumption, we thus have

[formula]

Let T be the cover time, i.e., the time to visit all states starting from state 0. It is easy to see that

[formula]

where S∈{n, - n} is the first of the two end states reached by the Markov chain. If we condition on the history up to T0,S, we see that

[formula]

Thus,

[formula]

which contradicts our assumption.

The Lower Bound

Let A be a randomized memoryless routing algorithm. Let k be an even integer, let t be the origin, and let [formula] be a path of k collinear vertices such that ak is closer to t than any of [formula] and the three points a1,ak,t make a left turn with [formula] greater than [formula] degrees but less than [formula] (see Figure [\ref=fig:ab].a). Let [formula] be the reflection of A through the line parallel to A that contains t (see Figure [\ref=fig:ab].b). Let A(α), respectively, B(α), denote the path A, respectively, B, rotated by an angle of α about the origin, t.

Define the color of a path [formula] as follows: Imagine running A on the graph consisting of A' and the isolated vertex t, starting at ak / 2'. If A takes Ω(k2) expected time to reach ak' then color A(α) blue, otherwise color A(α) red. Note that Corollary [\ref=cor:markov] implies that, if A(α) is red, then A takes Ω(k2) expected time to reach a1 starting at ak / 2.

Intuitively, a path is red (getting hotter -- closer to t) if A could move quickly from ak / 2 to ak. A path is blue (getting cooler -- further from t) if A could move quickly to a1. Define the color (red or blue) of a path B(α) in the same way.

If there exists α such that A(α) and B(α) are both blue, then there exists a convex subdivision G = (V,E) with |V| = 2k + 1 with vertices s,t∈V such that A takes Ω(k2) steps when routing from s to t.

Let [formula] and [formula]. The convex subdivision G consists of A' and B' as well as the edges a1'b1', ak't and bk't (see Figure [\ref=fig:2blue]). Since A(α) and B(α) both blue, applying A to route from ak / 2' to t will require Ω(k2) expected steps.

If there exists α such that A(α) and B(180 + α) are both red, then there exists a convex subdivision G = (V,E) with |V| = 2k + 1 with vertices s,t∈V such that A takes Ω(k2) steps when routing from s to t.

Let [formula] and [formula]. The convex subdivision G consists of A' and B' as well as the edges ak'bk', a1't and b1't (see Figure [\ref=fig:2red]). Since A(α) and B(180 + α) are red, applying A to route from ak / 2' to t will require Ω(k2) expected steps.

For any integer k > 0 and any memoryless routing algorithm A, there exists a convex subdivision G = (V,E) with |V| = Θ(k) having vertices s,t∈V such that A takes Ω(k2) steps when routing from s to t.

If either of Lemma [\ref=lem:2blue] or Lemma [\ref=lem:2red] apply to A then the proof is complete. Otherwise, observe that the exclusion of these two lemmata implies that, for any α, at least one of A(α) and B(α) is blue. To see this, note that if A(α) is red, then (the exclusion of) Lemma [\ref=lem:2red] implies that B(α + 180) is blue, so (the exclusion of) Lemma [\ref=lem:2blue] implies that A(α + 180) is red, so (the exclusion of) Lemma [\ref=lem:2red] implies that B(α) is blue.

Therefore, there exists 3 blue chains [formula], [formula], and [formula] where X∈{A(0),B(0)}, Y∈{A(120),B(120)} and Z∈{A(240),B(240)}. We can then take G to be the graph containing X, Y, and Z, as well as the edges x1y1, y1z1, z1x1, xkyk, ykzk, zkxk, xkt, ykt, zkt (see Figure [\ref=fig:3blue]). Because X, Y, and Z are all blue, the expected number of steps required to route from xk / 2 to t using A is Ω(k2).

All that remains is to verify that G is indeed a convex subdivision. This is readily established using the fact that the angles [formula], [formula], and [formula], are all between 150 and 180 degrees.

Conclusions

We have shown that the Random-Compass algorithm takes exponential expected time to route on some convex subdivisions and that any randomized memoryless routing algorithm takes at least quadratic time to route on some convex subdivisions. We conclude with two open problems: