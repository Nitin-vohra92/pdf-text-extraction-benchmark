Corollary Lemma Proposition Note Example Counterexample Conjecture Notation Fact

Remark

Definition

Expressing Second-order Sentences in Intuitionistic Dependence Logic

Introduction

Dependence Logic (D), as a new approach to independence friendly logic (IF-logic) [\cite=HintikkaSandu1989], was introduced in [\cite=Van07dl]. Hodges gave a compositional semantics for IF-logic in [\cite=Hodges1997a], [\cite=Hodges1997b], trump semantics (or team semantics). Recent research by Abramsky, Väänänen [\cite=AbVan09] generalized Hodges' construction for team semantics (or trump semantics) and introduced BID-logic, which extends dependence logic and includes both intuitionistic implication and linear implication, as well as intuitionistic disjunction. We call the intuitionistic fragment of BID-logic "intuitionistic dependence logic (ID)". In this paper, we study the expressive power of sentences of intuitionistic dependence logic. By the method of [\cite=Enderton1970] and [\cite=Walkoe1970], we know that sentences of D have exactly the same expressive power as sentences of Σ11, the existential second order fragment. It was proven in [\cite=AbVan09] that ID sentences are expressible in second-order logic (SO). We will show that the other direction is also true; that is, there is a translation from the sentences of the full SO into ID. In particular, D sentences (or Σ11 sentences) are expressible in ID. This means that ID is so powerful that it is equivalent to the full SO on the level of sentences.

We name the logic under discussion "intuitionistic" dependence logic, because the implication of this logic satisfies the axioms of the usual intuitionistic implication. As we know, the usual intuitionistic logic (either propositional or first-order) is weaker than classical logic (see e.g. [\cite=vanDalen01]). However, although the idea of introducing the intuitionistic implication in the general context of Hodges' construction is very natural, as the above-mentioned result of this paper shows, in the team semantics context, ID is stronger than (classical) D. It is worthwhile to point out that restricted to (classical) first-order formulas (or flat formulas), ID is in fact classical. It is only between rednon-classical formulas (dependence formulas) that the intuitionistic implication does play a role.

Another logic in the team semantics setting with the same expressive power as the full second order logic is the so-called team logic, which is the logic of dependence logic extended with classical negation (see [\cite=Van07dl] and also [\cite=Ville_thesis], [\cite=KontinenNurmi2009]). The significance of intuitionistic dependence logic is that the equivalence of ID and the full SO on the sentence level is established without the presence of the logical connective classical negation.

Throughout the paper, we assume readers are familiar with the standard Tarskian semantics of first-order logic and the standard semantics of second-order logic. We assume that the domain of a first-order model M is non-empty. For any model M, an assignment s on M is a function from a finite set dom(s) of variables into the domain of M (dom(s) will be always clear from the context). Let a be an element in M, and x a variable in dom(s). We write s(a / x) for the assignment with [formula] which agrees with s everywhere except that it maps x to a. The sequences of variables [formula] and [formula] with subscripts and superscripts are abbreviated as [formula] and [formula], respectively. Similarly for sequences of constants and elements of models. For any assignment s for [formula], we write [formula] for the sequence [formula]. We use the standard abbreviation [formula] to stand for a sequence of universal quantifiers [formula] (the length of [formula] is always clear from the context or does not matter); similarly for existential quantifiers.

Intuitionistic Dependence Logic as a Fragment of BID-logic

In this section, we define intuitionistic dependence logic, which is the intuitionistic fragment of BID-logic introduced in [\cite=AbVan09]. We will also recall some basic properties of dependence logic proved in [\cite=Van07dl] in this general framework.

BID-logic is obtained from a general construction of Hodges' team semantics (or trump semantics) [\cite=Hodges1997a], [\cite=Hodges1997b]. Well-formed formulas of BID-logic (in negation normal form) are given by the following grammar

[formula]

where α is a first-order atomic or negated atomic formula (first-order literal), [formula] are terms. Formulas of the form [formula] are called dependence atomic formulas or dependence atoms. The disjunctions "[formula]" and "[formula]" are called split disjunction and intuitionistic disjunction, the implications "→  " and "[formula]" are called intuitionistic implication and linear implication, respectively. The set Fv(φ) of free variables of a formula φ of BID-logic is defined in the standard way except for the case of dependence atoms:

[formula]

where Var(ti) (1  ≤  i  ≤  n) is the set of variables occurring in ti. We call φ a sentence in case [formula].

For the semantics for BID-logic, we adopt and generalize Hodges' team semantics. For any model M, a team X of M is a set of assignments on M with the same domain dom(X). We define two operations on teams. For any team X of M, and any function F:X  →  M, the supplement team X(F / x) = {s(F(s) / x):s∈X} and the duplicate team X(M / x) = {s(a / x):a∈M, ~ s∈X}. Now we give the team semantics for BID-logic. For any suitable model M and any team X of M whose domain includes the set of free variables of the formula under discussion,

[formula] with α first-order literal iff for all s∈X, [formula] in the usual Tarskian semantics sense;

[formula] iff for all s,s'∈X with s(t1) = s'(t1),[formula], s(tn - 1) = s'(tn - 1), it holds that s(tn) = s'(tn);

[formula] iff [formula];

[formula] iff [formula];

[formula] iff [formula] and [formula];

[formula] iff there exist teams Y,Z  ⊆  X with [formula] such that [formula] and [formula];

[formula] iff [formula] or [formula];

[formula] iff for any team Y  ⊆  X, if [formula] then [formula];

[formula] iff for any team Y with dom(Y) = dom(X), if [formula] then [formula];

[formula] iff [formula] for some function F:X  →  M;

[formula] iff [formula].

We say that a formula φ is satisfied by a team X in a model M, if [formula] holds. It can be easily shown that satisfaction of a formula of BID-logic depends only on the interpretations of the variables occurring free in the formula. Sentences have no free variable and there is only one assignment with empty domain, namely the empty assignment [formula]. We say that a sentence φ is true in M if the team [formula] of empty assignment satisfies φ, i.e. [formula]. We use the standard notation [formula] to mean that for any suitable model M, [formula] implies [formula].

The intuitionistic implication and linear implication are adjoints of the corresponding conjunctions; that is

[formula]

[formula]

The propositional variant of BID-logic without dependence formulas is essentially the BI logic, the "logic of Bunched Implications" introduced in [\cite=OHearnPym1999], [\cite=Pym2002]. The fragment with connectives [formula], [formula] and quantifiers is the usual dependence logic, where as pointed out in [\cite=AbVan09], [formula] is in fact the multiplicative conjunction instead of disjunction (therefore the notation "[formula]"). The intuitionistic fragment of BID-logic is called intuitionistic dependence logic. More precisely, well-formed formulas of D are formed by the following grammar

[formula]

where α is a first-order literal and [formula] are terms. Well-formed formulas of ID are formed by the following grammar

[formula]

where α is a first-order atomic formula and t is a term. Note that the dependence atoms of ID have only single terms and [formula] means intuitively that t behaves in team X as a constant. We will see later in Lemma [\ref=eq-BID] that dependence atom with several variables [formula] is definable by the constancy dependence atoms =    (ti).

The most important property of BID-logic is the downwards closure property that for any formula φ, if [formula] and Y  ⊆  X, then [formula]. A formula φ is said to be flat if for all suitable models M and teams X

[formula]

We call the D formulas with no occurrence of dependence subformulas (classical) first-order formulas (of BID-logic), that is first-order formulas of BID-logic are formulas with only first-order literals, [formula], [formula], [formula] and [formula]. Throughout the paper, we sometimes talk about first-order formulas of BID-logic and the usual first-order formulas at the same time, in such cases, we identify the first-order connective [formula] of BID-logic with the usual first-order connective [formula].

First-order formulas are flat.

Easy, by induction on the structure of formulas.

Sentences of BID-logic are flat.

To evaluate sentences with no free variables, we only consider the singleton team [formula] of the empty assignment [formula].

It is easy to observe that D and ID have the empty team property, that is for any D or ID formula φ, any model M, the empty team satisfies φ, i.e. [formula]. However, the full BID-logic does not have such property. For example, for any model M, [formula].

First-order Formulas are Expressible in Intuitionistic Dependence Logic

In this section, we show that every first-order formula (of BID-logic) is logically equivalent to a formula in intuitionistic dependence logic. Two formulas φ and ψ of BID-logic are said to be logically equivalent to each other, in symbols [formula], if for any suitable model M and team X with [formula], it holds that

[formula]

We have the following logical equivalences in BID-logic:

Items (1)-(3) can be proved easily. We only show item (4). That is to show that for any model M and any team X with [formula] it holds that

[formula]

[formula]: Suppose [formula]. Then there exist two teams Y,Z with [formula] such that [formula] and [formula]. For any nonempty U  ⊆  X with [formula], downwards closure gives that for any s∈U, [formula], i.e. [formula]. Since [formula], in view of the downwards closure we conclude that [formula], thus U  ⊆  Z, which implies [formula] by downwards closure.

[formula]: Suppose [formula]. Define

[formula] and [formula].

Clearly, [formula]. If [formula], then for any s∈Z  ⊆  X, we have that [formula], thus since [formula], we obtain that [formula]. Now both [formula] and [formula] follow from the flatness of φ and ψ.

Item (2) of the above lemma shows that for atomic formulas, dependence negation and intuitionistic negation have the same meaning. Moreover, restricted to singleton teams, the connectives →   and [formula] of ID behave as classical connectives. To determine whether a flat formula is satisfied by a team X, one in fact only needs to consider the satisfaction of singleton subteams of X, for which the intuitionistic negation behaves classically. This explains why items (3), (4) hold.

Next we define expressibility.

Let [formula] be a sublogic of BID-logic. We say that a formula φ of BID-logic is expressible in [formula], if there exists an [formula] formula ψ such that [formula].

First-order formulas (of BID-logic) are expressible in ID.

Assuming that every first-order formula is in prenex normal form and the negation-free part is in conjunctive normal form, the theorem follows immediately from items (2), (4) of Lemma [\ref=eq-BID].

For example, the quantifier-free first-order formula [formula] in conjunctive normal form, where α,β,γ,δ are first-order atoms, can be translated into ID as follows:

[formula]

Sentences of Dependence Logic and Σ11 are Expressible in Intuitionistic Dependence Logic

It follows from [\cite=Enderton1970] and [\cite=Walkoe1970] that IF-logic is equivalent to the Σ11 fragment of SO on the level of sentences. Dependence logic, which is equivalent to IF-logic on the level of sentences is therefore also equivalent to the Σ11 fragment. Väänänen in [\cite=Van07dl] gave a direct translation from one logic into the other. In this section, we will prove that there exists a translation from sentences of D or Σ11 sentences into ID. This proof will be generalized in Section 5 to the full second-order logic.

Let [formula] and [formula] be sublogics of second-order logic and of BID-logic, respectively.

We say that a sentence φ of [formula] is expressible in [formula], if there exists an [formula] sentence ψ such that for any suitable model M,

[formula]

We say that a sentence ψ of [formula] is expressible in [formula], if there exists an [formula] sentence φ such that for any suitable model M,

[formula]

D sentences are expressible in the Σ11 fragment of SO.

We sketch the proof of the next theorem. In the next section, we will generalize the translation in the next theorem to translate all second order sentences, first into BID-logic, and in the end into ID.

Σ11 sentences are expressible in D.

(idea) Without loss of generality, we may assume every Σ11 sentence φ is of the following special Skolem normal form

[formula]

where ψ is quantifier-free and first-order, and for each 1  ≤  i  ≤  n, every occurrence of the function symbol fi is of the same form [formula] for some fixed sequence [formula] of variables from the set [formula]. We find a D sentence [formula] which expresses φ. The idea behind the sentence [formula] is that in φ, we replace each occurrence of the function symbol fi by a new variable yi, and add a dependence atom to specify that yi is functionally determined by the arguments [formula] of fi. This can be done because we have required that each occurrence of fi is of the same form [formula]. To be precise, the D sentence [formula] is defined as follows:

[formula]

where ψ' is obtained from ψ by replacing everywhere [formula] by the new variable yi for each 1  ≤  i  ≤  n. In [formula], the dependence atoms together with the existential quantifiers enable us to pick exactly those functions corresponding to the functions assigned to the existentially quantified function variables [formula] in φ.

Equation ([\ref=DL-NF]) with the first-order quantifier-free formula ψ' in conjunctive normal form is a normal form for D sentences.

Note that in the normal form ([\ref=DL-NF]) of a D sentence, the only subformulas that are not in the language of ID are dependence atoms with several variables and first-order quantifier-free formulas. As we have proved in the previous section, these two kinds of formulas are both expressible in ID. Therefore we obtain the next theorem.

D sentences are expressible in ID.

Let φ be a D sentence in the normal form ([\ref=DL-NF]). The ID sentence that expresses φ is obtained by replacing the subformulas of the form [formula] by the formula [formula] and the first-order quantifier-free formula ψ' by its equivalent ID formula obtained from Theorem [\ref=FO-IDL].

Σ11 sentences are expressible in ID.

Follows from Theorem [\ref=Sigma11-DL] and Theorem [\ref=DL-s-IDL].

Negation of dependence logic, as well as that of BID-logic do not satisfy Law of Excluded Middle (neither for split disjunction nor for intuitionistic disjunction) and are therefore not the classical negation. Dependence logic extended with classical negation (denoted by "~  ") is called team logic. Definable team properties of team logic correspond exactly to all second order properties, in particular, sentences of team logic have the same expressive power as sentences of the full second order logic, see [\cite=Van07dl], [\cite=Ville_thesis], [\cite=KontinenNurmi2009] for further discussions on team logic. The result of the equivalence of ID and the full SO sentences to be presented in the next section shows that ID, as a logic without classical negation, is actually equivalent to team logic on the level of sentences. However, team logic and ID are not equivalent in general, since for example, the classical negation of [formula], denoted by [formula], is a well-formed formula in team logic, while in ID, it is not expressible. Indeed, suppose the classical negation of [formula] was expressible by an ID formula φ, namely for any suitable model M and team X,

[formula]

In particular, for empty team [formula], it would hold that

[formula]

but this is never the case since by the semantics [formula] and by empty set property of ID, [formula] always holds. This also shows that classical negation in general is not definable in ID. However, for sentences of ID, as shown in the next lemma, the intuitionistic negation does give a certain kind of "classical" negation.

For any sentence φ of BID-logic, we have that for any suitable model M

[formula]

Trivial.

A sentence of BID-logic has no free variables, thus it is said to be true if and only if the team [formula] of the empty assignment (a singleton team) satisfies it. As pointed out in Remark [\ref=IDL-classical-singleton], when restricted to singleton teams, the semantics of ID is in fact classical. This explains why such kind of "classical" negation is definable in ID.

Using the intuitionistic ("classical") negation for sentences, we are able to express Π11 sentences as well.

Π11 sentences are expressible in ID.

Let ψ be a Π11 sentence. Note that ψ is equivalent to [formula] for some Σ11 sentence φ. By Theorem [\ref=Sigma11-IDL], there exists an ID sentence [formula] such that

[formula]

for all suitable models M. Since [formula] is a sentence, by Lemma [\ref=IDL-negation], we have that

[formula]

thus [formula] is the sentence of ID expressing ψ.

Second-order Sentences are Expressible in Intuitionistic Dependence Logic

In this section, we will generalize the proofs of Theorem [\ref=Sigma11-DL] and Theorem [\ref=Sigma11-IDL] to show that sentences of the full SO are expressible in ID. Together with the result of the next theorem, proved in [\cite=AbVan09], we will be able to conclude that the expressive power of ID sentences is so strong that it is, in fact, equivalent to that of sentences of the full SO.

ID sentences are expressible in second-order logic.

In order to proceed to the main theorem of this paper (Theorem [\ref=SOL-IDL]), we first recall the normal form of SO formulas.

Every second order sentence is equivalent to a formula of the form

[formula]

where ψ is quantifier-free, and we assume without loss of generality that for the corresponding [formula], each [formula] and each fij is of arity q.

The basic idea of the translation for sentences of the full SO is generalized from that of the proof of Theorem [\ref=Sigma11-DL] for Σ11 sentences. For each SO sentence in a special normal form (to be clarified in Lemma [\ref=niceform_lm]), we replace each function variable by a new variable and specify the functionality of the new variable by adding the corresponding dependence atoms. We have seen in the proof of Theorem [\ref=Sigma11-DL] that dependence atoms together with existential quantifiers enable us to simulate existentially quantified function variables; on the other hand, universally quantified function variables can also be simulated using dependence atoms and intuitionistic implications. In this way, we will be able to express all SO sentences in ID.

To make this idea work, we need to first turn every SO sentence φ into a better normal form than the one in Theorem [\ref=SO-NF], that is we need to guarantee that for each q-ary function variable fij, every occurrence of fij in φ is of the same form [formula] for some fixed sequence [formula] of variables (this normal form is inspired by the Σ11 normal form in Theorem [\ref=Sigma11-DL], see Section 6.3 in [\cite=Van07dl] for detailed discussions). To this end, we need three lemmas.

The first lemma removes nesting of function symbols in a formula.

Let [formula] be any first-order formula, in which the q-ary function symbol f has an occurrence of the form [formula] for some terms [formula]. Then we have that

[formula]

where [formula] are new variables and [formula] is the formula obtained from [formula] by replacing everywhere [formula] by [formula].

Easy.

The second lemma unifies the arguments of function symbols in a formula.

Let [formula] be a first-order formula, in which the q-ary function symbol f has an occurrence of the form [formula] and an occurrence of the form [formula] with [formula]. Then we have that

[formula]

where [formula] is the first-order formula obtained from the formula [formula] by replacing everywhere [formula] by [formula].

Easy.

The next lemma gives a nice normal form for SO sentences.

Every SO formula is equivalent to a formula φ of the form

[formula]

where

ψ is quantifier free;

for each 1  ≤  i  ≤  2n and each 1  ≤  j  ≤  p, every occurrence of the q-ary function symbol fij is of the same form [formula], where

[formula]

with [formula].

By applying Lemma [\ref=niceform_func] and Lemma [\ref=niceform2_func] several times and adding dummy quantifiers to the SO formulas in the normal form described in Theorem [\ref=SO-NF].

The next lemma states that under the right valuations, the behavior of functions can be simulated by new variables. This technical lemma will play a role in the proof of Lemma [\ref=Pi2n-IDL-lm].

Let [formula] be any first-order quantifier-free formula with function symbols [formula], where every occurrences of each q-ary function symbol fj is of the same form

[formula]

where [formula]. Let [formula] be any suitable model with new function symbols [formula] interpreted as [formula], respectively. Let [formula] be new variables and s an assignment with domain

[formula]

such that for all 1  ≤  j  ≤  p,

[formula]

Then

[formula]

where φ' is the first-order formula of BID-logic obtained from φ by replacing everywhere [formula] by yj for each 1  ≤  j  ≤  p.

It is easy to show by induction that for any term t, s(t) = s(t'), where t' is obtained from t by replacing everywhere [formula] by yj for each 1  ≤  j  ≤  p. Next, we show the lemma by induction on φ. The only interesting case is the case that [formula]. In this case, we have that

[formula]

Here, as mentioned in Section 2, we identify the connective disjunction "[formula]" in SO and the split disjunction "[formula]" in BID-logic.

Now we are in a position to give the translation from SO sentences into ID. To simplify notations, this will be done in two steps. In the first step (Lemma [\ref=Pi2n-IDL-lm]), for each SO formula φ, we find an equivalent sentence [formula] in BID-logic. The second step (Theorem [\ref=Pi2n-IDL]) will turn [formula] finally into an equivalent ID sentence.

If [formula] is a sequence of variables, then we abbreviate the atomic formula [formula] as [formula]. If X is a team of M, then the duplicate team [formula] is abbreviated as [formula].

SO sentences are expressible in BID-logic.

Without loss of generality, we may assume that every SO sentence φ is of the form described in Lemma [\ref=niceform_lm]. For each pair 〈i,j〉 (1  ≤  i  ≤  2n, 1  ≤  j  ≤  p), pick a new variable ui,j not occurring in φ. We inductively define BID formulas δi for 2n  ≥  i  ≥  1 as follows:

[formula]

for 2n > i  ≥  1,

[formula]

where

[formula]

and ψ' is the first-order formula obtained from ψ by replacing everywhere each [formula] by ui,j. Let

[formula]

[formula]

The general idea behind the BID formula [formula] is that the δi's for i odd, simulate the [formula]'s, and the δi's for i even, simulate the [formula]'s in the SO sentence φ. The rest of the proof is devoted to show that such sentence [formula] does express the SO sentence φ, i.e. to show that for any suitable model M it holds that

"[formula]": Suppose [formula]. Then for any sequence of functions

[formula]

there exists a sequence of functions (depending on [formula])

[formula]

such that for any [formula] [formula] for any sequence of functions

[formula]

there exists a sequence of functions (depending on [formula] )

[formula]

such that

[formula]

Let Y1 be a nonempty subteam of

[formula]

such that [formula]. It suffices to show that

[formula]

The team Y1 corresponds to a sequence of functions [formula] defined as follows: for any 1  ≤  j  ≤  p, and for some fixed a0∈M, let

[formula]

Each F1j is well-defined. Indeed, for any [formula], any s,s'∈Y1 such that

[formula]

since [formula], we must have that

[formula]

Now, using the functions [formula], we define a sequence of functions [formula] from the corresponding supplement teams of Y1 to M such that the supplement team [formula] satisfies [formula]. For each 1  ≤  j  ≤  p, define the function

[formula]

corresponding to [formula] by taking

[formula]

Put

[formula]

It suffices to show that [formula] and

[formula]

The former is obvious by the definitions of Y2 and [formula]. To show the latter, repeat the same argument and construction n - 1 times, and it then suffices to show that for any nonempty subteams Y3 of Y2, Y5 of Y4, [formula] , Y2n - 1 of Y2n - 2 such that

[formula], [formula], [formula], [formula],

it holds that

[formula]

and [formula], where [formula] are supplement teams defined in the same way as above. Clause ([\ref=Pi12n-2]) follows immediately from the definitions of [formula] and [formula]. To show [formula], since ψ' is flat (first-order), it suffices to show [formula] hold for all s∈Y2n. For the functions [formula] obtained as above, by ([\ref=Pi12n-1]) we have that

[formula]

Now, it follows from the definitions of [formula] that condition ([\ref=func-team-eq1]) in Lemma [\ref=func-team] is satisfied for each Fij, hence, an application of Lemma [\ref=func-team] gives the desired result that [formula].

"[formula]": Suppose [formula]. Then

[formula]

where

[formula]

Let [formula] be an arbitrary sequence of functions. Take a subteam [formula] of X which corresponds to these functions by putting

[formula]

Clearly, [formula] holds, thus we have that [formula] holds (i.e., ([\ref=Pi12n-0]) holds). So there exist functions

[formula]

depending on [formula] such that [formula] and [formula] holds (i.e., ([\ref=Pi12n-00]) holds), where

[formula]

Now, we define functions [formula], which simulate [formula] as follows: for each 1  ≤  j  ≤  p and for any [formula], let

[formula]

Note that the definition of Y2 guarantees such s in the above definition always exists, and moreover, each F2j is well-defined since for any s,s'∈Y2 with

[formula]

as [formula], we must have that

[formula]

Repeat the same argument and construction n - 1 times to define inductively for any sequences of functions [formula], the subteams Y3 of Y2, [formula] , Y2n of Y2n - 1 such that

[formula]

and the supplement teams [formula] satisfy

[formula]

and to define inductively the sequences of functions

[formula]

according to the functions [formula] obtained from the existential quantifiers [formula]. It then suffices to show that

[formula]

Let [formula] be an arbitrary sequence in M of the same length as that of [formula]. By the construction of Y2n, there must exists s∈Y2n such that [formula]. Since [formula], by downwards closure, we have that [formula]. Note that by the definitions of [formula], condition ([\ref=func-team-eq1]) in Lemma [\ref=func-team] is satisfied for each Fij, hence, an application of Lemma [\ref=func-team] gives the desired result that

[formula]

Observe that in the sentence [formula] in the proof of Theorem [\ref=Pi2n-IDL-lm], the only subformulas that are not in the language of ID are dependence atoms with several variables and first-order formulas, both of which are expressible in ID. Therefore we are able to turn it into an equivalent ID sentence.

SO sentences are expressible in ID.

Follows from Lemma [\ref=Pi2n-IDL-lm], Lemma [\ref=eq-BID] and Theorem [\ref=FO-IDL].

Finally, we arrive at the following theorem.

SO sentences are expressible in ID, and vice versa.

Follows from Theorem [\ref=Pi2n-IDL] and [\ref=IDL-SO].

It is easy to observe that in the above translation, the intuitionistic disjunction [formula] did not play a role. In fact, [formula] is definable in ID uniformly by the expression [formula], where

[formula]

(which deals with the case that the model has only one element) and

[formula]

(which deals with the other cases).

In fact, Lemma [\ref=niceform_lm] gives a normal form for Π12n (n∈ω) sentences, therefore the ID sentences of the form in Theorem [\ref=Pi2n-IDL] can be viewed as ID normal form for Π12n sentences. Moreover, using the "classical negation" of ID for sentences, applying the same trick as that in the proof of Corollary [\ref=Pi11-IDL], one can obtain an ID normal form for Σ12n sentences φ, namely [formula], for [formula] the translation of the Π12n sentence [formula].

Using the same trick as that in Lemma [\ref=niceform_lm], one can also obtain a nice normal form for Σ12n - 1 sentences. Thus, the above observation (normal form) holds for Σ12n - 1 and Π12n - 1 sentences as well. In particular, the proof of Theorem [\ref=Sigma11-IDL] (for Σ11 sentences) can then be viewed as a special case of the proof of Theorem [\ref=Pi2n-IDL].

Further Work

Expressive Power of ID Open Formulas

In this paper, we proved that the expressive power of sentences of ID is equivalent to that of sentences of the full second order logic. In [\cite=KontVan09], it was proven that with respect to nonempty teams, open formulas of D defines exactly those properties that are definable in Σ11 with an extra predicate, occurring only negatively, for the nonempty teams. A similar result can be obtained for open formulas of ID, that is with respect to nonempty teams, open formulas of ID defines exactly those properties that are definable in the full second order logic with an extra predicate, occurring only negatively, for the nonempty teams, see [\cite=Yang2010] for details.

Linear Dependence Logic

One other interesting fragment of BID-logic is the linear dependence logic (LD). This is the fragment extended from dependence logic by adding the linear implication. More precisely, well-formed formulas of LD are formed by the following rule

[formula]

where α is a first-order literal and [formula] are terms. One may wonder whether the translation discussed in this paper works for LD sentences. This is still unclear, however, one has to realize in the first place that for LD sentences, the situation is more complicated. Because, as pointed out in Section 2, LD does not have the empty team property. For any sentence φ of BID-logic, we define the truth value [formula] of φ on a model M to be

[formula]

The failure of empty team property implies that for any LD sentence φ, the truth value [formula] lies in the three-element set [formula], namely, LD is three-valued (see [\cite=AbVan09] for more details).

One result we have obtained along this line is that the similar translation does apply to the second order Π12 fragment and LD in the following sense. Let φ be a Π12 sentence of the form described in Lemma [\ref=niceform_lm] and [formula] the sentence of BID-logic defined in Lemma [\ref=Pi2n-IDL-lm] which expresses φ. We replace the intuitionistic implication →   in [formula] by the linear implication [formula] and denote the resulting LD sentence by [formula]. Then for any model M, the following is true:

[formula]

This shows that sentences of LD goes beyond Σ11 already with respect to the truth value [formula] .

IF-logic and the Full Second Order Logic

It is well-known that Independence friendly logic is equivalent to Σ11, thus to D, on the level of sentences. This indicates a possibility of obtaining the same result of this paper for an extension of IF-logic. However, the result of this paper relies heavily on the role the intuitionistic implication plays in the translation; that is, it is based on a deep understanding of the general framework of Hodges' team semantics. Since the original semantics of IF-logic was given by means of imperfect information games ([\cite=HintikkaSandu1989]), to obtain the same result of this paper for a reasonable extension of IF-logic, one may have to seek for a different notion, a game-theoretic one, which corresponds to the intuitionistic implication in the team semantics context.

Acknowledgements.

The author would like to thank Juha Kontinen and Jouko Väänänen for very helpful discussions on the topic of this paper.