Labelled tableaux for interpretability logics

Abstract

In is paper we present a labelled tableau proof system that serves a wide class of interpretability logics. The system is proved sound and complete for any interpretability logic characterised by a frame condition given by a set of universal strict first order Horn sentences. As such, the current paper adds to a better proof-theoretical understanding of interpretability logics.

Introduction

Provability logics like the Gödel-Löb logic [formula] describe the structural behaviour of formalized provability in a simple propositional modal language. Interpretability logics are natural extensions of provability logics: they describe the structural behaviour of relative interpretability.

Essentially since Solovay's landmark paper [\cite=Solovay:1976] we know that any Σ1 sound theory that extends elementary arithmetic has the same provability logic [formula]. The situation is very different for interpretability logics. Basically, for two different kind of theories we know the corresponding interpretability logics.

On the one hand Shavrukov [\cite=Shavrukov:1988:InterpretabilityLogicPA] and independently Berarducci [\cite=Berarducci:1990:InterpretabilityLogicPA] determined the interpretability logic of any sound and essentially reflexive theory like Peano Arithmetic to be [formula]. On the other hand, Visser has proven in [\cite=Visser:1990:InterpretabilityLogic] that the interpretability logic of any sound and finitely axiomatised theory that proves the totality of super-exponentiation -like - is [formula].

In case the base theory is neither finitely axiomatizable nor essentially reflexive, the situation turns out to be much more difficult and actually, to determine the interpretability logics in those situations remain open problems. Some partial results are known in the case of Primitive Recursive Arithmetic ([\cite=BilkovaJonghJoosten:2009:PRA]) or in the case when we consider those modal principles that are provable in any reasonable arithmetical theory [\cite=JoostenVisser:2000:IntLogicAll] [\cite=GorisJoosten:2011:ANewPrinciple] [\cite=Joosten:2015:TwoSeries]. In this sense, interpretability logics are in need of more study compared to provability logics.

A miracle happens writes Albert Visser as the first line of [\cite=Visser:1997:OverviewIL]: Whereas provability is a Σ1 complete predicate, the logic [formula] that governs its structural behaviour is nice, well behaved and simple. The situation with interpretability seems even more extreme since Shavrukov has shown in [\cite=Shavrukov:1997:ReflexiveInfinitelyManyAxioms] that interpretability is Σ3 complete and again, the modal logic describing the structural behaviour is nice.

But again here we see a discrepancy between provability and interpretability logics. In the case of interpretability logics we actually know to a much lesser extent how nice they are. In particular, apart from some observations on the closed fragment ([\cite=HajekSvejdar:1991:ClosedFormulasInterpretability] [\cite=BouJoosten:2011]), close to nothing is known about the computational complexity of interpretability logics. Also, very little is known about well-behaved proof systems for interpretability logics with the sole exception of some work by Sasaki such as [\cite=Sasaki:2002:CutFreeIL]. The current paper is intended to add to the proof-theoretic understanding of interpretability logics by studying labelled tableaux proof systems for them.

Tableaux proof systems are tightly related to sequent proof systems and are dual to them in many aspects. Rules in sequent proof systems typically have possibly multiple antecedents and single conclusions/succedents. Moreover, sequent-style proofs generally are trees that have the root at the bottom and are based on validity: the consequence of a rule is valid if (and often only if) all of the antecedents are valid.

On the other hand, rules in tableaux systems typically have single antecedent and possibly multiple succedents. Moreover, Tableaux proofs generally are trees that have the root at the top and are based on satisfiability: the antecedent of a rule is satisfiable if and only if some of the 'consequents'/succedents is satisfiable.

Labelled tableaux introduce extra devices to the syntax that aim to represent the accessibility relation in the corresponding Kripke-style semantics. This extra syntax allows us to give tableaux proof systems for many logics lacking a traditional one, where nodes of the tableaux carry only (sets of) formulas. A precursor for this idea of bringing a bit of semantics into the syntax appears already in [\cite=Kanger:1957:ProvabilityInLogic], and labelled tableaux as they are now known were introduced prominently by Fitting in [\cite=Fitting:1972]. Standard references here are [\cite=Fitting:1983:ProofMethods] and [\cite=Gore:1999]. For more on the history and development of tableaux systems for modal logics see e.g. [\cite=Gore:1999]. Naturally, labels have also been incorporated into sequent calculi. We refer the reader to [\cite=Negri:2005:ProofAnalysisInModalLogic] for details on labelled sequent calculi for modal logics.

Outline of the paper. After introducing the necessary preliminaries in Section [\ref=section:preliminaries], we use Section [\ref=section:TableauxForHornILs] to introduce the labelled tableaux system for all interpretability logics [formula] characterised by a set of first order Horn formulas. It is shown how a systematic tableau can be assigned to a finite set Γ of formulas so that the tableau contains all the necessary information as to the satisfiability of Γ.

In Sections [\ref=section:soundness] and [\ref=section:completeness] we show that the tableau proofs are sound and complete with respect to [formula]-validity. In the last section we remark that our results concern most of the interpretability logics encountered in the literature, but not all.

Preliminaries

Interpretability logics are propositional modal logics with a unary modality [formula] whose dual modality [formula] is defined as [formula] corresponding to provability and consistency respectively, and a binary modality [formula] corresponding to relative interpretability.

In this paper we shall work with the Boolean connectives [formula] and →  . Thus, with [formula] a countable set of propositional variables, the formulas F of interpretability logic are defined as

[formula]

As always we will use the other connectives and Boolean constants freely since they can be defined from [formula] and →  . In order to use less parentheses we omit outer parentheses and shall say that [formula] and [formula] bind strongest, followed by the equally strong binding [formula] and [formula] who bind stronger than [formula] which in turn binds stronger than →  . Thus, for example,

[formula]

is short for

[formula]

The axioms of the basic interpretability logic [formula] are, apart from all substitution instances (in the language of interpretability) of all propositional tautologies, given by the following axiom schemata

[formula];

[formula];

[formula];

[formula];

[formula];

[formula];

[formula].

The rules are Modus Ponens and Necessitation: [formula].

The following lemma collects two easily obtainable and well-known properties of [formula] that will play prominent role in our tableaux systems.

[formula];

[formula].

The logic [formula] is the fragment of [formula] where the modal language is restricted to [formula]. We shall consider various extensions of [formula]. By [formula] we denote the logic that arises by adding the axiom scheme(s) [formula] to [formula]. The extensions of [formula] obtained by the following axiom schemes play a prominent role in the literature.

[formula];

[formula].

Interpretability logics allow for a relational semantics very much in the sense as [formula] does.

An [formula]-frame is a triple 〈W,R,S〉 where W is a non-empty domain set, whose members are often called worlds, and R is a binary relation on W that is transitive and Noetherian (no infinite chains [formula]). S is a ternary relation on W that is often considered as a collection {Sx}x∈W of binary relations by fixing the first argument x of the ternary S. It is required that each Sx is a transitive and reflexive binary relation on {y∈W:xRy} satisfying the following property:

[formula]

An [formula]-model is a quadruple 〈W,R,S,V〉, where 〈W,R,S〉 is an [formula]-frame and V is a function assigning a collection V(p) of worlds to a propositional variable p. Given an [formula]-model 〈W,R,S,V〉 we define a forcing relation [formula] between worlds and formulas as usual:

[formula];

[formula];

[formula];

[formula];

[formula].

We shall write x∈M whenever M  =  〈W,R,S,V〉 with x∈W and likewise for frames. We write [formula] to denote that [formula] for all x∈M. The above defined semantics is good in that one can prove completeness for [formula] as was first done in [\cite=JonghVeltman:1990:ProvabilityLogicsForRelativeInterpretability]:

[formula]

An extension [formula] of [formula] can be specified either axiomatically or semantically by restricting the class of models for example by specifying so called frame conditions. We say that a frame F: = 〈W,R,S〉 validates A and we write [formula] whenever for all valuations V on F we have [formula].

A set of first or higher order sentences C in the language [formula] with [formula] a binary and [formula] a ternary first-order relation symbol is called a frame condition for a logic [formula] extending [formula] whenever we have

[formula]

where in the right-hand side the interpretations of [formula] and [formula] are R and S, respectively. Then we also say that C characterises the logic [formula]. As always, [formula] denotes that [formula] for any theorem A of [formula] and we use a similar convention for models. From now on we will use the same symbol R for [formula] and its interpretation and likewise for S.

In case an axiomatic extension [formula] of [formula] is characterised by a set of strict universal Horn sentences in the language {R,S} we say that [formula] is a Horn logic. By a strict universal Horn sentence we mean a first order formula of the form

[formula]

where n  ≥  0, [formula] and ψ are atomic formulas and [formula] denotes the universal closure. In case that [formula] is a Horn logic, we shall denote the corresponding frame condition by [formula] and call an [formula]-frame satisfying [formula] an [formula]-frame.

For example, the logic [formula] is characterised by the (universal closure of the) first order formula

[formula]

and [formula] is characterised by the empty frame condition (or [formula] for that matter).

In this paper, we shall - given a frame - reduce the binary modality [formula] to a series of unary ones. We will do so, so that the corresponding tableaux rules become more amenable. Thus, given an [formula]-frame F  =  〈W,R,S〉, we introduce new unary modal operators [formula] for each x∈W and give the following truth definition for the operators in a model M on the frame F

[formula]

Now it is easy to verify that for any [formula]-model

[formula]

Tableaux for Horn interpretability logics

In this section we define a tableau proof method for interpretability logics which are Horn. Moreover, we will give a systematic tableau procedure for such [formula] that yields a canonical tableau given a finite set of formulas.

As always, our tableaux will be downward growing trees. Each node of the tree carries a labelled formula. A labelled formula is a pair with a label and a formula. The label corresponds to a possible world where the formula is to be satisfied. We will show the unsatisfiability of a finite set of formulas in case all branches in the systematic tableau close (precise definition follow). In case the systematic tableau contains an open branch, that branch will carry information about a satisfying model.

Labels are strings composed of non-negative integers and letters R and S. The set of all labels is defined recursively as follows:

0 is a label;

If σ is a label, then σRn is a label for all [formula];

If σ and ρ are labels and ρ is a strict non-empty prefix of σ, then σSρn is a label for all [formula].

Now that we have a sufficiently large set of labels we will describe how we generically build (almost) frames from them.

Given a Horn logic [formula] and a set of labels Λ, we define relations [formula] and [formula] on the set Λ as the least relations on Λ such that:

If σ,σRn∈Λ, then [formula] for all labels σ and [formula];

If [formula] and [formula], then [formula];

If σ,ρ,σSρn∈Λ, then [formula] for all labels σ and ρ and all [formula];

If [formula], then [formula];

If [formula] and [formula], then [formula];

If [formula] and [formula], then [formula];

If [formula], then [formula] and [formula];

[formula].

Note that the least relations exist since [formula] is a set of strict first order Horn sentences. If the context allows us so, we will drop both the sub- and the superscripts in [formula] and [formula]. Moreover, when [formula] we will denote this by [formula] and likewise for [formula].

Note that [formula] is irreflexive in case [formula] is consistent and Λ sufficiently nice. Moreover, apart from [formula] being Noetherian, all the other properties of [formula]-frames are satisfied: [formula] is transitive; [formula] is a relation on [formula] that is transitive and reflexive so that [formula].

We will now define the generating rules for tableaux for Horn interpretability logics. As mentioned, the nodes carry labelled formulas which consist of a pair σ::A, where σ is a label and A is a formula. Recall that the idea of the labels is, that they will correspond to worlds in a model where the corresponding formula will be satisfied if satisfiable.

The rules that we present are not entirely local since, for example, we have to guarantee that new labels have not yet been used in relevant parts of the tableau so far. Thus, we define the rules relative to a set of labels.

Let [formula] be a Horn interpretability logic and let Λ be a set of labels. The [formula]-tableau rules with respect to Λ are as follows:

Propositional rules:             (ν)-rules:             (π)-rules:             We call the labelled formula above the line in the rules above the antecedent and the labelled formula(s) under the line succedent(s).

Some clarifying remarks on the tableau rules seem in order. First we note that we use the symbol "|" in the rules (→  ), and ([formula]) to denote branching in proof-trees. Next, we observe that various non-branching rules have multiple succedents such as the rules ([formula]), [formula] and [formula]. These succedents are to be understood as different nodes one placed under the other. Lemma [\ref=theorem:basicPropertiesIL].[\ref=theorem:basicPropertiesIL:Loeb] is reflected in the rules [formula] and [formula] and Lemma [\ref=theorem:basicPropertiesIL].[\ref=theorem:basicPropertiesIL:LoebILversion] is reflected in the (πS,Λ) rule.

Another non-local feature of the tableaux proof system will be that we will allow to apply rules to any node σ::A in a branch, not necessarily only to bottom-nodes. Upon application of the rule, the succedent(s) with possible branching can be appended to the bottom of any branch passing through σ::A. If B is a branch in a tree whose nodes are labelled formulas, by [formula] we denote the collection of labels that occur in B.

Given a Horn logic [formula] and a finite set Γ of formulas, an [formula]-tableau for Γ is a binary irreflexive directed downward growing tree with nodes carrying labelled formulas defined inductively as follows:

A single node tree T with 0::A as the sole node for some formula A∈Γ is an [formula]-tableau for Γ.

If T is an [formula]-tableau for Γ, then a tree T' obtained by extending (appending below) any branches of T with 0::A for some formula A∈Γ is an [formula]-tableau for Γ.

Let T be an [formula]-tableau for Γ, B be a branch of T, and let (ρ) be a rule w.r.t. [formula]. If some labelled formula σ::A that occurs in B is the antecedent of an instance of (ρ), then the tree T' obtained by extending B with the appropriate succedents of (ρ) in any particular ordering (with possible branching) is an [formula]-tableau for Γ.

A branch B of an [formula]-tableau T for Γ is called closed if there is σ and A such that σ::A∈B and [formula]. Otherwise the branch is open. An [formula]-tableau T for Γ is closed if all of its branches are closed. Otherwise T is open.

Given a Horn logic [formula], we are now ready to assign to a finite set of formulas Γ what we call a systematic [formula]-tableau for Γ which will contain all the information as to the satisfiability of Γ. The systematic tableau method given below follows closely the procedure given in [\cite=Gore:1999].

For a Horn logic [formula], a systematic [formula]-tableau for a finite set Γ of formulas is constructed in stages. Throughout the stages, the nodes in the tree Ti will be marked with exactly one of awake, asleep or finished. The marked version of Ti will be denoted by μ(Ti).

Stage 0: Form the initial tableau T0 with 0::A for all A∈Γ in some order on top of each other and mark them all awake.

Stage n+1: Look for an awake σ::A in μ(Tn) closest to the root of the tableau; if there are several with the same distance, choose the leftmost one. If A  =  p or [formula] for some propositional variable p, then Tn + 1 and μ(Tn + 1) are as Tn and μ(Tn) respectively except that we mark the node σ::A as finished and we end Stage n+1.

Otherwise we obtain Tn + 1 and μ(Tn + 1) as follows:

If [formula] for some B, for every open branch B that passes through σ::A, extend B with σ::B marking it awake and marking σ::A as finished. Here and below 'extending B' means 'appending new nodes to the bottom of B'.

If A  =  (B  →  C) for some B and C, for every open branch B that passes through σ::A, split the end of B and extend the left fork with [formula] and the right fork with σ::C. Both new nodes will be marked awake and σ::A will be marked as finished.

If [formula] for some B and C, for every open branch B that passes through σ::A, extend B with σ::B and [formula] in whatever order. Both new nodes will be marked awake and σ::A will be marked as finished.

If [formula] for some B, for every open branch B that passes through σ::A and for all [formula], if [formula], then extend B with τ::B. These new nodes will be marked awake and σ::A will be marked as asleep.

If [formula] for some B, for every open branch B that passes through σ::A, extend B with [formula] and [formula], where [formula] is the least number such that [formula]. Mark both [formula] and [formula] awake and σ::A finished. Moreover, mark as awake every [formula] and [formula] whenever [formula] and mark awake every [formula] whenever [formula].

If [formula] for some ρ and B, for every branch B that passes through σ::A and for all [formula], if [formula], then extend B with τ::B. Mark τ::B awake and σ::A asleep.

If [formula] for some ρ and B, for every open branch B that passes through σ::A, extend B with [formula] and [formula], where [formula] is the least number such that [formula]. Mark both [formula] and [formula] awake and mark σ::A finished. Moreover, mark awake every [formula] and [formula] such that [formula] and every [formula] such that [formula].

If [formula] for some B and C, for every open branch B that passes through σ::A and every [formula], if [formula], split the end of B and extend the left fork with [formula] and the right fork with [formula]. Both new nodes are marked awake and σ::A will be marked asleep.

If [formula] for some B and C, for every open branch B that passes through x, pick the smallest [formula] such that [formula] and extend B with σRn::B, with [formula] and with [formula] in whatever order you like. All new nodes are marked awake and σ::A finished. Moreover, mark awake every [formula] and [formula] such that [formula] and every [formula] such that [formula].

By this procedure we construct a chain 〈Ti:i∈ω〉 of [formula]-tableaux for Γ. We call [formula] a systematic [formula]-tableau for X.

A systematic [formula]-tableau T for a finite set Γ of formulas is not in general an [formula]-tableau in the sense of Definition [\ref=tableau]. However, if T is finite it is an [formula]-tableau. In particular, if T closes, then T is an [formula]-tableau. Moreover, if there is a closed [formula]-tableau T' for Γ, then there is a closed systematic tableau for Γ.

If σ::A is awake at stage n+1, the systematic [formula]-tableau procedure visits σ::A at some later stage.

Straightforward and similar to Lemma 6.4.4 in [\cite=Gore:1999].

Soundness

As usual, for a Horn logic [formula], we call a formula A [formula]-tableau provable whenever the systematic [formula]-tableaux for [formula] closes. In this section we shall show that this notion of provability is sound with respect to [formula] frames.

A set X of labelled formulas is [formula]-satisfiable if there exists an [formula]-model M  =  〈W,R,S,V〉 and an interpretation [formula] such that

If [formula] and [formula], then I(σ)RI(τ);

If [formula] and [formula], then I(σ)SI(ρ)I(τ);

[formula] for all σ::A∈X;

An [formula]-tableau T is [formula]-satisfiable, if there is a branch B of T such that B is [formula]-satisfiable

The next lemma tells us that satisfiable [formula]-tableaux are closed under applying the rules to them for Horn logics [formula].

Let [formula] be a Horn logic and let T be a satisfiable [formula]-tableau. Then for any rule, the tableau T' obtained by the application of the rule is also [formula]-satisfiable.

Suppose B is an [formula]-satisfiable branch of T. We show that if we apply some rule to a some labelled formula in B, we obtain a branch that is [formula]-satisfiable. The cases for the propositional rules are trivial.

Suppose [formula] and consider the branch C obtained by an application of the [formula]-rule with τ::A added to the branch for some [formula] such that [formula]. By assumption there is an [formula]-model M  =  〈W,R,S,V〉 and an interpretation [formula] such that [formula]. Now [formula] and [formula]. Hence I(σ)RI(τ) and so [formula].

Suppose [formula] and consider the branch C obtained by an application of the (νS) rule with τ::A added to the branch for some [formula] such that [formula]. By assumption there is an [formula]-model M  =  〈W,R,S,V〉 and an interpretation [formula] such that [formula]. Now since [formula] and [formula], we also have that I(σ)SI(ρ)I(τ). Hence [formula].

Suppose [formula] and consider the two branches obtained by an application of the [formula] rule with [formula] in the left branch and [formula] in the right branch for some [formula] such that [formula]. Now by assumption there is an [formula]-model M  =  〈W,R,S,V〉 and an interpretation [formula] such that [formula]. Now since [formula] and [formula], we have that I(σ)RI(τ). If [formula], then the left branch is satisfiable with I. If on the other hand [formula], then there exists some x∈W such that I(τ)SI(σ)x and [formula]. Hence [formula].

Suppose [formula] and consider the branch C obtained by an application of the [formula] rule with [formula] and [formula] added to the branch for some [formula] such that [formula]. By assumption there is an [formula]-model M  =  〈W,R,S,V〉 and an interpretation [formula] such that [formula]. Hence there is some x∈W such that I(σ)Rx and [formula] and [formula]. Now, since [formula], we can extend I to I' by putting I'(σRn)  =  x. Now define [formula] and [formula] on [formula] by

[formula]

Now [formula] and [formula] satisfy conditions ([\ref=definition:ILrelationsOnLabels:FirstItem])-([\ref=definition:ILrelationsOnLabels:LastItem]) in Definition [\ref=definition:ILrelationsOnLabels]. Hence [formula] and [formula], and so I' is an interpretation from C to M.

Suppose [formula] and consider the branch C obtained by an application of the (πS) rule with [formula] and [formula] added to the branch B for some [formula]. By assumption there is an [formula]-model M  =  〈W,R,S,V〉 and an interpretation [formula] such that [formula]. Now there is some x∈W such that I(σ)SI(ρ)x and [formula]. Now if [formula], we extend I to I' by putting I'(σSρn)  =  x. On the other hand if [formula], then there is y∈W such that xRy and [formula] and [formula]. Now I(ρ)RxRy and so xSI(ρ)y. Hence I(σ)SI(ρ)y. Now extend I to I' by putting I'(σSρn)  =  y. Now I' is again an interpretation from C to M.

Suppose finally [formula] and consider the branch obtained by an application of the [formula] rule with σRn::A, [formula] and [formula] added to the branch for some [formula]. By assumption there is an [formula]-model M  =  〈W,R,S,V〉 and an interpretation [formula] such that [formula]. Hence there is x∈W such that I(σ)Rx, [formula] and [formula]. If [formula], we may extend I to I' by putting I'(σRn)  =  x. On the other hand if [formula], then there is y∈W such that [formula] and [formula]. But now since I(σ)RxRy, we have that xSI(σ)y and so [formula]. So now we may extend I to I' by putting I'(σRn)  =  y. Again, I' is an interpretation from C to M.

Let [formula] be a Horn logic. If a systematic [formula]-tableau for a set of formulas Γ closes, then Γ is [formula]-unsatisfiable.

Suppose a systematic tableau T for Γ is closed, but that there is an [formula]-model M  =  〈W,R,S,V〉 and x∈W such that [formula]. Now consider the initial tableau T0 for Γ with 0::A for all A∈Γ.

Now, by assumption, I  =  {〈0,x〉} is an interpretation from [formula] to W. By the above lemma, every tableau obtained from the initial tableau is [formula]-satisfiable. In particular, the closed tableau T obtained by the systematic procedure is [formula]-satisfiable. A contradiction since, for any branch B of T there is σ and A such that σ::A∈B and [formula].

For the sake of being explicit let us formulate the soundness of our tableaux as an immediate corollary.

Let [formula] be a Horn logic. If a systematic [formula]-tableau for [formula] closes, then A is [formula]-valid.

Completeness

In this section we shall show that our proof system is also complete w.r.t. [formula]- frames.

A set X of labelled formulas is a [formula]-Hintikka set if the following hold:

There is no σ and A such that σ::A∈X and [formula];

If [formula], then σ::A∈X;

If σ::A  →  B∈X, then [formula] or σ::B∈X;

If [formula], then σ::A∈X and [formula];

If [formula], then [formula] or [formula] for all [formula] such that [formula];

If [formula], then there is [formula] such that τ::A∈X, [formula] and σRτ;

If [formula], then τ::A∈X for each [formula] such that [formula];

If [formula], then there is [formula] such that [formula] and [formula];

If [formula], then τ::A∈X for each [formula] such that [formula];

If [formula], then there is [formula] such that [formula] and [formula].

Hintikka sets contain all the needed information to extract a model from them. This is clearly manifested in the proof of the following lemma.

Let [formula] be a Horn logic. If X is an [formula]-Hintikka set and [formula] is Noetherian, then X is [formula]-satisfiable.

As mentioned before, we will omit various sub and superscripts. Thus, if [formula] is Noetherian, then [formula] is clearly an [formula]-frame. Define a valuation V on [formula] by putting

[formula]

Now we can prove by an easy induction on the complexity of formulas that for all σ and A:

[formula]

Hence 〈F,V〉 satisfies X with the identity interpretation.

If B is an open branch in a systematic [formula]-tableau for a finite set Γ, then B is a Hintikka set and [formula] is Noetherian.

That B is a Hintikka set follows easily from the fairness of the systematic [formula]-tableau procedure.

Notice that if [formula] for some σ and A, then A is either a subformula of a formula from Γ or the negation of a subformula of a formula from Γ. Let [formula].

Now suppose towards a contradiction that there is an ascending [formula]-chain 〈σi:i∈ω〉 in [formula]. Without loss of generality we may assume that σ0  =  0 and σi  ≠  0 for all i  >  0.

Now we show that for any i∈ω there is Ai such that [formula], but [formula] for all j  ≤  i.

If σi + 1  =  τRn for some [formula] and [formula], then σi + 1 is introduced either with a [formula]-rule applied to some [formula] or by a [formula]-rule applied to some [formula]. In the first case [formula], but [formula] for all j  ≤  i. In the second case [formula], but [formula] for all j  ≤  i.

If σi + 1  =  τSρn for some [formula] and [formula], then σi + 1 is introduced with a (πS)-rule applied to some [formula]. Now [formula], but [formula] for all j  ≤  i.

Now for large enough m,

[formula]

We have the following corollaries from this lemma.

Let [formula] be a Horn logic. If a systematic [formula]-tableau for a finite Γ has an open branch, then Γ is [formula]-satisfiable.

In particular, we can formulate completeness of our proof systems.

Let [formula] be a Horn logic. If A is [formula]-valid, then any systematic [formula]-tableau for [formula] closes.

Scope of our results

Our results apply to all interpretability logics extending [formula] that are Horn. In particular the results apply to the most important systems [formula] and [formula]. At first sight, the restriction of the logic being Horn might seem quite severe. However, most logics that occur in the literature turn out to be Horn. In particular also the logics based on

[formula];

and the two series of generalizations of this principle as presented in [\cite=Joosten:2015:TwoSeries] are Horn logics. An important logic that falls out of the scope of this paper is [formula] since the corresponding frame condition is second order.

Acknowledgement

We would like to thank Rajeev Goré for his comments on a draft version of this paper. Further thanks go to Volodya Shavrukov and an anonymous referee for helping to improve the paper. The second author was supported by the Generalitat de Catalunya under grant number 2014 SGR 437 and from the Spanish Ministry of Science and Education under grant number MTM2014-59178-P.