Conjecture Lemma Claim Observation Corollary Remark Condition Definition

Random cluster dynamics for the Ising model is rapidly mixing

ρ=ϱ

Introduction

The Ising model is perhaps the best known model in statistical physics, and it has also been widely studied from an algorithmic perspective. An instance of the model is an undirected graph G, together with a parameter β > 0. A configuration of the model is an assignment σ∈{0,1}V of "spins" to the vertices of G. The weight w(σ) of configuration σ is βm(σ) where m(σ) is the number of monochromatic edges (edges {i,j} with σ(i) = σ(j)) in G. It is of importance to compute the partition function of the system, which is the sum of weights w(σ) over all configurations σ∈{0,1}V.

If β < 1 then the system is antiferromagnetic, and the partition function is computationally hard, even to approximate. However, when β > 1 the system is ferromagnetic, and the partition function can be approximated in polynomial time to with any specified relative error [\cite=JSising]. A direct approach using Markov chain Monte Carlo (MCMC) on the spin configurations described above fails, as the spin model exhibits a phase transition for sufficiently large β. However, there is an equivalent formulation of the Ising model in terms of "even subgraphs" which does form the basis for a successful application of MCMC, as was shown by Jerrum and Sinclair [\cite=JSising]. (See Sections [\ref=sec:IsingRC] and [\ref=sec:evensubgraph] for details of the various models referred to in this introduction.)

There is a third model which is equivalent to the Ising model in the sense of having the same partition function up to an easily computable factor, namely the random cluster model introduced by Fortuin and Kasteleyn [\cite=FortuinKasteleyn]. In common with the even subgraphs model, the configurations of the random cluster model are subsets of the edge set of G. However, the random cluster model is more tightly related to the Ising model; in fact a random Ising configuration can be obtained by colouring the connected components (clusters) of a random cluster configuration independently and uniformly at random by 0 and 1. Although we already have a polynomial-time algorithm for estimating the partition function of the Ising model, it is natural to wonder about the mixing time of the Gibbs sampler for random cluster configurations, which makes single edge-flip moves with Metropolis rejection probabilities. For one thing, this dynamics may potentially mix faster than the standard dynamics for the even subgraphs model, and the same is true with even greater force for the closely related Swendsen-Wang algorithm.

Another reason for focusing on the random cluster model is that it extends the other two models in the following sense. There is a generalisation of the Ising model to [formula] spins, known as the q-state Potts model, of which the Ising model is the special case q = 2. Although the even subgraphs and spin formulations are defined only for integer q, the random cluster model makes sense for arbitrary positive real q. Thus, by studying the dynamics of the the random cluster model at q = 2, we may gain insight into the complexity of computing the partition function of the random cluster model at other values of q, particularly (for reasons that will be explained presently) in the range 0  ≤  q < 2. Stated in other terms, we would hope to gain information about the complexity of approximating the Tutte polynomial T(G;x,y) in the region 0  ≤  (x - 1)(y - 1) < 2, and [formula], about which nothing is currently known except for the point x = y = 1 and the (trivial) hyperbola (x - 1)(y - 1) = 1 [\cite=Tutte1] [\cite=Tutte2].

In this paper we prove for the first time that the Gibbs sampler (single edge-flip dynamics) for the random cluster model on an arbitrary graph mixes in time polynomial in n = |V(G)|, the number of vertices of G. (See Theorem [\ref=thm:RC:fast].) One main tool is the well known canonical paths technique for bounding mixing time via a parameter known as congestion (in the form presented by Sinclair [\cite=Sin92], building on work of Diaconis and Stroock [\cite=DS93]). Another tool is a coupling between random cluster and even subgraph configurations discovered by Grimmett and Janson [\cite=GrimmettJanson]. The existence of this coupling invites us to bound the congestion of the edge-flip dynamics on random cluster configurations in terms of the known bounds on congestion for the edge-flip dynamics on (augmented) even subgraph configurations, established by Jerrum and Sinclair [\cite=JSising]. Unfortunately, this translation between the models cannot be handled by existing comparison techniques [\cite=DS93] [\cite=comparison], and an extension of comparison methods to the current situation is a contribution of the paper, and one that may find application elsewhere.

The Swendsen-Wang algorithm [\cite=SwendsenWang] is widely considered to be an efficient method for sampling random cluster configurations (and Ising spin configurations) in practice. Ullrich has shown [\cite=Ullrich:Comparison] that the Swendsen-Wang dynamics mixes at least as fast as the edge-flip dynamics, so our result provides the first polynomial upper bound on mixing time of the Swendsen-Wang algorithm. This provides a partial answer to a problem that has been open since around 1990, when the Ising model was first studied from a complexity-theoretic perspective. The answer is partial in the sense that the exponent in the bound we derive here is likely to be well above the true answer, and is certainly too high to be of practical interest. Hopefully, the result presented here may be the first step on the road to a practically useful upper bound on the Swendsen-Wang dynamics.

Since the random cluster model is defined for all positive real q, it is natural to speculate on the mixing time of the Glauber dynamics when [formula]. For q > 2, the mixing time cannot be polynomial in general, owing to a first-order phase transition of the model on the complete graph (the "mean-field" situation) identified by Bollobás, Grimmett and Janson [\cite=BollobasGrimmettJanson]. This phase transition is a barrier to rapid mixing when q > 2, as shown by Gore and Jerrum when q is an integer [\cite=GoreJerrum], and by Blanca and Sinclair [\cite=BlancaSinclair:Meanfield] for general q > 2. For q sufficiently large, Borgs et al. [\cite=torpid] prove exponential time mixing even in the physically important case of the two-dimensional lattice. In fact, there is no polynomial-time algorithm of any sort for evaluating the partition function of the random cluster model on general graphs when q > 2, unless there is an FPRAS for counting independent sets in a bipartite graph [\cite=GoldbergJerrum:Potts]. In contrast, in the range [formula] there is no known barrier to rapid mixing, and there is cause to be optimistic, particularly in the range 1 < q < 2, in which the random cluster model is monotonic.

In this version of the paper, we do not try too hard to optimise the exponent in the mixing-time bound, as the method we employ is unlikely to get close to the true answer.

Ising and Random Cluster model

The ferromagnetic Ising model on a graph G = (V,E) with parameter β > 1 is defined by the following: for any σ∈{0,1}V, the probability of being in configuration σ is

[formula]

where m(σ) is the number of mono-chromatic edges in σ, and its normalizing factor, the so-called partition function, is defined as

[formula]

The random cluster model with parameters (p,q) is defined on subsets of edges S  ⊆  E such that

[formula]

and its partition function is

[formula]

Denote this measure by πRC;p,q(  ·  ) or simply πRC(  ·  ) when there is no confusion. We use Ω throughout this article to denote the state space of random cluster models, namely {0,1}E. It is well known that, for q = 2 and [formula], the random cluster model is equivalent to the Ising model in the sense that their partition functions are equal up to some easily computable factor (see [\eqref=eqn:equivalence]). The random cluster model was introduced by Fortuin and Kastelyn [\cite=FortuinKasteleyn], who also described its relationship to the Ising model. The connection between the two models was further elucidated by Edwards and Sokal [\cite=EdwardsSokal].

The (lazy) single bond flip dynamics PRC is defined as follows based on the Metropolis filter.

[formula]

where x,y∈Ω. It is not hard to see, for example, by checking the detailed balance condition, that πRC(  ·  ) is the stationary distribution of PRC. Note that the Markov chain is lazy, i.e., it remains at its current state with probability at least [formula]. This eliminates the possibility of the transition matrix having P having negative eigenvalues, and simplifies the analysis later.

For a Markov chain with transition matrix P and stationary distribution π, we are interested in its mixing time, that is, how fast it converges to the stationary distribution, defined as follows:

[formula]

where ||  ·  || is the total variation distance, namely

[formula]

Canonical paths are a useful technique to bound the mixing time of Markov chains, introduced by Jerrum and Sinclair [\cite=SJ] [\cite=JSperm]. Let Γ  =  {γxy:x,y∈Ω} be a collection of paths, where γxy is a "canonical" path from x to y using transitions of the Markov chain. The congestion ρ(Γ) associated with these paths is

[formula]

where L = L(Γ) denotes the maximum length of paths in Γ.

A more general technique is provided by the flow formulation for congestion. A flow Γ is a collection of paths, and each path γ∈Γ is assigned a weight wt(γ), such that

[formula]

The congestion of Γ is defined as

[formula]

The canonical paths are just a flow where for each pair (x,y) there is only one path with positive weight.

It is standard that the mixing time of a Markov chain P can be bounded by the congestion of any flow Γ [\cite=Sin92].

For a lazy, ergodic, reversible Markov chain P and any initial state x0∈Ω,

[formula]

Our goal is to bound τε(PRC). We can choose the initial state to be the empty set of edegs, which has weight [formula]. Also for [formula] we have ZRC(p,2) = β- |E|ZIsing(β)  ≤  2|V|, and therefore [formula]. Hence, ln π(x0)- 1  ≤  m ln (1 - p)- 1. The main task is to design a good flow ΓRC so that ρ(ΓRC) is bounded by a polynomial.

Random Even Subgraphs

There is yet another formalism of the Ising model, that is, the so-called "high-temperature expansion" or even subgraphs model. We still pick a subset of edges S  ⊆  E but with the further restriction that every vertex in the induced subgraph (V,S) has even degree. Denote by Ωeven(G) the state space of all such even subgraphs of G. We usually simply write Ωeven when there is no confusion. In this even subgraphs model we want to sample from Ωeven with parameter p  ≤  1 / 2, so that edges are more inclined to be "out" than "in". That is, for any S∈Ωeven,

[formula]

and

[formula]

Distributions [\eqref=eqn:Ising], [\eqref=eqn:RC], and [\eqref=eqn:even] have in fact the same partition function, up to certain scaling factors:

[formula]

The first equivalence is well-known, cf. [\cite=Grimmett:book]. The second one is also a classical result, cf. [\cite=Wae41]. More detailed explanations can be found in Appendix [\ref=sec:equivalence].

Grimmett and Janson [\cite=GrimmettJanson] discovered the following coupling between even subgraphs and random cluster configurations. Take a random even subgraph S from distribution [\eqref=eqn:even] with parameter p  ≤  1 / 2. Then we add each edge [formula] independently with probability [formula] to get R.

The subgraph R is a random cluster configuration, that is, it satisfies [\eqref=eqn:RC] with parameters (2p,2).

For completeness we give a proof of Theorem [\ref=thm:GJ:coupling].

The number of even subgraphs of a (not necessarily simple) graph G = (V,E) is well known to be

[formula]

where κ(G) is the number of connected components of G.

For each r  ⊆  E,

[formula]

where N(r) is the number of even subgraphs of (V,r). By [\eqref=eqn:even:number], N(r) = 2|r| - |V| + κ(r). Hence,

[formula]

However, it is not clear how to sample from Ωeven with edge weights directly in an efficient way, partly because of the rigid structure of the all even requirement. On the other hand, Jerrum and Sinclair [\cite=JSising] designed a Markov chain to do so by moving among all subgraphs, but with each odd degree vertex incurring a penalty. Note that the Jerrum-Sinclair Markov chain together with the Grimmett-Janson coupling (Theorem [\ref=thm:GJ:coupling]) yields an efficient sampler for random cluster models and Ising configurations. It is more straightforward and efficient than the one given by Randall and Wilson [\cite=RW99], which also uses the Jerrum-Sinclair chain.

A slightly simpler Markov chain is to move between even subgraphs and near-even subgraphs, for which we allow exactly two odd degree vertices (or "holes"). This is the so-called "worm" process, introduced by Prokof'ev and Svistunov [\cite=PSworm].

Let Ωk be the collection of subgraphs where k many vertices have odd degrees. Then Ω0  =  Ωeven and the state space Ωworm of the "worm" process is [formula]. For each pair of vertices (u,v) such that u  ≠  v, denote by Ω(u,v) the set of subgraphs of G in which u and v have odd degrees and all other vertices are even. Then

[formula]

For a subset of edges S  ⊆  E, let [formula]. We give a penalty of n- 2 to each near-even subgraph:

[formula]

The "worm" measure is defined as the following:

[formula]

where [formula].

The winding idea of [\cite=JSising] provides a way to design canonical paths between states in Ωworm with low congestion. We will not need to analyze it in full detail for the worm process. Instead, we only care about paths from an even subgraph to another.

There is a collection of paths

[formula]

such that wt(γxy) = πeven(x)πeven(y), and for any γ∈Γworm and any state w∈γ, w∈Ωworm. Each state w appears at most once in γ and L(Γworm)  ≤  m. Moreover, for any transition (w,w') where [formula],

[formula]

In the special case [formula] for some [formula], we have the additional bound

[formula]

Note that Γworm is not a complete collection of canonical paths for πworm(  ·  ). The proof of Theorem [formula] is an adaptation of [\cite=JSising] and is given in Appendix [\ref=sec:worm]. Note that Collevecchio et al. [\cite=Collevecchio:worm] give an analysis of a complete set of canonical paths for the worm process, but their result does not quite fit our situation.

Since paths in Γworm go through Ωworm instead of Ωeven, we need to extend Theorem [\ref=thm:GJ:coupling] to Ωworm. It will no longer be exact.

Take a random subgraph S from distribution [\eqref=eqn:worm:measure] with parameter p  ≤  1 / 2. Again we add each edge [formula] independently with probability [formula] to get R. Call this measure π̂(  ·  ).

For any R  ⊆  E,

[formula]

Similarly to the proof of Theorem [\ref=thm:GJ:coupling], it is not hard to see that

[formula]

where N(R), as before, is the number of even subgraphs of (V,R), and N'(R) is the number of subgraphs of R that belong to Ω2. Note that for each near-even subgraph there is a penalty of n- 2 for its weight (see [\eqref=eqn:worm:weight]). We use [\eqref=eqn:even:number] to count the number of even subgraphs of R, which is 2|R| - |V| + κ(R).

Let ΩR(u,v) be the set of near even subgraphs of R with holes u and v. If u,v are in different connected components of (V,R), then there is no possible such subgraph and |ΩR(u,v)| = 0. Otherwise u,v are in the same component of (V,R), and we can add an extra edge (u,v) to R to get a graph R'. Applying [\eqref=eqn:even:number] to R' we get that

[formula]

The second equality is because each even subgraph of R' either uses the new edge (u,v) or not. If it uses (u,v), then it is an even subgraph of R. Otherwise it is a near even subgraph of R with holes u and v. Hence,

[formula]

as N(R) = 2|E| - |V| + κ(R).

Let c(R) be the number of pairs of vertices from every component of (V,R). That is,

[formula]

where ni is the size of the ith component of (V,R) with the convention that [formula]. Then we have that

[formula]

and

[formula]

The lemma follows by noticing that [formula].

Lifting Canonical Paths

Let p  ≤  1 / 2 be the parameter of the even subgraph and the worm measure. Let Γworm be the collection of paths as in Theorem [\ref=thm:path:worm]. We will use Lemma [\ref=lem:worm:coupling] to lift Γworm to a flow ΓRC for PRC, the single edge-flip Markov chain for the random cluster model with parameter 2p.

We first construct a flow ΓRC' from Γworm. Let [formula] be a path in Γworm where [formula], and [formula]. We lift γ to a flow (random path) as follows. First we add each edge [formula] with probability [formula] independently as in Lemma [\ref=lem:worm:coupling], to obtain the starting state Z0 of the path. In other words, letting

[formula]

for subsets of edges w  ⊆  z  ⊆  E, we draw a superset Z0 of w0 such that [formula] for any z  ⊇  w0. Note that

[formula]

by Theorem [\ref=thm:GJ:coupling], and

[formula]

by definition.

We construct [formula] inductively. Given Zk - 1 for [formula], we construct Zk by mimicking the transition from wk - 1 to wk while ensuring that

[formula]

for any z  ⊇  wk at the same time. Here the subscript γ emphasises that probabilities are with respect to a fixed path γ. By induction hypothesis, [formula] for any z  ⊇  wk - 1. For Zk, there are two cases:

If [formula] for some edge [formula], then let [formula]. We have that

[formula]

for any z  ⊇  wk.

If [formula] for some edge e∈wk - 1, then let Zk = Zk - 1 with probability p' and [formula] with probability 1 - p'. For any z  ⊇  wk such that e∈z,

[formula]

and for any z  ⊇  wk such that [formula],

[formula]

Given γ, the random flow path [formula] is constructed as above. For a particular flow path [formula] lifted from some path γ, assign its weight to be

[formula]

This finishes the construction of ΓRC'.

However, ΓRC' is not a valid flow for πRC(  ·  ). If we randomly draw a path from ΓRC' according to wt(  ·  ), then Z0 and [formula] both are distributed according to πRC(  ·  ). However, [formula] is correlated with Z0 and is not distributed correctly conditional on Z0.

We resolve this issue next by constructing ΓRC. Given γ∈Γworm with length [formula], we construct [formula] the same as in ΓRC'. To repair the distribution of [formula], we append further transitions to re-randomize edges that are not in [formula]. More precisely, let [formula] be the edges that are not in [formula] where [formula]. Given [formula] for 1  ≤  i  ≤  k, let [formula]. Then [formula] with probability 1 - p' and [formula] with probability p'. As in ΓRC', for a particular flow path [formula] lifted from some γ, its weight is defined to be

[formula]

This finishes the construction of ΓRC. The longest path in ΓRC has length at most L(Γworm) + m, that is, L(ΓRC)  ≤  L(Γworm) + m  ≤  2m.

Fix a path [formula]. For any [formula] and z  ⊇  wi, we have [formula], because of the construction of ΓRC'. Moreover, for any [formula] and [formula], we have [formula]. This can be shown by inductively going through the construction above. The re-randomization does not change the marginal distribution but removes the correlation between Z0 and [formula], where [formula] (conditional on γ).

The flow ΓRC is valid for πRC(  ·  ). We verify [\eqref=eqn:flow:requirement] as follows:

[formula]

where in the last step we use Theorem [\ref=thm:GJ:coupling].

Let 2p  ≤  1 be the parameter for the random cluaster model.

For a transition (z,z') where [formula] for some [formula],

[formula]

For a transition (z,z') where [formula] for some e∈z,

[formula]

For a transition (z,z),

[formula]

Fix γ, let Z be a random path lifted from γ and [formula] be the length of γ. Thus the path is [formula] and, in particular, the final state of the path is [formula]. For a state w∈γ, let i(γ,w) be index of w in γ and k(w,e) be the index of e in [formula]. Any w only appears once in γ∈Γworm and hence i(γ,w) is well defined.

We want to bound the traffic in ΓRC that goes through (z,z'). Depending on z', we have three cases.

First assume that [formula] where [formula]. The traffic may be from ΓRC' transitions or from the part we append at the end of each ΓRC' path. Hence we have the following bound:

[formula]

where [formula]. Hence by Theorem [\ref=thm:path:worm],

[formula]

where we use Lemma [\ref=lem:worm:coupling] in the last line. Also note that πeven(w) = 0 if [formula].

Next assume that [formula] where e∈z. Similar to the previous case, we have that

[formula]

Again we use Theorem [\ref=thm:path:worm] and Lemma [\ref=lem:worm:coupling]:

[formula]

At last we handle the case that z = z'. Then we have the following bound

[formula]

By Theorem [\ref=thm:path:worm] and Lemma [\ref=lem:worm:coupling],

[formula]

ρ(ΓRC)  ≤  8m2n4.

For any transition (z,z') where [formula] for some [formula],

[formula]

where we use Lemma [\ref=lem:congestion:gammahat] in the first line and p  ≤  1 / 2 in the last.

Similarly, for a transition (z,z') where [formula] for some e∈z,

[formula]

where we use Lemma [\ref=lem:congestion:gammahat] in the first line and p  ≤  1 / 2 in the last.

For any transition (z,z') where z' = z, since the chain is lazy, PRC(z,z')  ≥  1 / 2 and

[formula]

where we use Lemma [\ref=lem:congestion:gammahat] in the first line.

Combining Theorem [\ref=thm:mixingtime:congestion] and Lemma [\ref=lem:remove-hat] gives us desired mixing time bound for PRC.

For the random cluster model with parameters 0 < p < 1 and q = 2,

[formula]

Equivalence of the three views

The equivalence between the Ising model and the random cluster model with q = 2 can be found in [\cite=Grimmett:book]. It can also be seen as the following. Instead of assigning vertices 0 or 1, we may assign "equal" or "independent" to edges. Each "equal" edge has an weight of β - 1, and "independent" has weight 1. This is the same as the Ising model, since for each edge, if the two end points are equal, the weight is β - 1 + 1 = β, whereas if the two endpoints are not equal, the weight is 1. For a subset S  ⊆  E of edges being "equal", each component of S has two possible assignments. Therefore the weight of S is (β - 1)|S|2κ(S). After rescaling by β|E| this matches the random cluster formulation [\eqref=eqn:RC] with [formula] and q = 2. This gives the first equality of [\eqref=eqn:equivalence].

The equivalence between the Ising model and even subgraphs model can be explained via a holographic transformation by Hadamard matrix [formula]. In the Ising model, vertices have functions Equality on its adjacent d many half-edges, which after the transformation becomes Even function, defined as follows:

[formula]

On the edges, the function (on the two half-edges) is

[formula]

whereas after the transformation it is

[formula]

a weighted equality function. Therefore, for a subset S of edges (both half-edges are 1), its weight is

[formula]

The requirement of S∈Ωeven arises because each vertex requires even degree, and when all degree constraints are satisfied, the vertices contribute 2|V| in total. We may rewrite the weight of S∈Ωeven:

[formula]

Hence setting [formula] matches [\eqref=eqn:even] and taking out appropriate scaling factor yields the second equality of [\eqref=eqn:equivalence].

Congestion of the worm process

Throughout this section fix p  ≤  1 / 2. Recall that Ωk is the collection of subgraphs where k many vertices have odd degrees. Then Ω0  =  Ωeven, and [formula]. Define

[formula]

where [formula]. Then Z0 = Zeven(p) and Zworm(p) = Z0 + n- 2Z2.

If we adopt the holographic transformation view of the even subgraphs model, then a vertex that only allows odd degrees is equivalent to the following function:

[formula]

Transforming back to the Ising model, this vertex is still an Equality on all adjacent half-edges, but with a weight of - 1 when all half-edges are assigned 1. Hence for every u,v∈V,

[formula]

because the left hand side can be transformed to the original Ising with u and v having weights - 1. We can sum over all possible pairs of vertices in [\eqref=eqn:two:holes], getting [formula].

[formula].

Lemma [\ref=lem:Z4] implies that [formula].

Now we are ready to prove Theorem [\ref=thm:path:worm].

Let I and F be two configurations in Ω0, denoting the initial and final states. Then [formula]. The canonical path from I to F will be identical to those in [\cite=JSising]. Fix an arbitrary ordering of all cycles in G. For each cycle we designate a starting vertex and a direction around the cycle. Hence each cycle is an ordered tuple of edges. Since [formula] is an even subgraph, we can cover [formula] by a collection of edge-disjoint cycles. Let [formula] be the first such in our ordering. Let [formula] be the edges of [formula] taken in order (first order the edges according to the cycle they occur in, and then by their position within the cycle, counting from the start vertex). The canonical path γ from I to F is defined to be Z0 = I, [formula], and Zk = F. Intuitively the canonical path unwinds Ci one by one from i = 1 to i = r. Clearly L = L(Γworm)  ≤  m as it can use every edge at most once.

This path is always in [formula] because if we start to unwind a cycle, then the current state is an even subgraph. If we are unwinding a path, then we always flip an edge that is adjacent to an odd degree vertex.

For any transition (w,w') where [formula] for some edge e∈E, we use a combinatorial encoding as in [\cite=JSising] for all paths passing through (w,w'). For any two configurations I,F∈Ω0, let [formula]. We claim that [formula] is an injection. This is because given (w,w') and U = φ(I,F), we can recover the unique (I,F). First, since [formula], all edges not in [formula] have the same state in both I and F, and their states are the same as those in w. Then for edges in [formula], due to the construction of the canonical path, there is a unique ordering among those edges, including [formula]. For any edge before e, its status in w has been changed to that in F, and its status in U is still the same as that in I. For any edge after e (including e itself), its status in w is still the same as that in I, and in U is the same as in F.

Recall that [formula] for any subset of edges S  ⊂  E. Since [formula] and [formula], we have that

[formula]

Therefore,

[formula]

By the definition of πworm [\eqref=eqn:worm:weight] and [\eqref=eqn:worm:measure], [formula]. This implies that

[formula]

For the last claim of the theorem, let [formula] for some [formula]. We can do the same combinatorial encoding for w'. That is, let [formula]. It is easy to verify as above that φ' is an injection. Then as above,

[formula]