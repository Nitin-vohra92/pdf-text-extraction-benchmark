Geometric transformations of multidimensional color images based on NASS

Introduction

Quantum computing is a combination of quantum mechanics and computer science. As a new computing paradigm, it offers one possible solution to the challenge posed by the failure of Moore's law [\cite=bibitem13]. Quantum computing [\cite=bibitem1] has several unique computational features such as quantum coherence, entanglement, and superposition of quantum states, which make quantum computing superior to its classical counterpart in information storage and parallel computing [\cite=bibitem1]. Quantum algorithms such as the quantum Fourier transform [\cite=bibitem13] [\cite=bibitem2] are more efficient than their classical counterparts, as the quantum Fourier transform on 2n elements can be performed with O(n2) gates, while the best classical analog, the Fast Fourier Transform(FFT), needs O(n2n) gates to implement [\cite=bibitem13]. Other famous quantum algorithms such as Shor's discrete logarithms and integer-factoring algorithms [\cite=bibitem2], Deutsch's parallel computing algorithm with quantum parallelism and coherence [\cite=bibitem3], and Grover's quadratic speed-up for an unordered database search algorithm [\cite=bibitem4] [\cite=bibitem45] have further shown the advantage of quantum computing over its classical counterpart. It has been an important problem to come up with quantum algorithms for known classical ones.

One reason that a quantum system is superior to a classical computer in information storage is due to the fact that the amplitude or phase of a quantum state can be used to store information [\cite=bibitem11]. In fact, if we consider a system of n qubits that stores 2n complex numbers, for n = 500, 2500 is larger than the estimated number of atoms in the whole universe. Thus, trying to store all of these complex numbers would not be possible using any conceivable computer [\cite=bibitem13]. In a quantum system, if the frequency of the physical nature of a color represents its color instead of the RGB model or the HIS model [\cite=bibitema4] [\cite=bibitema5] [\cite=bibitema53], a color can be stored using only a 1-qubit quantum state [\cite=bibitem5] and an image may be stored as a quantum array [\cite=bibitem5] [\cite=bibitem6]. A flexible representation of quantum image (FRQI) state stores the colors and coordinates of a two-dimensional (2D) gray image with 2n pixels using (n + 1) qubits [\cite=bibitem7]. Maximally entangled qubits can be used to represent the vertices of polygons, so images can be reconstructed without using any additional information [\cite=bibitem6]. Information storage and retrieval were achieved based on the quantum amplitude in previous studies, but they can be also implemented based on the quantum phase [\cite=bibitem11].

Quantum computing is implemented via quantum gates. Universal quantum gates are expressed as combinations of single-qubit and two-qubit gates [\cite=bibitem13] [\cite=bibitem14], where two-qubit gates are universal in quantum computing [\cite=bibitem15]. In [\cite=bibitem16], an efficient scheme has been proposed for initializing a quantum register with an arbitrary superposed state and the application of the scheme to three specific cases was also discussed.

Many applications in both 2D and three-dimensional (3D) biomedical imaging require efficient techniques for geometric transformations of images [\cite=bibitema54] [\cite=bibitem17]. A polynomial interpolator structure is used for the high-quality geometric transformation of 2D and 3D images in a classical computer system [\cite=bibitem17]. In a quantum system, linear transformations [\cite=bibitem8] [\cite=bibitem9] [\cite=bibitem19], including two-point swappings, flips, orthogonal rotations, and restricted geometric transformations, are applied to 2D images based on their FRQI state. In addition, secure and efficient image processings for quantum computers have been described [\cite=bibitem21] [\cite=bibitem28], and these include quantum watermarking [\cite=bibitem9], quantum image encryption and decryption algorithms [\cite=bibitema52] [\cite=bibitem42] [\cite=bibitema51] [\cite=bibitem22].

An n-qubit normal arbitrary superposition state (NASS) can represent a k-dimensional color image (including pixels and colors) where n qubits encode the colors and coordinates of 2n pixels (e.g., a five-dimensional color image of 1024  ×  1024  ×  1024  ×  1024  ×  1024 using only 50 qubits) [\cite=bibitem25] [\cite=bibitem40]. Based on NASS and the color treatment strategy described in [\cite=bibitem10], we propose a new scheme to implement geometric transformations for multidimensional color images, including two-point swappings, symmetric flips, local flips, orthogonal rotations, and translations. The quantum circuit of a two-point swapping is designed using Gray codes. The quantum circuits of other geometric transformations are implemented in terms of two-point swapping circuits.

The remainder of this paper is organized as follows. Some basic quantum gate operations and a k-dimensional color image representation are described in Section 2. Geometric transformations for multidimensional color images are discussed in detail in Section 3. The simulated experiments are designed in Section 4. The conclusions are given in Section 5.

Basic quantum gates and representation of k-D color images

Quantum circuits

By the evolution postulate of quantum mechanics [\cite=bibitem13], the evolution of a closed quantum system is a reversible process. There are several well-known models of reversible quantum systems, and the notable ones are the quantum Turing machine [\cite=bibitem3], quantum circuit model [\cite=bibitema1], quantum cellular automation [\cite=bibitema2] and so on. These models are essentially equivalent [\cite=bibitema3], so we choose the easiest quantum circuit model to describe geometric transformations. A quantum circuit consists of a series of quantum gates to realize a specific function. Some quantum circuits are shown in Figure [\ref=fig:1]. These circuits are executed from left-to-right, and each line in the circuits represents a wire. Equivalently a quantum circuit is a realization of a unitary matrix.

Basic quantum gates

The state of a quantum system is described by a unit vector called ket in a Hilbert space. The left and right kets are denoted by [formula] and [formula] respectively [\cite=bibitem13].

Let [formula] and [formula] be arbitrary two states given by

[formula]

and

[formula]

where [formula] denotes the matrix transpose and [formula], the set of complex numbers. The Hermitian conjugates of [formula] and [formula] are denoted by

[formula]

and

[formula]

where u+i and v+i are the complex conjugates. The special states [formula] and [formula] are defined as

[formula]

The tensor product of column matrices is defined by

[formula]

which is also written simply as [formula] or [formula].

The n fold tensor product [formula] of the operator U is abbreviated as [formula]. Similarly [formula] is expressed as [formula].

A linear operator A is unitary if AA +   =  A + A  =  I, where A +  is the conjugate transpose of A and I is the identity operator shown in Figure [\ref=fig:1].

Some of the basic gates and their corresponding matrices are shown in Figure [\ref=fig:1]. The identity (I), Hadamard (H), and Pauli-X (X) gates are well-known and can be found in the basic reference [\cite=bibitem13]. The gates U, UC1, UC0, and Cn(U) are the fourth, fifth, sixth, and seventh gates in Figure [\ref=fig:1]. They are defined as follows.

Let [formula] and [formula] be two arbitrary states

[formula]

Then the action of U is given by

[formula]

When U is the Pauli-X gate, Eq. ([\ref=eqn_315x2]) becomes

[formula]

Apply the UC1 and UC0 gates to the states [formula] and [formula] in Eq. ([\ref=eqn_315x1]), respectively:

[formula]

and

[formula]

where [formula] is shown in Eq. ([\ref=eqn_315x2]).

When U is the Pauli-X gate, then UC1 and UC0 are designated as NC1 and NC0, respectively, which are also called the controlled-NOT, as shown in Figure [\ref=fig:2]. Therefore,

[formula]

and

[formula]

The Cn(U) (n  ≥  3) gate associated with [formula] acts on the n-fold tensor product of the Hilbert space. Its action on the tensor product of n one-qubit states [formula] is given by

[formula]

where the function [formula] is defined by

[formula]

For [formula], one also defines the gate Cn(Uk) as the composition of Cn(U) and the permutation operator Pk,n, which switches the kth and nth factors of arbitrary tensor product of n one-qubits:

In particular, for the Pauli X-gate, the gate Cn(Xk) ([formula]) associated with [formula] is shown in Figure [\ref=fig:x2]. Its exact action on the tensor product [formula] is given by

[formula]

where [formula] is defined in Eq. ([\ref=e:function]). For example, when n  =  3 and i1  =  i3  =  1, we have [formula].

Representation of a quantum image

We recall how NASS represents a multidimensional color image [\cite=bibitem40].

Suppose there are M colors and [formula] is a sorted set of the colors. We convert the ith color to an angle value by

[formula]

where [formula]. This establishes a one-to-one correspondence F1 between the sorted color set and a sorted angle set [formula]. For RGB color images, M  =  224, let x,y,z be the values of R,G,B in 24-bit RGB True Color, and let i  =  x  ×  256  ×  256  +  y  ×  256  +  z  +  1. Thus, colori corresponds to the value (x,y,z) of RGB. For instance, color1 and color16777216 correspond to the RGB values (0,0,0) and (255,255,255) respectively.

By a k-dimensional color image, we mean a k-dimenisional lattice of size [formula], where each lattice point is painted with a color. For simplicity we often assume that the image has spread out the full range of [formula] in the ith axis, and if the actual size is less, we can take the color to be empty in the remaining spots, and then we enlarge the color set by the empty color. We only consider the n-dimensional skeleton situated in the positive direction of each axis. Let [formula], then we assign the image a quantum superposition state in the 2n-dimensional Hilbert space:

[formula]

where [formula] correspond to the k axes of the image respectively and ai is the angle value at the site i. The running index i goes through all lattice points of the image, and [formula] is its binary expansion obtained by taking the superposition of [formula], where [formula], [formula] and [formula] are in their binary expansions. Thus [formula] is the coordinate [formula] of i in the k-dimensional space and ai∈φ is the value of the color at site i. We define the NASS state of the image to be the normalized state

[formula]

where [formula]. Note that the magnitude square [formula] is a constant for the image, so θi can replace ai to represent the color at the site i. In this way the NASS state [formula] in Eq. ([\ref=eqn_3]) represents a k-dimensional color image.

Each axis |vi〉 spans a Hilbert space of dimension 2mi. In view of its role in the image, we abuse the notation to denote dim (|vi〉) = mi and also call it the size of the state |vi〉. e.g., [formula], and we have

[formula]

where [formula] is the NASS state shown in Eq. ([\ref=eqn_3]).

To make Eq. ([\ref=eqn_3]) clearer, let us consider [formula], [formula] as an example. The NASS state representing a multidimensional color image with 2n pixels is written explicitly as follows.

[formula]

where 1  ≤  j  ≤  k and the binary expansion of the integer i is

[formula]

Substituting n  =  5, k  =  2, m1  =  2 and [formula] into Eq. ([\ref=eqn_316x5]), we obtain

[formula]

which represents the 2D color image shown in Figure [\ref=fig:x4].

Substituting n  =  5, k  =  3, m1  =  2, m2  =  2 and [formula] into Eq. ([\ref=eqn_316x5]), we obtain

[formula]

which represents the 3D color image shown in Figure [\ref=fig:x5].

Substituting n  =  5, k  =  5, and [formula] into Eq. ([\ref=eqn_316x5]), we obtain

[formula]

which represents the five-dimensional (5D) color image shown in Figure [\ref=fig:x6].

Geometric transformations for multidimensional color images

Geometric transformations on quantum images [\cite=bibitem8], such as two-point swappings, flips, and orthogonal rotations, can be applied to 2D images based on the FRQI state. Using [\cite=bibitem8] [\cite=bibitem19], we discuss geometric transformations for multidimensional color images based on the NASS state.

Two-point swappings

A two-point swapping GT for a k-dimensional image is the linear operator defined by

[formula]

where [formula] and [formula] are the coordinates of the two swapped pixels, and [formula] run through the coordinates of the other pixels.

Since [formula], GT is a unitary operator. Applying GT to the NASS state [formula] in Eq. ([\ref=eqn_3]), we get

[formula]

That is, GT swaps two colors of a k-dimensional color image. We can use Gray codes [\cite=bibitem13] to design a quantum circuit for the operator GT of two-point swapping. Suppose that s and t are two distinct binary numbers, then a Gray code connecting s and t is a sequence of binary numbers that starts with s and ends with t such that adjacent binary numbers in the list differ by exactly one bit. For example, a Gray code connecting [formula] and [formula] is

[formula]

Suppose s and t are two binary numbers with at most n digits different. Then we can find a Gray code [formula] to connect s and t with m(  ≤  n + 1) elements, where g1  =  s and gm  =  t. Since the elements gi and gi   +   1 (1  ≤  i  ≤  m  -  1) differ at only one location, we can implement the transformation [formula] by the Cn(Xk) gate shown in Figure [\ref=fig:x2]. For example, when [formula] and [formula], where [formula] and [formula] are two elements of the Gray code in Eq. ([\ref=eqn_318x1]), the Cn(Xn   -   1) gate in Figure [\ref=fig:x2] sends [formula] to [formula].

To understand implementation of the quantum circuits for two-point swapping more clearly, let us consider a k-dimensional color image with [formula] pixels as an example. Suppose that the NASS state [formula] in Eq. ([\ref=eqn_316x5]) represents the image. In addition, assume that [formula] and [formula] are the coordinates of the two swapped pixels. The Gray code that connects s and t is shown in Eq. ([\ref=eqn_318x1]), where [formula] are the elements of the Gray code, [formula], and [formula]. We can achieve the two-point swapping of the k-dimensional color image by implementing the transformations as follows (a proof is given in Appendix A).

[formula]

The quantum circuit for the transformations in Eq. ([\ref=eqn_318x2]) is shown in Figure [\ref=fig:8x1].

Since there are more than one Gray codes connecting s and t, the implementation of the two-point swapping of s and t can be done by more than one quantum circuits. For example, if s  =  00101 and t  =  11110, two Gray codes are as follows.

[formula]

and

[formula]

Using the Gray code in Eq. ([\ref=eqn_13]), we can implement the two-point swapping of the 3D color image in Figure [\ref=fig:x5], where the coordinates of the two pixels are [formula] and [formula], i.e., (0,2,1) and (3,3,0). The quantum circuit and the result of the two-point swapping are shown in Figure [\ref=fig:6].

Similarly, we employ the Gray code in Eq. ([\ref=eqn_o13]) to achieve the swapping of [formula] (i.e., (0,0,1,0,1)) and [formula] (i.e., (1,1,1,1,0)) in the 5D color image in Figure [\ref=fig:x6]. The quantum circuit and the result of the two-point swapping are shown in Figure [\ref=fig:x10].

As any quantum circuit can be built using single-qubit and controlled-NOT gates [\cite=bibitem13], we introduce the following notion.

The complexity of a quantum circuit is the total number of single-qubit and controlled-NOT gates (i.e., NC1 in Figure [\ref=fig:2])) in the quantum circuit.

Let [formula] be the n-bit elements of a Gray code connecting s and t, where [formula] and [formula] are the coordinates of the two swapped pixels in GT. The transformations [formula] and [formula] can be achieved by a sequence of Cn(Xk) gates as shown in Figure [\ref=fig:x2]. The final result is an implementation of two-point swapping operators GT with complexity O(n2).

See Appendix A.

Flip transformations

For any vector [formula], we define [formula], where h  =  1  -  jh, [formula].

A symmetric flip [formula] for the NASS state [formula] along the [formula] axis is the linear operator

[formula]

where [formula] is a k-dimensional color image (see Eq. ([\ref=eqn_3])), [formula] are the k axes in a k-dimensional space.

For example, by applying [formula] to the NASS state [formula] in Eq. ([\ref=eqn_316x5]), the result is

[formula]

where [formula], [formula].

The symmetric flip [formula] in Eq. ([\ref=eqn_20X1]) is also expressed as

[formula]

where X is the Pauli spin operator (see Figure [\ref=fig:1]). The implementation of the operator [formula] in Eq. ([\ref=eqn_20X2]) is shown in Figure [\ref=fig:8]. Suppose that [formula], we know that the implementation of the operator [formula] requires m Pauli-X gates, where m < n, i.e., the complexity of the operator [formula] is O(n).

Substituting n  =  5, k  =  5, j  =  1, and [formula] into Eq. ([\ref=eqn_20X1]), we obtain

[formula]

which implements a symmetric flip of a 5D color image. This is shown in part (a) of Figure [\ref=fig:20x1].

Substituting n  =  5, k  =  3, j  =  1, m1  =  2, [formula], and [formula] into Eq. ([\ref=eqn_20X1]), we obtain

[formula]

which realizes a symmetric flip of a 3D color image and is shown in part (b) of Figure [\ref=fig:20x1]. Application of the quantum circuit to the image in Figure [\ref=fig:x5] is shown in Figure [\ref=fig:7].

The operator [formula] can be implemented by [formula] two-point swappings in Eq. ([\ref=eqn_11]). The quantum circuit is reduced to the one shown in Figure [\ref=fig:8], and the complexity of the symmetric flip is O(n).

See Appendix B.

A local flip [formula] for the NASS state [formula] along the [formula] axis is defined as the operator

[formula]

where [formula] represents a k-dimensional color image (see Eq. ([\ref=eqn_3])), and [formula] are the k axes.

Here v(j,h,m) means that for the axis [formula], when jh  ≠  m, the corresponding pixels are not transformed. When jh  =  m, the corresponding pixels are flipped. Suppose that [formula], then [formula], h  =  1  -  jh, [formula].

For example, application of [formula] to the NASS state [formula] in Eq. ([\ref=eqn_316x5]) is

[formula]

where [formula], [formula], [formula], [formula].

The implementation of [formula] is shown in Figure [\ref=fig:14]. From Figure [\ref=fig:14], we know that [formula] is implemented by [formula] NC1 or the NC0 gates in Figure [\ref=fig:2], i.e., the complexity of the operator [formula] is O(n).

Substituting n  =  5, k  =  5, x  =  1, v(j,h,m)  =  v(2,1,1) and [formula] into Eq. ([\ref=eqn_22X1]), we obtain

[formula]

Thus, we have implemented a local flip of a 5D color image. The implementation of the operator [formula] in Eq. ([\ref=eqn_22X2]) is shown in part (a) of Figure [\ref=fig:22x1].

Substituting n  =  5, k  =  3, x  =  1, m1  =  2, [formula], [formula], and v(j,h,m)  =  v(2,1,1) into Eq. ([\ref=eqn_22X1]), we obtain

[formula]

which implements a symmetric flip of a 3D color image. See part (b) of Figure [\ref=fig:22x1] for the diagram. The application of the local flip to the image in Figure [\ref=fig:x5] is shown in Figure [\ref=fig:9].

Orthogonal rotations

An orthogonal rotation [formula] for the NASS state [formula] along the plane spanned by [formula] is defined as

[formula]

where [formula] is a k-dimensional color image (see Eq. ([\ref=eqn_3])), [formula], [formula], and

[formula]

For example, the result after applying [formula] to the NASS state [formula] in Eq. ([\ref=eqn_316x5]) is

[formula]

where [formula], [formula], mx  =  my, [formula], [formula], and

[formula]

A swap gate is illustrated in Figure [\ref=fig:10]. The implementation circuits for [formula] are shown in Figure [\ref=fig:11].

It follows from Figure [\ref=fig:11] that [formula] can be built from mx swap gates shown in Figure [\ref=fig:10] and mx X gates shown in Figure [\ref=fig:1] for [formula] or [formula]. When α  =  π, [formula] can be built by 2mx X gates. Because [formula], the complexity of the orthogonal rotation [formula] is O(n).

Translations

A translation [formula] for the NASS state [formula] along the [formula] axis is defined as the operator

[formula]

where [formula] represents a k-dimensional color image (see Eq. ([\ref=eqn_3])), [formula]. Suppose that [formula], where [formula] is the binary expansion of the integer j, then

[formula]

For example, when [formula], [formula], the translation operator [formula] of a k-dimensional color image is also expressed as

[formula]

The inside factor is called the key of implementing the translation [formula] in Eq. ([\ref=eqn_28]):

[formula]

and the operator Tkey in Eq. ([\ref=eqn_22X10]) can be implemented by two-point swappings successively as follows.

[formula]

The operator Tkey in Eq. ([\ref=eqn_22X10]) can be implemented by [formula] two-point swapping operators. The complexity of the operator Tkey is O(2mm2), and the complexity of the translation [formula] is also O(2mm2), where [formula].

See Appendix C.

The quantum circuit for the translation [formula] is shown in Figure [\ref=fig:t12].

Substituting n  =  5, k  =  5, x  =  4 and [formula] into Eq. ([\ref=eqn_28]), we get the translation [formula] for a 5D color image along [formula] axis

[formula]

After applying the operator [formula] in Eq. ([\ref=eqn_22X14]) to the image in Figure [\ref=fig:x6], the quantum circuit and the result obtained are shown in Figure [\ref=fig:20].

Substituting n  =  5, k  =  3, x  =  2, m1  =  2, [formula], and [formula] into Eq. ([\ref=eqn_28]), we obtain

[formula]

which implements a translation of a 3D color image and is shown in Figure [\ref=fig:13]. The circuits in the three dashed boxes, [formula], [formula], and [formula], implement successively two-point swappings: [formula], [formula] and [formula]. The application of the quantum circuit in part (a) of Figure [\ref=fig:13] to the image in Figure [\ref=fig:x5] is shown in Figure [\ref=fig:12].

Comparison of geometric transformations

Realization of images by geometric transformations over a quantum system is a relatively new research topic. To the best of our knowledge, geometric transformations based on FRQI (GTBFRQI) [\cite=bibitem8] [\cite=bibitem19] seems to be the only available method. Compared with GTBFRQI, our method is capable of handling color and higher dimensional images, while GTBFRQI is only suitable for 2D gray images. Table [\ref=table_1] and Table [\ref=table_2] show the comparison of the two protocols, where N is the number of pixels in the image. Table [\ref=table_1] shows the result of our method to multidimensional color and gray images. To store an image with N pixels, our proposed method requires log N qubits, whereas GTBFRQI needs log N + 1 qubits. Table [\ref=table_2] also highlights that our method includes new transformation functions such as local flips and translations, which were absent in GTBFRQI.

On classical computers, global operators of geometric transformations for an [formula] image are done by [formula]-matrices, so the complexity of implementation is at least [formula] [\cite=bibitema54] [\cite=bibitem17]. In our proposed quantum system, the global operators (symmetric flips, local flips, and orthogonal rotations) in Table [\ref=table_2] can be implemented by [formula] gates using quantum parallel computing.

Experiments of geometric transformations

In the absence of the quantum computer to implement proposed geometric transformations, experiments of quantum images are simulated on a classical computer. The quantum images are stored in column vectors and geometric transformations are implemented using unitary matrices in Matlab.

A 128  ×  128 image is regarded as the input image shown in Figure [\ref=fig:24]. Results of symmetric flips are showed in (a) and (b) of Figure [\ref=fig:25]. The operators of (a) and (b) of Figure [\ref=fig:25] are [formula] and [formula].

[formula] and [formula] are the operators to flip the lower part and the upper part of the original image shown in Figure [\ref=fig:24], respectively. Applications of [formula] and [formula] to the original image of Figure [\ref=fig:24] are showed in (a) and (b) of Figure [\ref=fig:26].

Application of the orthogonal rotations [formula], [formula] and [formula] on the image of Figure [\ref=fig:24] are showed in Figure [\ref=fig:29].

The translation operator [formula] is applied repeatedly 10 times and 30 times on the image of Figure [\ref=fig:24]. Experimental data are showed in Figure [\ref=fig:31].

Conclusions

In this study, we have shown how an n-qubit NASS state represents a k-dimensional color image of N  =  2n pixels, which demonstrates the vast capacity of NASS to store information. For a multidimensional color image based on NASS, the quantum circuits described in this study provide a convenient and efficient method for implementing geometric transformations of two-point swappings, symmetric flips, local flips, orthogonal rotations, and translations. The complexity analysis of the geometric transformations has shown that the global operators (symmetric flips, local flips, orthogonal rotations) can be implemented by O(n) gates, and the local operators (two point swappings) by O(n2) gates. This proves that the global operators are faster than the local ones, while it is the opposite in classical image processing. The translation of a k-dimensional color image is achieved without additional storage space due to quantum parallel computing, which is difficult to achieve on a classical computer. The complexity of all geometric transformations (both global and local) are lower than O(N log N), where N  =  2n is the number of pixels, which implies that a geometric transformation can be constructed with a polynomial number of single-qubit and two-qubit gates. The results of simulated experiments further confirm the validity of proposed geometric transformations. The proposed quantum scheme is one step towards more applications on quantum images with relative low complexity. It is hoped that similar common transformations such as affine and non-rigid transformations can be implemented.

Proof of Theorem [\ref=theorem1]

Note that [formula] and [formula] (1  ≤  i  ≤  m  -  1) differ by exactly one bit, say at the jth bit, i.e.,

[formula]

where [formula], 1  ≤  j  ≤  n.

Note that the quantum circuit X sends |ij〉 to |〉, therefore the Cn(Xj) gate in Figure [\ref=fig:x2] implements that

[formula]

and for [formula],

[formula]

Denote this Cn(Xj) by Ci, i.e. Ci|gi〉 = |gi + 1〉, Ci|gi + 1〉 = |gi〉, and Ci fixes other |gj〉's.

Let [formula]. From ([\ref=eqn_19x2]), ([\ref=eqn_19x3]), and ([\ref=eqn_19x5]) it follows that CT is built by 2m  -  3 gates Cn(Xy) (1  ≤  y  ≤  n), which implements the transformations [formula] and [formula], and we have

[formula]

where [formula] and [formula]. Thus, by applying CT to the NASS state [formula] in Eq. ([\ref=eqn_3]), we have

[formula]

By comparing ([\ref=eqn_19x7]) with Eq. ([\ref=eqn_12]), we have proved that CT  =  GT, i.e., a sequence of quantum gates Cn(Xy), 1  ≤  y  ≤  n, implements the two-point swapping GT.

Since s and t differ in at most n locations, there exists a Gray code such that m  ≤  n  +  1. In addition, the Cn(Xy) gate is implemented using O(n) single-qubit and controlled-NOT (i.e., NC1 in Figure [\ref=fig:2])) gates [\cite=bibitem13] [\cite=bibitem8]. CT is built by 2m  -  3 gates Cn(Xy) (1  ≤  y  ≤  n), thus the complexity of CT is O(n2), i.e., the complexity of a two-point swapping operator GT is also [formula].

Proof of Theorem [\ref=theorem2]

From definition [\ref=def_4], we see that a symmetric flip of a k-dimensional image with 2n pixels requires a swapping of 2n pixel points, thus the operator GviF can be implemented using [formula] two-point swappings, i.e.,

[formula]

and

[formula]

where GTi is the ith two-point swapping operator and [formula] is the NASS state in Eq. ([\ref=eqn_3]). Since both operators are unitary, it is easy to see that

[formula]

which implies that the operator T can be implemented by [formula] two-point swappings (see Figure [\ref=fig:8]). Therefore, the complexity of the symmetric flip is also O(n).

Proof of Theorem [\ref=theorem4]

Set

[formula]

Application of Tkey to [formula] gives that

[formula]

Define a sequence of two-point swappings as follows.

[formula]

Applying [formula] to [formula] in ([\ref=eqn_23x1]), we obtain

[formula]

It follows from ([\ref=eqn_30]) and ([\ref=eqn_32]) that [formula], i.e., the operator Tkey in Eq. ([\ref=eqn_22X10]) can be implemented by [formula] two-point swappings.

By Theorem [\ref=theorem1] we know that the complexity of [formula] is O(2mm2), i.e., the complexity of Tkey is O(2mm2). From Figure [\ref=fig:t12] we see that the complexity of [formula] is the same as that of Tkey, i.e., the complexity of [formula] is also O(2mm2).

Acknowledgments

This work is supported by National Natural Science Foundation of China (Nrs. 61463016, 61462026, 11271138, 11531004), Simons Foundation Grant No. 198129, Program for New Century Excellent Talents in University under Grant No. NCET-13-0795, Landing project of science and technique of colleges and universities of Jiangxi Province under Grant No. KJLD14037, Training program of academic and technical leaders of Jiangxi Province under Grant No. 20153BCB22002, Natural Science Foundation of Jiangxi Province (No. 20151BAB207019), the advantages of scientific and technological innovation team of Nanchang City under Grant No. 2015CXTD003, the research funds of East China Jiaotong University (15XX02 and 15QT02), and an award of China Scholarship Council.