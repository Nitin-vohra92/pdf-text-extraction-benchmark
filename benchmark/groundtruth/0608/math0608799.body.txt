Remark Exercise Question Note Problem Example Theorem Corollary Lemma Proposition Conjecture

Maximally symmetric stable curves II

Introduction

In a previous article [\cite=msc], we determined a sharp bound for the automorphism group of a stable curve of genus g and described all curves attaining the bound. Aaron Bertram asked us if we could find the bound for those curves in the zero dimensional strata of [formula], that is, those stable curves which have exactly 3g - 3 nodes (and thus have all rational components). We answer this question and also find a sharp bound for the automorphism groups of such curves whose components are smooth and rational in this article. To state the result, we need a definition.

For a natural number g, define b(g) to be the number of 1s in the binary expansion of g, and k(g) = g - b(g). Also set h(g) = ⌈g / 2⌉ - b(g).

The optimal graphs for g < 8 in the second case do not follow a clear pattern, but can be found by exhaustive search. A graph whose automorphism group has greater order than the bounds given above for c = 1 will be called special.

Preliminaries

Recall that a stable curve is a connected projective curve with at most nodes as singularities and finite automorphism group. The genus is computed as e - v + 1, where e is the number of nodes and v is the number of irreducible components.

To each stable curve with rational components, one may associate a graph knows as the dual graph of the curve. The graph has one vertex for each component, and two vertices are joined by an edge if and only if the corresponding components meet. If a component is nodal, it meets itself, resulting in a loop in the graph. It is clear that a stable curve of genus g with 3g - 3 nodes has a trivalent dual graph with 2g - 2 vertices.

Since the graphs are trivalent and the automorphism group of [formula]is three-point transitive, the automorphisms of the curve are the same as the automorphisms with the graph with a slight modification: we allow a non-trivial automorphism to fix all the vertices in the graph. More concretely, following what happens for the curves, a loop or a double edge contributes a factor of two to the order of the automorphism group. The graph consisting of two vertices joined by a triple edge has automorphism group of order twelve. Although this is not the usual use of graph automorphism, it is the natural notion coming from the problem, so it is what we will use. One may easily compute the order of the automorphism group of these graphs in the usual sense from our formulas. From this point on, we will forget about the curve, and treat the problem as a problem about graphs. Furthermore, all graphs will be assumed connected unless otherwise stated.

Our goal is to produce graphs which are as close to being trees as possible. Define a cone as the graph which is a triangle with one edge doubled. This graph is cubic except for one vertex of valence two, which will be used to attach it to other graphs.

A tree has a unique vertex or edge which is common to all maximal length geodesics. Call this the root. If H is a graph with valence three at all vertices but two, a pseudocycle of Hs is a graph obtained by replacing each vertex in a cycle by a copy of H.

Our proof will proceed by induction. We define the pinching of a simple edge e in a graph as follows: replace e with two edges meeting in a single vertex. This new vertex is valence two. We will use it to attach the pinched graph to other graphs. Attaching will always be done in such a way that the resulting graph is trivalent. For example, if two pinched trivalent graphs are to be attached, a new edge must be introduced to join the pinched points.

Sometimes we will want to pinch a double edge. Here we will remove the double edge and join the freed vertices. To this new vertex, attach a simple edge, to which the double edge is attached. See Figure [\ref=dep]. For completeness, a pinched triple edge is a cone.

We refer to the star on four vertices simply as a "star", since we consider no stars with more vertices. Loops and double edges will be considered cycles of length one and two in what follows. We will sometimes use the word "edge" to refer to the graph which is two vertices joined by a single edge. This should not be confusing. O(e) will denote the orbit of an edge e in a graph G under the action of the automorphism group of G.

Let [formula] denote the group of automorphisms of the graph obtained by pinching an edge (possibly multiple) e of G.

Define functions

[formula]

the maxima taken over all cubic graphs G of genus g and all edges e in G. The value of μ(g) is the constant c in the statement of the Main Theorem. In fact, μ1 is always equal to one. Finally, define M(G) to be the number of edges in a minimal edge orbit in G.

At some stages in the proof, it will be most convenient to quote the results of [\cite=ts]. The method of proof used in that article is nearly identical to this, so hopefully this lack of self-containment will actually shorten the technical proofs and make this article easier to read.

For a natural number g, define the functions

[formula]

Let G be a simple cubic graph with g  ≥  9, where g is one more than the difference between the number of edges and number of vertices.

If g = 9  ·  2m + s (s = 0,1,2) (m  ≥  0) except g = 10,11,19,20,38, then [formula].

If g = 3  ·  2m + s (s = 0,1,2) (m  ≥  2), or g = 9(2m + 2p) (with |m - p|  ≥  5) or if g = 10,11,19,20,38, then [formula].

If g = 5  ·  a  ·  2m + 1 (where a = 1 or 3, m  ≥  2), then [formula].

Otherwise, [formula].

Moreover, these bounds are sharp.

The candidates

For every natural number n > 2 we define a tree Tn according to these rules:

Place n vertices in a row. This is called level one.

Assume level k has been formed. In level k + 1, place a vertex and connect it to each of the first two vertices in level k. Continue likewise until all pairs of level k are exhausted. There may be a vertex in level k not connected to any vertex in level k + 1.

If there is an unpaired vertex in level k and one in some level l < k, place a vertex in level k + 1 and connect these two vertices to it.

If at some stage there are only two vertices left unpaired, connect them with an edge.

If at some stage there are exactly three vertices left, connect all three by edges to a new vertex.

Define T2 to be two vertices joined by an edge. Tn is trivalent at all interior vertices, and has n leaves.

For example, this construction produces a binary tree when n is a power of two. Figure [\ref=t5] shows the graph T5.

The following proposition is a straightforward computation:

The order of the automorphism group of Tn is 2k(n), unless n is of the form n = 3  ·  2m, where the automorphism group has order 3  ·  2k(n).

For each g > 2, define Cg to be the graph constructed as follows:

If g  ≠  3  ·  2m + 1 for m > 0, and g  ≠  3(2m + 2p) for p  ≥  0, m > p + 1, Cg is the graph formed by placing a loop at each tail of Tg.

If g = 3  ·  2m, then the last stage in the construction of Tn is connecting three vertices to a new vertex. Cg + 1 is the graph formed by following the construction of Tn up until this last step, joining these three vertices in a triangle rather than a star, and then placing a loop on each tail.

If g = 3(2m + 2p) for p  ≥  0, m > p + 1, attach a binary tree with m leaves and a binary tree with p leaves to the leaves of a binary tree with two leaves. Arrange three copies of this configuration around a star, and then place a loop on each tail. This graph is Cg.

Again, it is easy to see:

The order of the automorphism group of Cg is

3  ·  2g + k(g) if g = 3  ·  2m for some m  ≥  0,

[formula] if g = 3  ·  2m + 1 for some m > 0 or if g = 3(2m + 2p) for p  ≥  0, m > p + 1,

2g + k(g) otherwise.

Now for the candidates for the case of all components smooth.

Suppose g > 3.

If g = 3  ·  2m for some m > 0, Cg' is three binary trees with 2m - 1 leaves, connected with a star, with a cone attached to each leaf.

If g = 3  ·  2m + 1 for some m > 0, Cg' is obtained from Cg - 1' by expanding the central vertex to a triangle.

If g = 3  ·  2m + 2, Cg' is obtained from Cg - 2' by expanding the central vertex to a K2,3.

If g = 3(2m + 1) for some m > 1, Cg' is obtained from Cg - 3' by inserting a double edge in the middle of the edges of the central star.

If g = 3(2m + 2p) for p > 0 and m > p + 1 we construct Cg' as follows: attach two binary trees with 2m - 1 and 2p - 1 leaves at their roots. Now attach three copies of this configuration to the ends of a star.

If g = 3(2m + 2p + 1) for p > 0 and m > p + 1, Cg' is obtained from Cg - 3' by inserting a double edge in the middle of the edges of the central star.

Otherwise,

if g is even, Cg' is Cg / 2 with the loops replaced by cones;

if g is odd, the formation of T⌊g / 2⌋ ends with joining two vertices by an edge or joining three vertices by a star. In the first case, insert a double edge in the center of the last edge added, and place a cone at each leaf of the resulting graph to construct Cg'. In the other case, since g does not have any of the special forms above, at least one of the graphs being attached to the star is not isomorphic to the others. Insert a double edge in the center of the edge of the star connected to this graph, place a cone at each leaf, and the result is Cg'.

Define C2' to be a cone and C3' to be a cone with a double edge attached to the free vertex by an extra edge. Note that C2' and C3' are not trivalent.

Although the graphs constructed in the "otherwise" part of this definition are not optimal in the exceptional genera, they have the important property that μ1 is one for these graphs. Define Dg for any g to be the graph constructed in this last part.

Schematic diagrams for many of these cases are shown in Figure [\ref=schem].

The following two propositions are easy.

The order of the automorphism group of Cg' is

3  ·  2g + h(g) if g = 3  ·  2m or g = 3(2m + 1) for some m > 1.

[formula] if g = 3  ·  2m + 1 or g = 3  ·  2m + 2 for some m > 1.

[formula] if g = 3(2m + 2p) or g = 3(2m + 2p + 1) with p > 0 and m > p + 1.

2g + h(g) otherwise.

[formula], with strict inequality unless g = 3  ·  2m. The same statement is true for Cg'.

The proof of the Main Theorem for graphs with loops is similar to that for graphs without loops, but easier. We will only prove the more difficult result here. However, the following proposition is useful in sorting out the loop case, so we record it here.

If G is a cubic graph of genus g  ≥  3 with multiple edges, there exists a cubic graph of the same genus without multiple edges whose automorphism group is at least as large as that of G.

There is a unique cubic graph with a triple edge. Its automorphism group has order twelve. On the other hand, there is a unique cubic graph on two vertices without multiple edges. Its automorphism group has order eight. So we may focus on double edges.

A double edge is adjacent to two simple edges. If these edges have a common endpoint, we have a cone. Replace the cone with a binary tree with two leaves, with a loop attached to each. This new configuration has strictly more automorphisms than the old.

If the two simple edges do not meet, then the double edge may be contracted to a vertex, and a loop attached to an edge may be attached to this vertex, not affecting the automorphism group.

Small genus cases

It follows from the results of our article [\cite=ts] that the curves here have more automorphisms than any curve of the same genus whose dual graph is simple.

There is another series of graphs that is easily defined. In genus g, define Cg'' as a 2(g - 1)-gon with every other edge double. We have [formula].

There are no simple cubic graphs on two vertices. A stable curve of genus two with all components smooth and rational is unique, corresponding to the graph which is two vertices connected by a triple edge, for six automorphisms.

In genus three, the curve whose dual graph is a tetrahedron has 24 automorphisms. The best that can be obtained with double edges corresponds to the graph which looks like a square with one pair of opposite edges doubled. This has only 16 automorphisms.

In genus four, the graph K3,3 has 72 automorphisms. This is better than C4' and C4'', indeed, better than any non-simple graph.

In genus five, the optimal simple graph is a cube, which has 48 automorphisms. This is beaten by C5' (64 automorphisms), which in turn is beaten by C5'' (128 automorphisms).

In genus six, the Petersen graph is the optimal simple graph, with 120 automorphisms. It is beaten by C6'' (5  ·  26 automorphisms), which is then beaten by C6' (6  ·  26 automorphisms).

There is no question that simple graphs are always beaten after genus six. In genus seven, C7'' is the winner. In genus eight, C8' is optimal. In genus nine, C9' and C9'' have the same number of automorphisms.

The following table of values of these functions for low genus g will be useful.

Structure of the proof

For the remainder of the article, we will assume all results to be proved hold for genus h less than the genus g under consideration. Call a double edge free if it does not occur as part of a cone.

Let e be an edge of G such that O(e) has minimal order among all orbits of edges of G. Then only the following possibilities occur:

G = O(e);

O(e) is a disjoint union of stars;

O(e) is a disjoint union of edges;

O(e) is a disjoint union of cycles; two such cycles are at distance at least two from each other.

If is easy to see that if two stars in O(e) have a common edge, then G = O(e). Similarly, if two stars in O(e) have a vertex in common, then either G = O(e) or the third edge at that vertex will have an orbit of order smaller than that of O(e) (which would be a contradiction to the choice of e).

Thus, if there is a star in O(e), one of the first two possibilities occurs for G.

If no three edges in O(e) share a common vertex, then either all edges in O(e) are disjoint, or there are two edges e1 (which may be assumed to be e, as O(e) is acted upon transitively by [formula]) and e2 in O(e) with a common vertex v. Denote by f the third edge of G at v; f is then not in O(e). Denote by w the other end of e.

If v and w are not in the same orbit of [formula], then we see that |O(e)| = 2|O(v)| > |O(v)|  ≥  |O(f)|, so we reach a contradiction to the choice of e. If however, w∈O(v), then the existence of a cycle made of edges in O(e) is immediate. Moreover, since f∉O(e), these cycles are disjoint.

Note that |O(f)|  ≤  |O(e)| = |O(v)|, with equality if and only if the ends of f are not in the same orbit; in particular two cycles in O(e) cannot be at distance one from each other (the edge between them, necessarily in the orbit of f, would have both endpoints in the same orbit).

If the fourth situation above occurs, we will actually choose the edge f and work with it in the arguments that follow; this is possible since O(f) is also minimal, and may only be either a disjoint union of stars, or a disjoint union of edges. f (or more precisely, its orbit) in this case will be called well-chosen.

A graph of genus g is optimal if its automorphism group has maximal order among all automorphism groups of genus g graphs. A graph G is strictly optimal if in addition, the minimal order of the orbit of a well-chosen edge is smallest among those of all such optimal graphs, and among such graphs with smallest minimal orbit, G has the fewest double edges.

We will need to make some modifications to graphs in the course of the proof. When we perform such a modification to an edge, vertex, or more generally, any subgraph, we repeat the same construction at every other subgraph in the order of the original. This ensures that we lose as few automorphisms as possible.

In what follows, given a graph G, we will choose (well) an edge e whose orbit is minimal and remove the orbit, resulting in a graph G'. G' will not be cubic. There are two possibilities for the components of G', since e is well-chosen: they are either of genus one or higher genus. For higher genus components, there is a process of stabilization, which replaces every path whose interior vertices have valence two and endpoints valence three with a simple edge joining the endpoints. If the beginning and end of the path coincide, this procedure could lead to loops. Since this takes us outside of the class of graphs under consideration, it would be useful to limit how often this can happen, so we can work inductively.

First, note that these loops happen only when n - 1 endpoints of edges in O(e) are arranged around an n-cycle. It is not hard to see that e could not have been minimal unless n  ≤  3. The following proposition limits the number of double edges that could lead to this problem.

A strictly optimal graph of genus g  ≥  10 does not contain a path of alternating simple and double edges with two or more double edges.

If there is a path of double edges alternating with simple edges (some in a minimal orbit), let k > 1 be the number of double edges in this path. If the beginning point and end point of this path are the same vertex, either the whole graph is a pseudocycle, which is non-optimal for g  ≥  10, or the path begins and ends with simple edges. In this case, remove the entire path and attach a copy of Ck' to the free vertex resulting. If the path has distinct endpoints, replace the path with a simple edge, then pinch this edge. To the pinched edge, attach a copy of Ck'. Usually, these two constructions increase the order of the automorphism group. In any case, the attaching edge can be chosen as an edge with minimal orbit. This new orbit is smaller than the original, unless there were exactly two double edges, in which case the new graph has fewer double edges.

There are fewer than eight free double edges in a strictly optimal graph G of genus g > 9.

Suppose there are k free double edges in G. Then form a new graph [formula] by replacing each configuration of a double edge with its two adjacent edges by a single edge (this is lawful by the previous lemma). [formula] has genus  = g - k and the automorphism group has dropped by a factor of 2k, so we have

[formula]

By induction (and the low genus table), the right hand side is smaller than c  ·  2g + h() for some c  ≤  3. Therefore, by our list of candidates, G was not optimal if h(g) - h()  ≥  2. One may check that this is the case as soon as k  ≥  8.

The process of replacing double edges with simple ones (as in the above proof) will be called flattening.

In cases of cycles of length three, one simply chooses the class of edges f left adjacent to each triangle after removing O(e). The orbit of f is smaller or equal in size to that of e, and removing it and stabilizing leads to double edges, but not loops.

Proof of the Main Theorem

We will repeatedly use an exhausting subgraphs argument. This entails choosing a connected component (star or edge) in O(e), fixing its orientation (when the endpoints are in the same orbit) and then gradually enlarging the subgraph gotten at a certain stage by choosing one of its tails and adding whole components either of O(e) or of G' reached by that tail. When a component of G' will be added, we will include in the new subgraph only the edges of O(e) incident to it, and of these, in case O(e) is a union of stars, only those that do not lead to stars whose center is already a vertex of the previous subgraph (in order to avoid cutting unnecessarily the number of tails).

At each step we look at the relative gain in the automorphism group. If a star is included at that step, then one of its edges is already fixed by the initial subgraph, then there could be at most a twofold increase in the order of the automorphism group at such a stage; moreover, such an increase occurs only when none of the vertices of the star was part of the subgraph at the beginning of the stage.

If however, a component is included at a certain step, then one of its vertices (which has valence two in G') is already fixed, and that limits its symmetry; in other words, the automorphisms of the new subgraph fixing the previous one are precisely those fixing the incidence point. Once all these automorphisms are taken into account, all the edges incident to that component do not have extra freedom (they move where their incidence point moves), so may be added without further increase in the order of the automorphism group of the subgraph.

Unless otherwise noted, we will always expand the subgraphs by including whole components of G' if the possibility exists (i.e. when not all tails of the subgraph gotten so far are centers of stars in O(e)). When the exhausting finishes, we will have an estimate for the order of the automorphism group of the graph, which can be compared to the order of the automorphism group of the appropriate candidate graph.

We start by noting that:

if g = 2u, then g + h(g) = 3u - b(2u) = 3u - b(u), while

if g = 2u + 1, then g + h(g) = 3u + 2 - b(2u + 1) = 3u + 1 - b(u)

The following inequalities hold:

b(uv)  ≤  b(u)b(v); b(u + v)  ≤  b(u) + b(v);

h(u + v)  ≥  h(u) + h(v);

[formula] for u  ≥  4;

[formula] for all u  ≥  1, v  ≥  2.

The proof is omitted, as the assertions are easy to check.

Assume that a graph G has a minimal orbit of edges O(e) made up of stars, and such that removing O(e) leaves only cycles of length two (free double edges). Then G cannot be optimal.

Let k = |O(e)|.

Flattening the free double edges and stabilizing the resulting graph leads to a graph [formula]; this is either of genus two, or is a simple cubic graph, which is moreover edge-transitive; moreover the genus [formula] of [formula] is [formula]. This flattening implies [formula]. From ([\ref=tsmain]) we know that [formula], so we get [formula]. We compare to 2g + h(g) = 23k + 1 - b(k). Then the inequality to study is [formula], or, since k = 2u (even), 9  ≤  22u + l(u + 1) - b(u). Now u  ≥  b(u) so the inequality is clearly strict for u  ≥  4; one may check directly that the inequality is also strict for u = 2,3. In case u = 1, k = 2 and [formula] is a triple edge, and g = 5; in this case [formula], so again G is not optimal.

Assume that a graph G of genus g  ≥  10 has a minimal orbit of edges O(e) made up of isolated (simple) edges, and such that G' is made up of cycles only. Then G is not optimal.

Let k = |O(e)|.

If all cycles in G' have length at least three, the graph is simple cubic, and ([\ref=tsmain]) shows that this could not be optimal.

Consider first the case in which G' has two isomorphism classes of cycles.

If one class of components is made up of double edges (cycles of length two) and the other of cycles of length three and higher, then we may flatten the double edges and stabilize the resulting graph to [formula]; this is a simple cubic graph of genus  = g - k; moreover, its minimal orbit of edges, has half the order of O(e). We have [formula] and ([\ref=tsmain]) shows that [formula] could not have been optimal (for simple cubic graphs) anyway. Then we get [formula] and would like to compare this to 2g + h(g); we study then [formula]; this is easily seen to be strict for g  ≥  4, and a moment's thought shows that such a graph cannot exist for g  ≤  3.

The only case to consider is that in which all connected components (assumed to be cycles) of G' are isomorphic of length two. Then G must be a pseudocycle formed of k double edges and k simple edges joining them. Then [formula], g = k + 1 and comparing to 2g + h(g) leads to [formula], which is strict for k  ≥  9 (with equality for k = 8).

If the minimal orbit of edges in G is made up of stars, then it is made up of at most one star; moreover, the possible optimal graphs are only the Cg' with g = 3  ·  2m, g = 3(2m + 2p), g = 3(2m + 2p + 1) and g = 3(2m + 1). In particular, the Main Theorem holds in these cases. Furthermore, for these genera, μ1(g) = 1.

Let k be the number of stars in O(e).

We may stabilize the components of G' according to ([\ref=pinching]), in light of the previous two lemmas.

If G' is connected, then [formula]; since g' = g - 2k  ≤  g - 2 and since g + h(g) is strictly increasing ([\ref=inequalities]) we get 3  ·  2g' + h(g') < 2g + h(g), so G could not be optimal.

We concentrate then on the case when G' is disconnected.

Let t be the number of edges in O(e) incident to a given component; we have 3k = st. Using an expanding subgraphs argument, we get a bound for [formula] as 6k  ·  2a  ·  2s(d + h(d)) (assuming, by induction, that μ1(d)  ≤  1 for all d < g) where d is the genus of one of the s isomorphic components of [formula], and a is the number of times we have no choice but to increase the subgraphs at a tail that is part of a star, and with the further restriction that the other edges in that star lead to components not incident to the subgraph obtained up to that point. We have s  ≥  3 + 2a. Also, g = s(d - 1) + 1 + 2k. We are comparing the size of [formula] to 2g + h(g). Thus the inequality we are studying becomes:

[formula]

which is implied by

[formula]

We remark that t = 1 if and only if k = 1 (a star and the components to which it is incident would give the whole connected G) and that s = 1 or s  ≥  3 (s = 2 would force a star to have at least two edges incident to a component, therefore all three edges would be incident to that component, therefore a component and the stars incident to it would give the whole graph; G' would then be connnected, contradicting s = 2).

We will simply sift the special cases through the filter of 2g + h(g); each time a strict inequality is obtained, G cannot be optimal, and we study the cases where the inequality fails separately.

If t  ≥  2, then [formula] and the inequality is implied by [formula] when s  ≥  4; this is always a strict inequality. When s = 3, easy manipulations of the desired inequality show that it is strict as long as k  ≥  3. When s = 3 and k = 2 we have three connected components, each incident to two stars. Working with the inequality shows that it fails to hold only when d = 2m (m  ≥  1). But then g = 3  ·  2m + 2, and Cg' in these genera has a minimal orbit of three edges, so G in this case is not strictly optimal. In fact, such a G is not even optimal, but we do not need this, so the proof is omitted.

Therefore t = 1, which implies k = 1, so there is at most one star. In this case, we have s = 3, v = 1, so the initial inequality becomes:

[formula]

The last exponent is at least b(d) - 1; so b(d)  ≥  4 leads to strict inequality.

If b(d) = 3 and d is even, then again the inequality is strict; however, if d is odd, then b(d) = 3 and b(3d) = 6 make the inequality fail. This may only happen when d = 2m + 2p + 1 with m > p + 1 > 2. In this case we obtain the exceptional Cg' for g = 3  ·  (2m + 2p + 1).

If b(d) = 2 and d is even, the inequality is strict if b(3d)  ≤  3, and fails for b(3d) = 4. But b(d) = 2 and b(3d) = 4 for d even force d = 2m + 2p with m > p + 1 > 1; this leads to the exceptional Cg' for g = 3(2m + 2p). If b(d) = 2 and d is odd, then the inequality is strict for b(3d)  ≤  2, and fails for b(3d) = 3,4. Then d = 2m + 1 and b(3d) = 3 cannot occur, while b(3d) = 4 forces m > 1; this leads to the Cg' with g = 3(2m + 1).

If b(d) = 1 and d is odd, then d = 1, which cannot happen for a cubic graph with a single star as a minimal orbit. If d is even, then d = 2m with m  ≥  1 and then the inequality fails, revealing the graph Cg' with g = 3  ·  2m for m  ≥  1.

We note that all these graphs have M = 3, and μ  ≤  3, therefore μ1  ≤  1 (necessary for the induction step).

If the minimal orbit of edges in a strictly optimal graph G is made up of isolated (simple) edges, then

There are at most three edges in that minimal orbit.

μ1(G)  ≤  1.

If g = 2m or g = 2m + 1, then G must be Cg'. of genus g other than G.

Finally, the Main Theorem holds in all cases not covered by the previous proposition.

By ([\ref=pinching]), we may assume there are no problems stabilizing G' when G' is connected. Then g' = g - k and [formula] for all k  ≥  2, so G could not be optimal. Moreover, when k = 1, μ(G')  ≤  1 implies immediately that G is not optimal, while μ(G') > 1 implies, by induction, that [formula]; but the marking inherited from stabilizing the two endpoints of the removed edge of O(e) forces [formula], so again G could not be optimal.

We may now assume G' is disconnected.

Case I: Suppose all the components of G' have genus at least two.

Case I.1: Further suppose G' has two isomorphisms classes of components: one with s1 components of genus d1  ≥  2, each with n1 neighbours, each component connected to its neighbour by t edges; similarly for s2,d2,n2. We have s1n1t = s2n2t = k, g = s1d1 + s2d2 + k + 1 - s1 - s2.

An expanding graph argument gives: [formula]; comparing this to 2g + h(g)) yields:

[formula]

which is implied (using ([\ref=inequalities])) by

[formula]

If t  ≥  2 and max (n1,n2)  ≥  2, then [formula] and [formula], also, k  ≥  4; then the inequality (2) is implied by [formula] (the last one in the exponent comes from the inequality h(sidi)  ≥  sih(di) + 1 for at least one i). This is strict for all k.

If t = 1 and min (n1,n2)  ≥  3 then [formula] so the inequality (2) is implied by [formula] which is strict for all k.

If t = 1 and n1 = 2 < n2 (similarly for n2 = 2 < n1) then [formula] and the inequality (2) is implied by [formula] which is strict for all k.

If t = 1 and n1 = n2 = 2 then [formula] and writing k = 2u (u = si  ≥  2) the inequality (2) is implied by 2u  ≤  21 + h(ud1) - uh(d1) + h(ud2) - uh(d2). Since d1,d2  ≥  2, this is implied by [formula] which is strict for all u.

If t = 1 and n1 = 1 then s1 = k,s2 = 1 so the inequality (2) (or directly (1)) becomes k  ≤  2h(kd1) - kh(d1) which is implied by [formula]. The latter inequality is strict for k  ≥  6, while direct computation shows that the former is also strict for k = 4,5 and for all k as soon as b(d1)  ≥  3. If k = 1 the inequality cannot possibly fail.

Thus only the following subcases are left to analyze in detail:

t = 2,s1 = s2 = 1 - one sees that this cannot occur for strictly optimal G.

t = 1,s2 = 1,s1 = k  ≤  3,b(d1)  ≤  2. When k = 2, again, it is not hard to see that G cannot be strictly optimal. The case k = 3 is actually interesting.

If b(d1)  ≥  3, or b(d1) = 2 with d1 even, strict inequality is obtained.

If b(d1) = 2 and d1 is odd, d1 = 2m + 1 (m  ≥  1). G is made up of a central component of genus d2, with three extremal components of genus d1 = 2m + 1 attached each by an edge to the central component. Then we can bound [formula] starting with the central component, so we get c  ·  2d2 + h(d2) + 3(d1 + h(d1)) which compared to 2g + h(g) yields c  ≤  2h(3d1 + d2) - 3h(d1) - h(d2). The last exponent is [formula]; as soon as it is at least two strict inequality is obtained. If d2 = 2u + 1 this exponent is 4 + b(u) + 1 - b(3  ·  2m + 4 + 2u)  ≥  2 so the inequality would be strict. Thus d2 = 2u and u = 1,3,4 strict inequality follows, as it follows (for any u) when c < 2. When u = 2, d2 = 4 and the only graph with c  ≥  2 is the K3,3; however, this is edge transitive and is pinched in three edges only, so it is easy to see that the corresponding G is not optimal. In other cases, the Main Theorem gives inductively as the only possibility d2 = 3  ·  2p, when d2  ≥  10; this immediately yields the structure of G as the special Cg'.

If b(d1) = 1, since d1  ≥  2 we have d1 = 2m. Then argueing as in the previous case we get to the inequality c  ≤  23 + b(d2) - b(3  ·  2m + d2); this is strict as soon as c < 2. If d2  ≥  10 the Main Theorem yields as the only possibility for the central component d2 = 3  ·  2p or 3(2p + 1), which leads to the structure of G as the Cg' for the corresponding genus. In low genera, figure 4 shows that only d2 = 2 may give an optimal structure (the pinching in three edges drops the number of automorphisms of the central component too much in the other cases). This yields the Cg' for g = 3  ·  2m + 2.

Case I.2: Suppose there is a single isomorphism class of components of G': there are s components of genus d  ≥  2, each with n neighbours, linked to each of them by t edges. 2k = snt and g = sd + k + 1 - s.

As before, we get to

[formula]

implied by

[formula]

t  ≥  2, n  ≥  2 implies [formula] so the inequality (3) is implied by [formula] (the last one coming from h(sd) - sh(d)  ≥  1 for d  ≥  2 and s  ≥  2); this is strict for all k.

t  ≥  2, n = 1 implies s = 2 so k = t; the inequality (4) becomes 2k  ≤  2k - 1 + h(k - 1) + h(2d) - 2h(d); since h(2d) - 2h(d)  ≥  1 for d  ≥  2, this inequality is strict except for k = 2, and then only for h(2d) - 2h(d) = 1; this may only happen for d = 2m or d = 2m + 1 with m  ≥  1.

t = 1, n  ≥  3 implies [formula] so the inequality (4) is implied by [formula] which is strict for all k

t = 1, n = 2 implies 3  ≤  s = k (G is a pseudocycle). The inequality (3) reduces to k  ≤  2h(kd + 1) - kh(d) which, as we have already seen, is strict except possibly for b(d) = 2 and k  ≤  2; since k  ≥  3 we have actually strict inequality always

t = 1,n = 1 implies s = 2,k = 1 which reduces (3) to 2  ≤  2h(2d + 1) - 2h(d) which is strict except when b(d) = 2 and d is odd, or b(d) = 1.

t = 2, n = 1,s = 2,k = 2,d = 2m or d = 2m + 1; these could be optimal, but easily seen not to be strictly optimal

t = 1,n = 1,s = 2,k = 1, d = 2m or d = 2m + 1; the latter does not lead to a strictly optimal G, while the first one gives the unique structure of the optimal G in genus 2m + 1.

This concludes consideration of G' with all components of genus greater than two.

Case II: Now suppose G' is disconnected and there are components which are cycles. Then ([\ref=cycles.and.double.edges]) shows that we only need to deal with the case in which at least some components of G' have genus two or more.

Case II.1: If some components of G' are free double edges (cycles of length two), then the edges of O(e) are incident on both ends to these cycles; by strict optimality, the other components of G' must stabilize properly. Then flattening the free double edges incident to O(e) and stabilizing the resulting graph yields a new graph [formula] which has at most double edges, genus  = g - k and with a minimal orbit of order half of O(e); moreover, removing the minimal orbit of edges in [formula] must leave only isomorphic components that stabilize properly (these the components of G' which are not the cycles of length two). Then [formula]. Now [formula] implies [formula], and if the first inequality is strict, the second is as well. Thus we only need to analyze the cases of equality or failure in the two Subcases 4 and 5 above and see what they mean for G. As before, let s be the number of components which are not cycles, but have genus d  ≥  2; two such components have t edges incident to both in [formula]. Let [formula]; this is the order of the minimal orbit of [formula].

The only cases to be considered are:

t = 1,s = 2,k = 1,g - k = 2m: this yields G as the unique optimal graph for g = 2m + 1 as two binary (cone tailed) trees with a double edge between their roots

t = 1,s = 2,k = 1,g - k = 2m + 2; this yields G as two binary graphs of genus 2m with their roots linked by a path containing three double edges. This is optimal, but not strictly optimal. As remarked before, this cannot appear as a component in constructing optimal graphs of higher genus, since its non-optimality would produce a [formula].

Case II.2: If some components of G' are cycles of length three or more, and the other components of genus d  ≥  2 and stabilizing properly (i.e. the edges in O(e) are not incident to free double edges) then denote by s1 the number of cycles, by s2 the number of other components; each cycle has n1 neighbors among other components, and each other component has n2 cycles as neighbors; denote by t the number of edges in O(e) incident to a fixed cycle and a fixed neighboring component. We have k = s1n1t = s2n2t, g = s2(d - 1) + k + 1, and all cycle components of G' have length n1t  ≥  3 (so k  ≥  3).

Using an expanding subgraph argument, starting with a cycle and gradually adding up whole components of G' as tails of the subgraph become incident to it, we get the estimate:

[formula]

where [formula] represents the number of times a cycle is included in the expanding subgraph for lack of other choices (no other tail is incident to another component of G').

Comparing this bound to 2g + h(g) we get to:

[formula]

The last inequality in ([\ref=inequalities]) now shows that this implied by [formula].

If t  ≥  2 and n2  ≥  2 (so k  ≥  4), then [formula] and [formula] so the inequality (9) is implied by [formula] which is strict for k  ≥  4

If t  ≥  2 and n2 = 1, then [formula] so the inequality (9) is implied by [formula] which is strict for k  ≥  3

If t = 1 and n2  ≥  3, then [formula] so the inequality (9) is implied by [formula] which is strict for k  ≥  3

If t = 1 and n2 = 2, then [formula], k  ≥  4 even, n1  ≥  3 and [formula] so the inequality (9) is implied by [formula] which is strict for k  ≥  4

If t = n2 = 1, then k = s2 = n1 and the inequality (9) becomes k  ≤  2h(kd + 1) - kh(d). Then the second inequality in ([\ref=inequalities]) shows that k  ≥  4 and b(d)  ≥  2 imply [formula]; since [formula] for all k  ≥  1 we get strict inequality in (9) as well.

If b(d)  ≥  3 and k = 3 then the inequality (9) becomes [formula]; however, for equality to take place one needs d to be odd and b(3d + 1) = 2b(d) + 1, which is easily seen to be impossible

If b(d) = 2, d = 2p + 1 odd, k = 3 then h(3d + 1) - 3h(d) =  - 1 + 3b(d) - b(3d + 1)  ≥  b(p) + 1  ≥  2 so the inequality is strict.

The case b(d) = 2, d even, and k = 3 can be eliminated along the lines of the arguments in subcase 4 of case 2.

If b(d) = 1 then d  ≥  2 means d = 2m,m  ≥  1. The inequality (9) becomes k  ≤  2k - b(k) which is strict for k  ≥  4, while for k = 3 one obtains the Cg' for g = 3  ·  2m + 1; again [formula] and M = 3.

We are done.