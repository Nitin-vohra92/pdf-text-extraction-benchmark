Lemma Observation Corollary

Inner and Outer Rounding of Boolean Operations on Lattice Polygonal Regions

Introduction

Many geometric algorithms are designed in the Real RAM model, and the use of rounded floating point arithmetic is well known to create robustness problems: Numerical rounding errors done during the evaluation of geometric predicates lead to inconsistent results and cause trouble in computer data structures. The now classical solution of the exact computation paradigm [\cite=yd-ecp-95] offers an attractive solution for algorithms that do not construct new geometric objects such as convex hulls or triangulations i.e whose results are purely combinatorial (the position of the points is not the result but the input of the algorithm). The exact computation paradigm approach takes decisions on an exact basis. To achieve reasonably efficient computation times this requires the use of well defined exact representations of geometric objects: Typically, the coordinates of a point are assumed to be fixed size integers.

However, the exact computation paradigm is less satisfactory for algorithms that compute the geometric embedding of new objects. An intersection point between two line segments is a relevant example of a construction of a new geometric object. Such a point has rational coordinates and therefore is generally not representable on the integer lattice. If this point is used by the algorithm to make a decision, we must have an exact representation of that point e.g. using rational numbers or implicit representation [\cite=fm-llook-00] in order to ensure the exactness of that decision. One drawback of this approach is that a constructed point does not use the original point representationand thus in such a framework, algorithms cannot be easily cascaded, i.e. the (rational) output from one algorithm cannot be used as input for another algorithm designed for usual input.

An alternative consists in rounding the constructions that is replacing a geometric structure with arbitrary bit-length coordinates by an approximating structure with (short) fixed bit-length coordinates. However, rounding the coordinates of geometric objects like vertices of a polygonal region is not straightforward since incidence information may be invalidated by small perturbations of edges and vertices. For instance, a polygonal region may be initially convex or simple and can loose these properties after a simple rounding of its vertices' coordinates. Since these properties might be reused by other algorithms, this loss of information is problematic.

Yet, there exist few published work in this direction, except for rounding line segment arrangements in the plane while preserving the topology of the arrangement [\cite=gy-frcg-86] [\cite=gght-srlse-97] [\cite=gm-rad-98] [\cite=h-psifp-99] [\cite=m-spgr-00] (see Section [\ref=related_work]) and for rounding polyhedral subdivisions in three dimensions [\cite=f-vrtdp-99]. In this report, we are concerned with rounding the result of the intersection of two planar lattice polygonal regions (i.e whose vertices have integer coordinates). The result will extend trivially to any other set operations on pairs of lattice polygonal regions. Unlike the arrangement problem, we are interested in inclusion properties between the exact object and its rounded versions. Previous works on arrangements can therefore not be used directly. We propose in this report an algorithm which preserves such properties (see Figure [\ref=all-modes]).

Section 4 introduces the concept of inner and outer rounding of the intersection of lattice polygonal regions. Section 5 deals with the practical computation of these approximations. Section 6 proves that a point on the boundary of a rounded version is at distance less than [formula] from the exact boundary, and that convexity is somehow preserved. Finally, Sections 7 and 8 generalize these rounding modes to other set operations and to general polygonal regions.

Related Work

Three techniques for rounding line segments arrangements to a finite precision lattice have been proposed in the literature. All methods proceed by rounding the intersection points between the input line segments to their nearest lattice point. Each original line segment is then replaced by a polygonal chain connecting the rounded version of the endpoints and visiting all its rounded intersection points. The techniques described below differ in the way that the polygonal chains are constructed in order to guarantee metric and topological properties.

Greene-Yao perturbation technique

The first method by Greene-Yao [\cite=gy-frcg-86] treats each lattice point as an obstacle and forbids any segment to go over an obstacle while its intersection points move to their nearest lattice point. Instead, an obstacle is introduced as a new vertex into the polygonal chain representing the segment. The authors show that with this technique, edges move by a distance at most [formula]. This algorithm has the disadvantage that it produces very fragmented polygonal chains, which has an adverse effect on the efficiency of algorithms and operations that use these fragmented line segments. Namely, this technique introduces Ω( log |ab|) excess lattice points onto a segment ab where |ab| denotes the length of the segment ab.

Later papers tried to reduce the number of additional vertices without introducing larger geometric derivations.

Snap Rounding Paradigm

Various researchers [\cite=gght-srlse-97] [\cite=gm-rad-98] [\cite=h-psifp-99] have developed the Snap Rounding technique for rounding line segments to the integer lattice. The idea behind Snap Rounding is as follows. The plane is partitioned into pixels (i.e. isothetic unit squares) centered at integer lattice points. A pixel is called hot if it contains a vertex of the original arrangement (that is either an endpoint or an intersection point of the input segments). The embedding is then rounded as follows: Each original line segment is replaced by a polygonal chain that connects the centers of the hot pixels crossed by the segment. This way, the number of vertices on an edge is equal to the number of hot pixels crossed by the edge.

Guibas and Marimont [\cite=gm-rad-98] give a very nice analysis of the properties of Snap Rounding. One of its main properties is that it does not introduce any extra lattice points. Moreover, it can be easily shown that the polygonal chain corresponding to an original segment is contained within the Minkowski sum of the original segment with a pixel (unit square) centered at the origin.

Shortest Path Rounding technique

Shortest Path Rounding has been introduced by Milenkovic [\cite=m-spgr-00] [\cite=m-pmsop-95] and introduces even fewer additional incidences between the rounded segments than Snap Rounding. The basic idea is to round each intersection point to its nearest lattice point and to replace each edge by the shortest path connecting the rounded endpoints that keeps all other rounded vertices at the correct side. This technique has the advantage that it introduces minimum geometric and combinatorial error (it gives the same result as the Snap Rounding method in the worst case). Moreover, unlike other finite precision geometric rounding techniques, Shortest Path Rounding can be applied to non uniform lattices.

Although these different techniques allow to preserve somehow the topology of the exact arrangement, they do not offer any inclusion or convexity guarantees if they are applied on faces (and not only edges) of the arrangement. The rounding modes proposed in this report are inspired from the presented methods however they respond to the demand of such guarantees.

Notations and preliminaries

By a lattice point or grid point we mean a point in [formula]. A lattice polygon is a polygon that defines a well defined interior and exterior (we allow a vertex to coincide with another or to belong to an edge, e.g. lowest vertex in Figure [\ref=all-modes]a) and whose vertices are lattice points. A lattice polygonal region is a plane figure which can be expressed as a collection of lattice polygons having nested holes at any level of depth. A lattice polygonal region has a well defined interior and exterior. Our algorithms take such regions as input and give the output in the same form.

In the following, the complexity of a polygonal region P defined as the number of distinct vertices of P is denoted by |P|. The interior of a polygonal region P, defined as the biggest open set contained in P, is denoted by Po. The boundary of P is denoted by ∂P. We will say that a point p belongs to a polygonal region P, and note p∈P, if p belongs either to the interior or to the boundary of P. Finally, PC will denote the set complement of P.

Given two polygonal regions A and B, the Hausdorff distance dH(A,B) between A and B is defined as

[formula]

where dh(A,B) =  max a∈A min b∈Bd(a,b) and d(a,b) denotes the Euclidean distance between these points.

We will use the following definition of visibility. For two points p and q that belong to a polygonal region P, we say that q is visible from p within P, if every point of the line segment pq lies in P. The visibility region, VP(p), of a point p∈P is defined as the locus of all points q∈P that are visible from p. The nearest visible lattice point of p, denoted by [formula], is defined as the nearest grid point to p that belongs to [formula] with any tie-breaking rule if p is equidistant to several lattice points. Finally, for a vertex v∈P and an edge e∈P, we say that v is vertically visible from e, if it exists a vertical line segment that connects v to e that is entirely contained in P.

We describe in the next section the scheme used to define the inner and the outer rounding of a polygonal region and state the properties of the rounding scheme in the case where the input regions result from the intersection of two lattice polygonal regions. Note that from the application of de Morgan's laws, all set operations reduce to the complementary operation (whose computation is trivial) and to the intersection operation. Section [\ref=set_operations] enumerates the properties satisfied when the exact region to be rounded comes from a union or a set difference operation.

Rounding Modes

Inner Mode

Suppose we start with two input lattice polygonal regions A and B. One can intuitively visualize the rounding process of the polygonal region corresponding to the intersection of these two regions using the analogy used by Greene and Yao [\cite=gy-frcg-86]. Look at the edges of this region as if they were rubber bands rooted at their two endpoints and let every vertex of the intersection be marked by a rigid post. These vertices may be vertices of A, B or intersections between edges of A and B. Each of these rigid post is then treated as an obstacle and we do not allow the rubber bands to go over an obstacle . Posts at original vertices of A and B are at lattice positions and remain fixed while posts at intersection of an edge of A with an edge of B move to their nearest visible lattice point inside [formula]. Now, if we release rigid posts that correspond to vertices that have lost their convexity (vertices that were convex and became concave), then the resulting polygonal region gives the inner rounded polygonal region.

Theorem [\ref=defaut_prop] states some properties of the obtained rounded region in the case where P corresponds to the intersection of two lattice polygonal regions A and B (the proof is postponed until the Section [\ref=propd]).

The inner rounding [formula] of [formula] satisfies the following properties: 1) [formula] is lattice polygonal region, 2) [formula] is contained in P, 3) [formula], 4) ||  ≤  |P|, 5) A concave vertex of [formula] does always correspond to a concave vertex of P.

From property 5) we have the following corollary:

If Pi is a convex component of [formula] and if [formula] is not empty then [formula] is a convex component of [formula].

Outer Mode

Given two polygonal regions in the plane, the process leading to the computation of the outer rounding of their exact intersection region can be split in three steps. The idea is to bring the problem back to an inner intersection computation (cf. Figure [\ref=outer_mode_algo]). To do so, the exact intersection region P is first computed. Then, for each vertex v = (vx,vy) of P that is not representable on the integer lattice is associated a pixel (unit square of the grid) having respectively (⌊vx⌋,⌊vy⌋) and (⌈vx⌉,⌈vy⌉) as bottom left and top right vertex. The outer rounding [formula] of P is then obtained from P and the set I of all pixels containing non representable vertices of P by carrying out the operation ((PC)(IC))C. A last pass removes all extraneous reflex vertices of the obtained polygonal region (see Section [\ref=outer_intersection_algorithm]).

Theorem [\ref=excess_prop] states some properties of the obtained rounded region in the case where P corresponds to the intersection of two lattice polygonal regions A and B (the proof is postponed until the Section [\ref=prope]).

The outer rounding [formula] of [formula] satisfies the following properties: 1) [formula] is a lattice polygonal region, 2) [formula] contains P, 3) [formula], 4) [formula], where k is the number of non-lattice vertices of P and h is the total number of intersecting pairs between the edges of P and those of I.

Practical Algorithms

From the analogy used in the Section [\ref=inner_mode], it is easy to see that each rigid post that corresponds to a vertex of P and that causes an edge of the intersection region to be broken during the movement of all posts corresponds to a reflex vertex of the exact intersection region. Given two lattice polygonal regions A and B, the only vertices of the polygonal region [formula] that are not representable onto the integer lattice (that is the only vertices that need to be rounded) correspond to the intersection points between an edge of A and an edge of B. From the definition of the intersection operation, these non representable vertices can only form a convex vertex of P. Consequently, each reflex vertex of P comes from a reflex vertex of one of the two input regions and is therefore a lattice vertex.

The algorithm for rounding the intersection of two lattice polygonal regions with the inner mode is essentially based on the reflex vertical decomposition of the exact intersection region. The purpose of the construction of this map is twofold: 1) It gives a convex decomposition of the original region that will permit to avoid complex visibility calculation, 2) It determines for each edge of the region a subset of the original vertices that should be snapped in order to avoid the introduction of extraneous intersections.

The Reflex Vertical Decomposition

The reflex vertical decomposition of a planar polygonal region is constructed by extending from each reflex vertex of the input region two vertical rays in the interior of the region in both the upward and downward directions. These rays are the maximal vertical segments such that their relative interior does not intersect any edge of the polygonal region. The reflex vertical decomposition of a polygonal region i.e. the subdivision of this region induced by the edges of the region and by the rays issued from its reflex vertices is a partition of the input region into convex cells (see Figure [\ref=fig-rvd]).

Before detailing the practical algorithm we first prove some properties of this decomposition.

Given P the exact intersection of planar lattice polygonal regions, p a vertex of P and C a convex cell of the reflex vertical decomposition of P having p as vertex then [formula].

Proof:  We prove this by contradiction. Suppose that [formula]. As [formula] and [formula] must be distinct points [formula] cannot belong to C. Therefore, the line segment connecting p to [formula] must cross the boundary of C (cf. Figure [\ref=cellule]). Since [formula] is visible from p, the crossed boundary can only be a vertical wall emanating from a reflex vertex. Yet, this is impossible since, in this case, the two lattice points on the crossed ray immediately above and below the crossing are closer to p than [formula]. One of these two lattice points is between the crossing and the source of the ray and thus inside C and visible by convexity of C. This contradicts the fact that [formula] cannot belong to C and therefore the claim we made in the proof. [formula]

Let P be the exact intersection of planar lattice polygonal regions, pq be an edge of P, [formula] be the inner rounding of P, and σ(pq) be the polygonal chain connecting [formula] to [formula] that corresponds to the rounded counterpart of pq in [formula]. The set of vertices of σ(pq) between [formula] and [formula] are reflex vertices of P vertically visible from pq in P.

Proof:  By construction of the polygonal chain σ(pq), the vertices of σ(pq) between [formula] and [formula] necessarily correspond to reflex vertices of P. We show in the following that these vertices are vertically visible from pq in P. Here again, we prove this by contradiction. Assume that there exists a vertex c of σ(pq) between [formula] and [formula] such that c is not vertically visible from pq in P. Since c belongs to σ(pq) and is not vertically visible from pq in P, c surely lie in one of the two x-intervals induced by the segments [formula] and [formula] (cf. Figure [\ref=slab]). Suppose wlog that c belongs to the x-interval induced by the segment [formula] and let i be the point of intersection between [formula] and the vertical line L passing through c. Since c is a reflex vertex of P, c must lie at a lattice site and L is a lattice vertical line. But this is impossible, since in this case there exists a lattice point r on L between i and c that is visible from P and closer to q than [formula], which contradicts the fact that [formula] is the nearest visible lattice point from q in P. [formula]

Inner Intersection Algorithm

Let A and B be two lattice polygonal regions in the plane. The algorithm works in three steps. The first step constructs the arrangement of the edges of A and B and computes the reflex vertical decomposition of the intersection region [formula] by the use of a Bentley-Ottmann-like sweep line algorithm.

Based on this vertical decomposition, the second step rounds each vertex of P that does not lie at lattice site to the nearest visible lattice point that belongs to its incident convex cell in the vertical decomposition. At the same time, each edge of P is replaced by a polygonal chain that connects its two rounded endpoints and passes through the set of all its vertically visible reflex vertices in the order of their vertical projection on the edge.

The last step finally performs a variant of the Graham's scan algorithm for the convex hull computation over the set of the resulting polygons (or holes). This procedure removes all the reflex vertices from each polygon/hole except the ones corresponding to original reflex vertex (that is, it removes each reflex vertex that corresponds to a rounded intersection point or a visited vertically visible reflex vertex).

Given a vertex v of P and its associated convex cell C, the computation of the nearest visible lattice point of v in C can be done using the algorithm described in [\cite=prisme-these-guigue] in time O(m log m log N) where m  =  |C| and N  ×  N is the size of the lattice containing C. This algorithm, based on the continued fraction expansion technique, is inspired from the algorithm developed by H.S.Lee and R.C.Chang [\cite=lc-avcpg-92] which solves the problem in time O(m  +   log l), where l is the diameter of the convex cell. However, this latter needs the use of an exact arithmetic on algebraic numbers to be implemented robustly (while our algorithm in [\cite=prisme-these-guigue] can be implemented using exact evaluation of degree 4 polynomials whose entries are integers: the coordinates of alttice points).

The inner rounding [formula] of a region [formula] can be computed in time O((n + k) log n  +  k|P| log |P| log N) where n is the total number of edges of the two input regions, k is the number of edges of A and B that intersect and N  ×  N is the size of the lattice.

Proof:  Given the two input regions A and B, the reflex vertical decomposition of their intersection region is a by-product of the trapezoidal map of their edges. Therefore it can be calculated in time O((n + k) log n) where n is the total number of edges of A and B and k is the number of intersecting pairs. The second step of the algorithm computes at most k nearest visible lattice points in convex cells of size at most |P| in time O(|P| log |P| log N) and produces, in the worst case, a set of polygons/holes having a total of |P|  +  2r vertices where r is the number of reflex vertices of P (each reflex vertices being vertically visible from at most two edges of P). Given an edge of the intersection region and its two rounded endpoints, its associated polygonal chain can be constructed in time linear with the number of intersections between the edge and the vertical walls of the decomposition and thus can be done in time O(|P|). Putting all together and since r < |P| and k  ≤  |P| we obtain a worst case complexity of O((n + k) log n  +  k|P| log |P| log N) for the whole algorithm. [formula]

Outer Intersection Algorithm

The algorithm for computing the outer rounding of the intersection of two lattice polygonal regions is essentially based on the algorithm of Section [\ref=inner_algorithm] and can be directly deduced from the description given in Section [\ref=outer_mode]. However, we discuss here a way to reduce the number of extraneous reflex vertices of [formula], namely the extraneous reflex vertices of [formula] issued from the vertices of the pixels of I, that derive from the straightforward computation of [formula] as (PC IC)C.

Contrary to the inner rounding of an intersection region, the outer rounding mode (as described in Section [\ref=outer_mode]) does not offer any guaranty on the convexity/concavity preservation of the exact region's vertices. Some reflex vertices of P can disappear in [formula], in the same manner some extraneous reflex vertices (that correspond to vertices of I and thus do not appear in P) can appear in [formula]. A simple improvement consists in removing all reflex vertices appearing in [formula] if they have no counterpart in P and if their removing does not produce any topological change. Some precautions must be taken in order to preserve a maximal distance between the points of [formula] and the points of P less than [formula]. A solution may consist in removing a reflex vertex r of [formula] only if there exists an edge e of P such that r, the vertex preceding and the vertex following r on [formula]'s boundary all lie at a distance less than [formula] from e. This kind of simplification permits a reduction of extraneous reflex vertices of [formula] of a factor O(k) in the best case. Moreover, this additional pass is sufficient to guarantee as a side-effect the following property: If no components of P are merged in [formula] (that is if P and [formula] have exactly the same number of polygons) then a convex component of P remains convex in [formula].

The outer rounding [formula] of a region [formula] can be computed in time O((n + h) log n  +  kp log p log N) where n denotes the total number of vertices of the two input regions, h denotes the number of intersection points between the edges of A and the edges of B, N  ×  N is the size of the lattice, k denotes the number of intersection points between an edge of P and an edge of the set of pixels I and [formula].

Proof:  The computation of the exact intersection region P can be done in time O((n + h) log n) where h denotes the number of intersection points between the edges of A and the edges of B. The computation of the reflex vertical decomposition of [formula] can then be computed in time O((|P| + h + k) log (|P| + h)) where k is the number of intersection points between the edges of P and the edges of I. Finally, the algorithm computes at most k nearest visible lattice points in convex cells of size at most equals to [formula] in time O(m log m log N) using the algorithm described in [\cite=prisme-these-guigue] and produces a set of polygons/holes having a total number of vertices in O(m). The final step of the algorithm is linear in the number of vertices of each polygons. Since h  ≤  |P| and with [formula], we obtain a worst case complexity of O((n + h) log n  +  kp log p log N) for the whole algorithm. [formula]

Proofs of Properties

Inner Intersection

We now prove that the algorithm of Section [\ref=inner_algorithm] computes an inner approximation of [formula] that satisfies the properties stated in Theorem [\ref=defaut_prop]. We first need the following lemmas:

The computed polygonal region is a lattice polygonal region.

Proof:  We prove that no extraneous intersections are introduced in the final approximation (though new incidences are permitted). Let Ci = 0..p be the set of all convex cells of the vertical decomposition of the exact intersection. For each Ci, let li and ri be the two vertical lines that pass through respectively the leftmost and the rightmost lattice point of Ci (cf. Figure [\ref=inversion]). Now, if the intersection of Ci with li (resp. ri) is a wall of Ci, let ldowni and lupi (resp. rdowni and rupi) be the lower and the upper intersection of li (resp. ri) with Ci and let [formula] (resp. [formula]) be the point on li (resp. ri) that corresponds to the reflex vertex from where the wall is stemming from. Otherwise, let ldowni = lupi (resp. rdowni = rupi) equal the leftmost (resp. the rightmost) vertex of Ci and let [formula] (resp. [formula]).

The rounded counterparts of the polygonal chains connecting ldowni to rdowni, respectively rupi to lupi), are convex (by convexity of the original chains), therefore they are guaranteed not to lie above, respectively below, the edge [formula] and thus cannot invert in Ci. [formula]

All vertices of the computed polygonal region lie at lattice point within the exact intersection region.

Proof:  There actually exist three types of vertices in the final approximation: rounded intersection points, original input vertices and snapped vertices corresponding to vertically visible input reflex vertices. Since each intersection point rounds to its nearest visible lattice point, the first type of vertex is guaranteed to lie at lattice point within the intersection region. The two other types of vertices correspond to lattice vertices of the exact intersection region. [formula]

Given pq an edge of the exact intersection region, the polygonal chain σ(pq) that connects [formula] to [formula] and corresponds to the rounded counterpart of pq in [formula] is entirely contained in P by construction.

Let p be a vertex of P and L(P) be the union of all lattice points, unit lattice segments and unit lattice squares that belong to the interior or to the boundary of P. The segment connecting p to vP(p) cannot intersect the interior of L(P).

Proof:  To intersect the interior of L(P), the segment pvP(p) must intersect the interior of a unit lattice segment s of ∂L(P) (cf. Figure [\ref=f1]). The two endpoints of s are necessarily closer to p than vP(p) and therefore cannot be visible from p since they correspond, by definition of L(P), to lattice points that lie inside P. Consequently, the relative interior of the segments connecting p to these endpoints must intersect the boundary of P. But this is impossible since by definition both segments pvP(p) and s cannot intersect in their interior the boundary of P and there cannot exist any visible reflex (lattice) vertex of P inside the triangle having p and the two endpoints of s as vertices since all points of this triangle are closer to p than vP(p). [formula]

Given two lattice polygonal regions A and B of the plane, [formula].

Proof:  From Observation [\ref=obs],   =  AB is included in [formula] and the directional Hausdorff distance dh((Po)C,C) is zero. We prove in the following that all points of [formula] are at a distance less than [formula] from ∂P. Let pq be an edge of P and let Epq be the polygon obtained by appending the rounded chain σ(pq) to qp. Notice that [formula] partitions [formula] except for the polygons pi of P that do not have any rounded counterpart. The bound is trivially proven for the latter polygons since they do not contain any lattice point. For the non-trivial case, we conclude that it is sufficient to prove that [formula] for any edge pq of P.

Let L(P) be the union of all lattice points, unit lattice segments and unit lattice squares that belong to the interior or to the boundary of P. By definition of L(P), all points of [formula] are at a distance less than [formula] of ∂P, we therefore suppose in the following that Epq is not entirely included in [formula].

By lemma [\ref=lemmaL], the segments pvP(p) and qvP(q) cannot intersect the interior of L(P) thus for Epq to intersect L(P)o, σ(pq) must necessarily intersect L(P)o. Moreover, by convexity of the chain σ(pq), there must exist in this case at least one (lattice) vertex v different from vP(p) and vP(q) that lies in or on the boundary of Epq. Suppose wlog that pq is oriented from left to right with a positive or zero slope and that the interior of P lies above pq. Finally, let vl the xy-smallest point (w.r.t the lexicographic order) of the set S of all lattice points different from vP(p) and vP(q) that lie in or on the boundary of Epq (cf. Figure [\ref=f2]).

Using the same arguments as in the proof of lemma [\ref=slab_lemma] and since vl is the xy-smallest point of S, it is easy to show that vl is vertically visible from pq and that the vertical unit lattice segment having vl as top vertex surely intersects pq in a point ip. Similarly, since pq is oriented from left to right and has a positive or zero slope and since by lemma [\ref=lemmaL] the segments pvP(p) and qvP(q) cannot intersect the interior of L(P), the horizontal unit lattice segment having vl as right vertex surely intersects σ(pq) in a point jp. Notice that, by construction, both ip and jp belong to the boundary of a same unit lattice square so that [formula].

Replacing p by q and applying a symmetry operation on Epq such that qp is oriented from left to right and has a positive or zero slope with the interior of P above qp, we define similarly two points iq and jq on pq and σ(pq) such that [formula]. We conclude that [formula] since the polygons pipjpvP(p) and jqiqqvP(q) are contained in [formula] (by definition of vl) and the polygon ipiqjqjp is contained in the Minkowski sum of ipiq with the interior of a disc of radius [formula] centered at the origin (cf. Figure [\ref=f2]), and by convexity of σ(pq), the portion of σ(pq) between jp and jq is included in ipiqjqjp. [formula]

We are now able to prove Theorem [\ref=defaut_prop]. Proof of property 1) comes from the combination of Lemmas [\ref=valid] and [\ref=lattice]. From 1) and by construction of the approximation the proof of Property 2) is trivial. Property 3) is proven in Lemma [\ref=hausdorff]. Proof of property 4) comes from the fact that each intersection point rounds to at most one lattice point and that all extra vertices that appear in the approximation correspond to original reflex vertices of the exact intersection. The number of vertices of the final approximation is larger than the number of vertices of the original region only when a vertex of P is used several times in the approximation. Property 5) is a direct consequence of the last step of the algorithm since the convex-hull pass guarantees that no extra reflex vertices are introduced in the final approximation.

Outer Intersection

In this section, we introduce some lemmas needed for the proof of Theorem [\ref=excess_prop]. Notice that property 3) cannot be deduced from Lemma [\ref=hausdorff] since we must bound the distance between the points of [formula] to the exact intersection region P and not only to the region [formula]. That is, we must exclude that there exist points of [formula] that are close to a pixel of I but at a distance greater than [formula] from the region P.

Given two lattice polygonal regions A and B of the plane, [formula].

Proof:  Since [formula] is included in [formula], the (directional) Hausdorff distance from P to [formula] is zero. Therefore, it is sufficient to show that each point of [formula] is at a distance less than [formula] to P.

Note that since no pixel of I contains a lattice point in its interior, the union [formula] of all the lattice points, lattice segments and pixels that belong to the interior or to the boundary of [formula] is also the union of all the lattice points, lattice segments and pixels that belong to the interior or to the boundary of PC. Therefore, if the polygon Epq (as defined in the proof of Lemma [\ref=hausdorff]) is contained in [formula] it is also contained in [formula], and Epq surely lies at a distance less than [formula] to the boundary of P.

Otherwise, with the same arguments as in the proof of Lemma [\ref=hausdorff], we show that the part of Epq which is intersected by the interior of L(PC)o surely lies at a distance less than [formula] to pq. Therefore if pq is issued from an edge of P then the bound is trivially proven. Otherwise, that is if pq is issued from a pixel Q of I, using the same arguments as in the proof of Lemma [\ref=hausdorff], there must exist a lattice line passing through vl (as defined in the proof) that intersects pq. This line cannot intersect the relative interior of pq since the edge pq is included or equals a unit lattice segment. Moreover, if this line intersects pq in one of its endpoints then the intersected endpoint is necessarily a lattice point and therefore the rounded counterpart σ(pq) of pq is included in pq (cf. Figure [\ref=p21]). We conclude in this case that [formula] since there must exist a vertex of P in the pixel Q (namely, the vertex of P that causes the presence of Q in I). [formula]

The rounded region [formula] of [formula] has less than |P|  +  3k  +  h distinct vertices where k is the number of non-lattice vertices of P and h is the total number of intersecting pairs between the edges of P and those of I.

Proof:  Since [formula] corresponds to the complementary of the inner rounding [formula] of [formula], we have from Theorem [\ref=defaut_prop] that [formula], and the number of vertices of [formula] is bounded by |PI|. If P has a total of n vertices and has k vertices which are not representable on the integer lattice, |I|  ≤  4k and PI has at most (n - k) + 4k lattice vertices and h non integer vertices where h denotes the number of intersection point between P and I edges. [formula]

Although the number of vertices of PI used as an upper bound on the complexity of [formula] can be in the worst case in O(nk), an additional pass of the algorithm can be used to guarantee a total number of vertices of [formula] which is linear in the number of vertices of the exact region P. More precisely, we show in [\cite=prisme-these-guigue] that the removal of all zero-area components (that is polygons or holes of [formula] that have no interior) from the obtained region allows to bound the worst case number of distinct vertices of [formula] by 2n + 3k without affecting the geometric error bound. In addition, experimental results obtained with an implementation of the algorithm using the C++ library Cgal  [\cite=prisme-cgal-3.0] indicate that the number of additional vertices of [formula] is very small in practice.

From the above lemmas, we are now able to prove Theorem [\ref=excess_prop]. The proof of property 1) and 2) can be directly deduced by construction of [formula] from Theorem [\ref=defaut_prop]. Property 3) is proved in Lemma [\ref=hausdorff2]. Property 4) is proved in Lemma [\ref=exces_bound].

Rounding Set Operations

Theorems [\ref=exces_prop_union] and [\ref=defaut_prop_union] enumerate the set of properties satisfied when the exact region U comes from a union operation i.e. when [formula]. These properties can be directly obtained from Theorems [\ref=defaut_prop] and [\ref=excess_prop] by replacing A and B by their complementary sets.

The outer rounding [formula] of [formula] satisfies the following properties: 1) [formula] is a lattice polygonal region, 2) [formula] contains U, 3) [formula], 4) [formula], 5) A convex vertex of [formula] does always correspond to a convex vertex of U.

The inner rounding [formula] of [formula] satisfies the following properties: 1) [formula] is a lattice polygonal region, 2) [formula] is contained in U, 3) [formula], 4) ||  ≤  |U| + k + h,where k is the number of non-lattice vertices of U and h is the total number of intersecting pairs between the edges of U and those of I.

The result for the set difference operation can equally be deduced from Theorems 1, 2, 5 and 6 for each rounding mode.

Rounding General Regions

From the lemmas and algorithms presented so far in this report, the inner/outer rounding of a general polygonal region (for which we do not have any assumption on the representation of its vertices, for example a region issued from a rotation operation) can be obtained in the following manner. Let P be a general polygonal region and consider Vc (resp. Vr), the set of its convex (resp. reflex) vertices that do not lie at lattice sites. Let now Ic (resp. Ir) be the set of unit lattice squares that contain the vertices of Vc (resp. Vr), i.e. the set of quadrilaterals having respectively (⌊vx⌋,⌊vy⌋) and (⌈vx⌉,⌈vy⌉) as bottom left and top right vertex where v = (vx,vy) is a vertex of Ic (resp. Ir).

We define the inner rounding [formula] of P as the result of the rounding with the inner mode of the intersection of P and Ir, that is   =  P  Ir. Similarly, we define the outer rounding [formula] of P as the complementary of the rounding with the inner mode of the intersection of PC and IcC, that is [formula].

The inner rounded intersection operations used in these definitions can be directly computed from the algorithm presented in Section [\ref=algorithms]. We remark indeed that all reflex vertices of the intersection regions (P  Ir) and (PC  IcC)C lie at lattice sites which is a sufficient condition to satisfy the properties of the reflex vertical decomposition stated in Lemmas [\ref=cell_lemma] and [\ref=slab_lemma] and thus to prove the correctness of the algorithms.

We notice however that the absence of lattice segments supporting the edges of the input region P requires the use of a well suited number type and arithmetic in order to evaluate the numerical primitives that appear in the algorithm. A number type and an arithmetic allowing the manipulation of algebraic numbers can be necessary for example if the input region P are issued from a rotation operation.

The properties satisfied by the rounded regions [formula] and [formula] can be directly derived from the lemmas of the previous sections. More precisely, the inner rounding [formula] is a lattice polygonal region contained in P such that [formula]. Moreover, if it exists, the rounded counterpart of a convex vertex of P is a convex vertex of [formula]. Finally, [formula] has less than |P|  +  r  +  hr distinct vertices where r is the number of reflex vertices of P and hr is the number of intersections between the edges of P and the edges of Ir. The outer rounding [formula] of P is a lattice polygonal region that contains P such that [formula] and [formula] where c denotes the number of convex vertices of P and hc denotes the number of intersections between the edges of P and the edges of Ic.

We finally remark that the number of vertices needed to represent [formula] can be reduced with the same kind of technique as described at the end of Section [\ref=prope].

Conclusion

We have given methods for computing the inner/outer rounding of the result of set operations on two lattice polygonal regions in the plane. The guarantees that the exact result of such operations contains (or is contained in) its finite precision approximation allows to introduce the geometric analogue of interval arithmetic provided by the certified rounding modes of the IEEE 754 norm for floating point arithmetic operations. The computation of such geometric intervals with respect to the inclusion relation permits in particular to cascade various geometric constructions as set operations, convex hulls or rotations with a control on their bit complexity. This result is a first step towards the definition of a complete system for performing rounded operations on polygonal and polyhedral objects which would be of great practical interest in many CAD applications.