=1

Multi-robot task allocation with resource contention and uncertain timing

Introduction

to the Multi-Robot Task Allocation (MRTA) problem are necessary for the efficient operation of many multi-robot systems. The MRTA problem is to take a set of robots and tasks, and optimally assign each robot to a task. Most of the work on MRTA problems makes assumptions that are not realistic for real-world problems, such as negligible interaction effects between robots, and deterministic robot dynamics. This paper relaxes these assumptions by considering uncertainty in the travel times and task durations of the robots, and modelling the effects that result from multiple robots using mutually exclusive resources. This work is motivated by multi-robot scenarios where there is a shared resource that cannot be used by all of the robots at once, such as an intersection or narrow passageway, as well as situations where the robots cannot perform their tasks in parallel and must wait for previous robots to finish before commencing their task, such as construction and maintenance tasks. The techniques developed in this paper for modelling these effects are applicable to a wide range of scenarios including machine shop scheduling [\cite=Kouvelis2000] and processor scheduling [\cite=El-Rewini1990], as well as other robotics problems such as multi-robot path planning [\cite=He2013] [\cite=Yu2013] [\cite=Alonso-Mora2015], and planning for refuelling or recharging robots [\cite=Palmer2013] [\cite=Palmer2014] [\cite=Palmer2016b].

While there is literature on MRTA problems that incorporate either uncertainty [\cite=Mataric2003] [\cite=Ramchurn2009] [\cite=Liu2011] [\cite=Wu2015] [\cite=Nam2015] [\cite=Nam2015a] or resource contention [\cite=Vaughan2000] [\cite=Guerrero2006] [\cite=Dahl2009] [\cite=Pini2009] [\cite=Nam2015b], to the best of the authors' knowledge this is the first work to combine the two. This paper develops a framework for analytically calculating the probability distributions describing the times at which the tasks are started and completed. This framework is independent of the choice of optimisation method used, facilitates the use of any objective function, and can also be used in conjunction with chance constraints.

In the problems considered in this paper, the locations where the robots perform their tasks are the contended resource. Two specific problems are considered. In the first problem, the order in which the robots must perform their tasks is specified in the problem formulation. This behaviour can be found in construction and maintenance problems where specialised robots must perform their tasks first to enable other robots to execute their tasks. For example, one robot may need to remove a wheel to allow another robot to access the brakes on a vehicle. In the second problem, the order is unspecified and the robots perform their tasks in the order in which they arrive at the location. These situations can occur when there are robots or agents that are outside of the control of the system and rules are used to govern their behaviour. Examples of this include fleets of autonomous vehicles interacting with autonomous and manned vehicles at intersections through give way rules, and robots forming queues to perform tasks such as collecting and delivering packages.

Beyond the development of the framework for modelling the effects of timing uncertainty and resource contention, specific contributions of this paper include:

a method for calculating the probability, and an upper bound on the probability, of a set of independent normally distributed random events occurring in a given order;

a method for calculating the most likely and n-th most likely orderings of independent normally distributed random events, when the standard deviations of the occurrence times for each event are equal;

a normal approximation to the conditional probability distribution describing a random event given a specific order of events; and

a comparison of the developed framework with deterministic and Monte Carlo approaches in two simulation examples.

The remainder of this paper is structured as follows: Section [\ref=s:rel_lit] presents an overview of related literature, Section [\ref=s:control] develops a framework for scenarios where the order in which the tasks must be performed is specified, and Section [\ref=s:no_control] extends this framework to scenarios in which the order is not specified. Section [\ref=s:results] evaluates the utility of the developed framework through two simulation examples, and Section [\ref=s:conc] concludes the paper with suggestions for future research.

Related literature

MRTA problems have been extensively studied in the literature--a recent review of the state-of-the-art solution methods for MRTA problems is presented in [\cite=Khamis2015]. The authors note that solving MRTA problems with complex constraints, including uncertainty and inter-robot effects, is still an open question. In general, much of the literature takes an idealistic view of the problem by ignoring both the uncertainty inherent in real-world scenarios and the effects of robots interacting with one another as they attempt to perform their tasks.

While uncertainty has been considered by several papers, each paper has introduced and dealt with uncertainty in different ways. In [\cite=Mataric2003], tasks were generated at random times and locations. Here, the authors empirically tested the effect of commitment versus coordination on the overall performance of the system, and found that the optimal strategy varies depending on the scenario. Trust was introduced in [\cite=Ramchurn2009] as a way of modelling the uncertainty in whether an agent will succeed at a given task. The interval Hungarian algorithm was developed in [\cite=Liu2011] to deal with problems that have uncertainty in the utility estimate of a given assignment. This method relies on knowing the Probability Density Function (PDF) describing the utility. The interval Hungarian algorithm can be applied to problems with resource contention, using the framework developed in this paper to calculate the PDFs of the utility. Task allocation in teams consisting of both robots and humans was considered by [\cite=Wu2015], where humans have the option of rejecting a task assignment. They developed a replanning algorithm using a multi-agent Markov decision process that incorporated the probability that a human will reject the task. Finally, sensitivity analysis approaches were used in [\cite=Nam2015] [\cite=Nam2015a] to quantify when a task assignment should be recomputed in response to changes in the environment. The effect of resource contention was not included in any of the above papers.

Resource contention was considered in [\cite=Vaughan2000], where a team of robots operating in an office building frequently encountered areas where only one robot could operate at a time, such as doorways and cluttered corridors. The authors introduced a decentralised method that used aggression signalling to resolve interactions during task execution. A learnt model of the impact of interference between robots on the utility function was used by [\cite=Guerrero2006] within an auctioning algorithm. Vacancy chain scheduling was used in [\cite=Dahl2009] for dealing with interaction effects in a MRTA problem with a homogeneous fleet of robots. The authors used reinforcement learning to spatially distribute the robots to avoid interference effects. The idea of spatially distributing the robots to avoid interference was also used in [\cite=Pini2009]. In each of the above works, global optimality of the solution was not considered. A method for calculating the optimal task assignment in scenarios with resource contention was developed in [\cite=Nam2015b]. Interference costs were modelled using a penalisation function, and they showed that the task assignment problem is NP-hard when the penalisation function is polynomial-time computable. Their approach used Murty's ranking algorithm to find next best assignments when ignoring interference costs, and then evaluated these assignments with the interference costs included. The framework presented in this paper can be used to calculate the penalisation function when uncertainty is also considered.

In summary, the literature on resource contention and uncertainty has thus far only considered these problems separately. The sections that follow incorporate these two aspects into a unifying framework.

Order is specified

This section considers the problem of predicting the outcome of events that have uncertainty around their start time and duration, where the order in which the events occurs is provided. Consider a simple example of two robots, A and B, that both need to perform an action at the same location. Both the time of arrival at the location, TaA and TaB, and the duration of the action, DA and DB, are independent random variables. Only one robot can perform their action at the location at a time, so the second robot may have to wait for the first robot to complete its action before commencing its own action. If robot A must perform its action before B, then the time that robot A starts its action, TsA, is simply the time that it arrives at the location, TaA. The time that it finishes the action at, TfA, is given by:

[formula]

Since robot B can only commence its action after A has finished, the time that robot B starts its action, TsB is given by:

[formula]

and the time that robot B completes its action, TfB, is given by:

[formula]

This process is easily extended to 3 or more robots. For many types of probability distributions, the above process requires numerical methods to calculate the sum and maximum of the random variables. However, if the arrival times and durations are described by independent normally distributed random variables, then analytical methods can be used. The summation of two independent normally distributed random variables is well known:

[formula]

Maximum of random variables

An analytical approach for calculating the mean and variance of the maximum of two normally distributed random variables is given in [\cite=Clark1961]. This is summarised below for independent normally distributed random variables.

Consider X  ~  N(μX,σ2X) and Y  ~  N(μY,σ2Y). Let:

[formula]

[formula]

Using the following notation:

[formula]

[formula]

where erf(.) is the error function, defined as:

[formula]

max (X,Y) is approximated by a normal distribution, Z  ~  N(μZ,σ2Z), where:

[formula]

[formula]

For more than two random variables, the author suggests iteratively applying the above approximation. For three random variables, X, Y, and Z, the maximum is approximated as:

[formula]

Figure [\ref=f:examples_max] presents examples of the approximation applied to 10 and 100 random variables. As would be expected, this approximation degrades as the number of random variables is increased. However, it is still a reasonably good approximation of the numerical result. For 10 random variables, the Kullback-Liebler divergence between the numerical and analytical distributions was approximately 1e- 3, while for 100 random variables it was approximately 3e- 2.

The equations above have been simplified from the full method presented in [\cite=Clark1961]. Where the above equations are only valid for independent random variables, the full approach is valid for correlated random variables. While situations where the random variables are correlated are not considered in this paper, correlation may need to be accounted for in MRTA scenarios where the planner generates a sequence of tasks for each robot rather than just a single task.

Example

Figure [\ref=f:results_max] shows the completion times of the actions of each robot in a three robot scenario. The parameters for each robot are detailed in the caption. In this case, the robots A, B, and C are to perform their tasks in the order ABC. As can be seen, the analytical approach presented in this section produces almost identical results to a numerical approach, even for Robot C in Fig. [\ref=sf:example_3_dist] where the histogram is clearly skewed.

Order is unspecified

This section investigates the problem of predicting the outcome of uncertain events when their order of execution is not specified. This problem commonly occurs in situations that have a First-In First-Out (FIFO) property, such as queues and some intersections. Consider a similar multi-robot scenario to the previous section where two robots, A and B, travel to a location and perform a task. In contrast to the previous section, the first robot to arrive at the location is the first to perform its task. Clearly, there are two possible orders in which the robots can arrive at the location--either A can arrive first, or B can arrive first.

Consider the case where A arrives before B. The time that A starts its task is first conditioned on the order in which the robots arrive:

[formula]

The time that A completes its task is given by:

[formula]

The time that B starts its task is then calculated as:

[formula]

and the time that B completes its task is given by:

[formula]

The completion time for each robot, considering all orders of arrival, is calculated by summing the probability weighted completion times for each order of arrival. For robot A, this gives:

[formula]

where P(TaX  <  TaY) is the probability that X arrives before Y. This process extends to n robots, with the downside that there are n! orders of arrival that have to be considered.

The following sections present methods for calculating the probability of an order of arrival (Section [\ref=s:prob]), and for conditioning the arrival times on the order of arrival (Section [\ref=s:conditioning]), under the assumption of normally distributed arrival times. Section [\ref=s:example_any_order] presents a short example, and Section [\ref=s:complexity] discusses some possible approaches for reducing the computational requirements of the above method.

Calculating the probability of an order of arrival

First, consider two robots with arrival times TA and TB. The probability that A arrives before B is given by:

[formula]

where t is time and p(X) denotes the PDF of the random variable X. If TaA  ~  N(μA,σ2A) and TaB  ~  N(μB,σ2B), then:

[formula]

Extending this to three robots, A, B, and C, the probability that A arrives before B, and that B arrives before C, is given by:

[formula]

Calculating the conditional probability P(TaB  <  TaC|TaA  <  TaB) is challenging. It is possible to reformulate this problem as a multivariate normal distribution through an affine transformation. Let X  =  TaA  -  TaB and Y  =  TaB  -  TaC:

[formula]

[formula]

The multivariate normal distribution, M, then has mean, [formula] and covariance, [formula], calculated using an affine transformation:

[formula]

and

[formula]

The probability [formula] is calculated by evaluating the Cumulative Distribution Function (CDF) of M at X  =  0 and Y  =  0. Unfortunately, no analytical solution exists for the CDF of a multivariate normal distribution [\cite=Genz2009]. However, an approximation approach based on [\cite=Genz1992] is readily available as the mvnun function in the stats.mvn module of the Scipy package for Python [\cite=Jones2001]. This function enables calculation of the multivariate CDF for up to 500 dimensions, allowing the above probability calculation to be extended to up to 501 robots.

The mvnun function is computationally expensive, especially for high-dimensional multivariate distributions. If there are independent parts of the distribution (e.g., [formula] where ABC are independent from DEF), then, in practice when using mvnun, it is significantly faster to calculate the probabilities of each independent part separately and simply multiply the probabilities together, than to compute the probability using the entire multivariate distribution.

Estimating the probability

As the number of robots is increased, the computational requirements of mvnun can become excessive. For example, with 8 robots, there are over 40,000 possible orders of arrival. In this case, mvnun takes 3ms to compute the probability of one order of arrival, requiring a total of 120s to calculate the probability for every order of arrival. It is desirable to have a fast method of estimating the arrival order probability to use either in place of mvnun or to allow unlikely arrival orders to be discarded before the actual probability is calculated.

The approach proposed here estimates the probability of an order of arrival by multiplying together the probability of successive pairs of robots arriving before each other, as outlined in Eq. ([\ref=eq:est_prob]). The probability of one robot arriving before another is calculated using Eq. ([\ref=eq:prob_cdf]). Since this approach ignores any correlation between the pairs of robots, it is guaranteed to be an overestimate of the actual probability, providing an upper bound on the probability of a given order.

[formula]

This method is approximately 100 times faster than mvn.mvnun in the case of 8 robots, with this advantage increasing as the number of robots is increased.

Finding the n-th most likely order of arrival

Another method of reducing the computational requirements of this approach is to only consider likely orders of arrival. Thus, it is desirable to be able to determine what the most likely orders of arrival are. In the general case, this requires an exhaustive search over all orders of arrival. An approach like branch and bound combined with the upper bound provided by the estimate in Section [\ref=s:prob_est] is one way to reduce the size of this search space.

The rest of this section considers the special case where the standard deviations of the arrival time for each robot are equal. In this case, the n-th most likely order of arrival can be found using a similar approach to Murty's ranking algorithm for efficiently ranking assignments by their cost [\cite=Murty1968].

The most likely order of arrival is the order in which the mean arrival times are ascending.

See Appendix [\ref=ap:theorem_1_proof] for full proof.

Summary: The proof presented in Appendix [\ref=ap:theorem_1_proof] shows that ordering any pair of neighbouring robots in a sequence of robots by their mean arrival times will result in a higher probability order of arrival than the opposite ordering. Applying this to all pairs of robots leads to the conclusion that the most likely order of arrival can be obtained by sorting the robots by their mean arrival times.

The second most likely order of arrival can be found by swapping one pair of neighbouring robots in the most likely order of arrival.

The n-th most likely order of arrival can be found by swapping at most n - 1 pairs of neighbouring robots when starting with the most likely order.

The (n + 1)-th most likely order of arrival can be found by swapping one pair of neighbouring robots in one of the n most likely orders.

Together, Corollaries [\ref=c:1] and [\ref=c:2] enable the application of a similar approach to Murty's ranking algorithm.

For the applications in this paper, it is desirable to find the set of most likely orders of arrival up to a threshold on the sum of their probabilities. This approach is detailed in Algorithm [\ref=a:nth_most_likely]. The algorithm first finds the most likely order of arrival on Line [\ref=l:most_likely]. It then finds the i-th most likely order on Line [\ref=l:ith_most_likely] by searching the neighbours of all orders up to the (i - 1)-th most likely order, disregarding orders that have already been considered. This is necessary as an order can be reached in many ways from different parent nodes. When the sum of the probabilities of the orders considered is greater than the threshold, the algorithm returns the list of orders.

While this approach is only guaranteed to search through the orders of arrival in order of their likelihood for cases where the distributions describing the arrival times have equal standard deviations, it can be applied to cases where the standard deviations are not equal with the loss of this guarantee.

Conditioning the arrival times on the order of arrival

A method for calculating the mean and variance of the random variable TaB conditioned on the arrival order ABC, (TaB|TaA  <  TaB  <  TaC), is given in [\cite=Palmer2016] and is summarised below. This method can be used to calculate (TaB|TaB  <  TaC) and (TaB|TaA  <  TaB) by using μA  =    -    ∞   and μC  =    ∞   respectively.

The mean and variance of the conditional probability distribution are denoted as B and σ̂2B respectively. First, the reference frame is transformed such that TaB is described by a standard normal distribution. This yields transformations of TaA and TaC to TaX and TaY respectively:

[formula]

where

[formula]

[formula]

Then, the mean of the conditional probability distribution is given by:

[formula]

where

[formula]

and the variance is given by:

[formula]

The new mean and standard deviation are then transformed back to the original reference frame to give B and σ̂2B:

[formula]

Extension to general conditions

As noted in [\cite=Palmer2016], the approach used to derive the above method is reliant on the condition that μA  <  μC, and the assumption that there is not much overlap between TaA and TaC. For cases where this is not the case, it is a poor approximation of the mean and variance. To apply this approach in situations where this assumption and condition are not met, it is proposed that TaA and TaC be applied one at a time. Applying these conditions one at a time involves using the procedure from Eq. ([\ref=eq:begin_conditional]) to Eq. ([\ref=eq:end_conditional]) with one of the distributions set to either -    ∞   or ∞  , and then using the result of that procedure as the distribution for TaB when applying the remaining condition.

The order in which the conditions are applied can impact the resultant distribution. In order to determine the order in which the conditions should be applied, a decision tree was learnt using the scikit-learn module for Python. The three choices of method are:

Apply TaA and TaC together

Apply TaA followed by TaC

Apply TaC followed by TaA

The decision tree to determine which method to use is presented in Figure [\ref=f:decision_tree]. The parameters γ and δ are an overlap metric and shape metric respectively, as defined in [\cite=Palmer2016]:

[formula]

[formula]

γ is a measure of the degree of overlap between the probability distributions of the two conditions, and δ is a measure of the difference in the variances of TaA and TaC.

The decision tree was trained on approximately 215,000 different combinations of values for TaA and TaC, with TaB represented by a standard normal distribution. Values for μA and μC ranged between -3 and 3 in 0.2 step increments, and values for σA and σC ranged between 0.2 and 3 in 0.2 step increments. A separate set of 10,000 combinations of randomly sampled values was used to evaluate the decision tree. KL divergence was used as a measure of error between the method selected by the decision tree and the optimal method. The optimal method was selected by the decision tree in 84.8% of cases. For all cases, the average and Root Mean Squared (RMS) KL divergences were 3.1e- 3 and 9.4e- 2 respectively, and for cases where the incorrect decision was made they were 2.0e- 2 and 2.4e- 1 respectively. In 93.0% of the cases where the incorrect decision was made, the KL divergence was below 1e- 2. The majority of the error was accrued in a few cases where the distributions TaA and TaC have a very low probability of satisfying TaA  <  TaC, resulting in a very high KL divergence (> 1). Thus, even though this is a poor approximation in some of these cases, it will have a negligible impact on the result when it is multiplied by the probability of that order of arrival occurring.

Figure [\ref=f:decision_tree_incorrect] shows two examples where the decision tree gave an incorrect result to provide a sense of scale for the KL divergences. In Figure [\ref=sf:kl_1], the KL divergence is 1e- 2 and there is very little difference between the distributions. Approximately 99% of the test cases resulted in a KL divergence lower than this. The KL divergence in Figure [\ref=sf:kl_2] is 2e- 1. While there is a substantial difference between the distributions in this case, less than 0.4% of cases had a KL divergence this high.

Iteratively applying conditions

So far, only the second robot to arrive in a group of three robots has been considered. Analytically calculating the mean and variance for the conditional arrival time of the other robots is a challenging problem. Instead, it is proposed that the conditions be applied iteratively. The conditional arrival time of the first robot, (TaA|TaA  <  TaB  <  TaC), is calculated as:

[formula]

In this way, any number of robots can be considered. For example, for four robots, A, B, C, and D, the conditional arrival time of each robot would be calculated as:

[formula]

[formula]

[formula]

[formula]

Figure [\ref=f:conditional] shows an example of the conditional arrival times for three robots, A, B, and C, if the order of arrival is ABC. As can be seen, the analytical approximation of the conditional distribution is a good match to the numerical approximation, even in the cases where the analytical approach was applied iteratively.

Example

Figure [\ref=f:conditional_full_example] shows an example of the probability distribution of the completion time for each robot in a three robot scenario when every arrival order is considered. The analytical result is composed of the probability weighted sum of the completion times for each order of arrival. The analytical method produces a good approximation to the numerical results in this case. Using the pairwise probability estimate proposed in Section [\ref=s:prob_est] also gives reasonably good results in this case. However, as it ignores the effects of the conditional probabilities, its performance degrades as the number of robots is increased, as shown in the example in Figure [\ref=f:conditional_counter_example].

Computational complexity

As mentioned previously, there are n! possible orders that n robots can arrive in. This means that, as the number of robots is increased, the analytical approach presented above can quickly become computationally more expensive than numerical methods. The method of estimating the probability presented in Section [\ref=s:prob_est] can help to reduce the computational cost of each order considered. However, n! orders are still considered. In situations where there are only a few likely orders, the threshold method developed in Section [\ref=s:most_likely] can drastically cut down on the number of orders considered. However, in the worst case where the mean arrival time of each robot is equal, this approach may not result in much of a reduction in the number of orders examined.

Another simple method of reducing the computational complexity is to examine pairs of robots and disregard a certain arrival order for that pair of robots if the probability is low enough. Consider the robots A, B, and C. If the probability that B arrives before A, evaluated using Eq. ([\ref=eq:prob_cdf]), is lower than a user specified threshold, then, of the six possible orders that the robots can arrive in, only ABC, ACB, and CAB would be evaluated. A discussion of other methods, including using the probability of partial orders of arrival to determine whether the full order of arrival should be considered, is presented in Section 5.3 of [\cite=Palmer2015].

Results

This section presents results for two MRTA scenarios. In the first scenario, the order in which the robots must perform their tasks was specified and the analytical method presented in Section [\ref=s:control] was used to evaluate the task allocations. In the second scenario, the order that the tasks were performed in was determined by the order in which the robots arrive at the task, and the analytical method developed in Section [\ref=s:no_control] was used to evaluate the task allocations. All methods were tested on a laptop with a 2.8GHz Intel i7-4810MQ and were programmed in Python 3 by the author.

Scenario 1: Task order is specified

The first scenario considered consisted of a heterogeneous fleet of four types of robots performing assembly tasks at four locations. These tasks must be executed in a specific order, so some robots may have to wait for other robots to complete their task before commencing its own task. There are 16 robots in total--four of each type. The problem is to allocate one of each type of robot to each location.

100 random instances were considered. In each instance, the means and standard deviations of the distributions describing the uncertain travel times and uncertain task durations of each robot were randomly selected. The optimisation objective was to minimise the expected cost of the construction, where cost is incurred if the construction takes longer than a specified deadline, κ. The deadline used for each scenario was the minimum time to complete the construction if the robots had no uncertainty, as calculated using a deterministic approach.

The analytical method (A) presented in Section [\ref=s:control] enables the calculation of the random variable describing the time at which the construction is completed, T. From this, the expected tardiness, π, is calculated as:

[formula]

where E(X) is the expected value of the random variable X.

Both a deterministic (D) and a Monte Carlo (M) approach were used as benchmarks for the analytical method, with the number of samples used in the Monte Carlo method varied between 5 and 80. An exhaustive search over all possible allocations was used for testing each method, and ground truth costs were evaluated using a Monte Carlo method with 100,000 samples. Figure [\ref=f:scen1results] shows the performance of each method versus its calculation time. For each random instance, the cost of the lowest cost assignment found by any method was subtracted from the cost for each method and then averaged across all instances. It was necessary to use this relative cost to enable comparison across scenarios. It was also infeasible to calculate the optimal allocation as this would have required using either the Monte Carlo approach with infinite samples, or an analytical approach that does not use approximations.

As can be seen, the analytical approach presented in this paper consistently resulted in the lowest cost allocations. An unpaired-sample t-test was performed to test the statistical significance of the results, and the analytical method was found to produce better results than each of the other methods with a significance level of less than 0.01 in each case.

Scenario 2: Task order is unspecified

The second scenario consisted of multiple robots, with the caveat that some of the robots were controlled by other entities and their actions were not coordinated. Such situations may become common in the future where robots from multiple vendors coexist in uncontrolled environments without a centralised controller.

In this scenario, 30 robots starting at random locations each collect a package from one of 30 locations and then deliver the package to its destination. The robots will encounter other robots collecting packages at the collection locations and may be required to queue before collecting the package. Thus, the resources under contention are the package collection locations. An example scenario with only 2 controlled robots is shown in Figure [\ref=f:scen2]. It was assumed that the actions of the uncontrolled robots are known to the optimiser. The optimisation aim was to generate an optimal allocation of robots to packages that minimised the tardiness cost incurred for delivering packages after their deadline. In contrast to the previous scenario, individual deadlines were considered for each package.

At each package collection location, n robots controlled by other entities were also collecting packages, where n was varied from 1 to 6. 100 random scenarios were tested for each value of n, each with random arrival time distributions and task durations for each robot and random deadlines for each package. The standard deviations of the arrival time distributions for each robot were set to be equal to one another to demonstrate the utility of the method presented in Section [\ref=s:most_likely] for calculating the set of most likely orders of arrival. Note that the results presented here are valid for cases where the standard deviations are not equal, with the exception of the methods using Algorithm [\ref=a:nth_most_likely] with a threshold less than 100%.

The analytical method was tested using both the full method for calculating the probability of an order of arrival (A), and the method for estimating this probability (AEst). Only the A method used Algorithm [\ref=a:nth_most_likely] to limit the number of orders considered, and values of 80%, 90%, 95%, 99% and 100% were used for the probability threshold. These approaches were benchmarked against a deterministic approach (D), and a Monte Carlo approach (M). The number of samples used in the Monte Carlo approach was varied between 10 and 10,000 for the cases where n  ≤  5, and between 10 and 100,000 for the case where n = 6. As the controlled robots do not interact with each other, the cost associated with an individual robot being assigned to a specific task can be calculated prior to the optimisation and the Hungarian algorithm [\cite=Kuhn1955] can then be used to calculate the optimal allocation. Ground truth costs were evaluated using a Monte Carlo method with 100,000 samples where n  ≤  5, and 1,000,000 samples where n = 6.

Figure [\ref=f:scen2_results] shows the results for each method versus the calculation time. As can be seen, the analytical method consistently achieved the lowest cost solutions when using a probability threshold of 100%. This came at the expense of calculation time as the number of external robots was increased. Lowering the probability threshold resulted in lower calculation times at the expense of solution cost. The other approach for reducing calculation time was using the probability estimate. This gave a reduction in calculation time of a factor of approximately 5 over the analytical approach with a probability threshold of 100%, but also suffered from increased solution cost. For the case where there is only 1 external robot per location, the probability estimate is equal to the actual probability.

The analytical method with the probability threshold of 100% produced better results for the same calculation time in all bar one of the examined cases. In the case where n = 6, the proposed approach produced similar results to the Monte Carlo approach using 100,000 samples, both in terms of cost and calculation time. However, the proposed approach had the benefit of higher consistency in the results, as evidenced by the smaller confidence interval on the data point compared to the Monte Carlo method.

The number of orders of arrival considered by the analytical method suffers from factorial growth as the number of external robots is increased. These results suggest that, for cases where there are 8 or more robots arriving at similar times, Monte Carlo approaches will outperform the analytical approach. However, if it is possible to separate the robots into multiple groups where the probability that any of the robots in an earlier group will arrive after any of the robots in a later group is negligible, then the analytical approach is potentially more suitable. The computationally expensive parts of the approach were calculating the probability of an order of arrival (81% of calculation time) and conditioning the arrival times on the order of arrival (14% of calculation time).

Tables [\ref=t:scen2ta] and [\ref=t:scen2tae] show the statistical significance of the results for the analytical approach using a probability threshold of 100% and the analytical approach using the probability estimate respectively. The analytical method was statistically better than the deterministic and Monte Carlo methods with a significance of less than 0.01 in all bar 1 case, in which case it was statistically better with a significance of 0.02. The analytical method using the probability estimate was statistically better than the deterministic and Monte Carlo methods for small numbers of robots and samples.

Conclusion

This paper presented an analytical framework for modelling timing uncertainty and resource contention in multi-robot scenarios. Two specific problems were considered--in the first problem the order in which the resource was used was specified, and in the second the order was unspecified. The framework was shown to produce more accurate results than Monte Carlo methods with similar run-times. The main advantage of this approach over numerical methods is that it produces an accurate probability distribution of the result that can then be exploited in more complex optimisation methods such as chance constrained programming. In the second problem, the framework suffered from factorial growth in the number of robots using each specific resource. Thus, it is suitable only for small numbers of robots.

Suggestions for future work are focussed on reducing the computational burden associated with the framework. Potential avenues include developing faster methods of calculating the probability of an order of arrival that trade off accuracy for speed, better estimates of the probability, and methods of grouping robots into distinct arrival groups such that the probabilities in each group can be calculated separately.

Proof of Theorem [\ref=th:likely_arrival_order]

This section proves the claim of Theorem [\ref=th:likely_arrival_order] that the most likely order of arrival in the case where the variances of the arrival times are equal is the order in which the mean arrival times are ascending. This can be restated as, for any number of independent normally distributed random variables with equal variances, the most likely sequence of the random variables resulting from sorting using their actual values is the sequence in which the random variables are sorted by their mean values.

Consider two neighbouring random variables, X and Y, in a sequence of random variables, where X and Y are independent and normally distributed, X  ~  N(μX,σ2) and Y  ~  N(μY,σ2), with μX  <  μY and equal variances. This section will show that, regardless of the random variables before and after X and Y, the probability that X occurs before Y is higher than the probability that Y occurs before X. Let a and b be constants representing the values taken by the random variables immediately before and after X and Y. Then this can be stated mathematically as:

[formula]

pX|a < X < b(x)  =  pY|a < Y < b(x) for one and only one value of x.

The probability distribution function pX|a < X < b(x) is a normal distribution that is truncated between a and b. The PDF of a truncated normal distribution is given by:

[formula]

for a  ≤  x  ≤  b, and 0 otherwise, where φ(.) and Φ(.) are defined in Eqs. ([\ref=eq:normal_pdf]) and ([\ref=eq:normal_cdf]) respectively. As the integrals of pX|a < X < b(x) and pY|a < Y < b(x) are both 1, it follows that they must intersect at least once in the range a < x < b. The following proof shows that they intersect at most once:

[formula]

Let:

[formula]

Substituting Eq. ([\ref=eq:normal_pdf]) into Eq. ([\ref=eq:lemma1_int]) gives:

[formula]

Taking the natural logarithm and rearranging for x gives:

[formula]

pX|a < X < b(a)  >  pY|a < Y < b(a) and pX|a < X < b(b) < pY|a < Y < b(b)

By Lemma [\ref=lemma:equality], pX|a < X < b and pY|a < Y < b intersect only once. As pX|a < X < b and pY|a < Y < b are probability distributions, they must be positive and have an integral of 1. Thus, it is sufficient to show that:

[formula]

to prove the Lemma. Substituting in Eq. ([\ref=eq:truncated]) gives:

[formula]

Substituting in Eq. ([\ref=eq:normal_pdf]) and taking the natural logarithm results in:

[formula]

Expanding and simplifying gives:

[formula]

E(X|a  <  X  <  b)  <  E(Y|a  <  Y  <  b)

Let λ satisfy pX|a < X < b(λ)  =  pY|a < Y < b(λ). Then:

[formula]

By Lemmas [\ref=lemma:equality] and [\ref=lemma:fraction]:

[formula]

[formula]

Therefore:

[formula]

It is sufficient to show that E(X|a  <  X  <  b)  <  E(Y|a  <  Y  <  b) to prove that X|a  <  X  <  b is more likely to occur before Y|a  <  Y  <  b than the opposite order. Thus, Lemma [\ref=lemma:expected] proves Eq. ([\ref=eq:theorem1]). Applying Eq. ([\ref=eq:theorem1]) to all pairs of random variables leads to the conclusion that the most likely sequence will be the sequence resulting from sorting the random variables by their mean values, proving the theorem.