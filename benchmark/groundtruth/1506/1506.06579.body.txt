Introduction

The last several years have produced tremendous progress in training powerful, deep neural network models that are approaching and even surpassing human abilities on a variety of challenging machine learning tasks [\cite=taigman-2014-CVPR-deepface:-closing-the-gap-to-human-level] [\cite=schroff-2015-arXiv-facenet:-a-unified-embedding] [\cite=hannun-2014-arXiv-deep-speech:-scaling]. A flagship example is training deep, convolutional neural networks (CNNs) with supervised learning to classify natural images [\cite=krizhevsky2012imagenet-classification-with-deep]. That area has benefitted from the combined effects of faster computing (e.g. GPUs), better training techniques (e.g. dropout [\cite=hinton2012improving-neural-networks-by-preventing]), better activation units (e.g. rectified linear units [\cite=glorot-2011-AISTATS-deep-sparse-rectifier]), and larger labeled datasets [\cite=deng2009imagenet:-a-large-scale-hierarchical] [\cite=lin-2014-arXiv-microsoft-coco-common].

While there has thus been considerable improvements in our knowledge of how to create high-performing architectures and learning algorithms, our understanding of how these large neural models operate has lagged behind. Neural networks have long been known as "black boxes" because it is difficult to understand exactly how any particular, trained neural network functions due to the large number of interacting, non-linear parts. Large modern neural networks are even harder to study because of their size; for example, understanding the widely-used AlexNet DNN involves making sense of the values taken by the 60 million trained network parameters. Understanding what is learned is interesting in its own right, but it is also one key way of further improving models: the intuitions provided by understanding the current generation of models should suggest ways to make them better. For example, the deconvolutional technique for visualizing the features learned by the hidden units of DNNs suggested an architectural change of smaller convolutional filters that led to state of the art performance on the ImageNet benchmark in 2013 [\cite=zeiler2013visualizing-and-understanding-convolutional].

We also note that tools that enable understanding will especially benefit the vast numbers of newcomers to deep learning, who would like to take advantage of off-the-shelf software packages -- like Theano [\cite=bergstra2010theano:-a-cpu-and-gpu-math-expression], Pylearn2 [\cite=goodfellow2013pylearn2:-a-machine-learning-research], Caffe [\cite=jia2014caffe:-convolutional-architecture], and Torch [\cite=collobert-2011-torch7:-a-matlab-like-environment] -- in new domains, but who may not have any intuition for why their models work (or do not). Experts can also benefit as they iterate ideas for new models or when they are searching for good hyperparameters. We thus believe that both experts and newcomers will benefit from tools that provide intuitions about the inner workings of DNNs. This paper provides two such tools, both of which are open source so that scientists and practitioners can integrate them with their own DNNs to better understand them.

The first tool is software that interactively plots the activations produced on each layer of a trained DNN for user-provided images or video. Static images afford a slow, detailed investigation of a particular input, whereas video input highlights the DNNs changing responses to dynamic input. At present, the videos are processed live from a user's computer camera, which is especially helpful because users can move different items around the field of view, occlude and combine them, and perform other manipulations to actively learn how different features in the network respond.

The second tool we introduce enables better visualization of the learned features computed by individual neurons at every layer of a DNN. Seeing what features have been learned is important both to understand how current DNNs work and to fuel intuitions for how to improve them.

Attempting to understand what computations are performed at each layer in DNNs is an increasingly popular direction of research. One approach is to study each layer as a group and investigate the type of computation performed by the set of neurons on a layer as a whole [\cite=yosinski-2014-NIPS-how-transferable-are-features-in-deep] [\cite=mahendran-2014-arXiv-understanding-deep-image]. This approach is informative because the neurons in a layer interact with each other to pass information to higher layers, and thus each neuron's contribution to the entire function performed by the DNN depends on that neuron's context in the layer.

Another approach is to try to interpret the function computed by each individual neuron. Past studies in this vein roughly divide into two different camps: dataset-centric and network-centric. The former requires both a trained DNN and running data through that network; the latter requires only the trained network itself. One dataset-centric approach is to display images from the training or test set that cause high or low activations for individual units. Another is the deconvolution method of Zeiler & Fergus , which highlights the portions of a particular image that are responsible for the firing of each neural unit.

Network-centric approaches investigate a network directly without any data from a dataset. For example, Erhan et al.  synthesized images that cause high activations for particular units. Starting with some initial input [formula], the activation [formula] caused at some unit i by this input is computed, and then steps are taken in input space along the gradient [formula] to synthesize inputs that cause higher and higher activations of unit i, eventually terminating at some [formula] which is deemed to be a preferred input stimulus for the unit in question. In the case where the input space is an image, [formula] can be displayed directly for interpretation. Others have followed suit, using the gradient to find images that cause higher activations [\cite=simonyan2013deep-inside-convolutional] [\cite=nguyen-2014-arXiv-deep-neural-networks] or lower activations [\cite=szegedy2013intriguing-properties-of-neural] for output units.

These gradient-based approaches are attractive in their simplicity, but the optimization process tends to produce images that do not greatly resemble natural images. Instead, they are composed of a collection of "hacks" that happen to cause high (or low) activations: extreme pixel values, structured high frequency patterns, and copies of common motifs without global structure [\cite=simonyan2013deep-inside-convolutional] [\cite=nguyen-2014-arXiv-deep-neural-networks] [\cite=szegedy2013intriguing-properties-of-neural] [\cite=goodfellow-2014-arXiv-explaining-and-harnessing-adversarial]. The fact that activations may be effected by such hacks is better understood thanks to several recent studies. Specifically, it has been shown that such hacks may be applied to correctly classified images to cause them to be misclassified even via imperceptibly small changes [\cite=szegedy2013intriguing-properties-of-neural], that such hacks can be found even without the gradient information to produce unrecognizable "fooling examples" [\cite=nguyen-2014-arXiv-deep-neural-networks], and that the abundance of non-natural looking images that cause extreme activations can be explained by the locally linear behavior of neural nets [\cite=goodfellow-2014-arXiv-explaining-and-harnessing-adversarial].

With such strong evidence that optimizing images to cause high activations produces unrecognizable images, is there any hope of using such methods to obtain useful visualizations? It turns out there is, if one is able to appropriately regularize the optimization. Simonyan et al.  showed that slightly discernible images for the final layers of a convnet could be produced with L2-regularization. Mahendran and Vedaldi also showed the importance of incorporating natural-image priors in the optimization process when producing images that mimic an entire-layer's firing pattern produced by a specific input image. We build on these works and contribute three additional forms of regularization that, when combined, produce more recognizable, optimization-based samples than previous methods. Because the optimization is stochastic, by starting at different random initial images, we can produce a set of optimized images whose variance provides information about the invariances learned by the unit.

To summarize, this paper makes the following two contributions:

We describe and release a software tool that provides a live, interactive visualization of every neuron in a trained convnet as it responds to a user-provided image or video. The tool displays forward activation values, preferred stimuli via gradient ascent, top images for each unit from the training set, deconv highlighting [\cite=zeiler2013visualizing-and-understanding-convolutional] of top images, and backward diffs computed via backprop or deconv starting from arbitrary units. The combined effect of these complementary visualizations promotes a greater understanding of what a neuron computes than any single method on its own. We also describe a few insights we have gained from using this tool. ().

We extend past efforts to visualize preferred activation patterns in input space by adding several new types of regularization, which produce what we believe are the most interpretable images for large convnets so far ().

Both of our tools are released as open source and are available at . While the tools could be adapted to integrate with any DNN software framework, they work out of the box with the popular Caffe DNN software package [\cite=jia2014caffe:-convolutional-architecture]. Users may run visualizations with their own Caffe DNN or our pre-trained DNN, which comes with pre-computed images optimized to activate each neuron in this trained network. Our pre-trained network is nearly identical to the "AlexNet" architecture [\cite=krizhevsky2012imagenet-classification-with-deep], but with local reponse normalization layers after pooling layers following [\citep=jia2014caffe:-convolutional-architecture]. It was trained with the Caffe framework on the ImageNet 2012 dataset [\cite=deng2009imagenet:-a-large-scale-hierarchical].

Visualizing Live Convnet Activations

Our first visualization method is straightforward: plotting the activation values for the neurons in each layer of a convnet in response to an image or video. In fully connected neural networks, the order of the units is irrelevant, so plots of these vectors are not spatially informative. However, in convolutional networks, filters are applied in a way that respects the underlying geometry of the input; in the case of 2D images, filters are applied in a 2D convolution over the two spatial dimensions of the image. This convolution produces activations on subsequent layers that are, for each channel, also arranged spatially.

shows examples of this type of plot for the layer. The layer has size 256×  13×  13, which we depict as 256 separate 13×  13 grayscale images. Each of the 256 small images contains activations in the same spatial x-y spatial layout as the input data, and the 256 images are simply and arbitrarily tiled into a 16×  16 grid in row-major order. shows a zoomed in view of one particular channel, , that responds to human and animal faces. All layers can be viewed in the software tool, including pooling and normalization layers. Visualizing these layers provides intuitions about their effects and functions.

Although this visualization is simple to implement, we find it informative because all data flowing through the network can be visualized. There is nothing mysterious happening behind the scenes. Because this convnet contains only a single path from input to output, every layer is a bottleneck through which all information must pass en-route to a classification decision. The layer sizes are all small enough that any one layer can easily fit on a computer screen. So far, we have gleaned several surprising intuitions from using the tool:

One of the most interesting conclusions so far has been that representations on some layers seem to be surprisingly local. Instead of finding distributed representations on all layers, we see, for example, detectors for text, flowers, fruit, and faces on and . These conclusions can be drawn either from the live visualization or the optimized images (or, best, by using both in concert) and suggest several directions for future research (discussed in ).

When using direct file input to classify photos from Flickr or Google Images, classifications are often correct and highly confident (softmax probability for correct class near 1). On the other hand, when using input from a webcam, predictions often cannot be correct because no items from the training set are shown in the image. The training set's 1000 classes, though numerous, do not cover most common household objects. Thus, when shown a typical webcam view of a person with no ImageNet classes present, the output has no single high probability, as is expected. Surprisingly, however, this probability vector is noisy and varies significantly in response to tiny changes in the input, often changing merely in response to the noise from the webcam. We might have instead expected unchanging and low confidence predictions for a given scene when no object the network has been trained to classify is present. Plotting the fully connected layers ( and ) also reveals a similar sensitivity to small input changes.

Although the last three layers are sensitive to small input changes, much of the lower layer computation is more robust. For example, when visualizing the layer, one can find many invariant detectors for faces, shoulders, text, etc. by moving oneself or objects in front of the camera. Even though the 1000 classes contain no explicitly labeled faces or text, the network learns to identify these concepts simply because they represent useful partial information for making a later classification decision. One face detector, denoted (channel number 151 on ), is shown in activating for human and lion faces and in activating for a cat face. Zhou et al.  recently observed a similar effect where convnets trained only to recognize different scene types -- playgrounds, restaurant patios, living rooms, etc. -- learn object detectors (e.g. for chairs, books, and sofas) on intermediate layers.

The reader is encouraged to try this visualization tool out for him or herself. The code, together with pre-trained models and images synthesized by gradient ascent, can be downloaded at .

Visualizing via Regularized Optimization

The second contribution of this work is introducing several regularization methods to bias images found via optimization toward more visually interpretable examples. While each of these regularization methods helps on its own, in combination they are even more effective. We found useful combinations via a random hyperparameter search, as discussed below.

Formally, consider an image [formula], where C  =  3 color channels and the height (H) and width (W) are both 227 pixels. When this image is presented to a neural network, it causes an activation [formula] for some unit i, where for simplicity i is an index that runs over all units on all layers. We also define a parameterized regularization function [formula] that penalizes images in various ways.

Our network was trained on ImageNet by first subtracting the per-pixel mean of examples in ImageNet before inputting training examples to the network. Thus, the direct input to the network, [formula], can be thought of as a zero-centered input. We may pose the optimization problem as finding an image [formula] where

= (a() - R())

In practice, we use a slightly different formulation. Because we search for [formula] by starting at some [formula] and taking gradient steps, we instead define the regularization via an operator rθ(  ·  ) that maps [formula] to a slightly more regularized version of itself. This latter definition is strictly more expressive, allowing regularization operators rθ that are not the gradient of any Rθ. This method is easy to implement within a gradient descent framework by simply alternating between taking a step toward the gradient of [formula] and taking a step in the direction given by rθ. With a gradient descent step size of η, a single step in this process applies the update:

← r( + η)

We investigated the following four regularizations. All are designed to overcome different pathologies commonly encountered by gradient descent without regularization.

L2 decay: A common regularization, L2 decay penalizes large values and is implemented as [formula]. L2 decay tends to prevent a small number of extreme pixel values from dominating the example image. Such extreme single-pixel values neither occur naturally with great frequency nor are useful for visualization. L2 decay was also used by Simonyan et al. .

Gaussian blur: Producing images via gradient ascent tends to produce examples with high frequency information (see Supplementary for a possible reason). While these images cause high activations, they are neither realistic nor interpretable [\cite=nguyen-2014-arXiv-deep-neural-networks]. A useful regularization is thus to penalize high frequency information. We implement this as a Gaussian blur step [formula]. Convolving with a blur kernel is more computationally expensive than the other regularization methods, so we added another hyperparameter [formula] to allow, for example, blurring every several optimization steps instead of every step. Blurring an image multiple times with a small width Gaussian kernel is equivalent to blurring once with a larger width kernel, and the effect will be similar even if the image changes slightly during the optimization process. This technique thus lowers computational costs without limiting the expressiveness of the regularization. Mahendran & Vedaldi  used a penalty with a similar effect to blurring, called total variation, in their work reconstructing images from layer codes.

Clipping pixels with small norm: The first two regularizations suppress high amplitude and high frequency information, so after applying both, we are left with an [formula] that contains somewhat small, somewhat smooth values. However, [formula] will still tend to contain non-zero pixel values everywhere. Even if some pixels in [formula] show the primary object or type of input causing the unit under consideration to activate, the gradient with respect to all other pixels in [formula] will still generally be non-zero, so these pixels will also shift to show some pattern as well, contributing in whatever small way they can to ultimately raise the chosen unit's activation. We wish to bias the search away from such behavior and instead show only the main object, letting other regions be exactly zero if they are not needed. We implement this bias using an [formula] that computes the norm of each pixel (over red, green, and blue channels) and then sets any pixels with small norm to zero. The threshold for the norm, [formula], is specified as a percentile of all pixel norms in [formula].

Clipping pixels with small contribution: Instead of clipping pixels with small norms, we can try something slightly smarter and clip pixels with small contributions to the activation. One way of computing a pixel's contribution to an activation is to measure how much the activation increases or decreases when the pixel is set to zero; that is, to compute the contribution as [formula], where [formula] is [formula] but with the jth pixel set to zero. This approach is straightforward but prohibitively slow, requiring a forward pass for every pixel. Instead, we approximate this process by linearizing [formula] around [formula], in which case the contribution of each dimension of [formula] can be estimated as the elementwise product of [formula] and the gradient. We then sum over all three channels and take the absolute value, computing [formula]. We use the absolute value to find pixels with small contribution in either direction, positive or negative. While we could choose to keep the pixel transitions where setting the pixel to zero would result in a large activation increase, these shifts are already handled by gradient ascent, and here we prefer to clip only the pixels that are deemed not to matter, not to take large gradient steps outside the region where the linear approximation is most valid. We define this [formula] as the operation that sets pixels with contribution under the [formula] percentile to zero.

If the above regularization methods are applied individually, they are somewhat effective at producing more interpretable images; shows the effects of each individual hyperparameter. However, preliminary experiments uncovered that their combined effect produces better visualizations. To pick a reasonable set of hyperparameters for all methods at once, we ran a random hyperparameter search of 300 possible combinations and settled on four that complement each other well. The four selected combinations are listed in and optimized images using each are shown for the "Gorilla" class output unit in . Of the four, some show high frequency information, others low frequency; some contain dense pixel data, and others contain only sparse outlines of important regions. We found the version in the lower-left quadrant to be the best single set of hyperparameters, but often greater intuition can be gleaned by considering all four at once. shows the optimization results computed for a selection of units on all layers. A single image for every filter of all five convolutional layers is shown in Supplementary . Nine images for each filter of all layers, including each of the 1000 ImageNet output classes, can be viewed at .

Discussion and Conclusion

We have introduced two visual tools for aiding in the interpretation of trained neural nets. Intuition gained from these tools may prompt ideas for improved methods and future research. Here we discuss several such ideas.

The interactive tool reveals that representations on later convolutional layers tend to be somewhat local, where channels correspond to specific, natural parts (e.g. wheels, faces) instead of being dimensions in a completely distributed code. That said, not all features correspond to natural parts, raising the possibility of a different decomposition of the world than humans might expect. These visualizations suggest that further study into the exact nature of learned representations -- whether they are local to a single channel or distributed across several -- is likely to be interesting (see Zhou et al.  for work in this direction). The locality of the representation also suggests that during transfer learning, when new models are trained atop the or representations, a bias toward sparse connectivity could be helpful because it may be necessary to combine only a few features from these layers to create important features at higher layers.

The second tool -- new regularizations that enable improved, interpretable, optimized visualizations of learned features -- will help researchers and practitioners understand, debug, and improve their models. The visualizations also reveal a new twist in an ongoing story. Previous studies have shown that discriminative networks can easily be fooled or hacked by the addition of certain structured noise in image space [\cite=szegedy2013intriguing-properties-of-neural] [\cite=nguyen-2014-arXiv-deep-neural-networks]. An oft-cited reason for this property is that discriminative training leads networks to ignore non-discriminative information in their input, e.g. learning to detect jaguars by matching the unique spots on their fur while ignoring the fact that they have four legs. For this reason it has been seen as a hopeless endeavor to create a generative model in which one randomly samples an x from a broad distribution on the space of all possible images and then iteratively transforms x into a recognizable image by moving it to a region that satisfies both a prior p(x) and posterior p(y|x) for some class label y. Past attempts have largely supported this view by producing unrealistic images using this method [\cite=nguyen-2014-arXiv-deep-neural-networks] [\cite=simonyan2013deep-inside-convolutional].

However, the results presented here suggest an alternate possibility: the previously used priors may simply have been too weak (see for one hypothesis of why a strong p(x) model is needed). With the careful design or learning of a p(x) model that biases toward realism, one may be able to harness the large number of parameters present in a discriminately learned p(y|x) model to generate realistic images by enforcing probability under both models simultaneously. Even with the simple, hand-coded p(x) models we use in this paper as regularizers, complex dependencies between distant pixels already arise (cf. the beetles with structure spanning over 100 pixels in ). This implies that the discriminative parameters also contain significant "generative" structure from the training dataset; that is, the parameters encode not only the jaguar's spots, but to some extent also its four legs. With better, learned probabilistic models over the input and activations of higher layers, much more structure may be apparent. Work by Dai et al.  shows some interesting results in this direction. While the images generated in this paper are far from being photo-realistic, they do suggest that transferring discriminatively trained parameters to generative models -- opposite the direction of the usual unsupervised pretraining approach -- may be a fruitful area for further investigation.

Acknowledgments

The authors would like to thank the NASA Space Technology Research Fellowship (JY) for funding, Wendy Shang, Yoshua Bengio, Brian Cheung, and Andrej Karpathy for helpful discussions, and Freckles the cat for her feline countenance.

Why are gradient optimized images dominated by high frequencies?

In the main text we mentioned that images produced by gradient ascent to maximize the activations of neurons in convolutional networks tend to be dominated by high frequency information (cf. the left column of ). One hypothesis for why this occurs centers around the differing statistics of the activations of channels in a convnet. The layer consists of blobs of color and oriented Gabor edge filters of varying frequencies. The average activation values (after the rectifier) of the edge filters vary across filters, with low frequency filters generally having much higher average activation values than high frequency filters. In one experiment we observed that the average activation values of the five lowest frequency edge filters was 90 versus an average for the five highest frequency filters of 5.4, a difference of a factor of 17 (manuscript in preparation). The activation values for blobs of color generally fall in the middle of the range. This phenomenon likely arises for reasons related to the 1 / f power spectrum of natural images in which low spatial frequencies tend to contain higher energy than high spatial frequencies [\citep=torralba-2003-Network-statistics-of-natural-image].

Now consider the connections from the filters to a single unit on . In order to merge information from both low frequency and high frequency filters, the connection weights from high frequency units may generally have to be larger than connections from low frequency units in order to allow both signals to affect the unit's activation similarly. If this is the case, then due to the larger multipliers, the activation of this particular unit is affected more by small changes in the activations of high frequency filters than low frequency filters. Seen in the other direction: when gradient information is passed from higher layers to lower layers during backprop, the partial derivative arriving at this unit (a scalar) will be passed backward and multiplied by larger values when destined for high frequency filters than low frequency filters. Thus, following the gradient in pixel space may tend to produce an overabundance of high frequency changes instead of low frequency changes.

The above discussion focuses on the differing statistics of edge filters in , but note that activation statistics on subsequent layers also vary across each layer. This may produce a similar (though more subtle to observe) effect in which rare higher layer features are also overrepresented compared to more common higher layer features.

Of course, this hypothesis is only one tentative explanation for why high frequency information dominates the gradient. It relies on the assumption that the average activation of a unit is a representative statistic of the whole distribution of activations for that unit. In our observation this has been the case, with most units having similar, albeit scaled, distributions. However, more study is needed before a definitive conclusion can be reached.

Conv Layer Montages

One example optimized image using the hyperparameter settings from the third row of for every filter of all five convolutional layers is shown in .