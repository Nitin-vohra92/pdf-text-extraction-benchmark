Introduction

Human language "makes infinite use of finite means" [\cite=humboldt1836verschiedenheit]. A large number of sentences can be generated from a finite set of words. Thus there has been a lot of effort to capture the meaning of words. Some approaches are based on distributional word representations [\cite=Lund1996HiDimSemSpacesLex] [\cite=Patel97extractingsemantic], others are based on distributed representations [\cite=Bengio2008] [\cite=Collobert2011] [\cite=Mnih2013] [\cite=Mikolov2013] [\cite=Lebret14] [\cite=pennington2014glove] [\cite=LevyNIPS2014] where the meaning of a word is encoded as a vector computed from co-occurrence statistics of a word and its neighboring words. Finally, distributed representations emerged as the solution to many natural language processing (NLP) tasks [\cite=Turney2010] [\cite=Collobert2011].

Given these representations of words in a vector space, techniques for combining them have been proposed to get representations of phrases or sentences. These compositional models involve vector addition or multiplication [\cite=Mitchell10]. Such simple compositions have shown to perform competitively on the paraphrase detection and phrase similarity tasks [\cite=Blacoe12]. More sophisticated approaches use techniques from logic, category theory, and quantum information [\cite=Clark2008]. Others use the syntactic relations between words to treat certain words as functions and other as arguments such as adjective-noun composition [\cite=Baroni10] or noun-verb composition [\cite=GrefSadrBarIWCS13]. Recursive neural network model for semantic compositionality has also been proposed [\cite=SocherEtAl2012:MVRNN], where each word has a matrix-vector representation: the vector captures its meaning (as it is initialized with a pre-trained distributed representation), while the matrix learns throught a parse tree how it modifies the meaning of the other word that it combines with. Many recent works are based on distributed representations of phrases to tackle a wide range of application in NLP: machine translation [\cite=Bahdanau2015], constituency parsing [\cite=Legrand2015], sentiment analysis [\cite=Socher2013recursive], or image captioning [\cite=Lebret15]. There is therefore a clear need for distributed word representations that can be easily extrapolated to meaningful phrase representations.

We argue that distributed representation and composition must go hand in hand, i.e., they must be mutually learned. We present a model that learns to capture meaning of words in distributed representations using a low-rank approximation of a large word co-occurrence matrix. We choose to stochastically perform this low-rank approximation which enables the model to simultaneously train these representations to compose for producing representations of phrases (see Figure [\ref=fig:joint]). As composition function, we choose a simple weighted addition for its simplicity and for enabling sequences of words with different lengths to be representated in a common vector space. Aside from generating distributed representations of words and phrases, this model gives an encoding function (represented by a matrix) which can be used to encode new words or even phrases based on their co-occurrence counts. This offers two different alternatives for phrase representations: (1) representation for a query phrase can be inferred by averaging vector representations of its words (only if they all were in the training set), or (2) by using its word co-occurrence statistics.

Evaluation on the popular word similarity and analogy tasks demonstrate the capability of our joint model for capturing good distributed representations. We then introduce a novel task for evaluating phrase representations. Given a phrase representation, the objective is to retrieve the words that compose the phrase. We compare our model against other state-of-the-art methods for distributed word representations which capture meaningful linear substructures [\cite=MikolovICLR2013] [\cite=pennington2014glove]. We show that our model achieves similar performance on word evaluation tasks, but that it outperforms other methods on the phrase evaluation task.

Related Works

In the literature, two major model families exist for learning distributed word representations: the count-based methods and the predictive-based methods.

The count-based methods consist of using the statistical information contained in large corpora of unlabeled text to build large matrices by simply counting words (word co-coocurrence statistics). The rows correspond to words or terms, and the columns correspond to a local context. The context can be documents, such as in latent semantic analysis (LSA) [\cite=Deerwester90]; or other words [\cite=Lund1996HiDimSemSpacesLex]. To generate low-dimensional word representations, a low-rank approximation of these large matrices is performed, mainly with a singular value decomposition (SVD). Many authors proposed to improve this model with different transformations for the matrix of counts, such as positive pointwise mutual information (PPMI) [\cite=Bullinaria07extractingsemantic] [\cite=LevyNIPS2014], or a square root of the co-occurrence probabilities in the form of Hellinger PCA [\cite=Lebret14]. Instead of using the co-occurrence probabilities, [\cite=pennington2014glove] suggest that word vector representations should be learnt with ratios of co-occurrence probabilities. For this purpose, they introduce a log-bilinear regression model that combines both global matrix factorization and local context window methods.

The predictive-based model has first been introduced as a neural probabilistic language model [\cite=Bengio2003]. A neural network architecture is trained to predict the next word given a window of preceding words, where words are representated by low-dimensional vector. Since, some variations of this architecture have been proposed. [\cite=Collobert2011] train a language model to discriminate a two-class classification task: if the word in the middle of the input window is related to its context or not. More recently, the need of full neural architectures has been questioned [\cite=Mnih2013] [\cite=MikolovICLR2013]. [\citeauthor=MikolovICLR2013] ([\citeyear=MikolovICLR2013]) propose two predictive-based log-linear models for learning distributed representations of words: (i) the continous bag-of-words model (CBOW), where the objective is to correctly classify the current (middle) word given a symmetric window of context words around it; (ii) the skip-gram model, where instead of predicting the current word based on the context, it tries to maximize classification of a word based on another word in the same sentence. In [\citeauthor=Mikolov2013] ([\citeyear=Mikolov2013]), the authors also introduce a data-driven approach for learning phrases, where the phrases are treated as individual tokens during the training.

In this paper, we leverage both families: (i) we use the statistical information for learning distributed word representations by approximating the Hellinger PCA with an autoencoder network; (ii) we jointly learn to predict the words that compose a given phrase.

A Joint Model

Some prior works have designed models to learn word representations [\cite=Mnih2013] [\cite=Mikolov2013] [\cite=Lebret14], while others have proposed models to compose these word representations [\cite=Mitchell10] [\cite=SocherEtAl2012:MVRNN]. We propose instead to jointly learn word representations and their composition by simple summation.

Learning Word Representations w.r.t. the Hellinger Distance

As words occurring in similar contexts tend to have similar meanings [\cite=Harris1954], word co-occurrence statistics are generally used to embed similar words into a common vector space [\cite=Turney2010]. Common approaches calculate the frequencies, apply some transformations (tf-idf, PPMI), reduce the dimensionality, and calculate the similarities. More recently, [\citeauthor=Lebret14] ([\citeyear=Lebret14]) proposed a novel method based on a Hellinger PCA of the word co-occurrence matrix. They showed that word representations can be learnt even with a reasonable number of context words. Inspired by this work, we propose to stochastically perform this low-rank approximation. For this purpose, we use an autoencoder with only linear activations to find an optimal solution related to the Hellinger PCA [\cite=Bourlard1988]. Replacing the PCA by an autoencoder allows us to learn jointly a cost function which constrains the word information to be kept by summation.

Word Co-Occurrence Probabilities

"You shall know a word by the company it keeps" [\cite=Firth57]. Keeping this famous quote in mind, word co-occurrence probabilities are computed by counting the number of times each context word c∈D (where D  ⊆  W) occurs around a word w∈W:

[formula]

where n(c,w) is the number of times a context word c occurs in the surrounding of the word w. A multinomial distribution of |D| classes (words) is thus obtained for each word w:

[formula]

Hellinger Distance

Similarities between words can be derived by computing a distance between their corresponding word distributions. Several distances (or metrics) over discrete distributions exist, such as the Bhattacharyya distance, the Hellinger distance or Kullback-Leibler divergence. We chose here the Hellinger distance for its simplicity and symmetry property (as it is a true distance). Considering two discrete probability distributions [formula] and [formula], the Hellinger distance is formally defined as:

[formula]

which is directly related to the Euclidean norm of the difference of the square root vectors:

[formula]

Note that it makes more sense to take the Hellinger distance rather than the Euclidean distance for comparing discrete distributions, as P and Q are unit vectors according to the Hellinger distance ([formula] and [formula] are units vector according to the [formula] norm).

Autoencoder

An autoencoder is employed to represent words in a lower dimensional space. It takes a distribution [formula] as input, encodes it in a more compact representation, and is trained to reconstruct its own input from that representation:

[formula]

where [formula] is the output of the network, f is the encoding function which maps distributions in a m-dimension (with m <  < |D|), and g is the decoding function. [formula] is a distributed representation that captures the main factors of variation in the data as the Hellinger PCA does [\cite=Bourlard1988]. Here, encoder [formula] and decoder [formula] are both linear layers.

Learning to Sum Word Representations

Interesting compositionality properties have been observed from models based on the addition of representations [\cite=Mikolov2013]. An exhaustive comparison of different composition functions has indeed revealed that an additive model performs well on pre-trained word representations [\cite=Mitchell10]. Because our word representations are learnt from linear operations, the inherent structure of these representations is linear. To combine a sequence of words into a common vector space, we then simply apply an element-wise addition of their vector representations. This approach makes sense and works well when the meaning of a text is literally "the sum of its parts". This is usually the case with noun and verb phrase chunks. For example, into phrases such as "the red cat" or "struggle to deal", each word independently has its proper meaning. Distributed representations for such phrase chunks must retain information from the individual words. An objective function is thus defined to learn how to combine the word vector representations, while keeping the maximum information from the original vectors. An operation as simple as a weighted sum will probably fail for sequences where individual words act as operators that modify the meaning of another word, or for multiword expressions. Other more complex functions could be chosen to also include such cases, but we choose to propose a much simpler model (i.e., averaging the word representations) to get phrase chunk representations with unsupervised learning. In this paper, we therefore focus on noun and verb phrase chunks.

Additive Model

We define [formula] a phrase chunk of T words, with S a set of phrase chunks. By feeding all [formula] into the autoencoder, a representation [formula] of each word w∈D is obtained:

[formula]

By an element-wise addition, a representation of the phrase chunk s can be calculated as:

[formula]

Training

In predictive-based model, such as the Skip-gram model, the objective is to maximize the likelihood of a word based on other words in the same sequence. Instead, our training is slightly different in the sense that we aim at discriminating whether words are in the phrase chunk or not. An objective function is thus defined to encourage words wt which appear in the chunk s to give high scores when calculating the dot product between [formula] and [formula]. On the other hand, these scores must be low for words wi∉s that do not appear in the chunk. We train this problem with a ranking-type cost:

[formula]

Note that due to the large size of W, a negative sampling approach can be used to speed up the training. In Equation [\ref=eq:sum], the whole dictionary W is thus replaced by a subset W-  ⊆  W with N randomly chosen negative samples [formula]. A new set W- is randomly picked at each iteration during the training.

Joint Learning

In contrast with other methods which have subsequently found nice compositionality properties by simple summation, the novelty of our method is the explicit learning of word representations suitable for summation. The system is then designed to force words with similar context to be close in a m-dimensional space, while these dimensions are learnt to be combined with other related words. This joint learning is illustrated in Figure [\ref=fig:joint]. The whole system is trained by minimizing both objective functions [\eqref=eq:word] and [\eqref=eq:sum] over the training data using stochastic gradient descent.

Experiments

Datasets

Building Word Representation over Large Corpora

Our English corpus is composed of the entire English Wikipedia (where all MediaWiki markups have been removed). We consider lower case words to limit the number of words in the dictionary. Additionally, all occurrences of sequences of numbers within a word are replaced with the string "NUMBER". The resulting text is tokenized using the Stanford tokenizer. The data set contains about 1.6 billion words. As dictionary W, we consider all the words within our corpus which appear at least one hundred times. This results in a 191,268 words dictionary. Only the 10,000 most frequent words within this dictionary were used as context words D to calculate the word co-occurrence probabilities. A symmetric context window of ten words around each word w∈W is used to obtain the multinomial distribution Pw. We chose to encode words in a 100-dimensional vector.

Summing Words for Phrase Representation

To learn the summation of words that appear frequently together, we choose to consider only the noun and verb phrase chunks to build S. We extract these chunks with a phrase chunking approach by using the SENNA software. By retaining only the phrase chunks appearing at least ten times, this results in 1,823,259 noun phrase chunks and 255,232 verb phrase chunks, for a total of 2,078,491 phrase chunks. We divided this set of phrases into three sets: 1,000 phrases for validation, 5,000 phrases for testing, and the rest for training (2,072,491 phrases). An unsupervised framework requires a large amount of data. Because our primary focus is to provide good word representations, validation and testing sets are intentionally kept small to retain as much phrases as possible in the training set.

Other Methods

We compare our distributed representations with other available models for computing vector representations of words: (1) the GloVe model which is also based on co-occurrence statistics of corpora [\cite=pennington2014glove], (2) the continuous bag-of-words (CBOW) and the skip-gram (SG) architectures which learn representations from prediction-based models [\cite=Mikolov2013]. The same corpus and dictionary W as the ones described in Section [\ref=wordrep] are used to train 100-dimensional word vector representations. We use a symmetric context window of ten words, and the default values set by the authors for the other hyperparameters. To see the improvement compared to a standalone SVD, we generate word representations with a truncated SVD of the matrix X, where each row of X is a distribution [formula], [formula].

Evaluating Word Representations

The first objective of the model is to learn distributed representations which capture both syntactic and semantic informations about words. To evaluate the quality of these representations, we used both analogy and similarity tasks.

Word analogies

The word analogy task consists of questions like, "a is to b as c is to ?". It was introduced in [\citeauthor=MikolovICLR2013] ([\citeyear=MikolovICLR2013]) and contains 19,544 such questions, divided into a semantic subset and a syntactic subset. The 8,869 semantic questions are analogies about places, like "Bern is to Switzerland as Paris is to ?", or family relationship, like "uncle is to aunt as boy is to ?". The 10,675 syntactic questions are grammatical analogies, involving plural and adjectives forms, superlatives, verb tenses, etc. To correctly answer the question, the model should uniquely identify the missing term, with only an exact correspondence counted as a correct match.

Word Similarities

We also evaluate our model on a variety of word similarity tasks. These include the WordSimilarity-353 Test Collection (WS-353) [\cite=Finkelstein2001], the Rubenstein and Goodenough dataset (RG-65) [\cite=Rubenstein1965], and the Stanford Rare Word (RW) [\cite=Luong2013]. They all contain sets of English word pairs along with human-assigned similarity judgements. WS-353 and RG-65 datasets contain 353 and 65 word pairs respectively. Those are relatively common word pairs, like computer:internet or football:tennis. The RW dataset differs from these two datasets, since it contains 2,034 pairs where one of the word is rare or morphologically complex, such as brigadier:general or cognizance:knowing.

Results

Results reported in Table [\ref=wordtable] show that our model gives similar results than other state-of-the-art methods on word similarity tasks. However, there is a significant performance boost between the low-rank approximation of X with a SVD and this same approximation with our joint model. This shows that combining a count-based model with a predictive-based approach helps for generating better word representations. Performance on word analogy tasks show that our joint model competes with others on the syntactic questions, but that it gives a lower accuracy on semantic questions. One possible explanation is that less common words are involved in semantic questions compared to syntactic questions. Among the four words that make a semantic question, one of them is, in average, the 34328th most frequent word in W, while it is the 20819th for a syntactic question. Compared to other methods which take the whole dictionary W as context dictionary, we consider only a small subset of it (D contains only the 10000 most frequent words of W). A larger context dictionary would certainly help to improve performance on this task.

Evaluating Phrase Representations

As a second objective, we aim at learning to sum word representations to generate phrase representations while keeping the original information coming from the words. We thus introduce a novel task to evaluate the phrase representations.

Description of the Task

As dataset, we use the collection of test phrases described in Section [\ref=phraserep]. It contains 5000 phrases (noun phrases and verb phrases) extracted from Wikipedia with a chunking approach. Amoung them, 2244, 2030 and 547 are, respectively, composed of two, three and four words. The remaining 179 are composed of at least five words with a maximum of eight words. For a given phrase [formula] of T words, the objective is to retrieve the T words from its distributed representation [formula]. Scores between the phrase s and all the possible words wi∈W are calculated using the dot product between their distributed representations [formula], as illustrated in Figure [\ref=fig:joint]. The top T scores are considered as the words composing the phrase s.

Results

To evaluate whether words making a given phrase can be retrieved from the distributed phrase representation, we use Recall K, which measures the fraction of times a correct word was found among the top K results. K is proportional to the number of words per phrase, e.g. for a 3-word phrase with a Recall@5, the correct words are found amoung the top 15 results. Higher Recall K means better retrieval performance. Since we care most about the top-ranked retrieved results, the Recall K with small K are more important.

Results reported in Table [\ref=phrasetable] show that our distributed word representations can be averaged together to produce meaningful phrase representations, since the words are retrieved with a high recall. Our model significantly outperforms others methods on this task. In Figure [\ref=fig:stats], a more detailed analysis of results reveals that the GloVe model competes with ours for the 2-word phrases. However GloVe's representations cannot maintain this performance for longer phrases. It is probably not too surprising as this model is trained using ratios of co-occurrence probabilities for two target words. Consequently, it well learns linear substructures for pairs of words, which probably also explains its good performance on word analogy tasks. In contrast, our joint model can learn more complex substructures which make possible the aggregation of multiple words within a low-dimensional vector space.

Inferring New Phrase Representations

Representations for new phrases can thus be generated by simply averaging its word representations, assuming that the words are in the dictionary W. Consider that the dictionary Wn tends to grow exponentially with n, it gives a nice framework to produce the huge variety of possible sequence of n words in a timely and efficient manner with low memory consumption, unlike other methods. Relying on word co-occurrence statistics to represent words in vector space also provides a framework to easily generate representations for unseen words. This is another advantage compared to methods focused on learning distributed word representations (such as CBOW, Skip-gram and GloVe models), where the whole system needs to be trained again to learn representations for these new constituents. To infer a representation for a new word [formula], one only needs to count its context words over a large corpus of text to build the distribution [formula]. This nice feature can be extrapolated to phrases, which gives another alternative for generating phrase representations. Table [\ref=neigh-table2] presents some examples of phrases, where we use both alternatives to compute their distributed representations. It can be seen that both alternatives give distinct representations. For instance, by using the encoding function f, our model infers a representation for the entity Chicago Bulls which is close to other NBA teams, like the Denver Nuggets or the Seattle Supersonics. By averaging the representations of both words Chicago and Bulls, our model infers a representation which is close to other Chicago's sport teams. Both representations are meaningful, but they carry different information. Relying on co-occurrence statistics gives entities that occur in a similar context, while the summation tries to find entities containing the maximum amount of similar information. This also works with longer phrases, such as President of the United States. The first alternative gives men who served as president, when the second gives related positions.

Conclusion

We introduce a model that combines both count-based methods and predictive-based methods for generating distributed representations of words and phrases. Using a chunking approach, a collection of noun phrases and verb phrases is extracted from Wikipedia. For a given n-word phrase, we train our model to generate a low-dimensional representation for each word based on its co-occurrence probability distribution. These n representations are averaged together to generate a distributed phrase representation in the same semantic space. Thanks to an autoencoder approach, we can simultaneously train the model to retrieve the original n words from the phrase representation, and therefore learn complex linear substructures. When compared to state-of-the-art methods on some classical word evaluation tasks, the competitive results show that our joint model produces meaningful word representations. Performance on a novel task for evaluating phrase representations confirm the ability of our model to learn complex substructures, which make possible the aggregation of multiple words within a low-dimensional vector space. Better still, inference of new phrase representations is also easily feasible when relying on counts. Some quantitative examples demonstrate that both alternatives can give different but meaningful information about phrases. The word representations and the collection of phrases used in these experiments are available online, here: .

Acknowledgements

This work was supported by the HASLER foundation through the grant "Information and Communication Technology for a Better World 2020" (SmartWorld).