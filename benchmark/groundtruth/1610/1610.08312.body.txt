Software Quality - Traditional vs. Agile: an Empirical Investigation

Introduction

Since the inception of Agile Methods there have been allegations that they increase quality and productivity. Moreover, as discussed by [\cite=Succi.2012] there are also several empirical studies providing evidences that agile methods and also their individual practices, especially pair programming, may have beneficial effects especially on quality but also on productivity. However, as also [\cite=Succi.2012] makes clear, there are empirical studies that provide opposite evidences too. All of this claims for some generalization of the findings. A possibility for generalization comes from statistical metanalysis [\cite=Succi.2001]. However, metanalysis requires a comprehensive analysis of the original data, and such data is often not fully supplied in the studies.

An alternative approach consists in running a survey and collecting experiences from across a wide variety of contexts, in order to identify the most profitable directions. In the context of agile methods, this approach has been taken first by [\cite=Succi.2002], surveying the impact of extreme programming on developers satisfaction and identifying a situation later widely accepted, that agile methods tend to positively impact the satisfaction of developers and to lower the turnover.

The latter approach is the one championed and followed in this paper. Since quality is multidimensional property of software systems, different aspects of it have been considered. Among the several proposals of aspects, we have followed the one by [\cite=Bass.2003]: Availability, Interoperability, Modifiability, Performance, Security, Testability and Usability.

A questionnaire was prepared to gather the experience of software developers on the impact of agile methods on the mentioned aspects of software quality. It was then made available and advertised at major conferences and events from May 2015 to September 2015. 687 people from 37 countries accessed it and 103 people from 21 countries completed it to the end. The completion rate was 15% and the average time taken to complete the survey was 10 minutes. We also included the results of the partially completed responses. When respondents aborted the survey, they tended to do so on or near question 15, we speculate from “survey fatigue.”

The results of the questionnaire evidences that the adoption of agile methods improves all the aspects of software quality under consideration, often in a statistically significant way and with a strong effect size. Given the large and diverse sample of the respondents, these results have a high likelihood to be extensible to the overall population of software projects.

The paper is organized as follows. Sec. [\ref=S.Background] provides the overall technical and scientific background of this paper. Sec. [\ref=S.ExperimentalDesign] presents the experimental design of the work. Sec. [\ref=S.Analysis] analyses the results of the questionnaire and sec. [\ref=S.Discussion] discusses the overall outcomes. Eventually, Sec [\ref=S.Conclusions] draws the conclusions and outlines the future research in this field.

Background

Comparison of Agile and traditional projects is not a new topic in Software Engineering. Debates started right after the Agile manifesto [\cite=agile] had been submitted in order to improve Traditional methods. We describe the main characteristics of both approaches in the following subsections.

Traditional methodologies

Most of the important decisions are made during the stage of design and once the product is well designed the project can continue with the building phase which is supposed to be very predictable. Thus the stage of building the product only follows the"perfect" design of the system. Since their main feature is detailed planning followed by designing phase, they are useful when the project is said to be very large and the level of risk is high. Some projects which are estimated to last very long are often developed with traditional methodologies [\cite=Wysocki],[\cite=Royce],[\cite=Stoimen].

Agile methodologies

It had been developed as a reaction to the traditional methods. For many people the appeal of these agile methodologies is their reaction to the bureaucracy of the engineering methodologies. The work in [\cite=Fowler] contains a set of principles for software development in which requirements and solutions evolve through collaboration between self-organizing, cross-functional teams [\cite=Collier]. It promotes adaptive planning, evolutionary development, early delivery, and continuous improvement, and it encourages rapid and flexible response to change [\cite=Stoimen2]. The result of all of this is that agile methods have some significant changes in emphasis from engineering methods.

Methodologies and Software Quality

Both methodologies have goals to achieve best quality and satisfy customers. The way how exactly they affect on quality is still mostly unknown. We tried to bring our view on how quality could be measured for different development methods. We have discussed differences of customers' satisfaction levels for agile vs waterfall projects in our previous paper [\cite=Tumyrkin], where generally customers have been more satisfied with results of agile methodology.

Before explaining our way of analyzing this issue we have discovered how other researches analyzed the impact of chosen methodology on software quality.

In [\cite=Rai], different methodologies in software development process are explored and the authors investigate the reasons why software industries shifted from Traditional RE to Agile RE. This research has performed comparative studies of different software development methodologies, when and where they can be used. The paper also gives introduction to agile software development methodology and how to apply them.

In [\cite=Papatheocharous], authors conduct a survey to provide evidence-based assessment of the level of agile adoption by software development organizations, in relation to the general profile of the respondents (country of origin, business sectors, roles, etc.). Then they compare the results with different types of practices followed, such as agile techniques adopted, team organization and communication techniques, and project management.

In addition, [\cite=Stoica] compares software development processes using agile and traditional methods and proposes an incursion in the software development, from traditional to agile.

The main objective of [\cite=Matharu] is to conduct an empirical study into the choice among the most popular Agile methodologies, Scrum, Extreme Programming and Kanban. Further, this paper provides for a comparative analysis among various agile software development methodologies. Survey results reveal higher adoption of Scrum based development in present-day software industry as compared to Extreme Programming and Kanban methodologies.

In [\cite=paetsch2003requirements] , the authors compare traditional requirements engineering approaches and agile software development. They analyzed commonalities and differences of both approaches. Their findings were that the RE phases is not very clear in agile: they are merged and repeated in each iteration. Also, documentation is a main difference between the RE process and agile methods: There is a lack of documentation in agile. Changes being traceable are regarded important in RE, and agile methods also manage the requirements well with index cards. Traditional RE does not have a good way of stakeholder involvement as agile methods: customers are only involved in early stages in RE while they are involved during the whole process under agile. The authors then recommended that a minimum of documentation should be ensured in an agile environment as a possible way for the agile to benefit from the RE methods. Scott Ambler [\cite=ambler2014agile] suggests a set of best practices for RE using agile methods. Many of the practices follow directly from the principles behind the agile Manifesto. Ambler also suggests using such artifacts as CRCs, acceptance tests, business rule definitions, change cases, dataflow diagrams, user interfaces, use cases, prototypes, features and scenarios, use case diagrams, and user stories to model requirements. These elements can be added to the software requirements specification document along with the user stories. For requirements elicitation he suggests using interviews, focus groups, JAD, legacy code analysis, ethnographic observation domain analysis, and having the customer on site at all times.

Bose, Kurhekar and Ghoshal [\cite=bose2008agile] suggested that agile requirements are effective to get continuous feedback from customers while the limits of agile methods are still not defined well. They suggested that the requirements management should be adopted to ensure the traceability, which is important when the requirements are likely to be changed in an agile method. The verification of early requirements descriptions being included are also proposed. The literature is rich with other survey studies on RE practices, development needs, and preferred ways that target local geographic location (e.g. Finland [\cite=nikula2000state], Chile [\cite=quispe2010requirements], and Malaysia [\cite=solemon2009requirements]).

In [\cite=neill2003requirements] the authors (Neill and Laplante) presented results of a comprehensive survey that was conducted in 2002 showing requirements engineering practices across a broad range of industries and projects types. The results were surprising in that they indicated, among other things, that the waterfall model was still widely used and that various techniques associated with agile development were not widely employed. Unpublished results from a similar survey in 2008 [\cite=marinelli2008analysis] indicated that the findings from 2002 had remained largely unchanged. The 2002 survey results were highly cited (181 times via Google Scholar), and seemed to provide a template for more focused requirements surveys. For example Khurum et al [\cite=khurum2012software] conducted a brief survey to uncover challenges in organizations to effective requirements engineering, Chernak surveyed a small group of companies to determine the prevalence of requirements reuse and Verner et al [\cite=verner2005requirements] sought to uncover specific issues with respect to requirements management. In [\cite=kassab2014empirical] , the author an empirical study based on a conducted survey on the requirements engineering practices for agile software development, and comparing these with the traditional waterfall.

Experimental Design

This work is a case study which is conducted to investigate how software process in place impacts the quality of the resulting product. To understand the relationship, we conducted a very large survey during the last year which was completed by more than 100 software developers and engineers from 21 countries. We use the goal-question-metrics (GQM) approach to organize the empirical data analysis [\cite=gqm].

A web-based survey instrument was created using the web-based QuestionPro survey tool (www.QuestionPro.com). The survey consisted of 19 questions. The survey questions were designed after a careful review to specialized literature on conducting survey studies (e.g. [\cite=Hoinville:1982], [\cite=Silverman:2000], [\cite=Marshall:1989], [\cite=methodology1], [\cite=methodology2]). A summary of our survey questions is available via the link. While the respondents reported a wide range of experiences; they were asked to base their responses on only one software project that they were either currently involved with or had taken part in during the past five years. Figure [\ref=chart2] shows the distribution of positions of participants.

Using the conjectures in our hypotheses as means of constructing specific questions, the survey was arranged into five sections: First section aiming at capturing general project characteristics first. Then, a series of questions were asked in the second section to determine the participants’ knowledge of architectural styles and whether if any were applied into the surveyed projects. In case of incorporating architectural styles into the projects; the respondents were then asked to report on the criteria they used to select these styles in the third section and the challenges they faced while incorporating them in the forth section. Since quality requirements are the major that shapes the software architecture [\cite=SA]; a series of questions were then asked in the fifth section to report on the level of customer’s satisfaction with these qualities while the final product is in use.

We drew our survey participants from multiple sources but primarily from members of the following Linked-In professional groups, to which one or more of the authors belonged: "Software Engineering Productivity: Software Architecture", "Techpost Media","ISMG: Software Architecture" and "ISMG Architecture World". A invitation on these groups was posted under the subject "Software architecture in practice". The participation to this survey was entirely anonymous and voluntarily.

Structure of the data

In this analysis we take into consideration also the answers given by people who partially completed the questionnaire for statistical analysis not requiring pairing or correlating information, as suggested in [\cite=Kassab]. Given this population, responses to the survey are more likely to reflect the opinions and biases of any given project’s development team rather than those of other groups represented in a software development effort. In this section we will consider two aspects of respondents' profiles: distribution of business and type of respondents.

Goal-Question-Metrics

In this work we follow the "Goal, Question, Metric" approach (GQM), an approach to software metric defined in [\cite=gqm]. We define the goal using the standard GQM template as follows:

Analyzing survey results data.

For the purpose of evaluating it.

With respect to relationships between software process and quality.

From the view point of developers.

In the context of industrial software development projects.

The GQM method is used for identifying the most appropriate metrics for performing the comparison between software process and quality.The first step is to state the measurement goal of the study and the objectives. The second is deriving from the goal a set of questions whose answers help to determine whether the goal is being achieved. The third step is to design and develop a set of metrics to provide answers to these questions:

Goal: Assessing the impact of software development process on quality

Question: How a set of quality attributes (Performance, Security, Usability, Modifiability, Availability, Testability, Interoperability and Overall quality) are perceived as improved by software specialists in Traditional vs. Agile development.

Metric: t-test analysis between the two groups of data for each of the quality aspects

On the basis of the GQM, we can frame our empirical investigation in terms of the following research hypothesis:

(Null Hypothesis): Agile Methods do not have any effect on the quality perceived by the developers of the produced systems

(Alternate Hypothesis): Agile Methods have an effect on the quality perceived by the developers of the produced systems

The agile methods that were reported in our study were SCRUM, Extreme Programming, Spiral, Prototyping, and Lean Software Development as shown in Figure [\ref=agile].

Analysis of the data

In this section, we analyze the responses of the survey results to determine if there exist significant differences between the groups of agile and non-agile methods. In total, 59 responses for the use of agile method and 44 answered to non-agile method. The two sample t-test analysis was used with the hypothesis defined in [\ref=gqm].

We define as significant level α for our statistical tests 0.05, as usual in software engineering.

In Table [\ref=statistics], we show statistical distributions for each feature. A positive value of t indicates that there is a higher quality in the non agile team, a negative value that there is a higher quality in the agile team. As mentioned, the null hypothesis is that there is no significant difference between the quality levels in agile and non agile environments.

As we can observe from the table, in all criteria the agile situation performs better than the non agile. Moreover, for functionality, security, usability, and overall quality, such difference is significant at the desired level, meaning that we can consider it not coming from change but truly generalizable.

It is remarkable to notice that the quality criteria related to the end user experience (security, usability, and overall quality) appear the one mostly affected by the adoption of an agile process and the ones statistically significant at the selected α level, indicating that such process is particularly suitable to optimize the satisfaction of the end customer.

It could be argued that we are in a situation of multiple tests, so that we would need to use the idák correction for multiple comparisons [\cite=Abdi:2007]. We could argue that such correction is never applied over software engineering data and does not apply here since we evaluate different hypotheses, we do not randomly try to see if there is any connection between agility and quality. Still using such very conservative correction over 8 tests out of which 3 are positive would lead to an α value of 0.02, which is also practically satisfied in the cases under consideration.

Discussion

The results of the questionnaire evidences in a non-anecdotal and empirical manner that the adoption of agile development methods brings an improvement to all the aspects of software quality that have been studied: Performance, Security, Usability, Modifiability, Availability, Testability, Interoperability and Overall quality. The choice of the aspects of software quality on which to focus followed [\cite=Bass.2003] and it is a further elaboration of the result of our previous paper [\cite=Tumyrkin]. The results are supported in a statistically significant way and with a strong effect size. Given the large and diverse sample of the respondents, these results have a high likelihood to be extensible to the overall population of software projects.

The results of this study have a strong relevance for software industry. In particular, the breadth of the respondents to the survey, give it a unique credibility and reliability. The study is a clear (re)affirmation that developers, architects and managers interested in increasing and/or maintaining software quality should consider carefully the adoption of agile methods. This is particularly true for companies with a strong focus on security, usability, and testability,

Conclusions

Evidence that relates software process to quality is often anecdotal or, when data is presented, it is to some extent contradictory or clashes with opposite evidence coming from different samples. The matter is controversial and we have no intention to present conclusive data here or have the last say. However, the survey we present in this paper involved more than 100 software specialists around the world, and several questions have been actually answered by hundred of respondents.

The fact that a significant part of respondents dropped the questionnaire in the middle demands for better survey design, which is under development. In any case, the current survey has been reopened and, at the moment, we have a larger amount of data available that requires to be analyzed. A further confirmation of the trend seen here would make the conclusions even stronger, at a point that could not be ignored by scientists and practitioners.

In this paper we have established methods and approach to the research which will be applied and extend in future. Our future steps are:

Analyzing the extended data set

looking for confirmation (or confutation) of the results presented in this paper

Drawing the necessary conclusion

Consulting software specialists on the process to adopt on the basis of the results

Acknowledgements

We would like to thank Innopolis University for logistic and financial support. Our gratitude goes to colleagues at IU who participated in discussions and seminars, to PR department who advertised the questionnaire and to all the anonymous respondents who dedicated their precious time to shed light on the matter.