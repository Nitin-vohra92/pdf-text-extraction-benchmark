Numerical study of the 6-vertex model with domain wall boundary conditions

Introduction

It is well known that the 6-vertex model is exactly solvable and has phase transitions. The history and the classification of phases in the 6-vertex model as well as many interesting facts about the structure of the partition function of the 6-vertex model with periodic boundary conditions can be found in [\cite=LWu], [\cite=Bax].

There is an important function of Boltzmann weights of the model which is usually denoted by Δ (see [\cite=Bax],[\cite=LWu] and section [\ref=results]). The 6-vertex model with periodic boundary conditions has 3 phases in the thermodynamical limit, depending on the value of Δ. One is the totally ordered (frozen) phase, with Δ > 1, the second is the disordered (critical) phase, with |Δ| < 1, and the third is the partially ordered (antisegnetoelectic) phase with Δ <  - 1.

The 6-vertex model with domain wall boundary conditions on a square N  ×  N grid perhaps was first considered in [\cite=Kor] in the process of computation of norms of Bethe vectors. The partiction function of this system can be written as the determinant of a certain N  ×  N matrix [\cite=Izerg]. Its asymptotics in the thermodynamic limit N  →    ∞   were analyzed in [\cite=KoZJ]. It is related to matrix models, which was pointed out and exploited in [\cite=ZJ].

The 6-vertex model with Δ = 1 / 2 is also known as the ice-model. This model with domain wall (DW) boundary condition is closely related to the enumeration of alternate sign matrices [\cite=Ku]. It also has other interesting combinatorial features (see for example [\cite=Zub], [\cite=Strog]). When Δ = 0 the 6-vertex model is equivalent to the problem of counting of weighted tilings of the Aztec diamond (see for example [\cite=KoZJ], [\cite=KenDim] and references therein).

The spatial coexistence theory of different phases and the interfaces separating phases is an important part of statistical mechanics. Growth of crystals is one of the well known phenomena of this type. This is also closely related to the limit shape effect in statistics of Young diagrams [\cite=asymth] and plane partitions.

In dimer models related to enumeration of plane partitions and domino tilings, the interface between the disordered and totally ordered phases is also known as an arctic circle phenomenon [\cite=Arctic].

Dimer models on bipartite planar graphs with periodic weights are exactly solvable models where this phenomenon has been studied in [\cite=Ken-Okoun-Shef]. In dimer models the limit shapes or interfaces (curves separating phases), under broad conditions, are real algebraic curves [\cite=Ken-Okoun-Shef]. Since at Δ = 0 the 6-vertex model is equivalent to a dimer model these results imply that such a phenomenon exists in the 6-vertex model for Δ = 0. The natural question is whether the spatial coexistence of phases happens only at the free fermionic point or if it occurs for all values of Δ. Numerical evidence suggesting the existence of a limit shape in the 6-vertex model with domain wall boundary conditions for all weights was obtained in [\cite=SZ].

Here we report results of numerical study of the 6-vertex model with DW boundary conditions in all phases of the model. Our method is different from [\cite=SZ]. To generate a random configuration in the 6-vertex model we construct the Markov process which is equivalent to a random weighted walk on the graph where the vertices are states of the model and edges are local moves which transform states into other states. This process satisfies the detailed balance condition and therefore converges to the Gibbs state of the 6-vertex model. It is also known as Monte-Carlo with local update and as a heat-bath algorithm. In statistical mechanics such processes are known as Kawasaki, or Glauber dynamics. For a more effective version of this algorithm known as the "coupling from the past" algorithm, see [\cite=PW].

For periodical boundary conditions the system can be either in the ordered (segnetoelectric) phase, disordered (critical) phase, or antisegnetoelectric (non-critical) phase, depending on the values of Boltzmann weights.

Our results confirm the conclusion from [\cite=Er] and [\cite=SZ] that there is a coexistence of ordered and disordered phases in the 6-vertex model. They also clearly indicate that for Δ <  - 1 there is a coexistence of all three phases. The outer layer is an ordered phase. It follows by the ring of disordered phase. Finally, there is an inner droplet of the antisegnetoectric phase. This phenomenon was first conjectured in [\cite=SZ] using a different numerical method. The shape of the inner droplet has four cusps and is reminiscent of one of the limit shapes for dimers on a square-octagon grid [\cite=Ken-Okoun-Shef] equivalent to the diablo tiling .

Acknowledgments. We are grateful to R. Kenyon and A. Okounkov for many illuminating discussions, to K. Palamarchuk for valuable comments, and to T. Yates for help with the implementation of the algorithm in the C language.

Weights and local moves

States

States of the 6-vertex model on a square lattice are configurations of arrows assigned to each edge. The 6-vertex rule is that the total number of arrows coming into any vertex should be equal to the total number of arrows going out of this vertex. Each configuration of arrows can be equivalently regarded as a configuration of empty edges (arrows oriented South-North and East-West) and occupied edges, or thick edges (arrows pointing in the opposite directions). It is clear that thick edges will form paths. Possible configurations of paths around a vertex are shown on fig. [\ref=6-v].

We will use a1,a2,b1,b2,c2, and c2 as names of the vertices. We denote by the same letters Boltzmann weights assign to these vertices.

Domain wall boundary conditions are shown on fig. [\ref=high] and [\ref=low].

For domain wall boundary conditions every path in a 6-vertex configuration will have one end at the North boundary of the square and the other end at the East boundary of the square. These paths can be regarded as level curves of a height function. The lowest height function is shown on fig. [\ref=low] and the highest height function is shown on fig. [\ref=high].

Weights

The weight of a state is the product of weights of vertices and the weight of a vertex is determined by rules from fig. [\ref=6-v]. The partition function is sum of weights of all configurations:

[formula]

where w(vertex,state) is the weight of the vertex (see fig.[\ref=6-v]).

The ratio

[formula]

is the probability of the state. This is the Gibbs measure of the 6-vertex model.

Local moves and the graph of states

Now let us describe local moves in the space of states. Such a move changes the configuration of arrows at the minimal number of edges near a given vertex and it acts transitively, i.e. any given state of the model can be transformed to any other given state of the model by a sequence of such moves.

Such moves are most transparent in terms of height functions. There are two types of local moves:

The path from fig. [\ref=d] we can move up, i.e. to the path from fig. [\ref=u]. We will call this move flip up.

The path from fig. [\ref=u] can be moved down, i.e. to the path from fig. [\ref=d]. We will say that this is the flip down.

Such moves with all possible surrounding configurations we will call flips up and down.

For each flippable vertex we introduce effective weight as follows:

For a vertex flippable up the effective weight is the product of weights of all vertices that can be affected by the flip, i. e. the vertex itself, and the neighboring vertices to the North , the East, and the North-East of it.

Similarly for a vertex flippable down the effective weight of it is the product of weights of the vertex itself, and of next neighboring vertices to the South, West, and South-West of it.

The effective weight is always the product of four factors. The effective weight of vertex v in the configuration S we denote by Wv(S).

The Markov process

General strategy

Consider the abstract graph with vertices being states of the model and with edges being local moves. This graph is clearly connected. Our goal is to construct a random walk on this graph converging to the probabilistic measure vertices of this graph which is the Gibbs measure of the 6-vertex model with DW boundary conditions.

Let us recall some basic facts. Let Γ be a finite connected graph and [formula] be a probabilistic measure on the set of vertices of Γ. Let M = {p(a  →  b)}a,b∈V(Γ) be the matrix of the Markov process describing a random walk on Γ. A traveller moves from a to b with the probability p(a  →  b).

The matrix M must satisfy the total probability condition:

[formula]

If in addition it satisfies the detailed balance condition

[formula]

then it is known that the Markov process converges to q. For details about Markov sampling and estimating convergence times, see [\cite=Sinc].

Now our goal is to construct such random walk converging to the Gibbs state of the 6-vertex model. At some point the rate of convergence of this Markov process becomes an important issue. To avoid the complicated analysis of estimating mixing times we will modify the algorithm and will use the "coupling from the past" version. This will be explained later.

The Markov process for the 6-vertex model

We want to construct Markov process which chooses a vertex at random, then with the probability which we will describe below it will either flip the configuration up at this vertex, or will flip it down, or will do nothing. The probability of passing from the state Sa to the state Sb in this process can be w written as follows:

[formula]

[formula]

[formula]

[formula]

Here [formula] is the number of flippable vertices and [formula] is the total number of vertices.

Algorithmically, this means that we do the following:

With probability [formula], do nothing (that is, restart the loop.)

With probability [formula], continue to the next part.

If the algorithm continues, select a flippable vertex with the probability:

[formula]

At this selected vertex the configuration can be either flippable only up, or only down, or in both directions. Depending on this proceed according to the following rules:

Three possible conditions now exist:

The vertex is flippable down only. Two options:

Flip vertex down with probability [formula]

Stay with probability Pv(stay)  =  1  -  ρWv(Sb)

The vertex is flippable up only. Two options:

Flip vertex up with probability [formula]

Stay with probability Pv(stay)  =  1  -  ρWv(Sb)

The vertex is flippable up and down. Three options:

Flip vertex down with probability [formula]

Flip vertex up with probability [formula]

Stay with probability Pv(stay)  =  1  -  ρWv(Sb)  -  ρWv(Sb')

Here Wv(Sb') Wv(Sb) are the effective weights of the vertex v in the states obtained by flipping up or down at this vertex from the state Sa. Effective weights were described in section [\ref=loc-moves].

The parameter ρ is chosen such that all probabilities of transitions should be positive. In other words it should satisfy all conditions [formula]where v is a vertex flippable in the state S either up or down, but not biflippable and S' is the configuration after the flip. At every biflippable vertex in the state S we should have [formula] where S' is the result of the flipping S up at v and S'' is the result of the flip down.

This process satisfies the detailed balance condition, and the total probability condition. Since the graph of states with edges being local moves is connected, this process converges to the Gibbs state of the 6-vertex model. The process also depends on the choice of ρ. It slows down when ρ is small.

Random states in the 6-vertex model with DW boundary conditions

Phases in the 6-vertex model

One can write weights of the 6-vertex model as

[formula]

Here E1,E2, and E3 are energies of the interaction of arrows (or energies associated with the local shape of level curves of the height function) and Hx and Hy are magnetic fields.

In this interpretation arrows can be regarded as spins interacting with the magnetic filed such that the energy of a vertical arrow is ±  Hx depending on whether the arrow is heading up or down. The energy of a horizontal arrow is ±  Hy depending on whether it is oriented left or right. We assigned the energy of an arrow to the energies of adjacent vertices.

Notice that since the total number of c1- and c2-vertices satisfy the relation n(c1) - n(c2) = N the partition function changes by an overall factor only when we change c1  /  c2. The total numbers of a and b vertices satisfy similar relations: n(a1) = n(a2) and n(b1) = n(b2). Because of this for the square lattice with DW boundary conditions we can set a1 = a2 = a, b1 = b2 = b, and c1 = c2 = c without loosing generality.

Let us recall the phase diagram of the 6-vertex model [\cite=LWu], [\cite=Bax] with periodic boundary conditions in the absence of magnetic fields. The important characteristic of the model is the parameter

[formula]

The phase diagram for the 6-vertex model with periodic boundary conditions in the absence of magnetic fields is shown on fig. [\ref=phases].

There are four phases:

Phase I: a > b + c(Δ > 1). This an ordered phase where there are two possibilities for the ground state. It either consists of a1-vertices or of a2-vertices. In either case any change in the ground state gives the state with the total number of b and c vertices comparable with the linear size N of the system. Thus, as N  →    ∞   the energy of these two ground states is macroscopically separated from the energy of other states. In other words these are two frozen ground states.

Phase II: b > a + c (Δ > 1). This is an ordered phase with double degeneracy of the ground state. The first possibility is when all vertices are b1 vertices, the second possibility is when all vertices are b2-vertices. As in case of phase I, this is a frozen phase.

Phase III: [formula](|Δ| < 1). This is a disordered phase. Local correlation functions decay as a power of the distance in this phase. These are the values of a,b,c when |Δ| < 1. In particular, the free fermionic curve Δ = 0 lies entirely in this phase. It is shown by the dotted segment of the circle on fig. [\ref=phases].

Phase IV: c > a + b (Δ <  - 1). This is an ordered phase with so-called antisegnetoellectic ordering (see fig. [\ref=ase-phase]). The ground state in this case consists of alternating c1 and c2 vertices. It is double degenerate due to the breaking of Z2-translational symmetry. In this case microscopic deviations from the ground state are possible. There is a finite correlation length in the system and local correlation functions decay exponentially.

For details about phase transitions, magnetization, and the antiferroelectric phase etc. see [\cite=LWu] and [\cite=Bax].

The structure of a random state

Free fermionic point

This is the case when Δ = 0. It is convenient to parameterize weights in this case as

[formula]

When [formula] this model is equivalent to the domino tiling of the Aztec diamond. The limit shape was computed analytically in [\cite=AztDiam] and is a circle.

The height functions of the average states for several values of the parameter u are shown on fig. [\ref=delta0free]. For Δ = 0, the limit shapes can be computed explicitly using methods of [\cite=Ken-Okoun-Shef] and they are ellipses, which agrees with fig. [\ref=delta0free].

Ordered phases

In phase I the a-vertices dominate and the Gibbs state in this case is given by the lowest height function fig. [\ref=low].

In phase II the b vertices dominate and according to [\cite=LWu] we should expect that the average state will be the state with the domination of b-vertices. In other words the average state in this case is given by the highest height function fig. [\ref=high].

Disordered phase

In this case it is convenient to use the following parametrization of weights:

[formula]

with 0 < γ  <  π, 0 < u < γ, and r > 0. In this parametrization Δ  =   cos γ.

Phase III contains the free fermionic curve Δ = 0. Since all this phase is critical one may expect that the nature of the Gibbs states will be similar for all parameters a,b,c in this region. In particular, one can expect the existence of the limit shape as in the case Δ = 0. The particular form of the limit shape may vary but the following common features should common for all values of a,b,c in this region:

The limit shape is a smooth curve having exactly one common point with each side of the square. At this point the limit shape is tangent to the side of the square.

Inside of the boundary of the limit shape the height function is a smooth function and it has continuous first derivative at the boundary. The second derivative has a discontinuity in the normal direction to the boundary of the limit shape.

Outside of the boundary of the limit shape the height function is linear.

Examples of Gibbs states in the disordered phase are shown on fig. [\ref=disordered-deltapi4], [\ref=disordered-deltapi5], [\ref=disordered-deltapi8].

The antiferroelectric phase

This region c > a + b is the one which is non-critical and which is also not ordered. In the periodic case the ground state has the domination of c-vertices as it is shown on fig. [\ref=c-domination].

It is convenient to use the parameterization

[formula]

with 0 < u < η. In this parameterization Δ =  -  cosh η.

In the case of DW boundary conditions there is a competition between very rigid restrictions on the states near the boundary which allows only a and b vertices near the boundary and the tendency of the system to have as much as possible of c vertices.

Numerical simulations show that these competing tendencies resolve in the separation of three phases. It is fairly convincing from the fig. [\ref=c-domination] that the following should take place:

The system forms a macroscopical droplet of the antiferroelectric phase with the boundary that does not touch the square. The height function in this domain is linear. The boundary of this domain has four cusps pointing towards sides of the square lattice. This phase is noncritical. Correlation functions in this region decay exponentially.

Near the boundary the system is ordered. This ordered region is bordered by the disordered region where the height function is smooth. The disordered phase is critical. There is a finite magnetization, which means there are excitations with linear dispersions and therefore correlation functions decay according to a power law. The boundary between ordered and disordered phases is a smooth curve with the features similar to the |Δ| < 1 case.

Conclusion

We demonstrated that local Markov sampling for the 6-vertex model with domain wall boundary conditions indicates that the system develops a macroscopical droplet of c-vertices when Δ <  - 1. For these computations it is not essential that the ground state of the 6-vertex model in this phase is doubly degenerate. This degeneracy corresponds to the translation by one step in the North-East direction on fig. [\ref=c-domination].

This degeneracy is important in the computation of correlation functions and other observables. The two ground states correspond to the two parts of the graph of states which are connected by a "very narrow neck" in the limit N  →    ∞  . We will address this problem in the next publication. The existence of the droplet can be seen from results of [\cite=SZ] where a different numerical method was used. It would be interesting to compare the methods.

The droplet of c-vertices is similar to the facets in dimer models. The shape of the droplet and of the surrounding critical phase is similar to the corresponding shapes in the dimer model on the square-octagon lattice [\cite=Ken-Okoun-Shef].

The local Markov sampling which we used here is equally effective for other boundary conditions in the 6-vertex model. Some of the results for more complicated boundary conditions can be found in [\cite=Er].

Functions and Implementations

Main loop

The following tasks must be completed by the Main loop function:

Import the matrix from a text file

Build flippables list

Set weights

Define ρ:

[formula]

Loop the following actions, and after a certain defined number of successful flips, output a file with the current matrix (and status of the Markov Chain) in it.

Generate a random real, rand, between 0 and 1

If [formula], continue to (b).

Otherwise, go to (a).

Select a random flippable position with probability [formula] by calling the Get Flippable Position function.

Call Get Weight (which is now scaled by the value of ρ, to ensure that it always returns a value less than 1) to get the probability of an up flip and/or a downflip at the flippable location chosen.

Generate a random real, rand, between 0 and 1.

For up or down-only flips, iff W(Sb)  ≥  rand, execute the flip by calling the Execute Flip function, else restart main loop.

For positions that can flip up and down, iff W(Sb)  ≥  rand, execute the flip corresponding to Sb, else iff W(Sb')  ≥  rand, execute the flip corresponding the Sb', else restart main loop. In practice, this means that once a vertex which can be flipped either way is chosen, simply divide up the probabilities of each flip occurring as discussed earlier.

Execute Flip

If type is high

Change the entry in the list of Flippables for the vertex chosen to make a high flip impossible.

Define the following positions:

One = the original position = Base

Two = (+1, +0) = Right

Three = (+1, +1) = Up Right

Four = (+0, +1) = Up

Left = (-1, +0)

Down=(+0, -1)

UpLeft = (-1, +1)

UpRight = (+1, +1)

DownLeft = (-1, -1)

DownRight = (+1, -1)

Replace 4 parts

Set Contents of Position One = FlipToOne (Position One, High)

Set Contents of Position Two = FlipToTwo (Position Two, High)

Set Contents of Position Three = FlipToThree (Position Three, High)

Set Contents of Position Four = FlipToFour (Position Four, High)

If Up, Down, Right, or Left Positions become flippable (call Get Is Flippable on each to check), add them to the Flippables List.

Call Fix Low End.

If type is low

Change the entry in the list of Flippables for the entry chosen to make a low flip impossible.

Define the following positions:

One = (-1, -1) = Down Left

Two = (+0, -1) = Down

Three = the original position = Base

Four = (-1, +0) = Left

Right = (+1, +0)

Up = (+0, +1)

UpLeft = (-1, +1)

UpRight = (+1, +1)

DownLeft = (-1, -1)

DownRight = (+1, -1)

Replace 4 parts

Set Contents of Position One = FlipToOne (Position One, Low)

Set Contents of Position Two = FlipToTwo (Position Two, Low)

Set Contents of Position Three = FlipToThree (Position Three, Low)

Set Contents of Position Four = FlipToFour (Position Four, Low)

If Up, Down, Right, or Left Positions become flippable (call Get Is Flippable on each to check), add them to the Flippables List.

Call Fix High End.

Fix High End

Define the following positions:

HighCreateDownLeft = (-1, -1)

HighDeleteDown = (+0, -1)

HighDeleteDownDownLeft = (-1, -2)

HighDeleteDownRighLeft = (-2, -1)

HighDeleteLeft = (-1, +0)

If HighCreateDownLeft is flippable, add it to the High Flippables List.

Delete 4 potential flippables on the High End.

If any of HighDeleteDown, HighDeleteDownDownLeft, HighDeleteDownLeftLeft, or HighDeleteLeft exists in the High Flippables list, remove them from the list.

Fix Low End

Define the following positions:

LowCreateUpRight = (+1, +1)

LowDeleteUp = (+0, +1)

LowDeleteUpUpRight = (+1, +2)

LowDeleteUpRighRight = (+2, +1)

LowDeleteRight = (+1, +0)

If LowCreateUpRight is flippable, add it to the Low Flippables List.

Delete 4 potential flippables on the Low End.

If any of LowDeleteUp, LowDeleteUpUpRight, LowDeleteUpRightRight, or LowDeleteRight exists in the Low Flippables list, remove them from the list.

Get Weight

Get contents of four surrounding positions if the flip occurred.

Multiply weights together corresponding to the contents of the four positions.

Multiply (new weight configuration product) * ρ

Flip To

FlipTo functions take a position and a type and return what the vertex at the given position would be after the flip of the type specified.

FlipToOne (Position, Type)

If type is high: If vertex was a1, it will be c1; if it was c2, it will be a2

If type is low: If vertex was c1, it will be a1; if it was a2, it will be c2

FlipToTwo

If type is high: If vertex was b2, it will be c2; if it was c1, it will be b1

If type is low: If vertex was c2, it will be b2; if it was b1, it will be c1

FlipToThree

If type is high: If vertex was a2, it will be c1; if it was c2, it will be a1

If type is low: If vertex was c1, it will be a2; if it was a1, it will be c2

FlipToFour

If type is high: If vertex was b1, it will be c2; if it was c1, it will be b2

If type is low: If vertex was c2, it will be b1; if it was b2, it will be c1

Get Flip Position

Generate a random integer between 1 and the total number of flippable positions; that is, the number of up-flip only plus the number of down-flip only plus the number of bi-flips.

Choose the corresponding element in the Flippable Positions list to the random number chosen.

Get Is Flippable

Get Is Flippable should check the status of a position to determine if it is flippable.

High flippables must be a1 or c2 vertices and must have empty upper right corners (upper right corner must be a2 or c2). High flippable positions must have an x axis coordinate that is less than or equal to the width of the matrix � 1 (where 0,0 is the origin) and a y axis coordinate that is less than or equal to the height of the matrix �1.

Low flippables must be a1 or c1 vertices and must have empty lower left corners (lower left corner must be a2 or c1). Low flippable positions must have an x axis coordinate that is no less than 1 (where 0,0 is the origin), and a y axis coordinate that is no less than 1.

Images of the N = 1000 matrix