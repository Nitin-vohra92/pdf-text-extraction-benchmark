A note on the Burrows-Wheeler transformation

Introduction

The Burrows-Wheeler transformation is a popular method used for text compression [\cite=BW]. The rough idea is to encode a text in two passes. In the first pass, the text w is replaced by a text T(w) of the same length obtained as follows: list the cyclic shitfs of w in alphabetic order as the rows [formula] of an array. Then T(w) is the last column of the array. In a second pass, a simple encoding allows to compress T(w), using a simple method like run-length or move-to-front encoding. Indeed, adjacent rows will often begin by a long common prefix and T(w) will therefore have long runs of identical symbols. For example, in a text in english, most rows beginning with 'nd' will end with 'a'. We refer to [\cite=Manzini] for a complete presentation of the algorithm and an analysis of its performances. It was remarked recently by S. Mantaci, A. Restivo and M. Sciortino [\cite=MRS] that this transformation was related with notions in combinatorics on words such as Sturmian words. Similar considerations were developped in [\cite=Bannai] in a different context. The results presented here are also close to the ones of [\cite=Duval].

In this note, we study the transformation from the combinatorial point of view. We show that the Burrows-Wheeler transformation is a particular case of a bijection due to I.M. Gessel and C. Reutenauer which allows the enumeration of permutations by descents and cyclic type (see [\cite=Lothaire]).

The paper is organized as follows. In the first section, we describe the Burrows-Wheeler transformation. The next section describes the inverse of the transformation with some emphasis on the computational aspects. The last section is devoted to the link with the Gessel-Reutenauer correspondance.

The Burrows-Wheeler transformation

The principle of the method is very simple. We consider an ordered alphabet A. Let [formula] be a word of length n on the alphabet A. The Parikh vector of a word w on the alphabet A is the integer vector [formula] where ni is the number of occurrences of the i-th letter of A in w. We suppose w to be primitive, i.e. that w is not a power of another word. Let [formula] be the sequence of conjugates of w in increasing alphabetic order. Let bi denote the last letter of wi, for [formula]. Then the Burrows-Wheeler transform of w is the word [formula].

It is clear that T(w) depends only on the conjugacy class of w. Therefore, in order to study the correspondance w  ↦  T(w), we may suppose that w is a Lyndon word, i.e. that w = w1. Let ci denote the first letter of wi. Thus the word [formula] is the nondecreasing rearrangement of w (and of T(w)).

Let σ be the permutation of the set [formula] such that σ(i) = j iff [formula]. In other terms, σ(i) is the rank in the alphabetic order of the i-th circular shift of the word w.

By definition, we have for each index i with 1  ≤  i  ≤  n

[formula]

We also have the following formula expressing T(w) using σ

[formula]

Indeed, bσ(j) is the last letter of [formula], whence bσ(j) = aj - 1 which is equivalent to the above formula.

Let π = P(w) be the permutation defined by π(i) = σ(σ- 1(i) + 1) where the addition is to be taken mod n. Actually, π is just the permutation obtained by writing σ as a word and interpreting it as an n-cycle. Thus, we have also σ(i) = πi - 1(1) and

[formula]

Substituting in Formula ([\ref=eq2]) the value of ai given by Formula ([\ref=eq1]), we obtain bi = cσ(σ- 1(i) - 1) which is equivalent to

[formula]

Thus the permutation π transforms the last column of the array of conjugates of w into the first one. Actually, it can be noted that π transforms any column of this array into the following one.

The computation of T(w) from w can be done in linear time. Indeed, provided w is chosen as a Lyndon word, the order between the conjugates is the same as the order between the corresponding suffixes. The computation of the permutation σ results from the suffix array of w which can be computed in linear time [\cite=CR] on a fixed alphabet. The corresponding result on the alphabet of integers is a more recent result. It has been proved independently by three groups of researchers, [\cite=KSPP], [\cite=KA] and [\cite=KS].

Inverse transformation

We now show how w can be recovered from T(w). For this, we introduce the following notation. The rank of i in the word [formula], denoted rank(i,y) is the number of occurrences of the letter bi in [formula].

We observe that for each index i, and for the aforementioned words [formula] and [formula]

[formula]

Indeed, we first note that for two words u,v of the same length and any letter a, one has au < av  ⇔  ua < va  (  ⇔  u < v). Thus for all indices i,j

[formula]

Hence, the number of occurrences of ci in [formula] is equal to the number of occurrences of bπ(i) = ci in [formula].

To obtain w from [formula], we first compute [formula] by rearranging the letters bi in nondecreasing order. Property ([\ref=eq4]) shows that π(i) is the index j such that ci = bj and rank(j,y) = rank(i,z). This defines the permutation π, from which σ can be reconstructed. An algorithm computing π from y = T(w) is represented below.

This algorithm can be optimized to a linear-time algorithm by storing the first position of each symbol in the word z.

Finally w can be recovered from [formula] and π by Formula ([\ref=eq2prime]). The algorithm allowing to recover w is represented below.

The computation of w is not possible without the Parikh vector or equivalently the word z. One can however always compute the word w on the smallest possible alphabet associated with permutation π (this is the computation described in [\cite=Bannai]).

Descents of permutations

A descent of a permutation π is an index i such that π(i) > π(i + 1). We denote by des(π) the set of descents of the permutation π. It is clear by Property ([\ref=eq5]) that if i is a descent of P(w), then ci  ≠  ci + 1. Thus, the number of descents of π is at most equal to k - 1 where k is the number of symbols appearing in the word w.

Let us fix an ordered alphabet A with k elements for the rest of the paper. Let w be a word and [formula] be the Parikh vector of w. We say that v is positive if ni > 0 for [formula]. We denote by ρ(v) the set of integers [formula]. When v is positive, ρ(v) has k - 1 elements. Let π = P(w) and let v be the Parikh vector of w. It is clear by Formula [\ref=eq5] that we have the inclusion des(π)  ⊂  ρ(v).

The following statement results from the preceding considerations.

For any positive vector [formula] with [formula], the map w  ↦  π = P(w) is one to one from the set of conjugacy classes of primitive words of length n on A with Parikh vector v onto the set of cyclic permutations on [formula] such that ρ(v) contains des(π).

This result is actually a particular case of a result stated in [\cite=Lothaire] and essentially due to I. Gessel and C. Reutenauer [\cite=GesselReutenauer]. The complete result ([\cite=Lothaire], Theorem 11.6.1 p. 378) establishes a bijection between words of type λ and pairs (π,E) where π is a permutation of type λ and E is a subset of [formula] with at most k - 1 elements containing des(π). The type of a word w of length n is the partition of n realized by the length of the factors of its nonincreasing factorization in Lyndon words. The type of a permutation is the partition resulting of the length of its cycles. Thus, Theorem [\ref=th1] corresponds to the case where w is a Lyndon word (i.e. λ has only one part) and π is circular.

We illustrate the general case of an arbitrary word with an example for the sake of clarity. For example, the word w = abaab has the nonincreasing factorization in Lyndon words w = (ab)(aab). Thus w has type (3,2). The corresponding permutation of type (3,2) is π = (35)(124). Actually, the permutation π is obtained as follows. Its cycles correspond to the Lyndon factors of w. The letters are replaced by the rank in the lexicographic order of the cyclic iterates of the conjugates. In our example, we obtain

[formula]

We have des(π) = {3} which is actually included in ρ(v) = {3,5}.

We may observe that when the alphabet is binary, i.e. when k = 2, Theorem [\ref=th1] takes a simpler form: the map w  ↦  P(w) is one-to-one from the set of primitive binary words of length n onto the set of circular permutations on [formula] having one descent.

In the general case of an arbitrary alphabet, another possible formulation is the following. Let us say that a word [formula] is co-Lyndon if the permutation π built by Algorithm Permutation is an n-cycle. It is clear that the map w  ↦  T(w) is one-to-one from the set of Lyndon words of length n on A onto the set of co-Lyndon words of length n on A.

The properties of co-Lyndon words have never been studied and this might be an interesting direction of research.