Lemma Proposition Corollary Definition Lemme Proposition Corollaire Définition

New constructions of domain decomposition methods for systems of PDEs

Introduction

Neumann-Neumann [\cite=Bourgat:1989:VFA] or FETI type algorithms are very popular domain decompositions methods. They are currently used for very large scale computations, see for example [\cite=DDO:2003:P15] and references therein. These methods are very well understood for symmetric definite positive scalar equations. For nonsymmetric problems and systems of equations many questions are still open. We propose in this note, a systematic construction of related algorithms for systems of partial differential equations (PDE). The approach is based on the Smith factorization of the system of PDEs. First, we explain the derivation of the domain decomposition method for the Stokes system. Then the application to the Oseen system [\cite=Nataf:2005:NDS] and the Euler equations [\cite=Dolean:2005:NDE] is briefly discussed.

Analysis of the Stokes system via Smith factorization

Let ν > 0, we write the 2D Stokes equations as:

[formula]

We first recall the definition of the Smith factorization of a matrix with polynomial entries and apply it to systems of PDEs:

Let n be an integer and A an invertible n  ×  n matrix with polynomial entries with respect to the variable λ: A = (aij(λ))1  ≤  i,j  ≤  n. Then, there exist matrices E, D and F with polynomial entries satisfying the following properties: det(E)=det(F)=1, D is a diagonal matrix and A = EDF.

More details can be found in [\cite=Wloka_Rowley_Lawruk:95]. We first take formally the Fourier transform of system ([\ref=eq:stokes]) with respect to y (dual variable is k). We keep the partial derivatives in x since in the sequel we shall consider a model probem where the interface between the subdomain is orthogonal to the x direction. We note

[formula]

We can perform the Smith factorization of ÂStokes by considering it as a matrix with polynomials in ∂x entries. We have

[formula]

where [formula] with   =  ∂xx - k2. One should note that a stream function formulation gives the same differential equation for the stream function. In the same way, the three-dimensional case can be characterized. In this case, the diagonal matrix D3D is a four by four matrix whose entries are: D3D,11  =  D3D,22 = 1, D3D,33  =    -  ν and D3D,44  =    -  ν2. This suggests that the derivation of a DDM for the bi-Laplacian is a key ingredient for a DDM for the Stokes system.

A Domain Decomposition Method for the bi-Lplacian

Let Ω be an open subset of [formula] and [formula] be a symmetry axis of Ω. For simplicity, in the note we assume homogeneous Dirichlet conditions on the boundary ∂Ω. The domain Ω is decomposed into [formula] and [formula]. We consider the following algorithm: Starting with an initial guess satisfying w01 = w02 and Δ(w01) = Δ(w02) on Γ, the correction steps are expressed as follows for i = 1,2:

[formula]

followed by an update step:

[formula]

By symmetry arguments, we have converge in two steps to the solution of -  νΔ2(w) = g in Ω.

The algorithm for the Stokes system

Thanks to the Smith factorization ([\ref=eq:smithfactorization]), it is possible to translate the above algorithm for the bi-Laplacian operator into an algorithm for the Stokes system. It suffices to replace equations ([\ref=eq:corredp]),([\ref=eq:updateedp]) by the Stokes equations and in the interface conditions ([\ref=eq:corrbc]),([\ref=eq:corrbcbis]),([\ref=eq:updatebc]),([\ref=eq:updatebcbis]) w by the last component of F(u,v,p)T. In order to write the resulting algorithm in an intrinsic form, we introduce the stress [formula] on the interface for a velocity [formula] and a pressure p. For any vector [formula] its normal (resp. tangential) component on the interface is [formula] (resp. [formula]). We denote [formula] and [formula] the normal and tangential parts of [formula], respectively. The new algorithm for the Stokes system for the same geometry as above reads: Starting with an initial guess satisfying [formula] and [formula] on Γ, the correction steps is expressed as follows for i = 1,2:

[formula]

followed by an update step:

[formula]

The boundary conditions in the correction step involve the normal velocity and the tangential stress whereas in the update step they involve the tangential velocity and the normal stress. In 3D, the algorithm has the same definition. By construction, it converges in two steps. In the iterative version of the Neumann-Neumann algorithm for the Stokes system [\cite=LeTallec:Patra:97], [\cite=Widlund:Pacvarino:02], the boundary conditions of the correction step involve all the components of the stress whereas the update step involves all the components of the velocity. It can be shown that the convergence in two steps is then lost. More precisely, one obtains a convergence rate of 1 / 3 in the case [formula], cf [\cite=Nataf:2005:NDS].

Algorithm for other systems of PDEs

The derivation of the algorithm for the Stokes system is based on the use of the Smith factorization and on the existence of superconvergent algorithms for scalar PDEs. The same procedure can be performed for the Oseen equations [\cite=Nataf:2005:NDS]. In this case, the diagonal form of the operator is the product of a convection-diffusion operator and of a Laplacian operator. Using ([\cite=Achdou:1997:RPA])-[\cite=ACHDOU:dd_p:00]) for the convection-diffusion, it is possible to derive an algorithm for the fourth order problem that converges in two steps. Translating this algorithm on the system, we obtain an algorithm converging in two steps for the Oseen system. The same work was done for the compressible Euler system [\cite=Dolean:2005:NDE]. In this case, the diagonal form of the operator is a product of a convective operator with a Helmholtz convective wave equation. The Smith factorization has also been used to design PML for the time-dependent compressible Euler equations, [\cite=Nataf:2005:NCP].

Preliminary Numerical results for the Stokes system

The domain Ω = ( - A,B)  ×  (0,1) is decomposed into two subdomains Ω1 = ( - A,0)  ×  (0,1) and Ω2 = (0,B)  ×  (0,1). We compare the algorithm of § [\ref=sec:newalgo] to the iterative version of the Neumann-Neumann algorithm. The stopping criteria is that the jumps of the normal derivative of the tangential component of the velocity are reduced by the factor 10- 4. In table [\ref=tab:h] (left) A = B = 1, we see that both algorithms are not sensitive with respect to the mesh size. Of course, due to the discrete approximation we cannot expect the optimal convergence in two steps. But we only need one more step to achieve the error bound. We have also varied the width of the subdomains, (middle table). As expected the convergence of the Neumann-Neumann method deteriorates. For large aspect ratios, the method diverges (- in the table), since there exists an eigenvalue of the operator corresponding to the Richardson iteration with a modulus larger than 1. But still in this case convergence can be enforced by its use as a preconditioner in Krylov method as it is usually the case. Our new algorithm seems to be surprisingly robust with respect to the subdomain widths. For moderate variations we always need 3 iterations steps. If we choose very thin subdomains, for instance A = 1, B = 20, the stopping criterion is achieved in only 7 steps. In table [\ref=tab:h] (right), we have added a reaction term c > 0 to the first two equations of the Stokes system. For instance c may be the inverse of the time step in a time-dependent computation. We see that the new algorithm is fairly stable.