How to compute Green's Functions for entire Mass Trajectories within Krylov Solvers

Introduction

Lattice Quantum Chromodynamics demands for enormous compute power and efficient numerical algorithms in order to solve huge sparse systems of linear equations. These linear systems originate from a discretized differential operator, the fermionic matrix, with varying gluonic background fields acting as coefficient functions. The latter can be generated by Monte Carlo methods. From the solutions, i.e. the Green's functions or propagators, one can determine the properties of hadrons, as e.g. spectrum, weak decay constants or weak matrix elements [\cite=MONTVAY] [\cite=Cr83] [\cite=Ro92].

Recently, in Ref. [\cite=FROMMER95], it has been demonstrated that it can be very advantageous to exploit the structure of the Wilson fermion matrix M = m - D [\cite=WILSON], which is widely used in lattice calculations. In particular, the computation of so-called mass trajectories, i.e., multiple inversions of m - D for a set of 'bare masses' [formula] with mi  <  mi + 1, could be carried out within one iteration process, using the quasi minimum residual algorithm (QMR) [\cite=FN91] [\cite=FREUND93-2] [\cite=FROMMER94]. This useful property is a direct consequence of the non-symmetric Lanczos process [\cite=LANCZOS50], where the Lanczos part had to be gone through only once as it depends solely on D. Therefore, the method presented in Ref. [\cite=FROMMER95] is restricted to QMR. Unfortunately the application of the QMR-MULT algorithm [\cite=FROMMER95] is rather memory intensive: QMR itself needs 6 intermediate vectors of the size of one propagator component and requires to store 3 additional vectors for each of the members of the mass-trajectory. Computations of propagators as of today, however, tend to be memory bounded even on the largest distributed memory machines available.

In this paper, we propose a new numerical approach to compute the entire mass trajectory simultaneously. This method is not restricted to a special solver such as QMR and requires only a modest additional amount of workspace.

For definiteness and simplicity we present our idea as applied within the minimal residual algorithm (MR), one of the favorite standard solvers in lattice QCD that belongs to the class of the general conjugate residual methods[\cite=EISEN] [\cite=Oy85]. MR is a GCR algorithm with recursion depth 0.

Our key observation is that the derivatives x(n) = dnx / dmn of the solution x can be related recursively to the coefficients that occur within the iteration. Thus the Taylor expansion of the propagator x(m + Δm) around m can be computed almost for free during the iteration process.

We find numerically that the procedure renders x(mi > m0) automatically with higher accuracy than x(m0). The accuracy of the latter is determined as usual by the stopping residual's norm. This enables us to calculate the entire mass trajectory at once, provided that we compute at m0. On the other side, the procedure can provide good estimates for propagators with x(mi < m0) to be used as educated guesses for further inversions.

We note that our method can be applied to the case of even-odd-preconditioning [\cite=DEGRAND]. For general sources, however, two separate inversions are necesssary. The additional expense of a factor of two easily pays off against large numbers of Green's functions to be computed.

As a by-product we are in principle in the position to compute all derivatives x(n) up to order n = N, the number where the iteration stops.

The paper is organized as follows: In section [\ref=DER:ALG], we present the MR algorithm followed by the computation of the derivatives in section [\ref=DER:DER]. The construction of the Taylor series is explained in section [\ref=DER:TAY]. Furthermore we will present the results of numerical tests that deal with the inversion of the Wilson fermion matrix on a real full QCD configuration at β = 5.6 and κ = 0.1575 on a 163  ×  32 lattice.

M3R: Multiple Masses Minimal Residual

Standard Minimal Residual Algorithm

Consider the linear system:

[formula]

with A being a complex nonsingular matrix. The search direction in the Minimal Residual Algorithm is taken to be the direction of the residual. At every iteration step the following operation is performed:

[formula]

The coefficient αi is determined by a minimization of the 2-norm of the new residual ri + 1:

[formula]

Computation of the Derivatives

It is possible to extract in addition to the solution an arbitrary number of derivatives x(n) = dnx(m) / dmn at almost no extra computational cost, provided the matrix is of the special form of equation [\ref=equation] and the source r0 is independent of m.

n-fold differentiation of eq. [\ref=equation] with respect to m leads to a linear equation for the n-th derivative

[formula]

Let xi denote the approximation of the solution x after i iterations of the Minimal Residual algorithm. We are interested in a similar approximation for the 1st derivative x(1)i. Therefore we demand eq. [\ref=der_equation] for n = 1 to hold at each iteration step:

[formula]

It is obvious that the approximants x(1)i, defined in this way, converge towards x(1) as xi approaches x. The next step is to calculate the recursion relation for x(1)i. To this end we make use of the recursion relation for xi itself which is particularly simple in the case of the Minimal Residual algorithm:

[formula]

We then find the formal recursion relation

[formula]

At this stage we replace the true solution x by it's best approximation xN.

[formula]

A summation over i then leads to the following expression for x(1)N + 1:

[formula]

It is important to start the inversion with an initial guess x0 = 0 since the nonsingularity of A then implies that x(1)0 vanishes as well. After a resummation of the r.h.s we find

[formula]

Note that we can recursively build up the r.h.s. of this equation in terms of the coefficients

[formula]

at the price of only one extra vector-update per iteration step

[formula]

One can extend this procedure to higher derivatives by use of the following recursion relation for the generalized coefficients:

[formula]

In this way one ends up with the general updating-step for the derivatives

[formula]

We remark that for every additional derivative only one extra vector of storage is necessary.

Recombination of the Taylor-series

Usually one is interested in the solution of eq. [\ref=equation] for a given set of different values of m. In this section we will show that it is possible to perform a summation over all available approximate derivatives of x(m) and hence obtain a Taylor extrapolation to a different value of the parameter m.

We would like to perform a summation of the N-truncated Taylor series to an extrapolated solution [formula]:

[formula]

This Taylor series can be constructed recursively by use of equation [\ref=derivatives]:

[formula]

where we have introduced scale-factors

[formula]

In order to compute these scale-factors fi we recast eq. [\ref=alpha_def] in recursive form:

[formula]

Inserted into equation [\ref=update] this yields:

[formula]

We close with the comment that the entire procedure is selfconsistent up to terms of O(mN + 1) and O(ΔmN + 1).

Template for the M3R-Algorithm

Next we write down a template for our Multiple Masses Minimal Residual (M3R) algorithm. For shortness we apply one extrapolated solution xE(Δm), more solutions can be included easily.

Note that the standard overrelaxation parameter ω can be included as usual.

Applications in Lattice QCD

The Wilson Fermion Matrix

In 4 dimensional lattice Quantum Chromodynamics the Wilson fermion operator has the structure:

[formula]

with m being the bare-mass and

[formula]

the off-diagonal hopping term. The coefficients Uμ(x) are SU(3) background gauge fields. Greens Functions in QCD are the solutions of the linear equation

[formula]

with Φ being a δ-source or a 'smeared' source [\cite=SMEARING] [\cite=FROMMER95].

Results

The numerical tests were performed on the Quadrics Q4 parallel computer at Wuppertal University and the QH2 at IfH/DESY Zeuthen. We test the M3R algorithm on a full-QCD configuration of size 163  ×  32 at β = 5.6 and the following mass trajectory:

[formula]

We calculated the propagator on the lightest mass, corresponding to κ = 0.1575 and extrapolated with the M3R - technique to the six heavier masses. Our stopping criterion was

[formula]

with ||.|| denoting the 2-norm and ri being the true residual ||M(m + Δm)xi  -  r0||. In figure [\ref=normal] the true residuals of the 7 inversions against the number of M3R iterations are shown. It should be noted that the true residuals of the extrapolated heavier masses are always smaller than those corresponding to the lightest mass, for which the MR is actually inverting. We even observe a faster convergence with increasing Δm, despite the fact that we used a truncated Taylor-expansion to perform the extrapolation to larger masses. All residuals reach a plateau slightly below 10- 5, which reflects the 32bit precision of the Quadrics computer.

The gain factor for our example on a 256-node QH2 is a factor of 3 in CPU-time compared to seperate inversions at all the masses of the trajectory. This gain factor, of course, depends on the number of Green's functions that fit into memory and the mass range of the trajectory.

Even-Odd Preconditioning

In lattice quantum chromodynamics it has become standard to use the so called even-odd or red-black ordering scheme for the lattice-sites. This ordering scheme induces a block structure of the fermion matrix, which can be exploited to improve its condition number.

If one denotes the even lattice sites with xe, the odd sites with xo, equation [\ref=greens] reads

[formula]

Right preconditioning with the matrix

[formula]

yields two seperate matrix equations, each with a smaller condition number resulting in a performance gain of a factor 2-3:

[formula]

The vector y can be transformed back to x using one additional matrix multiplication:

[formula]

The M3R-Template can be applied as shown above to the even-odd preconditioned system using m2 as extrapolation parameter.

We test the preconditioned version of the algorithm on the same configuration, which has been reordered into even-odd form. We prefer to use a δ-source on an even lattice-point, because it enables us to restrict the application to the upper half of the system saving a factor of two in CPU time. Using the trajectory of seven masses from section [\ref=RES:NOR] we obtain the results shown in fig. [\ref=evenodd]. The behaviour remains qualitatively the same. Due to the smaller condition number of the matrix the convergence speed increases by approximately a factor of 2.

The gain factor compared to a sequential MR inversion on every mass is equal to 3. For a general source, however, one has to carry out the inversion on both systems of equation [\ref=eo_greens] reducing the above gain factor for our example to 1.5 .

Summary and Outlook

We have presented a new numerical method to compute a trajectory of solutions x, of the linear system Ax  =  r exploiting the shifted structure A  =  m  -  D of the linear system. We have shown that in a realistic setup in the framework of lattice Quantum Chromodynamics the method appears to be numerically stable as well as more efficient than standard methods.

For our setup of masses the gain factor varies between 1.5 and 3 depending on the source. Furthermore it depends strongly on the set of masses to compute. Note that we have chosen a large range of masses to demonstrate the convergence properties of the algorithm. In a realistic QCD setup the gain factor would be higher. This holds in particular for situations where one would like to make use of the Feynman-Hellmann theorem with respect to the quark mass dependence as in the case of the Pion-Nucleon-Sigma term [\cite=DONG] in Quenched QCD.

The method can be generalized in many different directions: In principle it can be embedded into any known iterative solver like Conjugate Gradient (CG) or Generalized Conjugate Residual (GCR). Furthermore it seems possible to derive similar algorithms for matrices with more complex parameter-dependencies than the one discussed in this paper.

Acknowledgements

We appreciate the support of the staff at the computer center at IfH/DESY Zeuthen.