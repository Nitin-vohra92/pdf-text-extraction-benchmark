=1200

Pedestrian Detection aided by Deep Learning Semantic Tasks

,xtang}{xgwang}

Introduction

Pedestrian detection has attracted broad attentions [\cite=DT05] [\cite=viola2005detecting] [\cite=sermanet2013] [\cite=DollarPAMI14pyramids] [\cite=DollarBMVC09ChnFtrs] [\cite=Dollar2012PAMI]. This problem is challenging because of large variation and confusion in human body and background scene, as shown in Fig.[\ref=fig:intro] (a), where the positive and hard negative patches have large ambiguity.

Current methods for pedestrian detection can be generally grouped into two categories, the models based on hand-crafted features [\cite=viola2005detecting] [\cite=DT05] [\cite=DBLP:conf/iccv/WangHY09] [\cite=DollarBMVC09ChnFtrs] [\cite=DollarPAMI14pyramids] [\cite=zhang2013informed] [\cite=felzenszwalb2010object] and deep models [\cite=Ouyang:DBNHuman] [\cite=Ouyang2013MutualDBN] [\cite=sermanet2013] [\cite=Ouyang2013Joint] [\cite=luo2013switchable]. In the first category, conventional methods extracted Haar [\cite=viola2005detecting], HOG[\cite=DT05], or HOG-LBP [\cite=DBLP:conf/iccv/WangHY09] from images to train SVM [\cite=DT05] or boosting classifiers [\cite=DollarBMVC09ChnFtrs]. The learned weights of the classifier ( SVM) can be considered as a global template of the entire human body. To account for more complex pose, the hierarchical deformable part models (DPM) [\cite=felzenszwalb2010object] [\cite=zhu2010learning] [\cite=lin2010shape] learned a mixture of local templates for each body part. Although they are sufficient to certain pose changes, the feature representations and the classifiers cannot be jointly optimized to improve performance. In the second category, deep neural networks achieved promising results [\cite=Ouyang:DBNHuman] [\cite=Ouyang2013MutualDBN] [\cite=sermanet2013] [\cite=Ouyang2013Joint] [\cite=luo2013switchable], owing to their capacity to learn middle-level representation. For example, Ouyang [\cite=Ouyang2013Joint] learned features by designing specific hidden layers for the Convolutional Neural Network (CNN), such that features, deformable parts, and pedestrian classification can be jointly optimized. However, previous deep models treated pedestrian detection as a single binary classification task, they can mainly learn middle-level features, which are not able to capture rich pedestrian variations, as shown in Fig.[\ref=fig:intro] (a).

To learn high-level representations, this work jointly optimizes pedestrian detection with auxiliary semantic tasks, including pedestrian attributes ( 'backpack', 'gender', and 'views') and scene attributes ( 'vehicle', 'tree', and 'vertical'). To understand how this work, we provide an example in Fig.[\ref=fig:multiview]. If only a single detector is used to classify all the positive and negative samples in Fig.[\ref=fig:multiview] (a), it is difficult to handle complex pedestrian variations. Therefore, the mixture models of multiple views were developed in Fig.[\ref=fig:multiview] (b), pedestrian images in different views are handled by different detectors. If views are treated as one type of semantic tasks, learning pedestrian representation by multiple attributes with deep models actually extends this idea to extreme. As shown in Fig.[\ref=fig:multiview] (c), more supervised information enriches the learned features to account for combinatorial more pedestrian variations. The samples with similar configurations of attributes can be grouped and separated in the high-level feature space.

Specifically, given a pedestrian dataset (denoted by [formula]), the positive image patches are manually labeled with several pedestrian attributes, which are suggested to be valuable for surveillance analysis [\cite=handbook]. However, as the number of negatives is significantly larger than the number of positives, we transfer scene attributes information from existing background scene segmentation databases (each one is denoted by [formula]) to the pedestrian dataset, other than annotating them manually. A novel task-assistant CNN (TA-CNN) is proposed to jointly learn multiple tasks using multiple data sources. As different [formula]'s may have different data distributions, to reduce these discrepancies, we transfer two types of scene attributes that are carefully chosen, comprising the shared attributes that appear across all the [formula]'s and the unshared attributes that appear in only one of them. The former one facilitates the learning of shared representation among [formula]'s, whilst the latter one increases diversity of attribute. Furthermore, to reduce gaps between [formula] and [formula]'s, we first project each sample in [formula]'s to a structural space of [formula] and then the projected values are employed as input to train TA-CNN. Learning TA-CNN is formulated as minimizing a weighted multivariate cross-entropy loss, where both the importance coefficients of tasks and the network parameters can be iteratively solved via stochastic gradient descent [\cite=krizhevsky2012imagenet].

This work has the following main contributions. (1) To our knowledge, this is the first attempt to learn high-level representation for pedestrian detection by jointly optimizing it with semantic attributes, including pedestrian attributes and scene attributes. The scene attributes can be transferred from existing scene datasets without annotating manually. (2) These multiple tasks from multiple sources are trained using a single task-assistant CNN (TA-CNN), which is carefully designed to bridge the gaps between different datasets. A weighted multivariate cross-entropy loss is proposed to learn TA-CNN, by iterating among two steps, updating network parameters with tasks' weights fixed and updating weights with network parameters fixed. (3) We systematically investigate the effectiveness of attributes in pedestrian detection. Extensive experiments on both challenging Caltech [\cite=Dollar2012PAMI] and ETH [\cite=ess2007depth] datasets demonstrate that TA-CNN outperforms state-of-the-art methods. It reduces miss rates of existing deep models on these datasets by 17 and 5.5 percent, respectively.

Related Works

We review recent works in two aspects.

Models based on Hand-Crafted Features The hand-crafted features, such as HOG, LBP, and channel features, achieved great success in pedestrian detection. For example, Wang [\cite=DBLP:conf/iccv/WangHY09] utilized the LBP+HOG features to deal with partial occlusion of pedestrian. Chen [\cite=chen2013detection] modeled the context information in a multi-order manner. The deformable part models [\cite=felzenszwalb2010object] learned mixture of local templates to account for view and pose variations. Moreover, Doll√°r proposed Integral Channel Features (ICF) [\cite=DollarBMVC09ChnFtrs] and Aggregated Channel Features (ACF) [\cite=DollarPAMI14pyramids], both of which consist of gradient histogram, gradients, and LUV, and can be efficiently extracted. Benenson [\cite=benenson2012pedestrian] combined channel features and depth information. However, the representation of hand-crafted features cannot be optimized for pedestrian detection. They are not able to capture large variations, as shown in Fig.[\ref=fig:feature] (a) and (b).

Deep Models Deep learning methods can learn features from raw pixels to improve the performance of pedestrian detection. For example, ConvNet [\cite=sermanet2013] employed convolutional sparse coding to unsupervised pre-train CNN for pedestrian detection. Ouyang [\cite=Ouyang:DBNHuman] jointly learned features and the visibility of different body parts to handle occlusion. The JointDeep model [\cite=Ouyang2013Joint] designed a deformation hidden layer for CNN to model mixture poses information. Unlike the previous deep models that formulated pedestrian detection as a single binary classification task, TA-CNN jointly optimizes pedestrian detection with related semantic tasks, and the learned features are more robust to large variations, as shown in Fig.[\ref=fig:feature] (c) and (d).

Our Approach

Method Overview Fig.[\ref=fig:pipeline] shows our pipeline of pedestrian detection, where pedestrian classification, pedestrian attributes, and scene attributes are jointly learned by a single TA-CNN. Given a pedestrian dataset [formula], for example Caltech [\cite=Dollar2012PAMI], we manually label the positive patches with nine pedestrian attributes, which are listed in Fig.[\ref=fig:AttributeTabel]. Most of them are suggested by the UK Home Office and UK police to be valuable in surveillance analysis [\cite=handbook]. Since the number of negative patches in [formula] is significantly larger than the number of positives, we transfer scene attribute information from three public scene segmentation datasets to [formula], as shown in Fig.[\ref=fig:pipeline] (a), including CamVid ([formula]) [\cite=BrostowSFC:ECCV08], Stanford Background ([formula]) [\cite=gould2009decomposing], and LM+SUN ([formula]) [\cite=tighe2010superparsing], where hard negatives are chosen by applying a simple yet fast pedestrian detector [\cite=DollarPAMI14pyramids] on these datasets. As the data in different [formula]'s are sampled from different distributions, we carefully select two types of attributes, the shared attributes (outlined in orange) that present in all [formula]'s and the unshared attributes (outlined in red) that appear only in one of them. This is done because the former one enables the learning of shared representation across [formula]'s, while the latter one enhances diversity of attribute. All chosen attributes are summarized in Fig.[\ref=fig:AttributeTabel], where shows that data from different sources have different subset of attribute labels. For example, pedestrian attributes only present in [formula], shared attributes present in all [formula]'s, and the unshared attributes present in one of them, 'traffic light' of [formula].

We construct a training set [formula] by combing patches cropped from both [formula] and [formula]'s. Let [formula] be a set of image patches and their labels, where each [formula] is a four-tuple. Specifically, yn denotes a binary label, indicating whether an image patch is pedestrian or not. [formula], [formula], and [formula] are three sets of binary labels, representing the pedestrian, shared scene, and unshared scene attributes, respectively. As shown in Fig.[\ref=fig:pipeline] (b), TA-CNN employs image patch [formula] as input and predicts [formula], by stacking four convolutional layers (conv1 to conv4), four max-pooling layers, and two fully-connected layers (fc5 and fc6). This structure is inspired by the AlexNet [\cite=krizhevsky2012imagenet] for large-scale general object categorization. However, as the difficulty of pedestrian detection is different from general object categorization, we remove one convolutional layer of AlexNet and reduce the number of parameters at all remaining layers. The subsequent structure of TA-CNN is specified in Fig.[\ref=fig:pipeline] (b).

Formulation of TA-CNN Each hidden layer of TA-CNN from conv1 to conv4 is computed recursively by convolution and max-pooling, which are formulated as

[formula]

In Eqn.([\ref=eq:conv]), [formula] is the rectified linear function [\cite=nair2010rectified] and [formula] denotes the convolution operator applied on every pixel of the feature map [formula], where [formula] and [formula] stand for the u-th input channel at the l - 1 layer and the v-th output channel at the l layer, respectively. [formula] and bv(l) denote the filters and bias. In Eqn.([\ref=eq:max]), the feature map [formula] is partitioned into grid with overlapping cells, each of which is denoted as Œ©(i,j), where (i,j) indicates the cell index. The max-pooling compares value at each location (p,q) of a cell and outputs the maximum value of each cell.

Each hidden layer in fc5 and fc6 is obtained by

[formula]

where the higher level representation is transformed from lower level with a non-linear mapping. [formula] and [formula] are the weight matrixes and bias vector at the l-th layer.

TA-CNN can be formulated as minimizing the log posterior probability with respect to a set of network parameters W

[formula]

where [formula] is a complete loss function regarding the entire training set. Here, we illustrate that the shared attributes [formula] in Eqn.([\ref=eq:loss1]) are crucial to learn shared representation across multiple scene datasets [formula]'s.

For clarity, we keep only the unshared scene attributes [formula] in the loss function, which then becomes [formula]. Let [formula] denote the sample of [formula]. A shared representation can be learned if and only if all the samples share at least one target (attribute). Since the samples are independent, the loss function can be expanded as [formula], where I + J + K = N, implying that each dataset is only used to optimize its corresponding unshared attribute, although all the datasets and attributes are trained in a single TA-CNN. For instance, the classification model of ou1 is learned by using [formula] without leveraging the existence of the other datasets. In other words, the probability of [formula] because of missing labels. The above formulation is not sufficient to learn shared features among datasets, especially when the data have large differences. To bridge multiple scene datasets [formula]'s, we introduce the shared attributes [formula], the loss function develops into [formula], such that TA-CNN can learn a shared representation across [formula]'s because the samples share common targets [formula], [formula].

Now, we reconsider Eqn.([\ref=eq:loss1]), where the loss function can be decomposed similarly, [formula], with I + J + K + L = N. Even though the discrepancies among [formula]'s can be reduced by [formula], this decomposition shows that gap remains between datasets [formula] and [formula]'s. To resolve this issue, we compute the structure projection vectors [formula] for each sample [formula], and Eqn.([\ref=eq:loss1]) turns into

[formula]

For example, the first term of the above decomposition can be written as [formula], where [formula] is attained by projecting the corresponding [formula] in [formula] on the feature space of [formula]. This procedure is explained below. Here [formula] is used to bridge multiple datasets, because samples from different datasets are projected to a common space of P. TA-CNN adopts a pair of data [formula] as input (see Fig.[\ref=fig:pipeline] (b)). All the remaining terms can be derived in a similar way.

Structure Projection Vector As shown in Fig.[\ref=fig:cluster], to close the gap between [formula] and [formula]'s, we calculate the structure projection vector (SPV) for each sample by organizing the positive (+) and negative (-) data of [formula] into two tree structures, respectively. Each tree has depth that equals three and partitions the data top-down, where each child node groups the data of its parent into clusters, for example C11 and C105. Then, SPV of each sample is obtained by concatenating the distance between it and the mean of each leaf node. Specifically, at each parent node, we extract HOG feature for each sample and apply k-means to group the data. We partition the data into five clusters (C1 to C5) in the first level, and then each of them is further partitioned into ten clusters, C11 to C101.

Learning Task-Assistant CNN

To learn network parameters W, a natural way is to reformulate Eqn.([\ref=eq:loss2]) as the softmax loss functions similar to the previous methods. We have

[formula]

where the main task is to predict the pedestrian label y and the attribute estimations, opi, osj, and ouk, are auxiliary semantic tasks. Œ±, Œ≤, and Œ≥ denote the importance coefficients to associate multiple tasks. Here, [formula], [formula], [formula], and [formula] are modeled by softmax functions, for example, [formula], where [formula] and [formula] indicate the top-layer feature vector and the parameter matrix of the main task y respectively, as shown in Fig.[\ref=fig:pipeline] (b), and [formula] is obtained by [formula].

Eqn.([\ref=eq:loss3]) optimizes eighteen loss functions together. It has two main drawbacks. First, since different tasks have different convergence rates, training many tasks together suffers from over-fitting. Previous works prevented over-fitting by adjusting the importance coefficients. However, they are determined in a heuristic manner, such as early stopping [\cite=zhang2014multitask], other than estimating in the learning procedure. Second, if the dimension of the features [formula] is high, the number of parameters at the top-layer increases exponentially. For example, if the feature vector [formula] has H dimensions, the weight matrix of each two-state variable ( [formula] of the main task) has 2  √ó  H parameters, whilst the weight matrix of the four-state variable 'viewpoint' has 4  √ó  H parameters. As we have seventeen two-state variables and one four-state variable, the total number of parameters at the top-layer is [formula].

To resolve the above issues, we cast learning multiple tasks in Eqn.([\ref=eq:loss3]) as optimizing a single weighted multivariate cross-entropy loss, which can not only learn a compact weight matrix but also iteratively estimate the importance coefficients,

[formula]

where [formula] denotes a vector of importance coefficients and [formula] represents a diagonal matrix. Here, [formula] is a vector of binary labels, concatenating the pedestrian label and all attribute labels. Note that each two-state (four-state) variable can be described by one bit (two bits). Since we have seventeen two-state variables and one four-state variable, the weight matrix at the top layer, denoted as [formula] in this case, has 17  √ó  H + 2  √ó  H = 19H parameters, which reduces the number of parameters by half, 19H compared to 38H of Eqn.([\ref=eq:loss3]). Moreover, [formula] is modeled by sigmoid function, [formula], where [formula] is achieved in the same way as in Eqn.([\ref=eq:loss3]).

The optimization of Eqn.([\ref=eq:loss4]) iterates between two steps, updating network parameters with the importance coefficients fixed and updating coefficients with the network parameters fixed.

Learning Network Parameters The network parameters are updated by minimizing Eqn.([\ref=eq:loss4]) using stochastic gradient descent [\cite=krizhevsky2012imagenet] and back-propagation (BP) [\cite=rumelhart1986learning], where the error of the output layer is propagated top-down to update filters or weights at each layer. For example, the weight matrix of the L-th layer in the t + 1-th iteration, [formula], is attained by

[formula]

Here, t is the index of training iteration. Œî is the momentum variable, Œµ is the learning rate, and [formula] is the derivative calculated by the outer product of the back-propagation error e(L) and the hidden features [formula]. The BP procedure is similar to [\cite=krizhevsky2012imagenet]. The main difference is how to compute error at the L-th layer. In the traditional BP algorithm, the error e(L) at the L-th layer is obtained by the gradient of Eqn.([\ref=eq:loss4]), indicating the loss, [formula], where [formula] denotes the predicted labels. However, unlike the conventional BP where all the labels are observed, each of our dataset only covers a subset of attributes. Let [formula] signify the unobserved labels. The posterior probability of Eqn.([\ref=eq:loss4]) becomes [formula], where [formula] specifies the labels [formula] excluding [formula]. Here we demonstrate that [formula] can be simply marginalized out, since the labels are independent. We have [formula] [formula]. Therefore, the error e(L) of Eqn.([\ref=eq:loss4]) can be computed as

[formula]

which demonstrates that the errors of the missing labels will not be propagated no matter whether their predictions are correct or not.

Learning Importance Coefficients We update the importance coefficients with the network parameters fixed, by minimizing the posterior probability [formula] as introduced in [\cite=caruana1998multitask]. Taking the negative logarithm of the posterior, the problem develops into

[formula]

where the first term, [formula], is a log likelihood similar to Eqn.([\ref=eq:loss4]), measuring the evidence of selecting importance coefficients [formula]. The second term specifies a log prior of [formula]. To avoid trivial solution, exists [formula] equals zero, we have [formula], showing that each coefficient is regularized by a Gaussian prior with mean '1' and standard deviation œÉ. This implies that each [formula] should not deviate too much from one, because we assume all tasks have equal contributions at the very beginning. Let Œª1 be the coefficient of the main task. We fix Œª1 = 1 through out the learning procedure, as our goal is to optimize the main task with the help of the auxiliary tasks. The third term is a normalization constant, which can be simply modeled as a constant scalar. In this work, we adopted the restricted Boltzmann machine (RBM) [\cite=hinton2006reducing] to learn [formula], because RBM can well model the data space. In other words, we can measure the predictions of the coefficients with respect to the importance of each sample. Note that RBM can be learned off-line and [formula] can be stored in a probability table for fast indexing.

Intuitively, coefficient learning is similar to the process below. At the very beginning, all the tasks have equal importance. In the training stage, for those tasks whose values of the loss function are stable but large, we decrease their weights, because they may not relate to the main task or begin to over-fit the data. However, we penalize the coefficient that is approaching zero, preventing the corresponding task from suspension. For those tasks have small values of loss, their weights could be increased, since these tasks are highly related to the main task, whose error rates are synchronously decreased with the main task. In practice, all the tasks' coefficients in our experiments become [formula] when training converges, except the main task whose weight is fixed and equals one. Learning of TA-CNN is summarized in Algorithm [\ref=alg:1]. Typically, we run the first step for sufficient number of iterations to reach a local minima, and then perform the second step to update the coefficients. This strategy can help avoid getting stuck at local minima.

Here, we explain the third term in details. With the RBM, we have

[formula]

which represents the free energy [\cite=hinton2006reducing] of RBM. Specifically, [formula] is the energy function, which learns the latent binary representation [formula] that models the shared hidden space of [formula] and [formula]. [formula] and [formula] are the projection matrixes capturing the relations between [formula] and [formula], and [formula] and [formula], respectively, while [formula], and [formula] are the biases. The RBM can be solved by the contrastive divergence [\cite=hinton2006reducing]. Since the latent variables [formula] are independent given [formula] and [formula], [formula] can be rewritten by integrating over [formula], [formula]. Combining all the above definitions, Eqn.([\ref=eq:coef]) is an unconstrained optimization problem, where the importance coefficients can be efficiently updated by using the L-BFGS algorithm [\cite=andrew2007scalable].

Experiments

The proposed TA-CNN is evaluated on the Caltech-Test [\cite=Dollar2012PAMI] and ETH datasets [\cite=ess2007depth]. We strictly follow the evaluation protocol proposed in [\cite=Dollar2012PAMI], which measures the log average miss rate over nine points ranging from 10- 2 to 100 False-Positive-Per-Image. We compare TA-CNN with the best-performing methods as suggested by the Caltech and ETH benchmarks on the reasonable subsets, where pedestrians are larger than 49 pixels height and have 65 percent visible body parts.

Effectiveness of TA-CNN

We systematically study the effectiveness of TA-CNN in four aspects as follows. In this section, TA-CNN is trained on Caltech-Train and tested on Caltech-Test.

Effectiveness of Hard Negative Mining To save computational cost, We employ ACF [\cite=DollarPAMI14pyramids] for mining hard negatives at the training stage and pruning candidate windows at the testing stage. Two main adjustments are made in ACF. First, we compute the exact feature pyramids at each scale instead of making an estimated aggregation. Second, we increase the number of weak classifiers to enhance the recognition ability. Afterwards, a higher recall rate is achieved by ACF and it obtains 37.31 percent miss rate on Caltech-Test. Then the TA-CNN with only the main task (pedestrian classification) achieved 31.45 percent miss rate by cascading on ACF, obtaining more than 5 percent improvement.

Effectiveness of Pedestrian Attributes We investigate how different pedestrian attributes can help improve the main task. To this end, we train TA-CNN by combing the main task with each of the pedestrian attributes, and the miss rates are reported in Table [\ref=tab:posattribute], where shows that 'viewpoint' is the most effective attribute, which improves the miss rate by 3.25 percent, because 'viewpoint' captures the global information of pedestrian. The attribute capture the pose information also attains significant improvement, 2.62 percent by 'riding'. Interestingly, among those attributes modeling local information, 'hat' performs the best, reducing the miss rate by 2.56 percent. We observe that this result is consistent with previous works, SpatialPooling [\cite=paisitkriangkrai2014strengthening] and InformedHaar [\cite=zhang2013informed], which showed that head is the most informative body parts for pedestrian detection. When combining all the pedestrian attributes, TA-CNN achieved 25.64 percent miss rate, improving the main task by 6 percent.

Effectiveness of Scene Attributes Similarly, we study how different scene attributes can improve pedestrian detection. We train TA-CNN combining the main task with each scene attribute. For each attribute, we select 5,000 hard negative samples from its corresponding dataset. For example, we crop five thousand patches for 'vertical' from the Stanford Background dataset. We test two settings, denoted as "Neg." and "Attr.". In the first setting, we label the five thousand patches as negative samples. In the second setting, these patches are assigned to their original attribute labels. The former one uses more negative samples compared to the TA-CNN (main task), whilst the latter one employs attribute information.

The results are reported in Table [\ref=tab:negattribute], where shows that 'traffic-light' improves the main task by 2.53 percent, revealing that the patches of 'traffic-light' are easily confused with positives. This is consistent when we exam the hard negative samples of most of the pedestrian detectors. Besides, the 'vertical' background patches are more effective than the 'horizontal' background patches, corresponding to the fact that hard negative patches are more likely to present vertically.

Attribute Prediction We also consider the accuracy of attribute prediction and find that the averaged accuracy of all the attributes exceeds 75 percent. We select the pedestrian attribute 'viewpoint' as illustration. In Table [\ref=viewpoint], we report the confusion matrix of 'viewpoint', where the number of detected pedestrians of 'front', ''back', ''left', and 'right' are 283, 276, 220, 156 respectively. We observed that 'front' and 'back' information are relatively easy to capture, rather than the 'left' and 'right', which are more likely to confuse with each other, 21 + 40 = 61 mis-classified samples.

Overall Performance on Caltech

We report overall results in two parts. All the results of TA-CNN are obtained by training on Caltech-Train and evaluating on Caltech-Test. In the first part, we analyze the performance of different components of TA-CNN. As shown in Fig.[\ref=1a], the performances show clear increasing patterns when gradually adding more components. For example, TA-CNN (main task) cascades on ACF and reduces the miss rate of it by more than 5 percent. TA-CNN (PedAttr.+SharedScene) reduces the result of TA-CNN (PedAttr.) by 2.2 percent, because it can bridge the gaps among multiple scene datasets. After modeling the unshared attributes, the miss rate is further decreased by 1.5 percent, since more attribute information is incorporated. The final result of 20.86 miss rate is obtained by using the structure projection vector as input to TA-CNN. Its effectiveness has been demonstrated in Fig.[\ref=1a].

In the second part, we compare the result of TA-CNN with all existing best-performing methods, including VJ [\cite=viola2004robust], HOG [\cite=DT05], ACF-Caltech [\cite=DollarPAMI14pyramids], MT-DPM [\cite=yan2013robust], MT-DPM+Context [\cite=yan2013robust], JointDeep [\cite=Ouyang2013Joint], SDN [\cite=luo2013switchable], ACF+SDT [\cite=park2013exploring], InformedHaar [\cite=zhang2013informed], ACF-Caltech+ [\cite=namlocal], SpatialPooling [\cite=paisitkriangkrai2014strengthening], LDCF [\cite=namlocal], Katamari [\cite=benenson2014workshop], SpatialPooling+ [\cite=paisitkriangkrai2014pedestrian]. These works used various features, classifiers, deep networks, and motion and context information. We summarize them as below. Note that TA-CNN dose not employ motion and context information.

Features: Haar (VJ), HOG (HOG, MT-DPM), Channel-Feature (ACF+Caltech, LDCF); Classifiers: latent-SVM (MT-DPM), boosting (VJ, ACF+Caltech, SpatialPooling); Deep Models: JointDeep, SDN; Motion and context: MT-DPM+Context, ACF+SDT, Katamari, SpatialPooling+.

Fig.[\ref=1b] reports the results. TA-CNN achieved the smallest miss rate compared to all existing methods. Although it only outperforms the second best method (SpatialPooling+ [\cite=paisitkriangkrai2014pedestrian]) by 1 percent, it learns 200 dimensions high-level features with attributes, other than combining LBP, covariance features, channel features, and video motion as in [\cite=paisitkriangkrai2014pedestrian]. Also, the Katamari [\cite=benenson2014workshop] method integrates multiple types of features and context information.

Hand-crafted Features The learned high-level representation of TA-CNN outperforms the conventional hand-crafted features by a large margin, including Haar, HOG, HOG+LBP, and channel features, shown in Fig.[\ref=fig:Comparison] (a). For example, it reduced the miss rate by 16 and 9 percent compared to DPM+Context and Spatial Pooling, respectively. DPM+Context combined HOG feature with pose mixture and context information, while SpatialPooling combined multiple features, such as LBP, covariance, and channel features.

Deep Models Fig.[\ref=fig:Comparison] (b) shows that TA-CNN surpasses other deep models. For example, TA-CNN outperforms two state-of-the-art deep models, JointDeep and SDN, by 18 and 17 percent, respectively. Both SDN and JointDeep treated pedestrian detection as a single task and thus cannot learn high-level representation to deal with the challenging hard negative samples.

Time Complexity Training TA-CNN on Caltech-Train with a single GPU takes 3 hours. At the testing stage, the running time of hard negative mining is 10 frames per second (FPS) on Matlab with CPU, while TA-CNN runs at 100 FPS on GPU. In summary, the entire system detects pedestrians from raw [formula] images at around 5 FPS. The bottleneck is the step of hard negative mining. We consider to migrate it to GPU platform.

Overall Performance on ETH

We compare TA-CNN with the existing best-performing methods (see Sec.[\ref=sec:caltech]) on ETH [\cite=ess2007depth]. TA-CNN is trained on INRIA-Train [\cite=DT05]. This setting aims at evaluating the generalization capacity of the TA-CNN. As shown in Fig.[\ref=fig:ETH], TA-CNN achieves the lowest miss rate, which outperforms the second best method by 2.5 percent. It also outperforms the best deep model by 5.5 percent.

Effectiveness of different Components The analysis of the effectiveness of different components of TA-CNN is displayed in Fig.[\ref=fig:ETH1], where the log-average miss rates show clear decreasing patterns as follows, while gradually accumulating more components.

[formula] TA-CNN (main task) cascades on ACF and reduces the miss rate by 5.4 percent.

[formula] With pedestrian attributes, TA-CNN (PedAttr.) reduces the result of TA-CNN (main task) by 5.5 percent.

[formula] When bridging the gaps among multiple scene datasets with shared scene attributes, TA-CNN (PedAttr.+SharedScene) further lower the miss rate by 1.8 percent.

[formula] After incorporating unshared attributes, the miss rate is further decreased by another 1.2 percent.

[formula] TA-CNN finally achieves 34.99 percent log-average miss rate with the structure projection vector.

Comparisons with Hand-crafted Features Fig.[\ref=fig:features] shows that the learned representation of TA-CNN outperforms the conventional handcrafted features in a large margin, including Haar, HOG, HOG+LBP, and channel features. For instance, it reduces the miss rate by 9.8 and 8.5 percent compared to FisherBoost [\cite=shen2013training] and Roerei [\cite=benenson2013seeking], respectively. FisherBoost combined HOG and covariance features, and trained the detector in a complex model, while Roerei carefully designed the feature pooling, feature selection, and preprocessing methods based on channel features.

Comparisons with Deep Models Fig.[\ref=fig:deepmodels] shows that TA-CNN surpasses other deep models on ETH dataset. For example, TA-CNN outperforms other two best-performing deep models, SDN [\cite=luo2013switchable] and DBN-Mul [\cite=Ouyang2013MutualDBN], by 5.5 and 6 percent, respectively. Besides, TA-CNN even reduces the miss rate by 12.7 compared to MultiSDP [\cite=zeng2013multi], which carefully designed multiple classification stages to recognize hard negatives.

Visualization of Detection Results

We visualize the results of TA-CNN and compare with HOG [\cite=DT05], ACF [\cite=DollarPAMI14pyramids], and JointDeep [\cite=Ouyang2013Joint]. Fig.[\ref=fig:Caltech_continuous] and Fig.[\ref=fig:Caltech_discrete] show the detection examples on Caltech reasonable subset, while Fig.[\ref=fig:ETH_sample] shows samples on ETH reasonable subset.

Conclusions

In this paper, we proposed a novel Task-Assistant CNN (TA-CNN) to learn features from multiple tasks (pedestrian and scene attributes) and datasets, showing superiority over hand-crafted features and features learned by other deep models. This is because high-level representation can be learned by employing sematic tasks and multiple data sources. Extensive experiments demonstrate its effectiveness. The proposed model can be further improved by incorporating more attributes. Future work will explore more attribute configurations. The proposed approach also has potential for scene parsing, because it predicts background attributes.