>p >p >p

Unsupervised K-Nearest Neighbor Regression

Introduction

Dimensionality reduction and manifold learning have an important part to play in the understanding of data. In this work we introduce two fast constructive heuristics for dimensionality reduction called unsupervised K-nearest neighbor regression. Meinicke [\cite=Meinicke] proposed a general unsupervised regression framework for learning of low-dimensional manifolds. The idea is to reverse the regression formulation such that low-dimensional data samples in latent space optimally reconstruct high-dimensional output data. We take this framework as basis for an iterative approach that fits KNN to this unsupervised setting in a combinatorial variant. The manifold problem we consider is a mapping [formula] corresponding to the dimensionality reduction for data points [formula], and latent points [formula] with d  >  q. The problem is a hard optimization problem as the latent variables [formula] are unknown.

In Section [\ref=sec:related] we will review related dimensionality reduction approaches, and repeat KNN regression. Section [\ref=sec:UNN] presents the concept of UNN regression, and two iterative strategies that are based on fixed latent space topologies. Conclusions are drawn in Section [\ref=sec:conclusions].

Related Work

Many dimensionality reduction methods have been proposed, a very famous one is principal component analysis (PCA), which assumes linearity of the manifold [\cite=pca] [\cite=pearson]. An extension for learning of non-linear manifolds is kernel PCA [\cite=kernelpca] that projects the data into a Hilbert space. Further famous approaches for manifold learning are Isomap by Tenenbaum, Silva, and Langford [\cite=isomap], locally linear embedding (LLE) by Roweis and Saul [\cite=lle], and principal curves by Hastie and Stuetzle [\cite=principal].

Unsupervised Regression

The work on unsupervised regression for dimensionality reduction starts with Meinicke [\cite=Meinicke], who introduced the corresponding algorithmic framework for the first time. In this line of research early work concentrated on non-parametric kernel density regression, i.e., the counterpart of the Nadaraya-Watson estimator [\cite=ritter05] denoted as unsupervised kernel regression (UKR). Klanke and Ritter [\cite=ritter07] introduced an optimization scheme based on LLE, PCA, and leave-one-out cross-validation (LOO-CV) for UKR. Carreira-Perpiñán and Lu [\cite=gilroy] argue that training of non-parametric unsupervised regression approaches is quite expensive, i.e., O(N3) in time, and O(N2) in memory. Parametric methods can accelerate learning, e.g., unsupervised regression based on radial basis function networks (RBFs) [\cite=regularized], Gaussian processes [\cite=lawrence], and neural networks [\cite=tan].

KNN Regression

In the following, we give a short introduction to K-nearest neighbor regression that is basis of the UNN approach. The problem in regression is to predict output values [formula] to given input values [formula] based on sets of N input-output examples [formula]. The goal is to learn a function [formula] known as regression function. We assume that a data set consisting of observed pairs [formula] is given. For a novel pattern [formula], KNN regression computes the mean of the function values of its K-nearest neighbors:

[formula]

with set [formula] containing the indices of the K-nearest neighbors of [formula]. The idea of KNN is based on the assumption of locality in data space: In local neighborhoods of [formula] patterns are expected to have similar output values [formula] (or class labels) to [formula]. Consequently, for an unknown [formula] the label must be similar to the labels of the closest patterns, which is modeled by the average of the output value of the K nearest samples. KNN has been proven well in various applications, e.g., in detection of quasars in interstellar data sets [\cite=quasar].

Unsupervised KNN Regression

In this section we introduce two iterative strategies for UNN regression based on minimization of the data space reconstruction error (DSRE) [\cite=Meinicke].

Unsupervised Regression

Let [formula] with [formula] be the matrix of high-dimensional patterns in data space. We seek for a low-dimensional representation, i.e., a matrix of latent points [formula], such that a regression function [formula] applied to [formula] ,,point-wise optimally reconstructs the pattern", i.e., we search for an [formula] that minimizes

[formula]

E() is called data space reconstruction error (DSRE). Latent points [formula] define the low-dimensional representation. The regression function applied to the latent points should optimally reconstruct the high-dimensional patterns.

UNN

An UNN regression manifold is defined by variables [formula] with the unsupervised formulation of an UNN regression manifold

[formula]

Matrix [formula] contains the latent points [formula] that define the manifold, i.e., the low-dimensional representation of data [formula]. Parameter [formula] is the location where the function is evaluated. An optimal UNN regression manifold minimizes the DSRE

[formula]

with Frobenius norm

[formula]

In other words: an optimal UNN manifold consists of low-dimensional points [formula] that minimize the reconstruction of the data points [formula] w.r.t. KNN regression. Regularization in UNN regression may be not as important as regularization in other methods that fit into the unsupervised regression framework. For example, in UKR regularization means penalizing extension in latent space with [formula], and weight λ [\cite=ritter07]. In KNN regression moving the low-dimensional data samples infinitely apart from each other does not have the same effect as long as we can still determine the K-nearest neighbors, but extension can be penalized to avoid redundant solutions. For practical purposes (limitation of size of numbers) it might be reasonable to restrict continuous KNN latents spaces, e.g., to [formula]. In the following section fixed latent space topologies are used that do not require further regularization.

Iterative Strategy 1

For KNN not the absolute positions of data samples in latent space are relevant, but the relative positions that define the neighborhood relations. This perspective reduces the problem to a combinatorial search for neighborhoods [formula] with [formula] that can be solved by testing all combinations of K-element subsets of N elements, i.e., all [formula] combinations. The problem is still difficult to solve, in particular for high dimensions. In the following, we introduce a combinatorial approach to UNN, and introduce two iterative local strategies.

The idea of our first iterative strategy (UNN 1) is to iteratively assign the data samples to a position in an existing latent space topology that leads to the lowest DSRE. We assume fixed neighborhood topologies with equidistant positions in latent space, and therefore restrict the optimization problem of Equation ([\ref=eq:UNN]) to a search in a subset of latent space.

As a simple variant we consider the linear case of the latent variables arranged equidistantly on a line [formula]. In this simplified case only the order of the elements is important. The first iterative strategy works as follows:

Choose one element [formula],

test all N̂ + 1 intermediate positions of the N̂ embedded elements in latent space,

choose the latent position with min E(), and embed [formula],

remove [formula] from [formula], and repeat from Step 1 until all elements have been embedded.

Figure [\ref=fig:local1] illustrates the N̂ + 1 possible embeddings of a data sample into an existing order of points in latent space (yellow/bright circles). For example, the position of element [formula] results in a lower DSRE with K = 2 than the position of [formula], as the mean of the two nearest neighbors of [formula] is closer to [formula] than the mean of the two nearest neighbors of [formula].

The complexity of UNN 1 can be described as follows. Each DSRE evaluation takes Kd computations. We assume that the K nearest neighbors are saved in a list during the embedding for each latent point [formula], so that the search for indices [formula] takes O(1) time. The DSRE has to be computed for N + 1 positions, which takes (N + 1)  ·  Kd steps, i.e., O(N) time.

Iterative Strategy 2

The iterative approach introduced in the last section tests all intermediate positions of previously embedded latent points. We propose a second iterative variant (UNN 2) that only tests the neighbored intermediate positions in latent space of the nearest embedded point [formula] in data space. The second iterative strategy works as follows:

Choose one element [formula],

look for the nearest [formula] that has already been embedded (w.r.t. distance measure like Euclidean distance),

choose the latent position next to [formula] with min E() and embed [formula],

remove [formula] from [formula], add [formula] to [formula], and repeat from Step 1 until all elements have been embedded.

Figure [\ref=fig:local2] illustrates the embedding of a 2-dimensional point [formula] (yellow) left or right of the nearest point [formula] in data space. The position with the lowest DSRE is chosen. In comparison to UNN 1, N̂ distance comparisons in data space have to be computed, but only 2 positions have to be tested w.r.t. the data space reconstruction error. UNN 2 computes the nearest embedded point [formula] for each data point, which takes Nd steps. Only for the two neighbors the DSRE has to be computed, resulting in an overall number of Nd + 2Kd steps, i.e., it takes O(N) time. Because of the multiplicative constants, UNN 2 is faster in practice. For example, for N = 1,000, K = 10, and d = 100, UNN 1 takes 1,001,000 steps, while UNN 2 takes 102,000 steps. Testing all combinations takes [formula] steps, which is not computable in reasonable time. The following experimental section will answer the question, if this speedup of UNN 2 has to be paid with worse DSREs.

Experiments

This section shows the behavior of the iterative strategies on three test problems. We will compare the DSRE of both strategies to the initial DSRE at the end of this section.

2D-S

First, we compare UNN 1 and UNN 2 on a simple 2-dimensional data set, i.e., the 2-dimensional noisy S with N = 200 (2D-S). Figure [\ref=fig:2d] shows the experimental results with K = 5 nearest neighbors. Similar colors correspond to neighbored latent points. Part (a) shows an UNN 1 embedding of the 2D-S data set. Part (b) shows the embedding of the same data set with UNN 2. The colors of both embeddings show a satisfying topological sorting, although we can observe local optima.

3D-S

In the following, we will test UNN regression on a 3-dimensional S data set (3D-S). The variant without a hole consists of 500 data points, the variant with a hole in the middle consists of 400 points. Figure [\ref=fig:3d] (a) shows the order of elements of the 3D-S data set without a hole at the beginning. The corresponding embedding with UNN 1 and K = 10 is shown in Part (b) of the figure. Again, similar colors correspond to neighbored points in latent space. Part (c) of Figure [\ref=fig:3d] shows the UNN 2 embedding achieving similar results. Also on the UNN embedding of the S data set with hole, see Part (d) of the figure, a reasonable neighbored assignments can be observed. Quantitative results for the DSRE are reported in Table [\ref=tab:dsre].

USPS Digits

Last, we experimentally test UNN regression on test problems from the USPS digits data set [\cite=usps]. For this sake we take 100 data samples of 256-dimensional (16 x 16 pixels) pictures of handwritten digits of 2's and 5's. We embed a one-dimensional manifold, and show the high-dimensional data that is assigned to every 14th latent point, i.e., neighbored digits in the plot are neighbored in latent space. Figure [\ref=fig:7up] shows the result of the UNN 2-embedding for 2's and 5's with K = 10. We can observe that neighbored digits are similar to each other, while digits that are dissimilar are further away from each other in latent space.

DSRE Comparison

Last, we compare the DSRE achieved by both strategies with the initial DSRE, and the DSRE achieved by LLE on all test problems. For the USPS digits data set we choose the number 7. Table [\ref=tab:dsre] shows the experimental results of three settings for the neighborhood size K. The lowest DSRE on each problem is highlighted with bold figures. After application of the iterative strategies the DSRE is significantly lower than initially. Increasing K results in higher DSREs. With exception of LLE with K = 10 on 2D-S, the UNN 1 strategy always achieves the best results. UNN 1 achieves lower DSREs than UNN 2, with exception of 2D-S, and K = 10. The win in accuracy has to be paid with a constant runtime factor that may play an important role in case of large data sets, or high data space dimensions.

Conclusions

With UNN regression we have fitted a fast regression technique into the unsupervised setting for dimensionality reduction. The two iterative UNN strategies are efficient methods to embed high-dimensional data into fixed one-dimensional latent space taking O(N) time. The speedup is achieved by restricting the number of possible solutions (reduction of solution space), and applying fast iterative heuristics. Both methods turned out to be performant on test problems in first experimental analyses. UNN 1 achieves lower DSREs, but UNN 2 is slightly faster because of the multiplicative constants of UNN 1. Our future work will concentrate on the analysis of local optima the UNN strategies approximate, and how the approach can be extended to guarantee global optimal solutions. Furthermore, the UNN strategies can be extended to latent topologies with higher dimensionality. For q = 2 the insertion of intermediate solutions into a grid is more difficult: it results in shifting rows and columns of the grid, and thus changes the latent topology in parts that may not be desired. A simple stochastic search strategy can be employed that randomly swaps positions of latent points in the grid.