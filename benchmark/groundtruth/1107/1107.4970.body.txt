Drawing Graphs with Vertices at Specified Positions and Crossings at Large Angles

Introduction

In point-set-embeddability problems one is given not just a graph that is to be drawn, but also a set of points in the plane that specify where the vertices of the graph can be placed. The problem class was introduced by Gritzmann et al. [\cite=GritzmannMPP91] twenty years ago. They showed that any n-vertex outerplanar graph can be embedded on any set of n points in the plane (in general position) such that edges are represented by straight-line segments connecting the respective points and no two edge representations cross. Later on, the point-set-embeddability question was also raised for other drawing styles, for example, by Pach and Wenger [\cite=pw-epgfv-01] and by Kaufmann and Wiese [\cite=jgaa/KaufmannW02] for drawings with polygonal edges, so-called polyline drawings. In these and most other works, however, planarity of the output drawing was an essential requirement.

Recent experiments on the readability of drawings [\cite=HuangHE08] showed that polyline drawings with angles at edge crossings close to [formula] and a small number of bends per edge are just as readable as planar drawings. Motivated by these findings, Didimo et al. [\cite=DidimoEL09] recently defined RAC drawings where pairs of crossing edges must form a right angle and, more generally, αAC drawings (for [formula]) where the crossing angle must be at least α. As usual, edges may not overlap and may not go through vertices.

In this paper, we investigate the intersection of the two areas, point-set embeddability (PSE) and RAC/αAC. Specifically, we consider the following problems.

Problems RAC PSE and αAC PSE. Given an n-vertex graph G = (V,E) and a set S of n points in the plane, determine whether there exists a bijection μ between V and S, and a polyline drawing of G so that each vertex v is mapped to μ(v) and the drawing is RAC (or αAC). If such a drawing exists and the largest number of bends per edge in the drawing is b, we say that G admits a RACb (or an αACb) embedding on S.

If we insist on straight-line edges, the drawing is completely determined once we have fixed a bijection between vertex and point set. If we allow bends, however, PSE is also interesting with mapping, that is, if we are given a bijection μ between vertex and point set. We call an embedding using μ as the mapping μ-respecting. The maximum number of bends over all edges in a polyline drawing is the curve complexity of the drawing.

We now list three results that motivate the study of RAC and αAC point-set embeddings--even for planar graphs.

Rendl and Woeginger [\cite=RendlW93] have already considered a special case of the question we investigate in this paper, that is, the interplay between planarity and RAC in PSE. They showed that, given a set S of n points in the plane, one can test in O(n log n) time whether a perfect matching admits a RAC0 embedding on S. They required that edges are drawn as axis-aligned line segments. They also showed that if one additionally insists on planarity, the problem becomes NP-hard.

Pach and Wenger [\cite=pw-epgfv-01] showed for the polyline drawing scenario with mapping that, if one insists on planarity, Ω(n) bends per edge are sometimes necessary even for the class of paths and for points in convex position.

Cabello [\cite=Cabello06] proved that deciding whether a graph admits a planar straight-line embedding on a given point set is NP-hard even for 2-outerplanar graphs.

In this paper, we concentrate on RAC PSE. In order to measure the size of our drawings, we assume that the given point set S lies on a grid of size n  ×  n where n = |S|. We further assume that the points in S are in general position, that is, no two points lie on the same horizontal or vertical line. We call S an n  ×  n grid point set. We require that, in our output drawings, bends lie on grid points. We concentrate on two variants of the problem. We either restrict the edges, which are drawn as polygonal lines, to grid lines or we don't. We refer to the restricted version of the problem as restricted RAC/αAC PSE. We treat the restricted version in Section [\ref=sec:restrictedRAC] and the unrestricted version in Section [\ref=sec:unrestricted]. The graphs we study are always undirected.

Our results concerning restricted RAC and αAC PSE are as follows.

Every n-vertex binary tree admits a restricted RAC1 embedding on any n  ×  n grid point set (Theorem [\ref=theorem:bin_tree]). This is not known for the planar case--see our list of open problems in Section [\ref=sec:open]. We slightly extend this result to graphs of maximum degree 3 that arise when replacing the vertices of a binary tree by cycles. In the case of a single cycle, the statement even holds if the mapping is prescribed. This is not true in the planar case: take the 4-vertex cycle and the four points (2,2),(4,4),(1,1),(3,3), in this order.

Given a graph, a point set on the grid, and a mapping μ, we can test in linear time whether the graph admits a μ-respecting restricted RAC1 point-set embedding (Theorem [\ref=theorem:2_3_4_prop]). The same simple 2-SAT based test works in the planar case but of course fails more often.

Every n-vertex graph of maximum degree 3 admits a restricted RAC2 embedding on any n  ×  n grid point set even if the mapping is prescribed (Theorem [\ref=theorem:maxdeg3rrac2]). Given a matching with n vertices, a set of n points on the y-axis, and a mapping μ, we can compute, in O(n2) time, a μ-respecting restricted RAC2 embedding of minimum area (to the right of the y-axis, see Theorem [\ref=theorem:rac2-one-side-min-area]).

Concerning unrestricted RAC and αAC PSE, we show the following results which all hold even if the mapping is prescribed.

Every graph with n vertices and m edges admits a RAC3 embedding on any n  ×  n grid point set within area [formula] (Theorem [\ref=theorem:K_n]). To RAC draw arbitrary graphs, curve complexity 3 is needed--even without PSE [\cite=arikushietal2010]. In the planar case (with mapping), the curve complexity for PSE is Ω(n) [\cite=pw-epgfv-01].

For any ε  >  0, we get a (π / 2 - ε)AC2 drawing within area O(nm) (Theorem [\ref=theorem:LAC_2bends]). On a grid refined by a factor of O(1 / ε2), we get a (π / 2 - ε)AC1 drawing within area O(n2) (Theorem [\ref=theorem:LAC_1bend]), which is optimal [\cite=GiacomoDLM10]. In the planar case, it is NP-hard to decide the existence of a 1-bend point-set embedding--both with [\cite=gkossw-upg-09] and without [\cite=jgaa/KaufmannW02] prescribed mapping.

Related work.

Besides the above-mentioned work of Rendl and Woeginger [\cite=RendlW93], the study of PSE has primarily focussed on the planar case, in connection with the drawing conventions straight-line and polyline. A special case of the polyline drawings are Manhattan-geodesic drawings which require that the edges are drawn as monotone chains of axis-parallel line segments. This convention was recently introduced by Katz et al. [\cite=KatzKRW10]. They proved that Manhattan-geodesic PSE is NP-hard (even for subdivisions of cubic graphs). On the other hand, they provided an O(n log n) decision algorithm for the n-vertex cycle. They also showed that Manhattan-geodesic PSE with mapping is NP-hard even for perfect matchings--if edges are restricted to the grid.

Although RAC and αAC drawings have been introduced very recently, there is already a large body of literature on the problem. Regarding the area of RAC drawings, Didimo et al. [\cite=DidimoEL09] proved that an unrestricted RAC3 drawing of an n-vertex graph uses area [formula]. Di Giacomo et al. [\cite=GiacomoDLM10] showed that, for RAC4 drawings, area O(n3) suffices and that, for any ε > 0, every n-vertex graph admits a (π / 2 - ε)AC1 drawing within area Θ(n2). Our results for RAC3 and AC1 drawings (in Theorems [\ref=theorem:K_n] and [\ref=theorem:LAC_1bend]) match the ones cited here, in spite of the fact that vertex positions are prescribed in our case.

Restricted RAC Point-Set Embeddings

In this section, we study restricted RAC point-set embeddings. It is clear that only graphs with maximum degree 4 may admit a restricted RAC embedding on a point set. We start with the study of RAC1 drawings.

Restricted RAC1 point-set embeddings

The following result was independently achieved by Di Giacomo et al. [\cite=DiGiacomoFFGK11].

Every binary tree has a restricted RAC1 embedding on every n  ×  n grid point set.

Let S be an n  ×  n grid point set, let T be a binary tree rooted at an arbitrary vertex r, and let [formula] be a numbering of the vertices of T given by a breadth-first-search traversal starting from r, i.e., v1 = r. For [formula], let Ti be the subtree of T rooted at vertex vi.

Let p1 be the point in S such that the vertical line [formula] through p1 splits S1 = S according to T1 = T, that is, we split S1 into a set S2 of |T2| points on its left and a set S3 of |T3| points on its right; see Fig. . Then we recursively pick points p2 and p3 and lines [formula] and [formula] that partition S2 and S3 according to |T2| and |T3|. We continue until we arrive at the leaves of T. This process determines points [formula] and lines [formula] such that for [formula] point pi lies on [formula]. We simply map vertex vi to point pi for [formula].

Consider an index [formula]. Our mapping makes sure that one subtree of Ti is drawn on the left of [formula] and the other on the right of [formula]. Let vj and vj + 1 be the children of vi. We draw the edges (vi,vj) and (vi,vj + 1) such that their horizontal segments are both incident to vi, see Fig. .

The resulting drawing is clearly a RAC drawing since all edges are restricted to the grid. Since S is in general position, no two edges can overlap except if they are incident to the same vertex. If we direct the edges of T away from the root, then, by our drawing rule, in any vertex vi of T the incoming edge arrives in pi with a vertical segment and the outgoing edges leave pi with horizontal segments in opposite directions.

We can, of course, also find a restricted RAC1 embedding for paths as special binary trees. Actually, we can embed every n-vertex path or cycle on any n  ×  n grid point set, even with mapping: we simply leave each point horizontally and enter the next one vertically in the order prescribed by the mapping.

It would, of course, be nice to generalize these embeddability results for binary trees and cycles (without given mapping) to larger classes of graphs, e.g., outerplanar graphs of maximum degree 3. This seems, however, to be quite difficult. A class of graphs that we can embed are maxdeg-3 cactus graphs that are constructed from binary trees by replacing vertices by cycles.

We can embed graphs of this type on any n  ×  n grid point set by adjusting the embedding algorithm for binary trees. The basic idea is to treat each cycle similarly to a single tree vertex. We do this by reserving the adequate number of consecutive columns for the vertices of the cycle in the middle of the drawing area for the current subtree. We connect the cycle to the left subtree by leaving the leftmost reserved point to the left. We deal with the right subtree symmetrically. One of the points reserved for the cycle--say, z--must be connected to the parent vertex (or cycle). The difficulty is to make a cycle from the reserved points in such a way that z can be entered vertically from its parent, which has been embedded before. This is possible but the proof is technical, and, hence, left for the appendix. Summing up, we get the following result.

Let G be an n-vertex graph of maximum degree 3 that arises when replacing the vertices of a binary tree by cycles and let S be an n  ×  n grid point set. Then G admits a restricted RAC1 embedding on S.

In the proofs of the previous theorems we exploited the fact that we could choose the vertex-point mapping as needed. Figure [\ref=fig:counterexample] shows a 6-vertex binary tree that does not have a restricted RAC1 drawing on the given point set if the vertex-point mapping is fixed as indicated by the edges. Hence, we turn to the corresponding decision problem. We characterize situations when a restricted RAC1 point-set embedding with mapping exists.

Let G be an n-vertex graph of maximum degree 4, let S be an n  ×  n grid point set, and let μ be a vertex-point mapping. We can test in O(n) time whether G admits a μ-respecting restricted RAC1 embedding on S and, if yes, construct such an embedding within the same time bound.

We use a 2-SAT encoding to solve the problem. A similar approach was used by Raghavan et al. [\cite=RaghavanCS86] to deal with the planar case. We associate each edge uv of G with a Boolean variable xuv. The two possible drawings of edge uv correspond to the two literals xuv and [formula]. Due to the fact that S is in general position, only drawings of edges incident to the same vertex can possibly overlap.

Now we construct a 2-SAT formula φ as follows. Consider a pair of drawings of edges uv and uw that overlap. Assume that xuv and [formula] are the literals corresponding to the two edge drawings. Then we add the clause [formula] to φ.

It is clear that φ is satisfiable if and only if G has a μ-respecting RAC1 embedding on S without overlapping edges. Recall that the maximum degree of G is 4. Hence, φ contains at most [formula] clauses. Since the satisfiability of a 2-SAT formula can be decided in time linear in the number of clauses [\cite=ets-ctmfp-76], the testing can be done in O(n) time.

Restricted RAC2 point-set embeddings

As in the previous subsection, it is clear that only graphs of maximum degree 4 can be drawn with the grid restriction. Consider, for a moment, a specialized restricted RAC2 drawing convention that requires the first and the last (of the three) segments of an edge to go in the same direction--a bracket drawing. If we do not restrict the drawing area, then the problem of bracket embedding a graph G on an n  ×  n grid point set is equivalent to 4-edge coloring G. The idea is that the four colors encode the direction of the first and last edge segment (going up, down, left, or right) and that the second edge segment is drawn sufficiently far away. The edge coloring makes sure that no two edges incident to the same vertex overlap. It is known that any graph of maximum degree 3 is 4-edge colorable and that such a coloring can be found in linear time [\cite=skulrattanakulchai20024]. Let us summarize.

Every graph G of maximum degree 3 admits a restricted RAC2 embedding on any n  ×  n grid point set with any vertex-point mapping.

Note that there are graphs of maximum degree 4 that do not admit a 4-edge coloring, but do admit a restricted RAC2 embedding at least for some grid point sets (see Figure [\ref=fig:k5_drawing_rac2] in the appendix for such an embedding of K5).

Now we turn to the problem of minimizing the drawing area. Observe that there are examples of a graph G, a grid point set S, and a mapping μ such that G does not admit a restricted RAC2 point-set embedding on S with mapping μ if we insist that the drawing lies within the bounding box of S, see Fig. [\ref=fig:rrac2-counterexample].

We conjecture that restricted RAC2 PSE is NP-hard. Therefore, we consider the special case where S is one-dimensional. More precisely, we are looking for a one-page RAC2 book embedding with given mapping. Recall that, generally, a k-page book embedding asks for a mapping of the vertices to points on a line, the spine of the book, and a mapping of the edges to the pages of the book (that is, half-planes incident to the spine) such that, for each page, the edges on that page can be drawn without crossings.

Clearly, in this setting, each vertex can only have degree 1, hence the given graph must be a (perfect) matching. Given these restrictions, we can minimize the area of the drawing.

Let S be a set of n points on the y-axis, let G be a matching consisting of n / 2 edges, and let μ be a vertex-point mapping. A minimum-area μ-respecting restricted RAC2 drawing of G to the right of the y-axis can be computed in O(n2) time.

If S contains pairs of neighboring points that correspond to edges of the given matching, we connect each of them by a (vertical) straight-line segment. To draw any of the remaining edges of the matching in a restricted RAC2 fashion, we must connect its endpoints by two horizontal segments leaving the y-axis to the right and a vertical segment that joins the horizontal segments. As G is a matching, only vertical segments can overlap. In order to minimize the drawing area, we, thus, have to minimize the number of vertical lines, the layers, needed to draw the vertical segments of all edges without overlap.

Let G'  =  (V',E') with V'  =  E and an edge connecting each pair of edges of G that cannot use the same layer. Clearly, assigning the edges of G to the minimum number of layers is the same as coloring the vertices of G' with the minimum number χ' of colors.

Graph G' is an interval graph: for edge uv of G--a vertex of G'--the interval is

[formula]

If we are not given a prescribed mapping, then the problem becomes easy for all graphs of maximum degree 2. We simply draw the connected components of G, which are paths or cycles, one after the other using the points in S from top to bottom. This can be done using only the y-axis for paths and using only one column right of the y-axis for cycles.

If we abandon the restriction to draw edges on the grid and relax the constraint on the crossing angle, we can find, for any graph, an αAC2 embedding on any point set on the y-axis with an arbitrary mapping, see the comment after the proof of Theorem [\ref=theorem:LAC_2bends].

Unrestricted RAC and αAC Point-Set Embeddings

Didimo et al. [\cite=DidimoEL09] have shown that any graph with n vertices and m edges admits a RAC3-drawing within area O(m2). Their proof uses an algorithm of Papakostas and Tollis [\cite=PapakostasT00] for drawing graphs such that each vertex is represented by an axis-aligned rectangle and each edge by an L-shape, that is, an axis-aligned 1-bend polyline. Didimo et al. turn such a drawing into a RAC3-drawing by replacing each rectangle with a point. In order to make the edges terminate at these points, they add at most two bends per edge. We now show how to compute a RAC3-drawing of the same size (assuming n∈O(m))--although we are restricted to the given point set.

Note that curve complexity 3 is actually necessary for RAC drawing arbitrary graphs--even without a prescribed point set: Arikushi et al. [\cite=arikushietal2010] showed that RAC2 drawings only exist for graphs with a linear number of edges.

Let G be a graph with n vertices and m edges and let S be an n  ×  n grid point set. Then G admits a RAC3-drawing on S (with or without given vertex-point mapping) within area [formula].

If the vertex-point mapping μ is not given, let μ be an arbitrary mapping. Let [formula] be an ordering of V so that pi: = μ(vi) has x-coordinate i. We construct a RAC3-drawing as follows. Each edge has--after insertion of "virtual" bends--exactly three bends and four straight-line segments. We ensure that intersections involve only the "middle" segments of edges, and that these middle segments have only slope + 1 or - 1.

For an edge uv, we call the bend directly connected to u a u-bend, the bend directly connected to v a v-bend, and the remaining bend the middle bend. We start constructing the drawing by placing the v-bends for each vertex v, starting with vn. We set the y-coordinate yn of the first vn-bend to 0. Then, for [formula], observe that there are exactly deg vi many vi-bends, which we place in column i + 1 starting at y-coordinate yi below the n  ×  n grid using positions [formula], see Figure [\ref=fig:rac3-construction]. We connect each vertex with its associated bends without introducing any intersection since we stay inside the area between columns i and i + 1. We set yi - 1  =  yi  -  2  ·  ( deg vi  -  1)  -  3. If vi has degree 0, we do not place bends but set yj - 1  =  yj  -  3 to avoid overlaps and crossings. Then we continue with vi - 1.

Since we place the bends from right to left and from top to bottom by moving our "pointer" by L1- (or Manhattan) distances 2 or 4, each pair of these bends has even Manhattan distance. To draw an edge uv, we first select a "free" u-bend position and a free v-bend position. For the two middle segments, we use slopes + 1 and - 1 such that the middle bend is to the right of the u- and v-bend. Since u- and v-bend have even Manhattan distance, the middle bend has integer coordinates.

Let u and v be two vertices with u-bend bu and v-bend bv, respectively. The segments [formula] and [formula] cannot intersect; we want to see that the middle segment starting at bu also cannot intersect [formula]. Such an intersection can only occur if u lies to the left of v. By our construction, bv lies, in this case, above bu with a y-distance that is greater than their x-distance. As all middle segments have a slope of at most + 1, bv lies above the relevant middle segment, which can, hence, not intersect [formula].

It remains to show the space limitation. Clearly, the drawing of any edge requires not more horizontal than vertical space. On the other hand, for any vertex v, we need at most 2  ·   deg v  +  3 rows below the grid, resulting in a total vertical space requirement of O(n + m). This completes the proof.

In the remainder of this section we focus on αAC point-set embeddings. We show that both area and curve complexity can be significantly improved if we soften the restriction on the crossing angles. Our results hold for both scenarios, with and without vertex-point mapping.

Let G be a graph with n vertices and m edges, let S be a n  ×  n grid point set, and let [formula]. Then G admits a [formula]AC2 embedding on S (with or without given vertex-point mapping) within area O(n(m  +   cot ε))  =  O(n(m  +  1 / ε2)).

If the vertex-point mapping μ is not given, let μ be arbitrary. Let [formula] be an ordering of V so that pi: = μ(vi) has x-coordinate i. Each edge e  =  uv has exactly two bends, a u-bend and a v-bend (with the obvious meanings). For [formula], we place all vi-bends in column i + 1. We make all middle segments of edges horizontal. Thus, the bends for an edge e  =  vivj are at positions (i + 1,y) and (j + 1,y) in some row y  <  0 below the original grid, see Figure [\ref=fig:lac2-construction]. By using a dedicated row for each edge, we achieve that no two middle segments intersect. By construction, no two first or last edge segments intersect. Hence, crossings occur only between the horizontal middle segments and first or last segments. By making the y-coordinates of the middle segments small enough, we will achieve that all crossing angles are at least π / 2  -  ε.

Let [formula] be the set of edges of G, and let uv: = ek be one of these edges. We set the y-coordinates of the middle segment of ek to -  k  -  ⌈ cot ε⌉. Let ek' be an edge whose horizontal segment intersects the first segment of ek. The crossing angle is π / 2  -  δ, where δ is the angle between the vertical line through the u-bend and the first segment of uv, see Figure [\ref=fig:lac2-angle]. We have δ  ≤   arccot (k  +  ⌈ cot ε⌉)  ≤  ε. Thus, the crossing angle is at least π / 2  -  ε. Note that cot ε∈O(1 / ε2).

We used only the fact that no two points lie in the same column. Hence, the statement of the theorem does not change if we allow the points to lie on a single horizontal (or, by rotation, vertical) line as in Section [\ref=sec:rac2-embeddings].

In Theorem [\ref=theorem:LAC_2bends], we required the bends to lie on points of the given grid. The following result shows that we need only one bend per edge if we allow the bends to lie on points of a refined grid. For fixed ε > 0, our new drawings need less area than those of Theorem [\ref=theorem:LAC_2bends]; even in terms of the refined grid.

Let G be a graph with n vertices, let S be an n  ×  n grid point set, and let [formula]. Then G admits a [formula]AC1 embedding on S (with or without given vertex-point mapping) on a grid that is finer than the original grid by a factor of λ∈O( cot ε)  =  O(1 / ε2).

If the mapping μ is not given, let μ be an arbitrary mapping. The idea of our construction is as follows. For each edge, we first choose one of the two possible drawings on the grid lines with one bend. This gives us a drawing of the graph with many overlaps of edges. Then, we slightly twist each edge such that its horizontal segment becomes almost horizontal, meaning it gets a negative slope close to 0. At the same time, we make the vertical segment almost vertical, meaning it gets a very large positive slope, see Figure [\ref=fig:K_4-LAC_1].

As we want all bends to be on grid points, we first refine the grid by an integral factor of λ  =  ⌈1  +   cot ε⌉. We do this by inserting, at equal distances, λ - 1 new rows or columns between two consecutive grid rows or columns, respectively. Now, a point s = (a,b)∈S lies at (λa,λb) w.r.t. the new λn  ×  λn grid.

Let e be an edge and let (ex,ey) be the original position of the bend of e w.r.t. the new grid. We choose the new position of the bend to be the unique grid point diagonally next to (ex,ey) such that the horizontal and vertical segments of e become almost horizontal and almost vertical, respectively. If we apply this construction to all edges, we get a drawing in which none of the almost horizontal and almost vertical segments belonging to some vertex v can overlap. Moreover, two almost horizontal or two almost vertical segments belonging to different vertices neither overlap nor intersect due to S being in general position. Thus, each crossing involves an almost horizontal and an almost vertical segment.

Let e1 and e2 be two crossing edges such that the almost horizontal segment involved in the crossing belongs to e1. We can assume that the smaller angle of the crossing occurs to the top left of the crossing; the other case is symmetric by a rotation of the plane. Let δ- be the angle formed by the almost horizontal segment of e1 and a horizontal line, and let δ+ be the angle formed by the almost vertical segment of e1 and a vertical line, see Figure [\ref=fig:lac1-angle]. Then the crossing angle of e1 and e2 is α  =  π / 2  -  δ-  +  δ+  ≥  π / 2  -  δ-. For δ- to be maximal, the horizontal length l of the almost horizontal segment has to be minimal. As this length cannot be less than λ - 1, we get δ+  ≤   arccot (λ - 1)  ≤  ε. Hence, the crossing angle α is at least π / 2  -  ε.

Note that we leave the original grid by at most one row or column of the refined grid in each direction. Hence, the area requirement is O((n  ·   cot ε)2) in terms of the finer grid. We argue that our area bounds are quite reasonable: for a minimum crossing angle of [formula], the drawings provided by Theorems [\ref=theorem:LAC_2bends] and [\ref=theorem:LAC_1bend] use grids of sizes at most n(m + 3) and (3n)2, respectively.

Open Problems

In this paper, we have opened an interesting new area: the intersection of point-set embeddability and drawings with crossings at large angles. We have done a few first steps, but we leave open a large number of questions. We start with the restricted case where vertices, bends, and edges must lie on the grid.

Does every n-node binary tree have a restricted planar 1-bend embedding on any n  ×  n grid point set?

Does every n-node ternary tree have a restricted RAC1 embedding on any n  ×  n grid point set?

What about outerplanar graphs?

Can we efficiently test whether a given graph has a restricted RAC1 embedding on a given n  ×  n grid point set?

What about RAC2?

Recall that in the unrestricted case we don't require edges to lie on the grid.

Can we efficiently test whether a given graph has a RAC2 embedding on a given n  ×  n grid point set? If yes, can we minimize its area?

Di Giacomo et al. [\cite=GiacomoDLM10] have shown that any graph with n vertices and m edges admits a RAC4-drawing that uses area O(n3). Can we achieve the same in our PSE setting?

Acknowledgments. We thank Beppe Liotta for suggesting the idea behind Theorem [\ref=theorem:LAC_1bend] to us.

Let G be an n-vertex graph of maximum degree 3 that arises when replacing the vertices of a binary tree by cycles and let S be an n  ×  n grid point set. Then G admits a restricted RAC1 embedding on S.

We adjust the embedding algorithm for binary trees to work with the new graph class. The basic idea is to treat each cycle similar to a single vertex of a binary tree. We do this by reserving the adequate number of consecutive columns for the nodes of the cycle in the middle of the drawing area for the current subtree when splitting into the drawing areas for the subtrees. The subtrees are connected to the cycle by leaving one point to the right, and one point to the left, respectively. The most difficult part is to connect the reserved nodes to a cycle in such a way that the point representing the vertex that is the connector to the parent vertex (or cycle, respectively), which was embedded before, can be connected by entering the node with a vertical segment such that the connections to the left and the right are possible.

Let C with k: = |C|  ≥  3 be the cycle representing the root of the current subtree with vertices u and v connecting the cycle to the roots rl and rr of its left and right subtrees, respectively, and a vertex z connecting C to its parent r. Let [formula] be the set of points reserved for C in consecutive columns ordered from left to right. The edge connecting C to the left and right subtree enter the points representing u and v from left and right, respectively, while the edge connecting z to r enters z from above or below, depending on the y-coordinate of the point chosen to represent z. Let yr be the y-coordinate of r. We analyze the different cases.

Vertex z has a neighbor w  ≠  u,v in C and k  ≥  5:

Set μ(u)  =  p1 and μ(v)  =  pk. Either above or below the line y  =  yr we find two points [formula]. Let p be the one closer to the line y  =  yr. We set μ(p)  =  z,μ(p')  =  w and draw the edge wz such that p is entered vertically. Then we can complete the cycle such that each point is incident to a horizontal and a vertical segment, see Figure [\ref=fig:cactusbintree_case1]. It is easy to see that the connections to r,rl and rr can now be drawn without overlap.

Vertex z has a neighbor w  ≠  u,v in C and k  =  4:

Let [formula] the other case being symmetric. If p2 and p3 both lie either below or above y  =  yr we can proceed as in case [\ref=case:many_vertices]. If p2 lies above r and p3 below we have two subcases depending on where p4 is:

p4 lies above p3: We can draw C as shown in Figure [\ref=fig:cactusbintree_case21].

p4 lies below p3: We can draw C as shown in Figure [\ref=fig:cactusbintree_case22].

If p3 is above r and p2 below the cases are symmetric.

The two neighbors of z are u and v. If there is one point [formula] that is vertically between p1 and pk, then we set μ(u)  =  p1,μ(v)  =  pk and μ(z)  =  p and draw C as in Figure [\ref=fig:cactusbintree_case31], where the second path connecting u and v can be drawn by having a vertical and a horizontal segment incident to each point.

In the remaining cases, there is no such point vertically between p1 and pk.

If k  ≥  5 we find, similar to case [\ref=case:many_vertices], two points [formula] both below or above r such that p is the one closer to the line y  =  yr. Again we set μ(z)  =  p; if p' is left of p we set μ(u)  =  p' and μ(v)  =  pk, see Figure [\ref=fig:cactusbintree_case32], and otherwise we symmetrically set μ(v)  =  p' and μ(u)  =  p1. Now we can draw the cycle without overlap such that each point is incident to a vertical and a horizontal segment.

If k = 4, we have C  =  (u,z,v,w). If p2 and p3 lie both above or below r we can proceed as in the previous case. Otherwise we know that both points are on different sides of y  =  yr, and that p1 and p4 are both vertically between, below, or above p2 and p3. In the first case, we set μ(u)  =  p1,μ(v)  =  p4,μ(z)  =  p2 and μ(w)  =  p3 and create the drawing of C as in Figure [\ref=fig:cactusbintree_case33]. As above and below are symmetric, the other two cases can be handled as shown in Figure [\ref=fig:cactusbintree_case3extra].

Finally, if k  =  3, we set μ(u)  =  p1,μ(v)  =  p3 and μ(z)  =  p2, and simply draw as shown in Figure [\ref=fig:cactusbintree_case34].