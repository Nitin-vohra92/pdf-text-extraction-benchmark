Lema Proposici�n Corolario Lemma Proposition Corollary

Definici�n Ejemplo Algoritmo Definition Example Algorithm

Nota Remark

Formulating problems for real algebraic geometry

Introduction

We will discuss the effect problem formulation can have on the use of symbolic algorithms for real algebraic geometry. This follows our recent work on cylindrical algebraic decomposition, one of the most important algorithms in this field. We discuss the issue of variable ordering, well known to play a key role, but also survey a number of other issues that are now pertinent.

Let [formula] and φ be some quantifier-free formula. Then given

[formula]

quantifier elimination (QE) is the problem of producing [formula], a quantifier-free formulae equivalent to Φ. In the case k = 0 we have a decision problem: is Φ true? Tarski proved that QE is always possible for semi-algebraic formulae (polynomials and inequalities) over [formula] [\cite=Tarski98]. The complexity of Tarski's method is indescribable as a finite tower of exponentials and so when Collins gave an alternative with cylindrical algebraic decomposition (CAD) [\cite=Collins1975] it was a major breakthrough despite complexity doubly exponential in the number of variables. CAD implementations remain the best option for many classes of problems.

Collins' CAD algorithm works in two stages. First projection calculates sets of projection polynomials Si in variables [formula] by applying an operator recursively starting with the polynomials from φ. Then in the lifting stage decompositions of real space in increasing dimensions are formed from the roots of those polynomials. First, the real line is decomposed according to the roots of the univariate polynomials. Then over each cell c in that decomposition the bivariate polynomials are taken at a sample point and a decomposition of [formula] is produced according to their roots. Taking the union gives the decomposition of [formula] and we proceed this way to a decomposition of [formula]. The decompositions are cylindrical (projections of any two cells onto the first k coordinates are either identical or disjoint) and each cell is a semi-algebraic set (described by polynomial relations).

Collins' original algorithm uses a projection operator which guarantees CADs of [formula] on which the polynomials in φ have constant sign, and thus Φ constant truth value, on each cell. Hence only a sample point from each cell needs to be tested and the equivalent quantifier free formula ψ can be generated from the semi-algebraic sets defining the cells in the CAD of [formula] for which Φ is true. There have been numerous improvements, optimisations and extensions of CAD since Collins' work (with a summary of the first 20 years given in [\cite=Collins1998]).

Variable ordering

When using CAD for QE we must project quantified variables first, but we are free to project the other variables in any order (and to change the order within quantifier blocks). The variable ordering used can make a big difference. For example, let f: = (x - 1)(y2 + 1) - 1 and consider the two minimal CADs visualised below. In each case we project down with the left figure projecting x first and the right y. In this case we see that wrong choice more than doubles the number of cells. Of course, this is just a toy example, but [\cite=BD07] defined a class of examples where changing variable ordering would change the number of cells required from constant to doubly exponential in the number of variables.

Various heuristics exist to help choose a good variable ordering:

Other questions of input formulation

A key improvement to CAD is the development of projection operators that guarantee only truth invariance of φ, rather than sign-invariance of the polynomials within. This is achieved by considering the logical structure of φ, but brings in sensitivity to such structure.

Experimental results in [\cite=BDEMW13] suggested the heuristics above can also help with these questions, but when the issues are combined the number of possibilities can become overwhelming. Further, there are additional issues where the existing heuristics are of no help.

Formulating problems, preprocessing and algorithm choice

Finally, we remark on some related issues which have come to light recently.

Conclusions

We have summarised issues of problem formulation which can dramatically affect the performance of CAD. In some cases heuristics have been developed to help, but there is still much work to be done in making these practical and in extending them to the currently unanswered questions. It is likely that much of what is learned here could be used throughout QE, or more generally for symbolic algebraic geometry.