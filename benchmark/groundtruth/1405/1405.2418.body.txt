=1

Introduction

This work has been inspired by problems addressed in the field of computer security, where the attacking of, e.g., password systems is an important issue. In a brute-force attack the password, for instance, can be broken in a worst-case time proportional to the size of the search space and on average a time half of that. However, if it is assumed that some words are more probable than others, the words can be ordered in the search space in decreasing order of probability. The number of guesses can then be drastically reduced. Properties of the average number of successive guesses have been discussed in detail by Pliam [\cite=Pliam98], who introduces the word guesswork to denote this quantity. Further, Lundin et al. [\cite=Lundin06] discuss confidentiality measures related to guesswork.

As will be demonstrated below the calculation of the guesswork may require a substantial amount of computational efforts, especially if the search space is large. Therefore lower bounds, which are easy to calculate, have been provided by several authors, e.g., Arikan [\cite=Arikan96] and Massey [\cite=Massey94]. Lower and upper bounds are provided by Pliam [\cite=Pliam98], but they involve similar calculations as those needed for the guesswork itself and may therefore be of less practical use.

In this paper numerical approaches are suggested for evaluating the average number of successive guesses (guesswork) required for correctly guessing a word from a given language. The guessing strategy used is guessing words in decreasing order of probability. This is a continuation of investigations presented elsewhere [\cite=Andersson12]. In Section [\ref=lang] the languages used in this paper are presented together with the corresponding expressions for the guesswork and entropy. The reason for considering entropy here depends on the prevalent use of entropy instead of guesswork in applications due to its simpler determination. In Section [\ref=numEval] approximate numerical estimations of guesswork are discussed and in Section [\ref=res] the results for some probability distributions are given. Finally, in Section [\ref=conclusion] the conclusions of the investigations presented in the paper are summarized.

Languages

A language is a set of strings and a string is a finite sequence of symbols from a given alphabet. Consider a stochastic variable X belonging to a state space [formula], where the probability distribution is given by pX(x)  =  Pr(X = x). Introduce the short-hand notation pi  =  pX(xi), where [formula]. In the following the state space X and its size n are considered as an alphabet with a certain number of symbols. Words are formed by combining symbols to strings. From n symbols it is possible to form nm different words of length m. Shannon introduced various orders of approximations to a natural language, where the zero-order approximation is obtained by choosing all letters independently and with the same probability. In the first-order approximation the complexity is increased by choosing the letters according to their probability of occurrence in the natural language. In zero- and first-order approximation the strings thus consist of independent and identically-distributed (iid) random variables. For higher-order approximations the variables are no longer independent [\cite=Shannon48].

Zero-order Approximation

In a zero-order approximation all symbols in the alphabet (of size n) have the same probability of occurrence ([formula]). The average number of guesses G0 required to correctly guess a word of length m is given by

[formula]

where [formula]. The entropy H0 of a word of length m is given by [\cite=Shannon48]

[formula]

where H0(X1) =  log bn and b is the base of the logarithm used. The average number of guesses grows exponentially with the size of the word, while the entropy grows linearly with the size of the word. This is in accordance with the definition of entropy, since it should be an extensive property growing linearly with the size of the system.

In a zero-order approximation the relation between guesswork and entropy is [formula]. This relationship between guesswork and entropy is true in zero-order approximation, but not necessarily so using higher-order approximations, which has been demonstrated by several authors (see, e.g., [\cite=Pliam98] and [\cite=Malone05]). These authors strongly argue against the use of entropy in the estimation of the number of required guesses.

First-order Approximation

In a first-order approximation the symbols in the alphabet (of size n) do not necessarily have the same probability of occurrence. Assume the symbols are ordered in decreasing order of probability ([formula]). In first order the symbols in a word are considered as stochastically independent and then the most probable word (of a given length) would consist of only x1. The most improbable word, on the other hand, would consist of only xn. The average number of guesses G1 required for making the correct guess of a word of length m is given by the summation:

[formula]

where the function [formula] represents the number of guesses, one guess for the most probable word, two guesses for the second most probable word and nm guesses for the most improbable word, etc. The entropy H1 of a word of length m is given by [\cite=Shannon48]

[formula]

where b is the base of the logarithm used. The calculation of Equation [\ref=gw1] is more complicated than Equation [\ref=e1] since it requires that the products of probabilities ([formula]) are sorted in decreasing order. Such a procedure can be realized only for a moderate size of nm due to both storage and CPU time requirements. For larger values of nm approximate methods have to be used in order to get an estimate of the summation. Lower bounds of the guesswork, that are easy to calculate, have been provided by Massey [\cite=Massey94] and Arikan [\cite=Arikan96]. Massey demonstrates that

[formula]

and Arikan that

[formula]

In Figure [\ref=comp] the exact value of the guesswork for correctly guessing a word of size m  <  6 using an alphabet of size 10 (with the randomly chosen probability distribution given in the figure) is displayed. The lower bounds provided by Equations [\ref=gwMas] and [\ref=gwAri] are given for word sizes m  ≤  20. For comparison, the exponential entropy expression

[formula]

which is identical to guesswork in zero order, is given for word sizes m  ≤  20. For word sizes m  <  6 Equation [\ref=gwEnt] clearly overstimates the exact value of the guesswork. In fact Pliam has shown that it is possible to construct probability distributions that make guesswork differ arbitrariliy much from Equation [\ref=gwEnt] [\cite=Pliam98]. In Section [\ref=numEval] approximate numerical evaluations of guesswork are discussed.

Second-order Approximation

In a second-order approximation the variables are no longer independent. Consider two jointly distributed stochastic variables X,Y∈X, then the conditional probability distribution of Y given X is given by pY(y|X = x)  =  Pr(Y = y|X = x). Introduce the short-hand notation Pij  =  pY(xj|X = xi), the probability that symbol xj follows symbol xi. P is an n  ×  n matrix, where n is the size of the alphabet and the sum of the elements in each row is one. The probability of occurrence of each symbol in the alphabet, pi, can easily be obtained from matrix P using the two equations (PT  -  I)p  =  0 and |p|  =  1, where p is a vector of length n with elements pi.

The guesswork G2, i.e., the average number of guesses required for making the correct guess of a word of length m using an alphabet of size n is given by

[formula]

where the function [formula] is the same as the one in Equation [\ref=gw1]. The entropy H2 of a word of length m is given by [\cite=Cover06]

[formula]

where b is the base of the logarithm used. In Section [\ref=res] the value of Equation [\ref=gw2] will be compared to the value of Equation [\ref=gwEnt] (with H1 replaced by H2) for a given probability distribution.

Numerical Evaluation of Guesswork

In this section a number of approaches will be given in order to evaluate the guesswork.

Quantification

One simple procedure for numerically estimating Equation [\ref=gw1] and in addition reducing the storage requirements is to split the range [formula] into N equal pieces of size [formula], where a larger value of N gives a better estimate. The range [formula] will consequently be split into m  ·  N equal pieces of size Δ. Instead of sorting the products [formula] they simply have to be evaluated and brought into one of the m  ·  N subranges. When the number of products in each subrange has been determined an estimate of Equation [\ref=gw1] can be made, giving

[formula]

where cj is the number of probability products in subrange j, [formula] and log (P- 1j) is the middle value of subrange j. By instead using the boundary values of the subranges, lower and upper bounds of the numerically estimated guesswork can be given as

[formula]

where Q1  =  (p1 / pn)1 / 2N. Here the short-hand notation Q1 is used instead of the more correct notation [formula] in order to increase the transparency of Equation [\ref=errQ1].

By introducing the density of products di  =  ci / (Δnm) the summations in Equation [\ref=gw1Approx] can be replaced by integrals for large values of N, giving

[formula]

Equation [\ref=gw1Approx2] will be of importance in Section [\ref=norm], where a normal distribution approximation of the density of products is discussed.

The method of quantification can be used in both first- and second-order approximation. However, since it is less obvious in second order which is the smallest and largest value of the product of probabilities [formula] a lower bound of min (pi)  ·   min (Pij)m - 1 and an upper bound of max (pi)  ·   max (Pij)m - 1 can be used instead to determine the range of possible values. When determining min (Pij) only non-zero values are considered. In second order a similar expression as the one in Equation [\ref=errQ1] can be used for estimating the guesswork, namely

[formula]

where [formula] and GQ2 is given by Equation [\ref=gw1Approx] using the values given above as interval limits for probability products. Here the short-hand notation Q2 is used instead of the more correct notation [formula] in order to increase the transparency of Equation [\ref=errQ2].

Random selection

The storage and CPU time requirements using the strategy in Section [\ref=quant] for calculating the guesswork are of O(m  ·  N) and O(m  ·  nm), respectively. One simple modification for decreasing the time requirements is to reduce the number of probability products formed. Instead of calculating all nm different products a smaller number of randomly chosen probability products is used and brought into the m  ·  N subranges. The smaller number has been determined to be proportional to m, i.e., equal to m  ·  S, where S is a parameter whose value has to be chosen. After normalization, where the number of products in each subrange is multiplied by the factor nm / (m  ·  S), the strategy is identical to the one in Section [\ref=quant].

By not using all nm different probability products another error is introduced. This error can be estimated by repeating the random selection calculations a number of times (given by T). Through these calculations an average value (GRi) and a standard deviation (sRi) can be estimated (where i = 1 or 2). A 99 % confidence interval for GQi is then given as

[formula]

where [formula] and λ0.01 / 2 = 2.58 (the quantile function of the normal distribution) [\cite=Box05]. In Equation [\ref=errR] all parameters have been excluded in order to increase the transparency of the equation.

Normal distribution

Another interesting approach is given by the central limit theorem in probability theory, which roughly states that the mean of a large number of independent stochastic variables is approximately normally distributed. In Figure [\ref=dens] the density of the logarithm of products of probabilities for the randomized probability distribution given in Figure [\ref=comp] is displayed. The density fits nicely to a normal distribution, with a better fit for larger values of m (the number of independent stochastic variables). As expected the average value is proportional to m and the standard deviation to [formula]. Denote the proportionality constants as μ1 and σ1, respectively.

For large values of n and m and for most probability distributions [formula] it can be assumed (according to the central limit theorem) that the logarithm of products of probabilities will be normally distributed. The parameters of the normal distribution (the average value and the standard deviation) can be estimated from a sample of a small number of random products of probabilities (considerably smaller than required in the method described in Section [\ref=rand]). The normal distribution is used to estimate the number of probability products in each subrange, otherwise the strategy is identical to the one in Section [\ref=quant]. When approximating the density of logarithms of products by a normal distribution

[formula]

where μ is the average value and σ the standard deviation, Equation [\ref=gw1Approx2] can be expressed as

[formula]

where base e has been adopted. The factor e- x (representing a product of pobabilities) in Equation [\ref=gw1Approx2] cause a left shift of the normal distribution. This requires that also the tails of the normal distribution are accurate in order for this approximation to be valid. To make an error estimate for this kind of approximation is hard. However, if the density of logarithm of probability products resembles a normal distribution also at its tails then an error estimate similar to Equation [\ref=errR] can be made. Further, the distance between the peaks of the two normal distributions in Equation [\ref=gw1Approx3] is increasing for increasing values of m resulting in decreasing values of the integral. In fact it can be shown that Equation [\ref=gw1Approx3] can be further approximated as

[formula]

for large values of m. In Figure [\ref=gw1normal] a comparison of Equations [\ref=gw1Approx] (with both the true and a normal distribution), [\ref=gw1Approx3] and [\ref=gw1Approx4] is given. The three expressions with a normal distribution give the same value except for small values of m. The expression with the true distribution resembles the others for moderate values of m. For m > 30, however, they start to deviate (see Section [\ref=res1]).

By using an asymptotic expansion of the error function it can be shown that the leading term of Equation [\ref=gw1Approx4] is

[formula]

if [formula]. Thus the leading term is of the form nm  ·  A  ·  Bm  ·  m- 1 / 2, where A and B are constants for the given probability distribution. The result of fitting the data from Equation [\ref=gw1Approx] (using a normal distribution) to such an expression is displayed in Figure [\ref=gw1normal]. The results will be further discussed in the following section.

Results

In this section two probability distributions will be discussed. First, the distribution given in Figure [\ref=comp] is investigated in more detail in Section [\ref=res1] and second, the English language is considered in Section [\ref=res2].

Random probability distribution

In Figure [\ref=comp] the average number of guesses required for correctly guessing a word of size m using an alphabet of size 10 is given using various techniques. First, the exact solution is given (for m  <  6). Second, three approximate solutions (as discussed in Section [\ref=numEval]) are given (quantification using all probability products could be performed within reasonable time limits only for m  <  11). Third, an estimate based on entropy (Equation [\ref=gwEnt]) is provided. Fourth, lower bounds derived by Massey (Equation [\ref=gwMas]) and Arikan (Equation [\ref=gwAri]) are included.

As is illustrated in Figure [\ref=comp] the approximate techniques of quantification and random selection may provide accurate estimates of guesswork (with reasonable amount of storage and CPU time). The third approximate technique (using a normal distribution) is demonstrating accurate estimates for large values of m (> 6) in accordance with the central limit theorem. By using a fitting procedure for values in the range 9  ≤  m  ≤  40 an approximate expression for guesswork is given by G1 / nm  ≈  0.592  ·  0.920m  ·  m- 1 / 2 (see Figure [\ref=gw1normal]). By evaluating the leading term of Equation [\ref=gw1Approx4] (see Equation [\ref=leading]) the expression 0.832  ·  0.912m  ·  m- 1 / 2 is obtained.

However, as is shown in Figure [\ref=gw1normal], for large values of m the result given by a normal distribution deviates from that given by the true distribution. When rescaling the x axis in Figure [\ref=dens], so that the range of x values is the same for all m values the distribution becomes sharper for increasing values of m. For sharper distributions the fitting to a normal distribution is more sensitive. Small changes to the parameters μ and σ may give large changes in the value of guesswork.

The exponential entropy expression overestimates guesswork for small values of m (< 11) and underestimates it for large values. The lower bound of Massey is closer to the exact value than the lower bound of Arikan. However, both of the lower bounds underestimate the number of guesses by an order of magnitude for m = 20.

Using the data in Figure [\ref=comp] and Equation [\ref=errQ1] the exact value can be determined to be in the interval ·  GQ1, i.e., the error using quantification is about 0.1 %. The additional error of using random selection (see Equation [\ref=errR]) is determined to be between 0.26 and 0.56 % (depending on the m value) to a certainty of 99 %. The error due to random selection in the normal distribution appproximation is determined to be between 0.30 and 0.63 % (depending on the m value) to a certainty of 99 %. Observe that this error does not include the fitness of a normal distribution to the density of the logarithm of probability products.

English language

While the probability distribution discussed in the previous section was randomly chosen, the probability distribution considered here originates from the English language [\cite=Digram]. In Appendix [\ref=appendix] the English digram frequencies from Reference [\cite=Digram] are repeated. In order to calculate the conditional probability distribution discussed in Section [\ref=second] each row in the table in Appendix [\ref=appendix] has to be normalized. The probability distribution for each letter in the English alphabet can be obtained by the procedures discussed in Section [\ref=second]. In Figure [\ref=order] the average number of guesses required for correctly guessing a word of size m using the English alphabet of size 26 (with the data given in Appendix [\ref=appendix]) is displayed. Guesswork has been numerically evaluated in zero, first and second order. For comparison, estimates based on entropy (Equation [\ref=gwEnt]) are given in first and second order. In first order the lower bounds provided by Massey (Equation [\ref=gwMas]) and Arikan (Equation [\ref=gwAri]) are included.

As is illustrated in Figure [\ref=order] all approaches display an exponential behaviour (in first and second order) in accordance with Equations [\ref=gwMas], [\ref=gwAri], [\ref=gwEnt] and [\ref=gw1Approx4]. A normal distribution was not applied since it is not in agreement with the true distribution. It overestimates guesswork by about an order of magnitude for m = 30. However, it is possible to make a fairly accurate fit of the guesswork data in first and second order to an expression of the form nm  ·  A  ·  Bm  ·  m- 1 / 2 as was discussed in Section [\ref=norm]. By using a fitting procedure for the guesswork graphs in Figure [\ref=order] for 9  ≤  m  ≤  30 the average number of guesses of words in the English language can be expressed according to the functions in Table [\ref=gwEst]. The deviation between the true and estimated values (according to Table [\ref=gwEst]) is less than 10 % (except for the smallest m values).

For both first and second order the entropy ansatz underestimates the number of guesses required, for first order by a factor of around 10 and for second order by a factor of around 100 for word lengths of 30. Further, using the extra information provided by a second-order approximation as compared to a first-order approximation reduces the number of guesses by a factor of around 105 for word lengths of 30. The lower bounds of Massey (Equation [\ref=gwMas]) and Arikan (Equation [\ref=gwAri]) are underestimating the number of guesses by approximately the same amount as the entropy expression for word lengths of 30.

Using the same procedure as in Section [\ref=res1] the error introduced when randomly selecting probability products can be estimated. In first order a 99 % confidence interval for the guesswork is given by Equation [\ref=errR] and by using the data in Figure [\ref=order] the error (R1) is determined to be between 0.006 and 0.05 % (depending on the m value). This should be added to the error of 0.02 % introduced by quantification. In second order exactly the same procedure can be used and then the error is estimated to be in the range 0.006 and 6 % (depending on the m value). Again this error should be added to the error of 0.04 % introduced by quantification. The large error introduced by random selection in second order for large m values is due to the fact that the fraction of probability products that are zero is larger for larger m values. By randomly selecting S  ·  m probability products the number of non-zero probability products is decreasing with an increasing value of m. To increase the accuracy of the guesswork estimate in second order another m dependence of the number of selected probability products has to be chosen.

Conclusion

In the paper it has been demonstrated that it is possible to estimate the average number of guesses (guesswork) of a word with a given length numerically with reasonable accuracy (of a couple of percent) for large alphabet sizes (≈  100) and word lengths (≈  100) within minutes. Thus, a numerical estimate of guesswork constitutes an alternative to, e.g., various entropy expressions.

For many probability distributions the density of the logarithm of probability products is close to a normal distribution. For those cases it is possible to derive an analytical expression for guesswork showing the functional dependence of the word length. The proportion of guesses needed on average compared to the total number decreases almost exponentially with the word length. The leading term in an asymptotic expansion of guesswork has the form nm  ·  A  ·  Bm  ·  m- 1 / 2, where A and B are constants (however, different for different probability distributions), n is the size of the alphabet and m is the word length. Such an expression can be determined for medium-sized values of m, using some fitting procedure, and used with fairly good accuracy for large values of m.

In the paper the English language has been investigated. The average number of guesses has been calculated numerically in both first and second order giving a reduction of the number of guesses by a factor 105 for word lengths of 30 when the extra information provided by second order is included. A normal distribution of the logarithm of probability products was not applied since it is not in agreement with the true distribution. It overestimates guesswork by about an order of magnitude for word lengths of 30. Still it is possible to find accurate expressions for guesswork (0.481  ·  0.801m  ·  m- 1 / 2 in first order and 0.632  ·  0.554m  ·  m- 1 / 2 in second order) in agreement with the true values (the deviation is less than 10 % for word lengths of 30).

Comparison between guesswork and entropy expressions has been performed showing that the entropy ansatz underestimates the number of guesses required, for first order by a factor of around 10 and for second order by a factor of around 100 for English words of length 30. Lower bounds of guesswork by Massey and Arikan have also been investigated. They are underestimating the number of guesses by approximately the same amount as the entropy expression for word lengths of 30.

English Digram Frequencies

The information in the matrix below is used for creating matrix P used in Section [\ref=second] [\cite=Digram]. After normalization of each row matrix P is obtained.