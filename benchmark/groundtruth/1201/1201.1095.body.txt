Lemma Corollary

An Entertaining Example of Using the Concepts of Context-Free Grammar and Pushdown Automation

Faculty of Mathematics and Natural Sciences, South-West University

66 Ivan Mihailov Str, 2700 Blagoevgrad, Bulgaria

e-mail: yordzhev@swu.bg

Keywords: teaching discrete mathematics, context-free grammar, context-free language, pushdown automation, Hanoi towers

Introduction

The task of the Hanoi Towers is a classic example used to teach recursion in programming [\cite=wirth] [\cite=arsac]. In this paper, we will look at this Task from the standpoint of mathematical linguistics, i.e. as a part of the discipline of "discrete mathematics" and "discrete structures" studies by students in Informatics and Computer courses at university [\cite=dpd] [\cite=dshtr] [\cite=manev] [\cite=syt].

The algebraic properties of context-free grammars and languages are discussed in detail in [\cite=ginzburg] [\cite=laleman]. Several practical applications of formal grammars and languages and pushdown automata are discussed in detail in [\cite=aho_ulman] [\cite=hopcroft].

Context-free grammars and languages

Let V be a finite and non-empty set. The elements of this set we will call letters, and the whole set V - Alphabet.

A word over the alphabet V we will call each finite string of letters by V. The word that does not contain any letter is called the empty word that we will mark with ε. V* denotes the set of all words over V, including empty set. Bythe length of a word refers to the number of letters in it. The length of the word α will be expressed with |α|.

Let α and β be two words over the Alphabet V. By concatenation (multiplication, adhesion) αβ of both words we will mean the word obtained by successive completion of the letters of β after the last letter of α.

Let V be alphabet. Each subset L of V* is called formal language (or only language) over alphabet V.

By generative grammar (or only grammar) Γ we will understand the four ordered tuples Γ  =  〈V,W,S,P〉, where V is a finite set (Alphabet) from terminal symbols, W- set of non - terminal symbols, S-start symbol of the grammar, which is an element of W, and P is set of ordered pairs (α,β), where [formula], as in α there is at least one non - terminal symbol. In a number of sources (see references in the end) and an additional condition is placed while sets W and P to be finite. For our needs this condition is not necessary, it is enough that these sets are countable. The elements of P are called productions. If (α,β)∈P, then it means α  →  β, as the symbol "  →  " does not belong to [formula].

Let μ and ν be two words from [formula]. We will say that μ is derived directly from ν in the grammar Γ  =  〈V,W,S,P〉 and will write [formula] (or only [formula] , if Γ is understandable), here exists words [formula] and production α  →  β in P so that ν  =  α1αα2 and μ  =  α1βα2.

If [formula] is a word over [formula], for which [formula], we will say that number of words is the derivation of ωn from ω1 in Γ which we denote with [formula] or only [formula], if Γ is default. The count n of immediate derivations [formula] will be called the length of derivation.

The Set [formula] is called formal language over V, phrase - structured grammar Γ. The Grammars Γ1 and Γ2 are equivalent if L(Γ1) = L(Γ2).

A grammar Γ  =  〈V,W,S,P〉 is context-free, if all roductions of it are from the type

[formula]

where V and W are alphabets respectively with terminal and nonterminal symbols.

Solution. Let's consider context-free grammar ΓN  =  〈V,W,S,P〉 where V = {pij  |  i,j∈{1,2,3},  i  ≠  j}. The meaning of pij is "Move top disk from the i - th column of the j - th column". In this way, if [formula], where πi∈V, [formula], then ω describes algorithm for moving consecutively of k discs in the three columns.

[formula] start symbol S = h13(N), P consists of productions hij(1)  →  pij and hij(n)  →  hik(n - 1)pijhkj(n - 1) about [formula], where i,j,k∈{1,2,3}, i  ≠  j, i  ≠  k, k  ≠  j. Apparently, so constructed grammar ΓN is context-free.

Let ω∈L(ΓN), i.e. we assume that the derivation [formula] exist and let the length of derivation is equal of s. If s = 1, then obviously this is possible if and only if number of discs N = 1 and we have direct derivation [formula] and in presence of single disc p13 describes an algorithm for solving the Task [\ref=KI_Hanoj]. Similarly [formula] is derivation with length 1 with start symbol hij(1) and pij describes algorithm about moving single disc from column i to column j, where i,j∈{1,2,3} and i  ≠  j. Let s > 1. We assume that if derivation exists with length less than s from type [formula], where α∈V*, n  ≤  N then α describes moving of n discs from column i on column j, using column k as assistant , according to constraints in Task [\ref=KI_Hanoj], where i,j,k∈{1,2,3}, i  ≠  j, j  ≠  k, k  ≠  i. When s > 1 obviously derivation [formula] with length s (if existing)it will have the type [formula] then next derivations exist [formula] and [formula] with lengths less then s, where ω1,ω2∈V* and ω  =  ω1p13ω2. According to induction assumption ω1 describes algorithm for moving of N - 1 discs from first to second column, using third one as assistant, and ω2 describes algorithm for moving of N - 1 discs from second to third column, using first one as assistant and pay attention to constraints from Task [\ref=KI_Hanoj]. Then ω  =  ω1p13ω2 describes the following algorithm: first move while considering with constraints from Task [\ref=KI_Hanoj] the top number t of discs from first column to second then move the largest bottom disk from the first column of the empty third and finally move t number of discs from second column to third one. Therefore ω  =  ω1p13ω2 (if existing ) describe the solution of the task of the Hanoi towers.

Let prove for each positive integer N language L(ΓN) is not empty. When N = 1 the only production of P which can be applied is h13  →  p13 and therefore L(Γ1) = {p13}, i.e. L(Γ1) is not empty language. Let's assume that for each positive integer t  ≤  N the languages L(Γt) are not empty and put N = t + 1. Let consider the context-free grammar Γt'  =  〈V,W,h12(t),P〉 and Γt''  =  〈V,W,h23(t),P〉. Apparently Γt' and Γt'' work by analogy of Γt and according to the above proven if ω'∈L(Γt'), then ω' describes algorithm for moving of t discs from first to second column, using third one as assistant according to constraints described in Task [\ref=KI_Hanoj], and if ω''∈L(Γt''), then ω'' describes the algorithm for moving of t discs from second column to third one using first one as assistant. According to induction assumption ω' and ω'' exist. Then in Γt + 1 derivation exist [formula], where ω'∈L(Γt') and ω''∈L(Γt''). Therefore ω∈L(Γt + 1), i.e. L(Γt + 1) is non empty language.

[formula]

When N = 5 next word is produced p13 p12 p32 p13 p21 p23 p13 p12 p32 p31 p21 p32 p13 p12 p32 p13 p21 p23 p13 p21 p32 p31 p21 p23 p13 p12 p32 p13 p21 p23 p13 We can verify the correctness of the algorithm using the example about the five consecutive cards.

It is easy to prove (eg. using induction on N) following

Let N is a positive integer, and ΓN is defined as the solution of Task [\ref=KF-grammar] context-free grammar, then

[formula]

and if ω∈L(ΓN), then

[formula]

[formula]

In other words, for each a positive integer N grammar ΓN generates exactly one word that describes an algorithm for solving the task of the Hanoi towers with exactly 2N - 1 displacements of the disks from one column to another.

Pushdown automata

By nondeterministic pushdown automation one will understand each ordered septenary

[formula]

where:

- K is a finite set of states of automaton (states of alphabet);

- V is a finite set of entry letters (entry alphabet);

- W is a finite, non empty set of stack symbols (stack alphabet);

- [formula] is a transition function;

- q0∈K is a start state of automaton;

- z0∈W is a start stack symbol;

- F  ⊆  K is a set of accepting states.

Configuration of nondeterministic pushdown automaton M that is the ordered triple 〈q,α,γ〉∈K  ×  V*  ×  W*.

Let [formula] [formula]. Then transition function δ defines transition configuration 〈q,α,γ〉 to the next configuration in the following way:

(i) for each pair 〈p,γ'〉∈δ(q,a1,z1) the configuration 〈q,α,γ〉 passing in the configuration 〈p,α1,γ1〉, where [formula] [formula], which we denote by [formula].

(ii) for each pair 〈p,γ'〉∈δ(q,ε,z1) the configuration 〈q,α,γ〉 passing in the configuration [formula], which we denote by [formula].

In the beginning if nondeterministic pushdown automation is given the word [formula], then according to the start configuration 〈q0,α,z0〉 the following possible configurations are obtained by using a function of transitions δ. For each new configuration using δ all possible next configurations are obtained and so on.

Nondeterministic pushdown automation M recognizes the word [formula] by accepting state, if its work at the beginning of given word α, it reaches a configuration of type 〈q,ε,γ〉, for each γ∈W*, when q∈F.

Nondeterministic pushdown automation M recognizes the word [formula] by empty stack, if its work at the beginning of given word α, reaches a configuration of type 〈q,ε,ε〉.

Pushdown automation M = 〈K,V,W,δ,q0,z0,F〉 is called deterministic, if for each q∈K and z∈W or

(1) δ(q,a,z) contains no more than one element for each a∈V and [formula] or

(2) [formula] for each a∈V and δ(q,ε,z) contains no more than one element.

Language which is recognized by some deterministic pushdown automation is called deterministic language. As it is known the relationship between context-free languages and pushdown automation is given by next statements:

For each context-free language L nondeterministic pushdown automation M exists, such that L is recognized by M by accepting state. Language L is recognized by nondeterministic pushdown automation through an empty stack then only if L is recognized by nondeterministic pushdown automation by accepting state. If L is a language which is recognized by a nondeterministic pushdown automation, then L is context-free language.

Solution. The requested pushdown automation is the following: [formula], where K = {q0}, [formula], and [formula] as usually the empty set is known . Let i,j,k∈{1,2,3}, i  ≠  j, j  ≠  k, k  ≠  i. Then the transition function δ is defined in following way:

[formula]

[formula]

[formula]

[formula]

Immediately after inclusion of MN, before being submitted as any input signal, the automation replaces the start stack symbol z0 with word h12(N - 1)p13h23(N - 1) according to ([\ref=1]) and after a number of actions depending on the current stack symbol ([\ref=2]), ([\ref=3]), or ([\ref=4]). Moreover, we assume that automation MN is designed so that after reading of stack symbol of the type pij i,j∈{1,2,3}, i  ≠  j, simultaneously according the action([\ref=4]) another action carried out namely the removal of top disk i-th column on j-th. Transient function is defined so that after a finite number of beats the stack is empty and stops. This is because if the current stack symbol of the kind pij, then MN deletes it, and if the current stack symbol is of the type hij(n), then at the next beat of the parameter n decrease with one unit, if n > 1, or hij(n) passes into the symbol pij at n = 1, then that symbol is deleted.

We will prove that 1  ≤  s < N the stack MN of configuration 〈q0,ε,hij(s)γ〉 where i,j∈{1,2,3}, i  ≠  j, γ∈W* as a result of their work reaches a configuration 〈q0,ε,γ〉 and when that transfer according to the restrictions of Task [\ref=KI_Hanoj] s discs from column i to column j. When s = 1 we have [formula], i.e. the assertion is met. Assume that the assertion is fulfilled for any t, such that 1  ≤  t < s < N and let t = s. Then in i,j,k∈{1,2,3}, i  ≠  j, j  ≠  k, k  ≠  i we have [formula]. According to induction assumption MN reaches the configuration 〈q0,ε,pijhkjγ〉 moving t - 1 discs from i-th column of k-th column then passed in a configuration 〈q0,ε,hkj(t - 1)γ〉 moving next disc from column i to column j and again according to the induction moves t - 1 discs (as obviously all are smaller size) on this disk column j taken from column k. Therefore the assertion is true for any [formula].

According the assertion that has just proved we have: [formula], while the stack moves at the upper N - 1 discs from first to second column, then move biggest on the bottom from the first to third column and finally moving discs (N - 1 numbers from the second to third column while observed the restrictions described in the Task [\ref=KI_Hanoj]. Therefore pushdown automation MN solve the task of the Hanoi towers.

[formula]