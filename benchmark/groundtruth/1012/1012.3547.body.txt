omment

Proposition Example Remark Claim Corollary Lemma Definition 〈 '"8000| |   〉

Knuth-Bendix algorithm and the conjugacy problems in monoids

Introduction

The use of string rewriting systems or Thue systems has been proved to be a very efficient tool to solve the word problem. Indeed, Book shows that there is a linear-time algorithm to decide the word problem for a monoid that is defined by a finite and complete rewriting system [\cite=book_linear]. A question that arises naturally is whether the use of rewriting systems may be an efficient tool for solving other decision problems, specifically the conjugacy problem. Several authors have studied this question, see [\cite=naren_otto2] [\cite=naren_otto], [\cite=otto], and [\cite=pedersen]. The complexity of this question is due to some facts. One point is that for monoids the conjugacy problem and the word problem are independent of each other [\cite=otto]. This is different from the situation for groups. Another point is that in semigroups and monoids, there are several different notions of conjugacy that are not equivalent in general. We describe them in the following.

Let M be a monoid (or a semigroup) generated by Σ and let u and v be two words in the free monoid Σ*. The right conjugacy problem asks if there is a word x in the free monoid Σ* such that xv = Mux, and is denoted by [formula]. The left conjugacy problem asks if there is a word y in the free monoid Σ* such that vy = Myu, and is denoted by [formula]. The conjunction of the left and the right conjugacy problems is denoted by [formula]. The relations [formula] and [formula] are reflexive and transitive but not necessarily symmetric, while [formula] is an equivalence relation. A different generalization of conjugacy asks if there are words x,y in the free monoid such that u = Mxy and v = Myx. This is called the transposition problem and it is denoted by [formula]. This relation is reflexive and symmetric, but not necessarily transitive.

In general, if the answer to this question is positive then the answer to the above questions is also positive, that is [formula]. For free monoids, Lentin and Schutzenberger show that [formula] [\cite=schutz] and for monoids with a special presentation (that is all the relations have the form r = 1) Zhang shows that [formula] [\cite=zhang]. We denote by [formula] the transitive closure of [formula]. Choffrut shows that [formula] holds in a free inverse monoid FIM(X) when restricted to the set of non-idempotents [\cite=choffrut]. He shows that [formula] is an equivalence relation on FIM(X) and he proves the decidability of this problem in this case. Silva generalized the results of Choffrut to a certain class of one-relator inverse monoids. He proves the decidability of [formula] for FIM(X) with one idempotent relator [\cite=silva].

In this work, we use rewriting systems in order to solve the conjugacy problems presented above in some semigroups and monoids. A special rewriting system satisfies the condition that all the rules have the form l  →  1, where l is any word. Otto shows that [formula] for a monoid with a special complete rewriting system and that [formula] is an equivalence relation. Moreover, he shows that whenever the rewriting system is finite then the conjugacy problems are solvable [\cite=otto]. Narendran and Otto show that [formula] and [formula] are decidable for a finite, length-decreasing and complete rewriting system [\cite=naren_otto] and that [formula] is not decidable [\cite=naren_otto2]. We describe our approach to solve the conjugacy problems using rewriting systems in the following.

Let M be the finitely presented monoid [formula] and let [formula] be a complete rewriting system for M. Let u be a word in Σ*, we consider u and all its cyclic conjugates in Σ*, {u1 = u,u2,..,uk}, and we apply on each element ui rules from [formula] (whenever this is possible). We say that a word u is cyclically irreducible if u and all its cyclic conjugates are irreducible modulo [formula]. If for some 1  ≤  i  ≤  n, ui reduces to v, then we say that u cyclically reduces to v and we denote it by [formula], where [formula] denotes a binary relation on the words in Σ*.

We define on [formula] the properties of terminating and confluent in the same way as for →   and if [formula] is terminating and confluent then each word u reduces to a unique cyclically irreducible element denoted by ρ(u). We have the following result that describes the relation between [formula] and the conjugacy problems, we write [formula] for ρ(u) and ρ(v) are cyclic conjugates in the free monoid Σ*. A completely simple semigroup is a semigroup that has no non-trivial two-sided ideals and that possesses minimal one-sided ideals. Using the results of McKnight and Storey in [\cite=macknight], it holds that [formula] in a completely simple semigroup. So, in the case of completely simple semigroups and monoids with a finite special complete rewriting system, our result gives a solution to the conjugacy problems, whenever [formula] is terminating and confluent. Assuming that [formula] is terminating, we find a sufficient condition for the confluence of [formula] that is based on an analysis of the rules in [formula]. Using this condition, we give an algorithm of cyclical completion that is very much inspired by the Knuth-Bendix algorithm of completion. We have the following main result. The paper is organized as follows. In Section 2, we define the binary relation [formula] on the words in Σ* and we establish its main properties. In Section 3, we describe the connection between a terminating and confluent relation [formula] and the conjugacy problems. In Section 4, we adopt a local approach as it is very difficult to decide wether a relation [formula] is terminating, we define there the notion of triple that is [formula]-defined. In Section 5, we give a sufficient condition for the confluence of [formula], given that it terminates. In Section 6, using the results from Section 5, we give an algorithm of cyclical completion that is very much inspired by the Knuth-Bendix algorithm of completion. Given a terminating relation [formula], if it is not confluent then some new cyclical reductions are added in order to obtain an equivalent relation [formula] that is terminating and confluent. At last, in Section 7, we address the case of length-preserving rewriting systems. All along this paper, [formula] denotes a complete rewriting system, not necessarily a finite one.

Definition of the relation [formula]

Let Σ be a non-empty set. We denote by Σ* the free monoid generated by Σ; elements of Σ* are finite sequences called words and the empty word will be denoted by 1. A rewriting system [formula] on Σ is a set of ordered pairs in Σ*  ×  Σ*. If [formula] then for any words u and v in Σ*, we say that the word ulv reduces to the word urv and we write ulv  →  urv . A word w is said to be reducible if there is a word z such that w  →  z. If there is no such z we call w irreducible. A rewriting system [formula] is called terminating (or Noetherian) if there is no infinite sequence of reductions.

We denote by "→  *" the reflexive transitive closure of the relation "→  ". A rewriting system [formula] is called confluent if for any words u,v,w in Σ* , w  →  *u and w  →  *v implies that there is a word z in Σ* such that u  →  *z and v  →  *z (that is if u and v have a common ancestor then they have a common descendant). A rewriting system [formula] is called complete (or convergent) if [formula] is terminating and confluent. If [formula] is complete then every word w in Σ* has a unique irreducible equivalent word that is called the normal form of w. We refer the reader to [\cite=book] [\cite=sims] [\cite=handbook] for more details.

Let [formula] be a finitely presented monoid M and let [formula] be a complete rewriting system for M. Let u and v be elements in Σ*. We define the following binary relation [formula] if v is a cyclic conjugate of u obtained by moving the first letter of u to be the last letter of v. We define [formula] if v is a cyclic conjugate of u obtained from i successive applications of [formula]. We allow i being 0 and in this case if [formula] then v = u in the free monoid Σ*. As an example, let u be the word abcdef in Σ*. If [formula] and [formula], then v is the word bcdefa and w is the word efabcd in Σ*.

We now translate the operation of taking cyclic conjugates and reducing them using the rewriting system [formula] in terms of a binary relation. We say that u cyclically reduces to v and we write if there is a sequence From its definition, the relation [formula] is not compatible with concatenation. We define by [formula] the reflexive and transitive closure of [formula], that is [formula] if there is a sequence [formula]. We call such a sequence a sequence of cyclical reductions. A sequence of cyclical reductions is trivial if it is equivalent to [formula]. We use the following notation: - [formula] denotes a cyclic conjugate of u in the free monoid Σ*. - [formula] if u and v are cyclic conjugates in the free monoid Σ*. - u  =  Mv if the words u and v are equal as elements in M. - u  =  v if the words u and v are equal in the free monoid Σ*. Now, we define the properties of terminating and confluent for [formula] in the same way as it is done for →  . Note that given words u and v if we write [formula] or [formula], we assume implicitly that this is done in a finite number of steps.

We say that [formula] is cyclically terminating (or [formula] is terminating) if there is no (non-trivial) infinite sequence of cyclical reductions. We say that [formula] is cyclically confluent (or [formula] is confluent) if for any words u,v,w in Σ*, [formula] and [formula] implies that there exist cyclically conjugates words z and z' in Σ* such that [formula] and [formula]. We say that [formula] is locally cyclically confluent (or [formula] is locally confluent) if for any words u,v,w in Σ*, [formula] and [formula] implies that there exist cyclically conjugates words z and z' in Σ* such that [formula] and [formula]. We say that [formula] is cyclically complete if [formula] is cyclically terminating and cyclically confluent.

Let [formula], [formula] is a complete and finite rewriting system. Consider the word bcd, we have [formula], that is there is an infinite sequence of cyclical reductions. So, [formula] is not cyclically terminating.

We say that a word u is cyclically irreducible if u and all its cyclic conjugates are irreducible modulo [formula], that is there is no v in Σ* such that [formula] (unless [formula]). We define a cyclically irreducible form of u (if it exists) to be a cyclically irreducible word v (up to [formula]) such that [formula]. We denote by ρ(u) a cyclically irreducible form of u, if it exists.

Let [formula] as before. From Ex. [\ref=ex_not_termin_no_cyc_irred], bcd does not have any cyclically irreducible form. But, the word acd has a unique cyclically irreducible form ada since acd  →  ada and no rule from [formula] can be applied on ada or on any cyclic conjugate of ada in Σ*.

As in the case of →  , the following facts hold also for [formula] with a very similar proof. If [formula] is cyclically terminating, then each word in Σ* has at least one cyclically irreducible form. If [formula] is cyclically confluent, then each word in Σ* has at most one cyclically irreducible form. So, if [formula] is cyclically complete, then each word in Σ* has a unique cyclically irreducible form. Moreover, if [formula], then w and w' have the same cyclically irreducible form (up to [formula]). Given that [formula] is terminating, [formula] is cyclically confluent if and only if [formula] is locally cyclically confluent.

In [\cite=hermiller+meier], Hermiller and Meier construct a finite and complete rewriting system for the group [formula], using another set of generators. For the monoid with the same presentation, the set of generators is: {a,b,,,Δ  =  }, where the underlining of a sequence of letters means that it is a generator in the new generating set. The complete and finite rewriting system is [formula]. Let consider the word ab, then ab  →   and [formula]. That is, [formula] and [formula], where both [formula] and [formula] are cyclically irreducible, so [formula] is not cyclically confluent (nor locally cyclically confluent).

The relation [formula] and the conjugacy problems

We denote by [formula] the following equivalence relation: there are words x,y in Σ* such that ux = Mxv and yu = Mvy, that is u and v are left and right conjugates. We describe the connection between the relations [formula], [formula] and the transposition problem.

Let M denote the finitely presented monoid [formula] and let [formula] be a complete rewriting system for M. Let u and v be in Σ*. (i) If [formula], then the pair (u, v) is in the transitive closure of the transposition relation and therefore [formula]. (ii) If [formula], then [formula] (whenever ρ(u) and ρ(v) exist).

(i) If the sequence of cyclical reductions has the following form: [formula], then u and v are transposed. Otherwise, if [formula], then each pair (ui, ui + 1) is transposed. So, the pair (u, v) is in the transitive closure of the transposition relation and therefore [formula]. (ii) From (i), [formula] and [formula], so [formula], since [formula] and [formula] is an equivalence relation.

The converse of (ii) is not true in general, namely [formula] does not imply that [formula]. Let [formula]. Then [formula] is a complete and infinite rewriting system for the braid monoid presented by [formula]. It holds that [formula], since a(aba) = M(aba)b and (aba)a = Mb(aba), but ρ(a) = a and ρ(b) = b and they are not cyclic conjugates. This example is due to Patrick Dehornoy.

Let [formula] be a complete and cyclically complete rewriting system for M. Let u and v be words in Σ*. If u = Mv, then [formula].

Assume that [formula] and [formula], where z,z' are cyclically irreducible. We show that [formula]. Since [formula] is a complete rewriting system, equivalent words (modulo [formula]) reduce to the same normal form. Here u = Mv, so there is a unique irreducible word w such that u  →  *w and v  →  *w. We have the following diagram: [formula] Assume that [formula], so [formula] and [formula]. But [formula] and [formula] and [formula] is cyclically complete, so [formula].

Let [formula] be a complete and cyclically complete rewriting system for M. Let u and v be words in Σ*. (i) If u and v are transposed, then [formula]. (ii) If [formula], then [formula].

(i) Since u and v are transposed, there are words x and y in Σ* such that u  =  Mxy and v = Myx. From lemma [\ref=lem_equal_same_cycl], [formula] and [formula]. Moreover, since [formula] and [formula] is cyclically complete, [formula], so [formula]. (ii) holds from Proposition [\ref=prop_samerho_conj] in a more general context.

A local approach for [formula]: definition of [formula]

Given a complete rewriting system [formula], it is a very hard task to determine if [formula] is cyclically terminating, since we have to check a potentially infinite number of words. So, we adopt a local approach, that is for each word w in Σ* we consider all the possible sequences of cyclical reductions that begin by each word from {w1,..,wk}, where w1 = w,w2,..,wk are all the cyclic conjugates of w in Σ*. We call the set of all these sequences [formula]. We say that [formula] terminates if there is no infinite sequence of cyclical reductions in [formula]. Clearly, [formula] is cyclically terminating if and only if [formula] terminates for every w in Σ*.

Let [formula] where n  ≥  2}. Then [formula] is a complete and infinite rewriting system for the braid monoid presented by [formula]. We denote by w the word ba2ba. We have the following infinite sequence of cyclical reductions: [formula], that is [formula] does not terminate. This holds also for banba for each n  ≥  2.

We say that [formula] converges if a unique cyclically irreducible form is achieved in [formula] (up to [formula]). Clearly, if [formula] is cyclically confluent then [formula] converges for every w in Σ*. The converse is true only if [formula] is cyclically terminating. We illustrate this with an example.

Let [formula] where n  ≥  2} as in Ex. [\ref=ex_braid_B3]. It holds that [formula] does not terminate (see Ex. [\ref=ex_braid_B3]). Yet, [formula] converges, since a3ba is the unique cyclically irreducible form achieved in [formula]. Indeed, there is the following sequence of cyclical reductions: [formula] and all the cyclic conjugates of w cyclically reduce to a3ba. So, although [formula] does not terminate, a unique cyclically irreducible form a3ba is achieved.

We find a condition that ensures that [formula] converges, given that [formula] terminates. Before we proceed, we give the following definition.

Let [formula] be a complete rewriting system and let w be a word in Σ*. Let r1 and r2 be rules in [formula] such that r1 can be applied on a cyclic conjugate of w and r2 can be applied on another one. We say that the triple (w,r1,r2) is [formula]-defined if there is a cyclic conjugate [formula] of w such that both rules r1 and r2 can be applied on [formula]. We allow an empty entry in a triple (w,r1,r2), that is only r1 or r2 can be applied.

Let [formula], this is the Wirtinger presentation of the trefoil knot group. Let [formula] be a complete and infinite rewriting system for the monoid with this presentation (see [\cite=chou1]). Let consider the word yxz2x, yxz2x and xyxz2 are cyclic conjugates on which the rules xz2x  →  zxzy and xy  →  zx can be applied respectively. We claim that the triple (yxz2x,xz2x  →  zxzy,xy  →  zx) is [formula]-defined. Indeed, there is the cyclic conjugate xz2xy on which both the rules xz2x  →  zxzy and xy  →  zx can be applied. But, as an example the triple (xz2xz3,xz2x  →  zxzy,xz3x  →  zxzy2) is not [formula]-defined.

In what follows, we show that if [formula] terminates and all the triples occurring there are [formula]-defined, then [formula] converges. The following lemma is the induction basis of the proof. For brevity, we write [formula] for [formula], where u1  →  r1v1 means that v1 is obtained from the application of the rule r1 on u1.

Let the triple (w,r1,r2) be [formula]-defined. Assume that [formula] and [formula], then there are cyclically conjugates words z1 and z2 such that [formula] and [formula].

We denote by [formula] and [formula] the left-hand sides of the rules r1 and r2 respectively and by m1 and m2 the corresponding right-hand sides. Then [formula] has an occurrence in w1 and [formula] has an occurrence in w2, where [formula]. Since (w,r1,r2) is [formula]-defined, there exists [formula] such that [formula] and [formula] and [formula] both have an occurrence in [formula]. Then one of the following holds: (i) [formula], where x,y,s are words. (ii) [formula], where x,y,s are words. (iii) [formula], where x,y are words, [formula], [formula] and [formula]. (iv) [formula], where x,y are words, [formula], [formula] and [formula]. (v) [formula], where x,y are words, [formula] is a subword of [formula]. (vi) [formula], where x,y are words, [formula] is a subword of [formula]. We check the cases (i), (iii) and (v) and the other three cases are symmetric. If both [formula] and [formula] have an occurrence in w1 and in w2, then obviously there are words z1 and z2 such that [formula] and [formula], where [formula]. So, assume that [formula] has no occurrence in w2 and [formula] has no occurrence in w1. Case (i): Assume that [formula]. Then the words w1 and w2 have the following form: [formula] and [formula], where [formula] and [formula]. This is due to the fact that [formula] has no occurrence in w2 and [formula] has no occurrence in w1. So, [formula] and [formula]. We take then z1 to be sxm1ym2 and z2 to be ym2sxm1. Case (iii): Assume that [formula], where [formula]. There is an overlap ambiguity between these rules which resolve, since [formula] is complete: [formula] The words w1 and w2 have the following form: [formula] and [formula]. So, [formula] and [formula]. So, we take z1 and z2 to be zyx. Case (v): Assume that [formula], where [formula]. There is an inclusion ambiguity between these rules which resolve, since [formula] is complete: [formula] The words w1 and w2 have the following form: [formula] and [formula]. So, [formula] and [formula]. So, we take z1 to be zyx and z2 to be xzy.

Let w be a word in Σ* and assume that [formula] terminates. Assume all the triples in [formula] are [formula]-defined, then [formula] converges.

We show that the restriction of [formula] to [formula] is confluent. Since [formula] terminates, it is enough to show that the restriction of [formula] to [formula] is locally confluent. All the triples in [formula] are [formula]-defined, so from lemma [\ref=lem_one_step] the restriction of [formula] to [formula] is locally confluent.

A sufficient condition for the confluence of [formula]

We find a sufficient condition for the confluence of [formula], that is based on an analysis of the rules in [formula]. For that, we translate the signification of a triple that is not [formula]-defined in terms of the rules in [formula].

Let w = x1x2x3..xk be a word, where the xi are generators for 1  ≤  i  ≤  k. Then we define the following sets of words: [formula] [formula]

Let (w,r1,r2) be a triple and let [formula] and [formula] denote the left-hand sides of the rules r1 and r2, respectively. If [formula] or [formula], then the triple (w,r1,r2) is [formula]-defined.

From the assumption, [formula] is a subword of w1 and [formula] is a subword of w2, where w1 and w2 are cyclic conjugates of w. We show that there exists a cyclic conjugate of w, [formula], such that both [formula] and [formula] are subwords of [formula]. If [formula] and [formula] or if [formula] and [formula], take [formula] to be such that it ends in [formula] and then [formula] will also have an occurrence in [formula]. If [formula] and [formula], take [formula] to be such that it ends in [formula] and then [formula] will also have an occurrence in [formula].

Note that if [formula] and [formula], then it does not necessarily imply that all the triples of the form (w,r1,r2) are not [formula]-defined. Yet, as the following example illustrates it, there exists a triple (w,r1,r2) that is not [formula]-defined.

Let [formula] from Ex. [\ref=ex_def_triple]. The rules xz2x  →  zxzy and xz3x  →  zxzy2 satisfy [formula] and [formula]. Yet, the triple [formula] is [formula]-defined, but the triple [formula] is not [formula]-defined.

Let (w,r1,r2) be a triple and we denote by [formula] and [formula] the left-hand sides of the rules r1 and r2, respectively. Assume that (w,r1,r2) is not [formula]-defined. Then [formula] and [formula], where u,v are words and x,y are non-empty words.

The triple (w,r1,r2) is not [formula]-defined, so from lemma [\ref=lem:no_Conj_pref_suff], [formula] and [formula]. Assume that [formula] and [formula], where x,y are non-empty words. So, [formula] and [formula] have one of the following forms: (i) [formula] and [formula], where u,v are words. (ii) [formula] and [formula], where x = x'x'', y = y'y'' and y'' = x'. (iii) [formula] and [formula], where x = x'x'', y = y'y'' and x'' = y'. (iv) [formula] and [formula], where x = x'x'', y = y'y'', and y'' = x', x'' = y'. We show that only case (i) occurs, by showing that in the cases (ii), (iii) and (iv) the triple (w,r1,r2) is [formula]-defined. This is done by describing [formula] on which both r1 and r2 can be applied. In any case, w1 has to contain an occurrence of [formula] and w2 has to contain an occurrence of [formula], where w1 and w2 are cyclic conjugates of w. In case (ii), [formula] and [formula], where y'' = x', so there exists [formula] that contains an occurrence of [formula] and an occurrence of [formula]. Case (iii) is symmetric to case (ii) and we consider case (iv). In case (iv), [formula] and [formula], where y'' = x' and x'' = y', so using the same argument as before, take [formula] to be x'x''y''x''. So, case (i) occurs and w has the form xuyv.

We say that there is a cyclical overlap between rules, if there are two rules in [formula] of the form xuy  →  u' and yvx  →  v', where u',v' are words, u,v,x,y are non-empty words and such that u'v and v'u are not cyclic conjugates in Σ*. We say that there is a cyclical inclusion if there are two rules in [formula], l  →  v and l'  →  v', where l,v,l',v' are words and l' is a cyclic conjugate of l or l' is a proper subword of a cyclic conjugate of l. Whenever l' is a cyclic conjugate of l, v and v' are not cyclic conjugates in Σ* and whenever l' is a proper subword of [formula], where [formula] is a cyclic conjugate of l (there is a non-empty word u such that [formula]), then it holds that l  →  r and [formula] and v and uv' are not cyclic conjugates in Σ*.

In Example [\ref=ex_wirt_tripledefined], there is a cyclical overlap between the rules xz2x  →  zxzy and xz3x  →  zxzy2. In Example [\ref=ex_not_cyc_confluent], there is a cyclical inclusion between the rules ab  →   and ba  →  , since ab is a cyclic conjugate of ba. In Example [\ref=ex_braid_B3], there is a cyclical inclusion of the rule bab  →  aba in the rule ba2ba  →  aba2b, since bab is a subword of baba2 (a cyclic conjugate of ba2ba).

Let (w,r1,r2) be a triple and let [formula] and [formula] be the left-hand sides of the rules r1 and r2, respectively. Assume that the triple (w,r1,r2) is not [formula]-defined. Then there is a cyclical overlap or a cyclical inclusion between r1 and r2.

The triple (w,r1,r2) is not [formula]-defined, so from lemma [\ref=lem_notdefined_form_cyclicaloverlap], [formula] and [formula], where x,y are non-empty words and u,v are words. If u and v are both the empty word, then [formula] and [formula] are cyclic conjugates, that is there is a cyclical inclusion. If u is the empty word but v is not the empty word, then [formula] and [formula], which means that [formula] is a subword of a cyclic conjugate of [formula]. So, in this case and in the symmetric case (that is v is the empty word but u is not the empty word) there is a cyclical inclusion. If none of u and v is the empty word, then [formula] and [formula], that is there is a cyclical overlap between these two rules.

Let w be a word in Σ* and assume that [formula] terminates. If there are no cyclical overlaps and cyclical inclusions in [formula], then [formula] converges.

If [formula] does not converge, then from Proposition [\ref=prop_triple_defined_converge], this implies that there is a triple (w,r1,r2) in [formula] that is not [formula]defined. From lemma [\ref=lem_pref_overlap], this implies that there is a cyclical overlap or a cyclical inclusion in [formula].

Note that the converse is not necessarily true, that is there may be a cyclical overlap or a cyclical inclusion in [formula] and yet a unique cyclically irreducible form is achieved in [formula], as in the following example.

Let [formula]. Let w = ba2ba, then [formula] does not terminate (see Ex. [\ref=ex_braid_B3]). The triple (w,bab  →  aba,ba2ba  →  aba2b) is not [formula]defined since there is a cyclical inclusion of the rule bab  →  aba in the rule ba2ba  →  aba2b. Nevertheless, w has a unique cyclically irreducible form ba4 (up to [formula]): [formula]. In fact, each w = banba where n  ≥  2 has a unique cyclically irreducible form ban + 2 (up to [formula]).

Let [formula] be a complete rewriting system that is cyclically terminating. If there are no rules in [formula] with cyclical overlaps or cyclical inclusions, then [formula] is cyclically confluent.

From Proposition [\ref=prop_nooverlap_allseq_converges], if there are no rules in [formula] with cyclical overlaps or cyclical inclusions then [formula] converges for all w. Since [formula] is cyclically terminating, [formula] is cyclically confluent if and only if [formula] converges for all w, so the proof is done.

The algorithm of cyclical completion

Knuth and Bendix have elaborated an algorithm which for a given finite and terminating rewriting system [formula], tests its completeness and if [formula] is not complete then new rules are added to complete it. This procedure can have one of three outcomes: success in finding a finite and complete system, failure in finding anything or looping and and generating an infinite number of rules (see [\cite=handbook]). Instead of testing the confluence of [formula], the algorithm tests the locally confluence of [formula], since for a terminating rewriting system locally confluence and confluence are equivalent. Two rewriting systems [formula] and [formula] are said to be equivalent if : w1  ↔  *w2 modulo [formula] if and only if w1  ↔  *w2 modulo [formula]. So, by applying the Knuth-Bendix algorithm on a terminating rewriting system [formula] a complete rewriting system [formula] that is equivalent to [formula] can be found (if the algorithm does not fail). Our aim in this section is to provide an algorithm of cyclical completion which is much inspired by the Knuth-Bendix algorithm of completion.

Let [formula] be a complete and cyclically terminating rewriting system, we assume that [formula] is finite. From Theorem [\ref=theo:conf_over_inc_amb_resolv], if there are no cyclical overlaps or cyclical inclusions then [formula] is cyclically confluent. Nevertheless, if there is a cyclical overlap or a cyclical inclusion, we define when it resolves in the following way. We say that the cyclical overlap between the rules xuy  →  u' and yvx  →  v', where u,v,u',v' are words, x,y are non-empty words resolves if there exist cyclically conjugate words z and z' such that [formula] and [formula]. If there is a cyclical inclusion between the rules l  →  v and l'  →  v', where l,v,l',v' are words and l' is a cyclic conjugate of l or l' is a proper subword of a cyclic conjugate of l, then we say that it resolves if there exist cyclically conjugate words z and z' such that [formula] and [formula] in the first case or [formula] and [formula] in the second case ([formula]).

We consider the complete and finite rewriting system from Ex. [\ref=ex_not_cyc_confluent]. Since there is a cyclical inclusion between the rules ab  →   and ba  →  , it holds that [formula] and [formula], where [formula] and [formula] are cyclically irreducible. We can decide arbitrarily wether [formula] or [formula], in any case this cyclical inclusion resolves.

In the following, we describe the algorithm of cyclical completion in which we add some new cyclical reductions. We denote by [formula] the rewriting system with the added cyclical reductions and we add "+  " in [formula] for each cyclical reduction that is added in the process of cyclical completion. We assume that [formula] is a finite, complete and cyclically terminating rewriting system. The algorithm is described in the following. (i) If there are no cyclical overlaps or cyclical inclusions, then [formula] is cyclically confluent, from Theorem [\ref=theo:conf_over_inc_amb_resolv] and [formula]. (ii) Assume there is a cyclical overlap or a cyclical inclusion in the word w: [formula] and [formula]. With no loss of generality, we can assume that z1 and z2 are cyclically irreducible (since otherwise we can first cyclically reduce them), then decide [formula] or [formula]. If at a former step, no [formula] or [formula] for i = 1,2 was added, then we can decide arbitrarily wether [formula] or [formula]. As an example, if [formula] was added, then we choose [formula].

The algorithm fails if the addition of a new cyclical reduction creates a contradiction: assume z1 and z2 are cyclically irreducible and we need to add [formula] or [formula] but [formula] and [formula] are already in [formula]. In the Knuth-Bendix algorithm of completion, the addition of the new rules may create some additional overlap or inclusion ambiguities. We show in the following that this is not the case with the algorithm of cyclical completion and this is due to the fact that the relation [formula] is not compatible with concatenation. From Proposition [\ref=prop_samerho_conj], if [formula] then [formula]. In the following lemma, we show that this holds also with [formula].

Let [formula] be a complete and cyclically terminating rewriting system. We assume that [formula] is finite. Let [formula] be the cyclical rewriting system obtained from the application of the algorithm of cyclical completion on [formula]. If [formula] then [formula] modulo [formula].

There are two cases to check: if [formula] and if [formula]. If [formula], then from the algorithm of cyclical completion, there is a word w such that [formula] and [formula]. From Proposition [\ref=prop_samerho_conj], this implies [formula] and [formula] (modulo [formula]), so [formula] (modulo [formula]). If [formula], then [formula] (modulo [formula]) from the first case, so [formula] (modulo [formula]).

Given two complete and cyclically terminating rewriting systems [formula] and [formula], we say that [formula] and [formula] are cyclically equivalent if the following condition holds: [formula] modulo [formula] if and only if [formula] modulo [formula]. We show that the cyclical rewriting system [formula] obtained from the application of the algorithm of cyclical completion on [formula] is cyclically equivalent to [formula].

Let [formula] be a complete and cyclically terminating rewriting system, we assume that [formula] is finite. Let [formula] be the cyclical rewriting system obtained from the application of the algorithm of cyclical completion on [formula]. Then [formula] and [formula] are cyclically equivalent, that is [formula] modulo [formula] if and only if [formula] modulo [formula].

It holds that [formula] modulo [formula] if and only if there are words x,y in Σ* such that ux = Mxv and yu = Mvy. Since the (linear) rules in [formula] are the same as those in [formula], this holds if and only if [formula] modulo [formula] also.

We say that there is a cyclical ambiguity in w if [formula] and [formula], where u and v are not cyclic conjugates. If there exist cyclically conjugate words z and z' in Σ* such that [formula] and [formula], then we say that this cyclical ambiguity resolves. Clearly, a rewriting system is cyclically confluent if and only if all the cyclical ambiguities resolve. Now, we show that whenever the algorithm of cyclical completion does not fail, the rewriting system obtained [formula] is cyclically complete.

Let [formula] be a complete and cyclically terminating rewriting system, we assume that [formula] is finite. Let [formula] be the cyclical rewriting system obtained from the application of the algorithm of cyclical completion on [formula]. Then [formula] is cyclically complete.

We need to show that [formula] is cyclically confluent. Clearly, by the application of the algorithm of cyclical completion on [formula] the cyclical overlaps and inclusions in [formula] are resolved. So, it remains to show that the addition of the new cyclical rules in [formula] does not create a cyclical ambiguity. If a cyclical ambiguity occurs, then there should be one of the following kind of rules in [formula]: - [formula] and l  →  x, where [formula]. - [formula] and [formula], where [formula]. The first case cannot occur, since u is cyclically irreducible modulo [formula] and the second case cannot occur, since in this case the algorithm of cyclical completion fails.

Length-preserving rewriting systems

We say that a rewriting system [formula] is length-preserving if [formula] satisfies the condition that the left-hand sides of rules have the same length as their corresponding right-hand sides. We show that if [formula] is a length-preserving rewriting system, then an infinite sequence of cyclical reductions occur only if there is a repetition of some word in the sequence or if a word and its cyclic conjugate occur there. Using this fact, we define an equivalence relation on the words that permits us to obtain some partial results in the case that [formula] is not cyclically terminating.

Let [formula] be a complete rewriting system that is length-preserving. If there is an infinite sequence of cyclical reductions, then it contains (at two different positions) words that are cyclic conjugates .

From the assumption, applying [formula] on a word u does not change its length [formula], so all the words appearing in such an infinite sequence have the same length. Since the number of words of length [formula] is finite, an infinite sequence of cyclical reductions occurs only if it contains words that are cyclic conjugates at two different positions.

Note that using the same argument as in lemma [\ref=lem_length_termin], we have that if [formula] is length-decreasing, that is all the left-hand sides of rules have length greater than their corresponding right-hand sides, then there is no infinite sequence of cyclical reductions, that is [formula] is cyclically terminating. In the following lemma, we show that if there is an infinite sequence of cyclical reductions that results from the occurrence of a word w and its cyclic conjugate [formula], then there are some relations of commutativity involving w and [formula]. This is not clear if these relations of commutativity are a sufficient condition for the occurrence of an infinite sequence, nor if such a sufficient condition can be found.

Assume there is an infinite sequence [formula], where [formula]. Then there are words x,y such that [formula] and xyw = Mwxy.

From Proposition [\ref=prop_samerho_conj], [formula], that is there are words x,y in Σ* such that [formula] and [formula]. So, [formula] and [formula].

We now define the following equivalence relation ~   on Σ*. Let u,v be different words in Σ*. We define u  ~  v if and only if [formula] and [formula], this is an equivalence relation. Clearly, if [formula] is cyclically terminating, then each equivalence class contains a single word, up to [formula]. Now, we show that there is a partial solution to the left and right conjugacy problem, using ~   in the case that [formula] is not cyclically terminating. Note that given a word w such that [formula] does not terminate, it may occur one of the following; either there is no cyclically irreducible form achieved in [formula] (as in Ex. [\ref=ex_not_termin_no_cyc_irred]) or there is a unique cyclically irreducible form achieved in [formula] (as in Ex. [\ref=ex_braid_uniquecyclicalform]).

Let u and v be in Σ*. If there exists a word z such that u  ~  z and v  ~  z, then [formula].

If there exists a word z such that u  ~  z and v  ~  z, then from the definition of ~   there are sequences [formula] and [formula]. From Proposition [\ref=prop_samerho_conj], this implies [formula] and [formula], so [formula].

Note that the converse is not true as the following example illustrates it.

Let [formula]. It holds that [formula], since a(aba) = M(aba)b and (aba)a = Mb(aba). Yet, there is no sequence of cyclical reductions such that a  ~  b.

We can consider a rewriting system that is not length increasing (that is all the rules preserve or decrease the length) to be cyclically terminating up to ~   and apply on it the algorithm of cyclical completion and obtain that it is cyclically complete up to ~  . This is due to the fact that also in this case infinite cyclical sequences would result from the occurrence of a word and its cyclic conjugate. If there exists a cyclically irreducible form then it is unique, but the existence of a cyclically irreducible form is not ensured. The complete and finite rewriting system [formula] from Ex. [\ref=ex_not_cyc_confluent] illustrates this situation. It is not length increasing and not cyclically terminating, since there are infinite sequences of cyclical reductions (as an example [formula]). The application of the algorithm of cyclical completion on [formula] gives [formula] that is cyclically complete up to ~  . But, nevertheless there are words that have no cyclically irreducible form (Δa for example).