Introduction

New language adoption is a chicken-and-egg problem: without a large user-base it is difficult to create and maintain large-scale, reproducible tools and libraries. But without these tools and libraries, there can never be a large user-base. Hence, a new language must have a big advantage over the existing ones and/or a powerful corporate sponsorship behind it to compete [\cite=java].

With mainstream languages like R [\cite=R] and Python [\cite=Python] dominating the bioinformatics and computational biology scene for years, large-scale software development and community support for other less popular language frameworks has weened to relative obscurity. Consequently, languages winning over increasingly growing proportions of a steadily expanding user-base have the effect of shaping research paradigms and influencing modern research trends. For example, R programming generally promotes research that frequently leads to the deployment of R packages to Bioconductor [\cite=bioconductor], which has steadily grown into the largest bioinformatics package ecosystem in the world, whose package count is considerably ahead of BioPython [\cite=biopython], BioPerl [\cite=bioperl], BioJava [\cite=biojava], BioRuby [\cite=bioruby], BioJulia [\cite=biojulia], or SCABIO [\cite=scabio]. As a community repository of bioinformatics packages, BioLisp does not yet exist as such, albeit its name currently denotes the native language of BioBike [\cite=biobike] [\cite=shrager], a bioinformatics Lisp application.

Likewise, given the choice, R programmers interested in deploying large-scale applications are more likely to branch out to releasing web applications (e.g., Shiny [\cite=shiny]) than to GUI binary executables, which are generally more popular with lower-level languages like C/C++ [\cite=C++]. As such, language often dictates research direction, output, and funding. Questions like "who will be able to read my code?", "is it portable?", or "does it already have a library for that?" are pressing questions, often inexorably shaping the course and productivity of a project.

Applications and Perspectives

Thus far in bioinformatics and computational biology research, Lisp has successfully been applied to research in systems biology [\cite=biobike] [\cite=biolingua], database curation [\cite=ecocyc1] [\cite=ecocyc2], drug discovery [\cite=MDL], network and pathway -omics analysis [\cite=sri1] [\cite=sri2] [\cite=sri3] [\cite=sri4] [\cite=sri5], single nucleotide polymorphism analysis [\cite=snper1] [\cite=snper2] [\cite=snper3], and RNA structure prediction [\cite=structurelab1] [\cite=structurelab2] [\cite=structurelab3]. In fact, Common Lisp has been described as the most powerful and accessible modern language for advanced biomedical concept representation and manipulation [\cite=ira]. In general, Lisp has powered multiple applications across fields as diverse as [\cite=franz]: animation and graphics, AI, bioinformatics, B2B and e-commerce, data mining, electronic design automation/semiconductor applications, embedded systems, expert systems, finance, intelligent agents, knowledge management, mechanical computer-aided design (CAD), modeling and simulation, natural language, optimization, risk analysis, scheduling, telecommunications, and web authoring.

Programmers often test a language's mettle by how successfully it has fared in commercial settings, where big money is often on the line. To this end, Lisp has been successfully adopted by commerical vendors such as the Roomba vacuuming robot [\cite=PCL] [\cite=L], Viaweb (acquired by Yahoo! Store) [\cite=viaweb], ITA Software (acquired by Google Inc. and in use at Orbitz, Bing Travel, United Airlines, US Airways, etc) [\cite=orbitz], Boeing [\cite=boeing], AutoCAD [\cite=autocad1], among others.

It is well-known that the best language to choose from should be the one that is best suited to the job at hand. Yet, in practice, few of us may consider a non-mainstream programming language for a project, unless it offers strong, community-tested benefits over its popular contenders for the specific task at hand. Often times, the choice comes down to library support: does language X already offer well-written, optimized code to help solve my research problem, as opposed to language Y (or perhaps language Z)? In fact, this question ultimately led the developers behind Reddit to switch from Lisp to Python, due to a lack of well-documented and tested libraries at the time [\cite=reddit].

Some programming languages have such strong libraries that they have developed somewhat of a cult following and stable developer commitment. For instance, R programmers colloquially refer to R packages such as dplyr [\cite=dplyr], plyr [\cite=plyr], ggplot2 [\cite=ggplot2], or devtools [\cite=devtools] (among many others) as part of the Hadleyverse of R packages [\cite=hitchhikers], in reference to Hadley Wickham, chief scientist at R Studio. Hadley Wickham, despite not being one of the original creators of the R programming language, has helped to revolutionize it into one of the most popular programming languages for statistics and data science in the world [\cite=hadley].

In general, early adopters of a language framework are better poised to reap the benefits, as they are the first to set out building the critical libraries, ultimately attracting and retaining a growing share of the research and developer community. Since library support for bioinformatics tasks in Common Lisp is yet in its early stages and on the rise (similar to how R was in the 1990s), and there is (as of yet) no established bioinformatics Lisp community, there is plenty of opportunity for high-impact work in this field.

History and Outlook

As a language, Common Lisp is known to attract a strong audience [\cite=myth] [\cite=bipolar], being popular with historical figures such as Richard Stallman [\cite=emacs], Peter Norvig [\cite=norvig] and other prolific and extremely productive computer scientists. Much speculation has arisen to explain this phenomenon, namely why super-programmers are so drawn to and cater to Lisp, but the results have been inconclusive and generally interspersed across website posts, blogs, and miscellaneous comment sections (citations).

Historically speaking, Lisp is the second oldest programming language (second only to Fortran) and has influenced nearly every major programming language to date with its constructs [\cite=graham]. For example, it may be surprising to learn that R is written atop of Scheme, a popular dialect of Lisp [\cite=ihaka]. In fact, R borrows directly from its Lisp roots for creating embedded domain specific languages in R [\cite=advancedR]. For instance, ggplot2 [\cite=ggplot2], dplyr [\cite=dplyr], and plyr [\cite=plyr] are all examples of DSLs in R. This highlights the importance and relevance of Lisp as a programmable programming language, namely the ability to be user-extensible beyond the core language set. Given the wide spectrum of domains and subdomains in bioinformatics and computational biology research, it follows that similar applications tailored to genomics, proteomics, metabolomics, or other research fields may be developed as extensible macros in Common Lisp. By way of analogy, perhaps a genomics equivalent of ggplot2 or dplyr is in store in the not-so-distant future. Advice for when such pursuits are useful is readily available [\cite=mernik].

Common Lisp is a Turing-complete language, meaning that there is nothing that the programmer cannot accomplish with it that could be done with another (Turing-complete) programming language. Despite being credited for pioneering fundamental computer science concepts like tree data structures, automatic storage management, dynamic typing, conditionals, higher-order functions, recursion, and other foundations, Lisp is by no means less advanced or capable than modern programming languages that it has since influenced. Lisp has also recently developed specialized modern language offshoots such as the popular Lisp-dialect called Clojure (a Lisp for the Java virtual machine) [\cite=clojure] [\cite=hickey] or Guile (a Lisp for embedded systems) [\cite=guile], amongst others. From a performance standpoint, Lisp has been shown to be no slower than C [\cite=verna] and it can be optimized for speed at any time through its convenient foreign function interface (FFI) [\cite=PCL]. Likewise, Lisp is great for rapid prototyping thanks to the read-eval-print loop (REPL) [\cite=repl]. As such, Lisp strikes a comfortable balance between program speed and programmer productivity.

Finally, the flexibility and universality of the Lisp macro system still remains undisputed in the programming language world [\cite=SO]. This is, in large part, due to Lisp's homoiconicity, namely the ability to treat source code and data equivalently, which allows for new code to be generated by the program (i.e., by the code itself) at run-time. As such, by allowing program code to be represented as the language's fundamental data type, Lisp makes it easy to write self-modifying code, a common technique in AI research. As such, it is clear that Lisp macros should not be confused with C macros or macros of any other language, for that matter, despite the name equivalence. In addition, Lisp's support for macros facilitates the creation of modularized extensions to help users easily create plug-ins for their software. For example, in Guile, users can add domain specific syntax-elements and API support without modifying the Lisp dialect itself. This quality is useful outside AI programming as well, and generally applicable to creating libraries that extend the core language or enhance specific features.

Conclusions

New programming language adoption in a scientific community is both a challenging and rewarding process. Here we advocate for and propose a greater inclusion of Common Lisp into large-scale bioinformatics research, outlining the benefits and opportunities of the adoption process. We provide historical perspective on the influence of language choice on research trends and community standards, and emphasize Lisp's unparalleled support for homoiconicity, domain-specific languages, and extensible macros, as well as their significance to future bioinformatics research. We forecast that the current state of Lisp research in bioinformatics and computational biology is highly conducive to a timely establishment of robust community standards and support centered around not only the development of bioinformatic domain-specific libraries, but also the rise of highly customizable and efficient machine learning and AI applications.

Author information

Center for Therapeutic Innovation and Department of Psychiatry and Behavioral Sciences, University of Miami Miller School of Medicine, 1120 NW 14th ST, Miami, FL, USA 33136. Correspondence: .

Competing interests

The authors declare that they have no competing interests.

Author's contributions

BBK conceived the study and wrote the paper. BBK and CW planned the study. All authors read and approved the final manuscript.

Acknowledgements

BBK wishes to acknowledge the financial support of the United States Department of Defense (DoD) through the National Defense Science and Engineering Graduate Fellowship (NDSEG) Program: this research was conducted with Government support under and awarded by DoD, Army Research Office (ARO), National Defense Science and Engineering Graduate (NDSEG) Fellowship, 32 CFR 168a.