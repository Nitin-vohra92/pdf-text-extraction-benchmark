Erratum : MCColor is not optimal on Meyniel graphs

A Meyniel graph is a graph in which every odd cycle of length at least five has two chords. In [\cite=col] we claimed that our algorithm MCColor produces an optimal coloring for every Meyniel graph. But later we found a mistake in the proof and a couterexample to the optimality, which we present here. MCColor can still be used to find a stable set that intersects all maximal cliques of a Meyniel graph in linear time. Consequently it can be used to find an optimal coloring in time O(nm), and the same holds for Algorithm MCS+Color. This is explained in [\cite=stable] but this is equivalent to Hertz's algorithm [\cite=her]. The current best algorithm for coloring Meyniel graphs is the O(n2) algorithm LexColor due to Roussel and Rusu [\cite=rourus]. The question of finding a linear-time algorithm to color Meyniel graphs is still open.

In Algorithm MCColor, colors are viewed as integers 1,2,  At each step, the algorithm selects an uncolored vertex for which the number of colors that appear in its neighbourhood is maximum, assigns to this vertex the smallest color not present in its neighbourhood, and iterates this procedure until every vertex is colored. This algorithm can be implemented in linear time O(n + m).

Figure [\ref=contrex] shows a counterexample to the optimality of Algorithm MCColor on Meyniel graphs. The graph is Meyniel and Algorithm MCColor can color the vertices in the following order, with the given color: a-1, b-2, c-3, d-1, e-2, f-1, g-2, h-3, i-1, j-4. It uses 4 colors although the graph has chromatic number 3.