Definition Corollary Proposition Lemma Claim Example Remark

Finding Dense Subgraphs in G(n,1 / 2)

Introduction

Finding the largest clique is a notoriously hard problem, even on random graphs. It is known that the clique number of a random graph G(n,1 / 2) is almost surely either k or k + 1, where k  =  ⌈2 log n  -  2 log  log n  -  1⌉ (Section 4.5 in [\cite=AS], also [\cite=B]). However, a simple greedy algorithm finds a clique of size only [formula], with high probability, and finding larger cliques - that of size even (1 + ε) log n - in randomized polynomial time has been a long-standing open problem [\cite=K]. In this paper, we study the following generalization: given a random graph G(n,1 / 2) find the largest subgraph with edge density at least (1 - δ). We show that a simple modification of the greedy algorithm finds a subset of 2 log n vertices whose induced subgraph has edge density at least 0.951, with high probability. To complement this, we show that almost surely there is no subset of 2.784 log n vertices whose induced subgraph has edge density 0.951 or more.

We use G(n,p) to denote a random graph on n vertices where each pair of vertices appears as an edge independently with probability p. We use V to denote its set of vertices and E to denote its set of edges. Moreover, given two subsets S  ⊆  V and T  ⊆  V, we use E(S,T) to denote the set of edges with one endpoint in S and another endpoint in T. The density of the subgraph induced by vertices in S is given by

[formula]

Therefore, the expected density of G(n,1 / 2) is 1 / 2 and the density of any clique is 1.

In Section [\ref=sec:algo] we describe our algorithm for finding subgraphs of density 1 - δ. We give a bound on the largest subgraph of density 1 - δ in the following Section [\ref=sec:ub]. Finally, in Section [\ref=sec:conclusions], we present some open problems.

Algorithm for finding large subgraph of density 1 - δ

In this section, we describe our algorithm and give a relationship between the size of the subgraph obtained by the algorithm, and its density. In particular, we show that the algorithm can be used to obtain a subset of 2 log n vertices of density 0.951, with high probability.

Notice that the algorithm first partitions all nodes into k random subsets of the same size, and then picks one vertex from each partition. This partitioning is necessary to argue about independence in our analysis of choosing vertices greedily.

In the analysis below, H(δ) is the standard notation of the Shannon entropy function, which is - (δ log δ  +  (1 - δ) log (1 - δ)). The following lemma gives a lower bound on the number of edges we can expect to add to our subgraph, for the i-th vertex added by the algorithm.

For any 0  ≤  i  ≤  k and δi that satisfies

[formula]

we have

[formula]

We know by the previous results, that as long as k <  log n, the vertex added has all edges to Sk - 1. Consider k  ≥   log n. The algorithm has [formula] vertices to choose from. The expected number of vertices among these, with at least (1 - δk)k vertices is given by,

Fix v∈Vi + 1. The probability that v has at least (1 - δi)i edges to Si is

[formula]

where H(δ)  =    -  δ log δ  -  (1 - δ) log (1 - δ) is the Shannon entropy (here log  is taken with base 2). Using independence of these events for different v∈Vi + 1, we get

[formula]

Therefore,

[formula]

We now give a union bound over all k additions of vertices, using the previous lemma.

[formula]

Since [formula] are disjoint, using independence and Lemma [\ref=lemma:one-step] we get

[formula]

The point is that we are picking exactly one vertex from each vertex set/partition, and hence do not lose any randomness or independence of the edges. This now gives us a bound on the minimum number of edges one can expect, w.h.p., in the chosen set of k vertices. We are not able to express, in a closed form, the size of a subgraph obtainable using this algorithm for a specific density. Therefore, we state the best density one can guarantee w.h.p. for k = 2 log n. This is stated as a theorem below, which we prove subsequently.

Our algorithm produces a subset S  ⊆  V of size k  =  2 log n such that [formula], almost surely.

From Lemma [\ref=lemma:k-steps] we have that, almost surely,

[formula]

where m  =  n / 2k ln ( log n). Here we use the fact that we can choose δi  =  0 for the first log m steps. Now let k - 1  =  (1 + α) log m. Then

[formula]

Now using Equations [\eqref=eq:edges] and [\eqref=eq:integral] we have

[formula]

using

[formula]

and computing an upper bound on the integral numerically.

Upper bound on largest subgraph of density 1 - δ

In this section, we upper bound the size of the largest subgraph of density 1 - δ in G(n,1 / 2).

A random graph G(n,1 / 2) has no subgraph of size

[formula]

and density at least 1 - δ, almost surely. In particular, there is no subgraph of size 2.784 log n and density at least 0.951, almost surely.

For every S  ⊆  V of size k, define an indicator random variable XS as follows.

[formula]

Thus

[formula]

By linearity of expectation, the expected number of subgraphs of size k and density at least 1 - δ is

[formula]

using

[formula]

Therefore, by Markov inequality we have

[formula]

as n  →    ∞  . Or in other words, almost surely there is no subset of k vertices that induce a subgraph of density at least 1 - δ.

Notice that for density 0.951, the gap/ratio between the largest subgraph that exists and the largest subgraph that we can find is smaller than in the case of cliques. This is interesting, although not entirely unexpected as for density 0.5, the whole graph can be output. This ratio for density 0.951 is however significantly smaller than 2; it is 2.784/2 = 1.392.

Conclusions

For a concrete open problem, is there a polynomial time algorithm that outputs a subgraph of density 1 - ε and size 2 log n for any choice of ε  >  0 ?

Are there simple algorithms that beat the density bound of 0.95 for subgraphs of size 2 log n. Is there an O(nlog n) time algorithm that finds the largest clique in G(n,1 / 2)? If not, what is the maximum density obtainable for a subgraph of size 2 log n? Spectral techniques could be tried.