Unsupervised Learning in Neuromemristive Systems

Introduction

The present research explores multiple aspects of unsupervised learning in a class of neurologically-inspired computer architectures referred to as neuromemristive systems (NMSs). Although they are closely related, NMSs differ from neuromorphic systems-pioneered by Mead in the late 1980s [\cite=Mead1990]-in two respects: First, they are designed using a mixture of CMOS and memristor technologies, which affords levels of connectivity and plasticity that are not achievable in neuromorphic systems. The second distinction, which is more subtle but equally important, is that NMSs focus on abstraction, rather than mimicking, of neurological processes. This abstraction generally improves the efficiency of the resulting hardware implementations.

NMS research and development took off rapidly in the late 2000s, coinciding with a growing interest in two-terminal memristors, which will be described briefly in Section [\ref=section_memristors] for unfamiliar readers. The utility of these systems has been demonstrated in various application domains, especially image processing/analysis. See [\cite=Kudithipudi2014] for a review. Learning in these systems has primarily been supervised. Although there are some examples of unsupervised learning in spike-based systems [\cite=Yu2013], it is relatively unexplored in non-spiking NMSs. One example where unsupervised learning in non-spiking networks has been demonstrated is in [\cite=Choi2015], where principal component analysis (PCA) is used to reduce the dimensionality of images. However, the authors to not discuss any circuit for implementing the PCA algorithm in hardware.

In this research, we propose a non-spiking NMS design for unsupervised clustering. The NMS is tested on samples from the MNIST database of handwritten digits. To the best of our knowledge, this is the first work that explores general aspects of clustering in these systems. Given its ability to reduce data dimensionality and aid in classification, we believe that clustering is a key primitive for future NMSs. Furthermore, we believe this work will advance the state of unsupervised learning in NMSs and help others do the same.

Brief Description of Memristors

Technically, a memristor can be defined as any two-terminal device with a state-dependent Ohm's law [\cite=LChua2011]. More concretely, a memristor is a thin film (I) sandwiched between a top (M) and bottom (M) electrode. The stack is referred to as a metal-insulator-metal (MIM) structure because the film material is nominally insulating. That is, in its stoichiometric crystalline form it will have a large band gap and not enough free carriers to conduct. The film is made conductive by introducing defects in the crystalline structure, either through fabrication, applying an electric field, or both. Defects may be interstitial metallic ions which are oxidized at one electrode and then drift to the other, where they are reduced. Defects may also be vacancies such as oxygen vacancies in a TiO[formula] film. In addition, defects may be changes in polarization, such as those in ferroelectric films, or even just changes in crystallinity as in phase change memory. In some films, the defect profile can be gradually adjusted by applying electric fields for short durations, yielding incremental modifications to the film's overall conductance. In other films, only two conductance states can be reached. Moreover, there is usually a minimum amount of energy required to effect change in the film's defect profile. This often translates to a threshold voltage which must be applied across the film to change its conductance. Given the constant evolution of memristor technology, it makes little sense to design an NMS around any specific memristor device parameters. Instead, we assume devices will have these general characteristics: (1) a large minimum resistance value (e.g. in kΩs), (2) a large OFF/ON resistance ratio (at least 10), (3) high endurance (ability to switch many times before failing), (4) high retention (non-volatility), and (5) incremental conductance states that can be reached by applying bipolar voltage pulses above a particular thershold voltage. All of these properties have been demonstrated in various devices. See [\cite=Kuzum2013] for a review.

Clustering Algorithm Design

Clustering algorithms uncover structure in a set of m unlabeled input vectors [formula] by identifying M groups, or clusters of vectors that are similar in some way. In one common approach, each cluster is represented by its centroid, so the clustering algorithm is reduced to finding each of the M centroids. This can be achieved through a simple competitive learning algorithm: Initialize M vectors [formula] by assigning them to randomly-chosen input vectors. These will be referred to as weight vectors. Then, for each input vector, move the closest weight vector a little closer. After several iterations, the algorithm should converge with the weight vectors lying at (or close to) the centroids. Of course, there are several parameters which must be defined, including a distance metric for measuring closeness. The most obvious choice is the [formula]-norm. However, computing this is expensive in terms of hardware because it requires units for calculating squares and square roots. In addition, as we will discuss later, it is easy to use a high-density memristor circuit called a crossbar to compute dot products between input and weight vectors. Therefore, it is preferred to use a dot product as a distance metric. For example, if all of the vectors are normalized ([formula]), then [formula], where [formula] is the closest weight vector to [formula]. However, the constraint that [formula] creates a large overhead, because every input vector has to be normalized and every weight vector has to be re-normalized each time it is updated.

We propose the following solution: Map each input vector to the vertex of a hypercube centered about the origin: [formula], where N is the dimensionality of the input space. Now, [formula] will yield a scalar value d*i,p between - N and + N. Moreover, this scalar value can be linearly transformed to a distance di,p which is the [formula]-norm, or Manhattan distance, between the weight vector and the input:

[formula]

Using this distance metric, we don't ever need to re-normalize the weight vectors. Furthermore, mapping input vectors to hypercube vertices can usually be accomplished by thresholding. For example, grayscale images can be mapped by assigning -1 to pixel values from 0 to 127 and +1 to pixel values from 128 to 255. Algorithm [\ref=algorithm_clustering] summarizes the algorithm. The first two lines are initialization steps. Within the double for loop xi is 1 when i corresponds to the index of the closest vector (called the winner) and 0 otherwise. Then, the weight components of the winner are moved closer to the current input vector using a Hebbian update rule. The pre-factor α, which is called the learning rate, determines how far the weight vectors move each time they win. Notice that this algorithm is completely unsupervised, so there are no labeled input vectors.

NMS Hardware Design

The unsupervised clustering algorithm discussed in Section [\ref=section_clustering] can be implemented efficiently in an NMS by representing weight vectors as memristor conductances. A block diagram of the proposed design is shown in Figure [\ref=figure_clustering_architecture]. The inputs, which are represented as positive and negative currents, are fed through M crossbar circuits. Together with a non-inverting summing amplifier, (represented as a circle), each crossbar computes the distance between the current input and the weight vector represented by its memristors' conductances.

The configuration of the crossbar and summing amplifier is shown in Figure [\ref=figure_crossbar_clustering]. Memristors in the top row inhibit, or contribute a negative component to the output, while memristors in the bottom row excite, or contribute a positive component to the output. Therefore, each crossbar column represents one component of one weight vector [formula], which can be positive or negative. If we assume that the op amp has a high open loop gain and the wire resistances are small, then

[formula]

where G1 and G2 are the top and bottom memristors in each column, respectively. The output of the circuit is a voltage representation of the distance between the current input and the weight vector represented by the crossbar. The weight vectors are modified by connecting them to write voltages vwi,j using a training enable signal train_en. The write voltages are determined by the value of Δwi,j in line 7 of Algorithm [\ref=algorithm_clustering]. Specifically, if Δwi,j is negative, then vwi,j will be a negative voltage below the memristor's write threshold, and if Δwi,j is positive, then vwi,j will be a positive voltage above the memristor's write threshold. Otherwise, the write voltage is zero.

So far, we have only discussed the memristor crossbar and distance calculation parts of Figure [\ref=figure_clustering_architecture] (line 5 in Algorithm [\ref=algorithm_clustering]). The winner-takes-all circuit (line 6 in Algorithm [\ref=algorithm_clustering]) can be implemented in a number of ways. In this work, we used the current-mode design described in [\cite=Lazzaro1988]. Finally, the weight update (line 7 in Algorithm [\ref=algorithm_clustering]) can be computed using simple combinational logic circuits.

Clustering MNIST Images

One exciting application of the proposed hardware is automatically identifying clusters in sets of images. We took 1000 images (m=1000) from the MNIST handwritten digit dataset and clustered them using a behavioral model of the NMS described in the last section. Each image was originally 20×  20 grayscale pixels (N=400). They were mapped to hypercube vertices using the thresholding approach discussed earlier. In addition, we used 10 clusters (M=10), 500 training epochs (Ntrain=500), and α=0.005. The results are shown in Figure [\ref=figure_hypercube_clustering_mnist_clusters]. Here, we have plotted the weight vectors representing the centroid of each cluster. Figure [\ref=figure_hypercube_clustering_mnist] shows the cost versus the training epoch, where the cost is defined as

[formula]

We see that the cost function for the proposed NMS approaches that of MATLAB's built-in k-means clustering after 500 epochs.

Conclusions

The goal of this work was to explore both algorithmic and hardware design aspects of unsupervised learning in NMSs. To that end, we proposed a clustering algorithm that maps inputs to vertices of a hypercube, and then iteratively finds clusters' centroids using a Hebbian learning rule. We argue (although we haven't proven) that the proposed algorithm can be implemented more efficiently in an NMS than algorithms that use either [formula]-norm or cosine similarity as a distance function. The algorithm was implemented in a custom NMS design that leverages crossbar circuits to compute the distance between inputs and weight vectors. To test our design, we clustered 1000 MNIST images and found the results to be consistent with MATLAB's k-means clustering implementation.