Action Temporal Localization in Untrimmed Videos via Multi-stage CNNs

Introduction

Impressive progress has been reported in recent literature for action recognition [\cite=survey1] [\cite=survey2] [\cite=survey3] [\cite=survey4] [\cite=dtf] [\cite=idtf] [\cite=multiskip] [\cite=sports1m] [\cite=Simonyan14b] [\cite=xu2015discriminative] [\cite=ji] [\cite=3dcnn]. Besides detecting action in manually trimmed short video, researchers start to develop techniques for detecting actions in untrimmed long videos in the wild. This trend motivates another challenging topic - action temporal localization: given a long untrimmed video, "when does a specific action start and end?" This problem is important because real applications usually involve long untrimmed videos, which can be highly unconstrained in space and time, and one video can contain multiple action instances plus background scenes or other activities. Localizing actions in long videos, such as those in surveillance, can save tremendous time and computational costs.

Most state-of-the-art methods rely on manually selected features, and their performances still require much improvement. For example, top performing approaches in THUMOS Challenge 2014 [\cite=th1] [\cite=th2] [\cite=th3] [\cite=THUMOS14] and 2015 [\cite=th15] [\cite=THUMOS15] both used improved Dense Trajectory (iDT) with Fisher Vector (FV) [\cite=idtf] [\cite=Oneata2]. There have been some recent attempts at incorporating iDT features with appearance features automatically extracted by frame-level deep networks [\cite=th1] [\cite=th2] [\cite=th3]. Nevertheless, such 2D ConvNets does not work well because it does not capture motion information, which is important for modeling actions and determining their temporal boundaries.

As an analogy in still images, object detection recently achieved large improvements by using deep networks. Inspired by Region-based Convolutional Neural Networks (R-CNN) [\cite=rcnn] and its upgraded versions [\cite=fastrcnn] [\cite=fasterrcnn] [\cite=deepbox], we develop Segment-CNNs, which is an effective deep network framework for action temporal localization as outlined in Figure [\ref=framework]. Segment-CNNs adopts 3D ConvNets [\cite=ji] [\cite=3dcnn], which recently has been shown to be promising for capturing motion characteristics in videos, and add a new multi-stage framework. First, multi-scale segments are generated as candidates for the deep networks of three stages. The proposal stage classifies each segment as either action or background in order to eliminate background segment estimated to be unlikely to contain actions of interest. The classification stage trains typical one-vs-all classification model for all action categories as well as the background.

However, the classification model aims at finding key evidences to distinguish different categories, rather than localizing precise action occurrences in time. Sometimes, the scores from the classification model can be high even when the segment has only a very small overlap with the ground truth instance. This can be detrimental because subsequent post-processing steps, such as non-maximum suppression, might remove segment of small score but large overlap with ground truth. To explicitly take temporal overlap into consideration, we introduce the localization stage based on the same architecture, but this stage uses a novel loss function, which rewards segments with higher temporal overlap with the ground truths, and thus can generate confidence scores more suitable for post-processing. Note that the classification stage cannot be replaced by localization. We will show later that using the model learnt in the classification stage (without considering temporal overlap) to initialize the model for the localization stage (take into account temporal overlap) is important, and achieves better temporal localization accuracies.

To summarize, our main contributions are three-fold:

(1) To the best of our knowledge, our work is the first to exploit 3D ConvNets with multi-stage processes for action temporal localization in untrimmed long videos in the wild.

(2) We introduce an effective multi-stage Segment-CNNs framework, to propose candidate segments, recognize actions, and localize temporal boundaries. The first proposal stage improves the efficiency by eliminating unlikely candidate segments, and the last stage on localization is key to temporal localization accuracy boosting.

(3) The proposed techniques significantly outperform the state-of-the-art systems over two large-scale benchmarks suitable for action temporal localization. When the overlap threshold used in evaluation is set to 0.5, our approach significantly improves mAP on MEXaction2 from 1.7% to 7.4% and mAP on THUMOS 2014 from 15.0% to 19.0%. We did not evaluate on THUMOS Challenge 2015 [\cite=THUMOS15] because the ground truth is still withheld by organizers for future evaluation. More detailed evaluation results are available in Section [\ref=exp].

Related work

Action temporal localization. This topic has been studied in two directions. When training data only have video-level category labels but no temporal annotations, researchers formulated this as weakly supervised problems or multiple instance learning problems to learn the key evidences in untrimmed videos and temporally localize actions by selecting key instances [\cite=lai1] [\cite=lai2]. Sun et al. [\cite=sssn_mm15] transferred knowledge from web images to address temporal localization in untrimmed web videos.

Another line of work focuses on learning from data when the temporal boundaries have been annotated for action instances in untrimmed videos, such as THUMOS. Most of these works pose this as a classification problem and adopt a temporal sliding window approach, where each window is considered as an action candidate subject to classification [\cite=Oneata2]. Surveys about action classification methods can be found in [\cite=survey1] [\cite=survey2] [\cite=survey3] [\cite=survey4], and recently, two directions lead the state-of-the-art: (1) Wang et al. [\cite=dtf] proposed extracting HOG, HOF, MBH features along dense trajectories, and later on they took camera motion into consideration [\cite=idtf]. Further improvement can be achieved by stacking features with multiple time skips [\cite=multiskip]. (2) Enlighted by the success of CNNs in recent works [\cite=alex] [\cite=Simonyan15], Karpathy et al. [\cite=sports1m] evaluated frame-level CNNs on large-scale video classification tasks. Simonyan and Zisserman [\cite=Simonyan14b] designed two-stream CNNs to learn from still image and motion flow respectively. In [\cite=xu2015discriminative], a latent concept descriptor of convolutional feature map was proposed, and great results were achieved on event detection with VLAD encoding. To learn spatio-temporal features together, the architecture of 3D ConvNets was explored in [\cite=ji] [\cite=3dcnn], achieving competitive results. Oneata et al. [\cite=Oneata] proposed approximately normalized Fisher Vectors to reduce the high dimensionality of FV. Stoian et al. [\cite=mex1] introduced a two-level cascade to allow fast search for action instances. Instead of precision, these methods focus on improving the efficiency of conventional methods. To specifically address the temporal precision of action detection, Gaidon et al. [\cite=actoms2] [\cite=actoms] modeled the structure of action sequence with atomic action units (actoms). The explicit modeling of action units allows for matching more complete action unit sequences, rather than just partial content. However, this requires mannual annotations for actoms, which can be subjective and burdensome. Our paper presented here aims to solve the same problem of precise temporal localization, but without requiring the difficult task of manual annotation of actoms.

Spatial-temporal localization. There have been active explorations about localizing action in space and time simultaneously. Jain et al. [\cite=tube] and Soomro et al. [\cite=walk] built their work on supervoxel. Recently, researchers treat this as a tracking problem [\cite=learntrack] [\cite=actiontubes] by leveraging object detectors [\cite=objectaction], especially human detectors [\cite=jiang] [\cite=humanfocus] [\cite=actiontubes] [\cite=gangyu] to detect regions of interest in each frame and then output sequences of bounding boxes. Dense trajectories have also been exploited for extracting the action tubes [\cite=tubedt] [\cite=apt].

However, this problem is different from temporal localization, which is the main topic in this paper: (1) When using object detectors to find regions of interest, spatial-temporal localization assumes that the actions are performed by human or other pre-defined objects. (2) Spatial-temporal localization requires exhaustive annotations of objects of interest on every frames as training data. This makes it overwhelmingly time-consuming task in long untrimmed videos compared with the task of simply labeling the start and end time of an action depicted in the video, which is sufficient to satisfy many applications.

Object detection. Because our approach is encouraged by the success of deep learning approaches in object detection, we also review R-CNN and its variations. R-CNN consists of selective search, CNN feature extraction, SVM classification, and bounding box regression [\cite=rcnn]. Fast R-CNN reshapes R-CNN into a single-stage using multi-task loss, and also has a RoI pooling layer to share the computation of one image in ConvNets [\cite=fastrcnn]. Our work differs from R-CNN in the following aspects: (1) Temporal annotations in training videos can be diverse: some are cleanly trimmed action instances cut out from long videos, such as UCF101 [\cite=UCF101], and some are untrimmed long videos but with temporal boundaries annotated for action instances, such as THUMOS [\cite=THUMOS14] [\cite=THUMOS15]. We provide a paradigm about how to prepare training data for deep networks from such diverse annotations. (2) As proven in Faster R-CNN [\cite=fasterrcnn] which proposes region proposal networks, and DeepBox [\cite=deepbox] which detects objectness to re-rank the results of R-CNN, using deep networks for learning objectness is effective and efficient. Therefore, we directly use deep networks to classify background and action to obtain candidate segments. (3) We remove the regression stage because learning regression for time shift and duration of video segment does not work well in practice, probably because actions can be quite diverse, and therefore does not contain consistent patterns for predicting start/end time. To achieve precise localization, we design the localization stage using new loss function to explicitly consider temporal overlap. This can decrease the score for the segment that has small overlap with the ground truth, and increase the segment of larger overlap. This also benefits post-processing steps, such as non-maximum suppression and top-κ selection, to keep segment with higher temporal localization accuracy. Wan et al. [\cite=end-to-end] proposed a new loss function to resolve bottleneck in non-maximum suppression. However, all the bounding boxes withing an image have to be considered at the same time, and this would require huge memory.

Detailed descriptions of Segment-CNNs

Problem setup

Problem definition. We denote a video as [formula] where xt is the t-th frame in X, and T is the total number of frames in X. Each video X is associated with a set of action temporal annotations [formula], where M is the total number of action instances in X, and km, ψm, ψ'm are, respectively, action category of the instance m and its starting time and ending time (measured by frame ID). [formula], where K is the number of categories. During training, we have a set T of trimmed videos and a set U of untrimmed videos. Each trimmed video X∈T has ψm  =  1, ψ'm = T, and M = 1.

Multi-scale segment generation. First, each frame is resized to 171 (width) ×   128 (height) pixels. For untrimmed video X∈U, we conduct temporal sliding windows of varied lengths as 16, 32, 64, 128, 256, 512 frames with 75% overlap. For each window, we construct segment s by uniformly sampling 16 frames. Consequently, for each untrimmed video X, we generate a set of candidates [formula] as input for the proposal stage, where H is the total number of sliding windows for X, and φm and φ'm are respectively starting time and ending time of the h-th segment sh. For trimmed video X∈T, we directly sample a segment s of 16 frames from X in uniform.

Network architecture. 3D ConvNets conducts 3D convolution/pooling which operates in spatial and temporal simultaneously, and therefore can capture both appearance and motion for action. Given the competitive performances on video classification tasks, our deep networks use 3D ConvNets as the basic architecture in all stages and follow the network architecture of [\cite=3dcnn]. All 3D pooling layers use max pooling and have kernel size of 2×  2 in spatial with stride 2, while vary in temporal. All 3D convolutional filters have kernel size 3 and stride 1 in all three dimensions. Using the notations [formula]number of filters) for the 3D convolutional layer, [formula]temporal kernel size, temporal stride) for the 3D pooling layer, and [formula]number of filters) for the fully connected layer, the layout of these three types of layers in our architecture is as follows: [formula]64) - [formula]1,1) - [formula]128) - [formula]2,2) - [formula]256) - [formula]256) - [formula]2,2) - [formula]512) - [formula]512) - [formula]2,2) - [formula]512) - [formula]512) - [formula]2,2) - [formula]4096) - [formula]4096) - [formula]. Each input for this deep network is a segment s of dimension [formula]. C3D is training this network on Sports-1M train split [\cite=3dcnn], and we use C3D as the initialization for our networks in the proposal and classification stage.

Training procedure

The proposal stage: We train a CNNs model [formula] in this stage as the background segment filter. Basically, [formula] has two nodes that correspondingly represent the background (rarely contains action of interest) and being-action (has significant portion belongs to the actions of interest).

We use the following strategy to construct training data [formula], where label [formula]. For each segment of the trimmed video X∈T, we set its label as positive. For candidate segments from an untrimmed video X∈U with temporal annotation Ψ, we assign a label for each segment by evaluating its Intersection-over-Union (IoU) with each ground truth instance in Ψ : (1) if the highest IoU is larger than 0.7, we assign a positive label; (2) if the highest IoU is smaller than 0.3, we set it as the background. On the perspective of ground truth, if there is no segment that overlaps with a ground truth instance with IoU larger than 0.7, then we assign a positive label segment s if s has the largest IoU with this ground truth and its IoU is higher than 0.5. At last, we obtain [formula] which consists of all NT  +  NU positive segments and Nb  ≈  NT  +  NU randomly sampled background segments, where [formula].

In all experiments, we use a learning rate of 0.0001, with the exception of 0.01 for [formula], momentum of 0.9, weight decay factor of 0.0005, and drop the learning rate by a factor of 10 for every 10K iterations. The number of total iterations depends on the scale of dataset and will be clarified in Section [\ref=exp].

Note that, compared with the multi-class classification stage, this proposal stage is much simpler because the output layer only consists of two nodes (action or background).

The classification stage: After substantial background segments are removed in the proposal stage, this stage trains a classification CNNs model [formula] for K action categories as well as background.

Preparing the training data [formula] follows a strategy similar to the proposal stage. Except when assigning label for positive segment, the classification stage explicitly indicates action category [formula]. Moreover, in order to balance the number of training data for each class, we reduce the number of background instances to [formula].

As for parameters in SGD, the learning rate is 0.0001, with the exception of 0.01 for [formula], momentum is 0.9, weight decay factor is 0.0005, and the learning rate is divided by a factor of 2 for every 10K iterations, because the convergence shall be slower when the number of classes increases.

The localization stage: As illustrated in Figure [\ref=nms], it is important to push up the prediction score of the segment with larger overlap with the ground truth instance and decrease the scores of the segment with smaller overlap, to make sure that the subsequent post-processing steps can choose segments with higher overlap over those with small overlap. Therefore, we propose this stage for training a localization network [formula] with a new loss function, which takes IoU with ground truth instance into consideration.

Training data [formula] for the localization stage are augmented from [formula] by associating each segment s with the measurement of overlap, v. In specific, we set v = 1 for s from trimmed video. If s comes from untrimmed video and has positive label k, we set v equal to the overlap (measured by IoU) of segment s with the associated ground truth instance. If s is a background segment, as we can see later, its overlap measurement v will not affect our new loss function and gradient computation in back-propagation, and thus we simply set its v as 1.

During each mini-batch, we have N training samples [formula]. For the n-th segment, the output vector of [formula] is On and the prediction score vector after the softmax layer is Pn. Note that for the i-th class, [formula]. The new loss function is formed by combining [formula] and [formula] :

[formula]

where λ balances the contribution from each part, and through empirical validation, we find that λ = 1 works well in practice. [formula] is the conventional softmax loss and is defined as

[formula]

which is effective for training deep networks for classification. [formula] is designed to jointly reduce the classification error and adjust the intensity of confidence score according to the extent of overlap:

[formula]

Here, [formula] is equal to 1 when the true class label kn is positive, and it is equal to 0 when kn = 0, which means the sn is a background training sample. [formula] is intended to boost the detection scores (P) of segments that have high overlaps (v) with ground truth instances, and reduce the scores of those with small overlaps. The hyper-parameter α controls the adjustment range for the intensity of the confidence score. The sensitivity of α is explored in Section [\ref=exp]. In addition, the total gradient w.r.t output of the i-th node in [formula] is as follows:

[formula]

in which

[formula]

and

[formula]

Given a training sample [formula], Figure [\ref=loss] delivers a sense of how [formula] influences the original softmax loss. Based on this figure, we provide more concrete insights about the design of this loss function. (1) If the segment belongs to the background, [formula] and [formula]. (2) If the segment is positive, L reachs the minimum at [formula], and therefore penalizes two cases: either [formula] is too small due to misclassification, or [formula] explodes and exceeds the learning target [formula] which is proportional to overlap vn. Also note that L is designed to increase as vn decreases, considering that the training segment with smaller overlap with ground truth instance is less reliable because it may include considerable noise. (3) In particular, if this positive segment has overlap vn  =  1, the loss function becomes similar to the softmax loss, and L gradually decreases from   +    ∞   to 1 as [formula] goes from 0 to 1.

During optimization, [formula] is fine-tuned on [formula]. Because doing classification is also one objective of the localization stage, and a trained classification model can be good initialization. We use the same learning rate, momentum, and weight decay factor as in the classification stage. Other parameters depending on the dataset are indicated in Section [\ref=exp].

Prediction and post-processing

During prediction, we slide varied length temporal window to generate a set of segments and input them into [formula] to obtain proposal scores [formula]. In this paper, we keep segments with [formula]. Then we evaluate the retained segments by [formula] to obtain action category predictions and confidence scores [formula]. During post-processing, we remove all segments predicted as the background and refine [formula] by multiplying with class-specific frequency of occurrence for each window length in the training data to utilize window length distribution patterns. We apply non-maximum suppression using [formula] with overlap threshold δ (measured by IoU). Finally, top-κ selection is performed to select κ segments according to [formula].

Experiments

Datasets and setup

MEXaction2 [\cite=mex2]. This dataset contains two action classes: "BullChargeCape" and "HorseRiding". This dataset consists of three subsets: INA videos, YouTube clips, and UCF101 Horse Riding clips. YouTube clips and UCF101 Horse Riding clips are trimmed, whereas INA videos are untrimmed and are approximately 77 hours in total. With regard to action instances with temporal annotation, they are divided into train set (1336 instances), validation set (310 instances), and test set (329 instances).

THUMOS 2014 [\cite=THUMOS14]. The temporal action detection task in THUMOS Challenge 2014 is dedicated to localizing action instances in long untrimmed videos. The detection task involves 20 categories as indicated in Figure [\ref=map3]. The trimmed videos used for training are 2755 videos of these 20 actions in UCF101. The validation set contains 1010 untrimmed videos with temporal annotations of 3007 instances in total. The test set contains 3358 action instances from 1574 untrimmed videos, whereas only 213 of them contain action instances of interest. We exclude the remaining 1361 background videos in the test set.

Comparisons with state-of-the-art systems

Evaluation metrics. We follow the conventional metrics used in THUMOS Challenge to regard action temporal localization as a retrieval problem, and evaluate average precision (AP). A prediction is marked as correct only when it has the correct category prediction, and has IoU with ground truth instance larger than the overlap threshold (measured by IoU, and we use a threshold of 0.5 in all the following experiments). Note that redundant detections are not allowed.

Results on MEXaction2. We build our system based on Caffe [\cite=caffe] and C3D [\cite=3dcnn]. We only use the train set in MEXaction2 for training. The number of training iterations is 30K in the proposal stage, 20K in the classification stage, and 20K in the localization stage with α = 0.25. We use IoU threshold δ = 0.4 in non-maximum suppression and keep all non-background segments in top-κ selection.

We denote our Segment-CNNs using the above settings as S-CNN and compare with typical dense trajectory features (DTF) with bag-of-visual-words representation. The results of DTF is provided by [\cite=mex2] , which trains three SVM models with different set of negative samples and averages AP overall. According to Table [\ref=map1], our Segment-CNNs achieves tremendous performance gain for "BullChargeCape" action and competitive performance for "HorseRiding" action. Figure [\ref=show1] displays our prediction results for "BullChargeCape" and "HorseRiding", respectively.

Note that the results reported in [\cite=mex2] use different evaluation metrics. To make them comparable, we re-evaluate their prediction results according to standard criteria mentioned in Section [\ref=eval].

Results on THUMOS 2014: The instances in train set and validation set are used for training. The number of training iterations is 30K for all three stages. We again set α = 0.25 in the localization stage, IoU threshold δ = 0.4 in non-maximum suppression, and keep all non-background segments in top-κ selection. We denote our Segment-CNNs using the above settings as S-CNN.

Note that the evaluation toolkit used in THUMOS 2014 has some bugs, and recently the organizers released a new toolkit with fair evaluation criteria. Here, we re-evaluate the submission results of all teams using the updated toolkit.

As for comparisons, beyond DTF, several baseline systems incorporate frame-level deep networks and even utilize lots of other features: (1) Karaman et al. [\cite=th3] used FV encoding of iDT with weighted saliency based pooling, and conducted late fusion with frame-level CNN features. (2) Wang et al. [\cite=th2] built their system on iDT with FV representation and frame-level CNN features, and also performed post-processing to refine the detection results. (3) Oneata et al. [\cite=th1] conducted localization using FV encoding of iDT on temporal sliding window, and performed post-processing following [\cite=Oneata2]. Finally, they conducted weighted fusion for the localization scores of temporal window and video-level scores generated by classifiers trained on iDT features, still image features, and audio features. The results are listed in Table [\ref=map2]. AP for each class of each method can be found in Figure [\ref=map3]. Our Segment-CNNs significantly outperforms other systems for 14 of 20 actions, and the average performance improves from 15.0% to 19.0%. We also show two prediction results for the THUMOS 2014 test set in Figure [\ref=show2].

Efficiency analysis. Our approach is very efficient when compared with all other systems, which typically fuse different features, and therefore can become quite cumbersome. Most segments generated from sliding windows are removed in the first proposal stage, and thus the operations in classification and localization are greatly reduced. For each batch, the speed is around 1 second, and the number of segments can be processed during each batch depends on the GPU memory (approximately 25 for GeForce GTX 980 of 4G memory). The storage requirement is also extremely small because our method does not need to cache intermediate high dimensional features, such as FV to train SVM. All Segment-CNNs require is three deep networks models, which occupy less than 1 GB in total.

Designment evaluation for each stage

The proposal stage. We compare S-CNN0 (removes the proposal stage completely) and two simplified networks used in the proposal stage: (1) S-CNN1 includes the proposal stage as described above (two nodes in [formula]); (2) S-CNN2 further reduces the number of nodes in [formula] from 4096 to 512. Because of the smaller network architecture, S-CNN1 and S-CNN2 can reduce the number of operations for background segments, and therefore accelerate speed. In addition, the results listed in Table [\ref=scale] demonstrate that keeping the proposal stage can also improve average precision because the model trained in the proposal is designed for filtering out background segments that lack action of interests. In addition, reducing networks scale in the proposal stage gradually degrades performance slightly.

The classification stage. Although [formula] can replace [formula] during prediction, the classification stage is still important because fine-tuning on [formula] results in better performance. To study the effects of the classification and localization stages individually, we compare three Segment-CNNs using different settings: (1) S-CNN: keep all three stages and settings in Section [\ref=compare], and [formula] is fine-tuned on [formula]; (2) S-CNN (w/o classification): remove the classification stage completely and have no [formula] to serve as initialization for training [formula]; (3) S-CNN (w/o localization): remove the localization stage completely and use classification model [formula] to produce predictions. As shown in Figure [\ref=top-k], S-CNN fine-tuned on [formula] outperforms S-CNN (w/o classification) consistently when κ varies, and consequently the classification stage is necessary during training. Table [\ref=map4] lists the average precision for each class when κ = 20K in top-κ selection.

The localization stage. Figure [\ref=top-k] and Table [\ref=map4] also prove the effectiveness of the localization stage. By adding the localization stage, S-CNN can significantly improve performances compared with the baseline S-CNN (w/o localization), which only contains the proposal and classification stages. This is because the new loss function introduced in the localization stage refines the scores in favoring segments of higher overlap with the ground truths, and therefore higher temporal localization accuracy can be achieved.

In addition, we vary α in the overlap loss term [formula] of the loss function to evaluate its sensitivity. According to the results in listed Table [\ref=sqrt], our approach has stable performances.

Conclusion

We propose an effective multi-stage framework called Segment-CNNs to address action temporal localization in untrimmed long videos. Through the above evaluation for each stage, we demonstrate the contribution from the proposal stage to identify candidate segments, the necessity of the classification stage to provide good initialization for training the localization model, and the effectiveness of the new loss function used in the localization stage to precisely localize action instances in time. In the future, we would like to extend our work to events and activities, which usually consist of multiple actions, therefore precisely localizing action instances in time can be helpful for their recognition and detection.

Acknowledgment

This work is supported by the Intelligence Advanced Research Projects Activity (IARPA) via Department of Interior National Business Center contract number D11PC20071. The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes notwithstanding any copyright annotation thereon. Disclaimer: The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of IARPA, DOI-NBC, or the U.S. Government. We thank Dong Liu and Guangnan Ye for the insightful suggestions.