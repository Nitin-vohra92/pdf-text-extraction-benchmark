=0pt

Wolfram Koepf

Technical Report TR 94-9 (November 1994)

=1cm

REDUCE Package for the Indefinite and Definite Summation

Abstract

This article describes the REDUCE package ZEILBERG implemented by Gregor Stölting and the author.

The REDUCE package ZEILBERG is a careful implementation of the Gosper and Zeilberger algorithms for indefinite, and definite summation of hypergeometric terms, respectively. An expression ak is called a hypergeometric term (or closed form), if ak / ak - 1 is a rational function with respect to k. Typical hypergeometric terms are ratios of products of powers, factorials, Γ function terms, binomial coefficients, and shifted factorials (Pochhammer symbols) that are integer-linear in their arguments.

Gosper Algorithm

The Gosper algorithm [\cite=Gos] is a decision procedure, that decides by algebraic calculations whether a given hypergeometric term ak has a hypergeometric term antidifference gk, i. e.  gk - gk - 1 = ak, and returns gk if the procedure is successful, in which case we call ak Gosper-summable. Otherwise no hypergeometric term antidifference exists. Therefore if the Gosper algorithm does not return a closed form solution, it has proved that no such solution exists, an information that may be quite useful and important. The Gosper algorithm is the discrete analogue of the Risch algorithm for integration in terms of elementary functions.

Any antidifference is uniquely determined up to a constant, and is denoted by

[formula]

Finding gk given ak is called indefinite summation. The antidifference operator Σ is the inverse of the downward difference operator [formula]. There is an analogous summation theory corresponding to the upward difference operator Δak = ak + 1 - ak.

In case, an antidifference gk of ak is known, any sum

[formula]

can be easily calculated by an evaluation of g at the boundary points like in the integration case. Note, however, that the sum

[formula]

e. g. is not of this type as the summand [formula] depends on the upper boundary point n explicitly. This is an example of a definite sum that we consider in the next section.

Our package supports the input of powers ( a+k), factorials ( factorial(k)), Γ function terms ( gamma(a)), binomial coefficients ( binomial(n,k)), shifted factorials ( pochhammer(a,k)[formula]), and partially products ( prod(f,k,k1,k2)). It takes care of the necessary simplifications, and therefore (in principle) provides you with the solution of the decision problem as long as the memory or time requirements are not too high for the computer used.

Zeilberger Algorithm

The (fast) Zeilberger algorithm [\cite=Zei2]-[\cite=Zei3] deals with the definite summation of hypergeometric terms. Zeilberger's paradigm is to find (and return) a linear homogeneous recurrence equation with polynomial coefficients (called holonomic equation) for an infinite sum

[formula]

the summation to be understood over all integers k, if f(n,k) is a hypergeometric term with respect to both k and n. The existence of a holonomic recurrence equation for s(n) is then generally guaranteed.

If one is lucky, and the resulting recurrence equation is of first order

[formula]

s(n) turns out to be a hypergeometric term, and a closed form solution can be easily established using a suitable initial value, and is represented by a ratio of Pochhammer or Γ function terms if the polynomials p, and q can be factored.

Zeilberger's algorithm does not guarantee to find the holonomic equation of lowest order, but often it does.

If the resulting recurrence equation has order larger than one, this information can be used for identification purposes: Any other expression satisfying the same recurrence equation, and the same initial values, represents the same function.

Note that a definite sum [formula] is an infinite sum if f(n,k) = 0 for k < m1 and k > m2. This is often the case, an example of which is the sum ([\ref=eq:nchoosek]) considered above, for which the hypergeometric recurrence equation 2s(n - 1)  -  s(n)  =  0 is generated by Zeilberger's algorithm, leading to the closed form solution s(n) = 2n.

Definite summation is trivial if the corresponding indefinite sum is Gosper-summable analogously to the fact that definite integration is trivial as soon as an elementary antiderivative is known. If this is not the case, the situation is much more difficult, and it is therefore quite remarkable and non-obvious that Zeilberger's method is just a clever application of Gosper's algorithm.

Our implementation is mainly based on [\cite=Koornwinder]. Many more examples can be found in [\cite=PS], [\cite=Strehl2], [\cite=Wil1], and [\cite=Wilf] most of which are contained in the test file zeilberg.tst.

REDUCE operator GOSPER

The ZEILBERG package must be loaded by:

The gosper operator is an implementation of the Gosper algorithm.

gosper(f,k) determines a closed form antidifference. If it does not return a closed form solution, then a closed form solution does not exist.

gosper(f,k,m,n) determines

[formula]

using Gosper's algorithm. This is only successful if Gosper's algorithm applies.

Example:

This solves a problem given in SIAM Review ([\cite=SR], Problem 94-2) where it was asked to determine the infinite sum

[formula]

([formula]). The above calculation shows that the summand is Gosper-summable, and the limit S = 1 is easily established using Stirling's formula.

The implementation solves further deep and difficult problems some examples of which are:

The Gosper algorithm is not able to give antidifferences depending on the harmonic numbers

[formula]

e. g. [formula], but, is able to give a proof, instead, for the fact that Hk does not possess a closed form evaluation:

The following code gives the solution to a summation problem proposed in Gosper's original paper [\cite=Gos]. Let

[formula]

Then a closed form solution for

[formula]

is found by the definitions

and the calculation

Similarly closed form solutions of [formula] for positive integers m can be obtained, as well as of [formula] for

[formula]

and for analogous expressions of higher degree polynomials.

REDUCE operator SUMRECURSION

The sumrecursion operator is an implementation of the (fast) Zeilberger algorithm.

sumrecursion(f,k,n) determines a holonomic recurrence equation for [formula] with respect to n.

sumrecursion(f,k,n,j) [formula] searches only for a holonomic recurrence equation of order j.

A simple example deals with Equation ([\ref=eq:nchoosek])

The whole hypergeometric database of the Vandermonde, Gauß, Kummer, Saalschütz, Dixon, Clausen and Dougall identities (see [\cite=Wilf]), and many more identities, can be obtained using sumrecursion. As examples, we consider the difficult cases of Clausen and Dougall:

corresponding to the statements

[formula]

and

[formula]

[formula]

(compare next section), respectively.

Other applications of the Zeilberger algorithm are connected with the verification of identities. To prove the identity

[formula]

e. g., we may prove that both sums satisfy the same recurrence equation

and finally check the initial conditions:

REDUCE operator HYPERRECURSION

Sums for which the Zeilberger algorithm applies, in general are special cases of the generalized hypergeometric function

[formula]

with upper parameters [formula], and lower parameters [formula]. If a recursion for a generalized hypergeometric function is to be established, you can use the following REDUCE operator:

hyperrecursion(upper,lower,x,n) determines a holonomic recurrence equation with respect to n for [formula], where upper[formula] is the list of upper parameters, and lower[formula] is the list of lower parameters depending on n.

hyperrecursion(upper,lower,x,n,j) [formula] searches only for a holonomic recurrence equation of order j.

Therefore

establishes the Vandermonde identity

[formula]

whereas

proves Dougall's identity, again.

If a hypergeometric expression is given in hypergeometric notation, then the use of is more natural than the use of sumrecursion.

Moreover you may use the REDUCE operator

hyperterm(upper,lower,x,k) that yields the hypergeometric term

[formula]

with upper parameters upper[formula], and lower parameters lower[formula]

in connection with hypergeometric terms.

The operator sumrecursion can also be used to obtain three-term recurrence equations for systems of orthogonal polynomials with the aid of known hypergeometric representations. By ([\cite=NSU], (2.7.11a)), the discrete Krawtchouk polynomials k(p)n(x,N) have the hypergeometric representation

[formula]

and therefore we declare

and get the three three-term recurrence equations

with respect to the parameters n, x, and N respectively.

Simplification Operators

For the decision that an expression ak is a hypergeometric term, it is necessary to find out whether or not ak / ak - 1 is a rational function with respect to k. For the purpose to decide whether or not an expression involving powers, factorials, Γ function terms, binomial coefficients, and Pochhammer symbols is a hypergeometric term, the following simplification operators can be used:

simplify+gamma(f) simplifies an expression f involving only rational, powers and Γ function terms according to a recursive application of the simplification rule Γ  (a + 1) = a  Γ  (a) to the expression tree. Since all Γ arguments with integer difference are transformed, this gives a decision procedure for rationality for integer-linear Γ term product ratios.

simplify+combinatorial(f) simplifies an expression f involving powers, factorials, Γ function terms, binomial coefficients, and Pochhammer symbols by converting factorials, binomial coefficients, and Pochhammer symbols into Γ function terms, and applying simplify+gamma to its result. If the output is not rational, it is given in terms of Γ functions. If you prefer factorials you may use

gammatofactorial (rule) converting Γ function terms in factorials using Γ  (x)  →  (x - 1)!.

The use of simplify+combinatorial(f) is a safe way to decide the rationality for any ratio of products of powers, factorials, Γ function terms, binomial coefficients, and Pochhammer symbols.

Example:

From this calculation, we see again that the upper parameters of the hypergeometric representation of the Krawtchouk polynomials are given by { - n, - x}, its lower parameter is { - n}, and the argument of the hypergeometric function is 1 / p.

Another example is

Tracing

If you set

tracing is enabled, and you get intermediate results, see [\cite=Koornwinder].

Example for the Gosper algorithm:

Example for the Zeilberger algorithm:

Global Variables and Switches

The following global variables and switches can be used in connection with the ZEILBERG package:

zb+trace, switch; default setting on. Turns tracing on and off.

zb+direction, variable; settings: down, up; default setting down.

In the case of the Gosper algorithm, either a downward or a forward antidifference is calculated, i. e., gosper finds gk with either

[formula]

respectively.

In the case of the Zeilberger algorithm, either a downward or an upward recurrence equation is given. Example:

zb+order, variable; settings: any nonnegative integer; default setting  5. Gives the maximal order for the recurrence equation that sumrecursion searches for.

zb+factor, switch; default setting on. If off, the factorization of the output usually producing nicer results is suppressed.

zb+proof, switch; default setting off. If on, then several intermediate results are stored in global variables:

gosper+representation, variable; default setting nil.

If a gosper command is issued, and if the Gosper algorithm is applicable, then the variable gosper+representation is set to the list of polynomials (with respect to k) {p,q,r,f} corresponding to the representation

[formula]

see [\cite=Gos]. Examples:

zeilberger+representation, variable; default setting nil.

If a sumrecursion command is issued, and if the Zeilberger algorithm is successful, then the variable zeilberger+representation is set to the final Gosper representation used, see [\cite=Koornwinder].

Messages

The following messages may occur:

***** Gosper algorithm: no closed form solution exists

Example input:

gosper(factorial(k),k).

***** Gosper algorithm not applicable

Example input:

gosper(factorial(k/2),k).

The term ratio ak / ak - 1 is not rational.

***** illegal number of arguments

Example input:

gosper(k).

***** Zeilberger algorithm fails. Enlarge zb+order

Example input:

sumrecursion(binomial(n,k)*binomial(6*k,n),k,n)

For this example a setting zb+order:=6 is needed.

***** Zeilberger algorithm not applicable

Example input:

sumrecursion(binomial(n/2,k),k,n)

One of the term ratios f(n,k) / f(n - 1,k) or f(n,k) / f(n,k - 1) is not rational.

Acknowledgement

I like to thank Gregor Stölting for his careful implementation, Winfried Neun for his assistance concerning internal details of REDUCE, and Prof. Peter Deuflhard for his support of my research.