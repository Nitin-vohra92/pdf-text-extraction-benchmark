Upper bounds on the growth rates of hard squares and related models via corner transfer matrices

and Andrew Rechnitzer2 1School of Mathematics and Physics, The University of Queensland, Brisbane, Australia 2Department of Mathematics, University of British Columbia, Vancouver, Canada

Introduction

We study the growth rate of the statistical mechanical model of a hard square lattice gas. In this model, the vertices of a two-dimensional square lattice are either occupied by a gas particle or vacant, denoted by [formula] and [formula] respectively. However, no two occupied vertices may be immediate neighbours. We can think of each occupied vertex as being covered by a square (rotated [formula] and with side-length [formula]). The constraint forbids these squares from overlapping, giving rise to the name hard squares.

In one dimension, the hard square lattice gas can be used as a simple model of data storage on a magnetic tape. As the tape is read from left to right, a vacant vertex indicates that the stored field is unchanged, while an occupied vertex indicates that the field flips. To avoid potential intersymbol interference, we forbid field flips from occurring in close succession -- hence [formula] is forbidden [\cite=Lind1995]. Because of this connection with magnetic fields, the vertices and their states are often referred to as spins.

The storage capacity of a length of tape is dependent on the number of legal configurations of the spins it contains. Accordingly, we define the partition function, which is simply the total number of possible configurations:

[formula]

The partition function typically grows exponentially with respect to the number of vertices, and so a more appropriate measure for the number of possible configurations is the partition function per site or growth rate

[formula]

The capacity of the system is the number of independent bits of storage per vertex in the system. This is directly related to κ by

[formula]

While growth rates for one-dimensional systems can be readily computed as the dominant eigenvalue of a finite transfer matrix, the corresponding problem for two-dimensional systems is typically very hard. Despite considerable effort, exact growth rates are only known for a very small number of systems. Indeed, it has been shown by Berger [\cite=Berger1966] that there exist systems for which it is undecidable if there exist any valid configurations at all. Because of this, computing growth rates has become something of a numerical challenge and has been studied extensively for many different models under numerous guises.

One of the most-studied models in this area is the aforementioned hard squares model [\cite=CalkinWilf] [\cite=louidor2010] [\cite=Friedland2010]. This model is well-studied in statistical mechanics, not just for the combinatorics of the number of configurations, but also for its macroscopic behaviour as the relative weighting of [formula] and [formula] spins changes. Obtaining very precise upper bounds for the growth rate of this model is the main focus of this paper.

We also consider two related models which forbid certain local configurations of [formula] spins (see Figure [\ref=fig_exc_models]). The non-attacking kings model forbids horizontal, vertical or diagonal adjacency of [formula] spins -- they can be considered as kings on a chessboard which cannot be placed in such a way that one attacks another. The read-write isolated memory model [\cite=RWIM1] [\cite=RWIM2] forbids two horizontally or diagonally adjacent [formula] spins (vertical adjacency is allowed). If we consider the two-dimensional array of spins as a horizontal line of spins evolving in time (each row separated by 1 time unit), then the RWIM constraint can be viewed as forbidding us from altering two adjacent spins in one time step.

It is not at all clear that tractable closed-form expressions for κ exist for these models, and none are known. There is a significant body of work on finding rigorous bounds on κ, most of which are based on the analysis of transfer matrices (see Figure [\ref=fig_tm1d2d]). Rather than writing down a transfer matrix for an infinite two-dimensional system -- an obviously impossible task -- we consider the system on an infinite strip of finite width, say w vertices. Let Vw be the column transfer matrix associated with this strip, and Λ(w) its dominant eigenvalue. Then

[formula]

Lower bounds for κ can then be computed using a clever formula based on Rayleigh quotients due to Engel [\cite=Engel1990], and Calkin and Wilf [\cite=CalkinWilf] (we refer the reader to the latter paper for its proof):

[formula]

Calkin and Wilf also proved the following upper bound on κ, and we again refer the reader to their paper for its proof:

[formula]

where Λo(w) is the dominant eigenvalue of a related matrix, Vow, the transfer matrix for the same system but with cylindrical boundary conditions (see Figure [\ref=fig_tm1d2d]).

Almost all works which compute bounds on the growth rates of the hard squares and related models use the above two inequalities (two recent exceptions being [\cite=Gamarnik2009] and previous work by the authors [\cite=lowerbounds], both of which use methods from statistical physics). However, the practical application of these inequalities is quickly hampered by the exponential growth of the size of transfer matrix with respect to strip width. There are creative methods to avoid storing the full matrix, perhaps the most successful being a matrix compression method due to Lundow and Markström [\cite=Lundow]. Together with Friedland [\cite=Friedland2010], they used this method to compute Λ(28) and Λo(36), which in turn allowed them to exactly determine the first 15 digits of κ for the hard squares model:

[formula]

While this compression method greatly decreases the time and memory needed, the requirements still grow exponentially with strip width.

In this work, we compute upper bounds on the growth rates of the models. We start with equation ([\ref=eqn_upper]), but rather than computing Λo(w) exactly, we compute an upper bound on it using an approximation of the dominant eigenvector of Vow and the Collatz-Wielandt formula [\cite=collatz] [\cite=wielandt] (which we include as Lemma [\ref=lem:collatz]). To form the approximate eigenvector, we use corner transfer matrix formalism. This is a very powerful approach developed in statistical mechanics by Baxter [\cite=BaxterDimers] [\cite=CTM:1] [\cite=CTM:Hsq] as a way to estimate the partition function of various lattice models, both numerically and via series expansions [\cite=CTM:Hsq] [\cite=CTM:Hardsq] [\cite=chan2013series].

The CTM formalism allows us to express each component of the approximate eigenvector as the trace of a product of auxiliary matrices. This means that we are no longer required to store either the transfer matrix or vector; we can compute the vector component by component as the Collatz-Wielandt formula requires. To optimise the choice of vector (and the associated auxiliary matrices), we use an extension of CTM known as the corner transfer matrix renormalisation group (CTMRG) method, developed by Nishino and Okunishi [\cite=CTM:RG1] [\cite=CTM:RG2].

Upper bounds on upper bounds

We start by restating Calkin and Wilf's upper bound on the growth rate κ.

Let Vow be the column transfer matrix for a system of width w with cylindrical boundary conditions, and let Λo(w) be its dominant eigenvalue. Then for any even integer m > 0,

[formula]

As noted in the introduction, almost all upper bounds in the literature are derived using Lemma [\ref=lem:calkinwilf] by exact calculation of the dominant eigenvalue of Vow. As such they are restricted, both in time and memory, by the exponential growth of the transfer matrix size. We also start with this bound, but do not compute the eigenvalue exactly. Instead we find upper bounds for Λo(m) using the Collatz-Wielandt formula [\cite=collatz] [\cite=wielandt].

Let A be an irreducible square matrix with non-negative entries. Then for any vector [formula], the largest eigenvalue of A (denoted λ) is real and positive and is bounded by

[formula]

Let [formula] be the left eigenvector of A corresponding to λ. By the Perron-Frobenius theorem, λ is real and positive and [formula] has strictly positive entries. Then for any [formula],

[formula]

and so

[formula]

Some terms in the sum must be non-negative and some non-positive (although they may all be 0 if [formula]), and therefore the maximum of the summands is non-negative and the minimum is non-positive. Since [formula], the result follows.

We use this lemma to find an upper bound on Λo(m). In order to calculate a tight bound, we need to get as close as possible to the dominant eigenvector of Vom. We do this using Baxter's corner transfer matrix ansatz, which specifies to choose a vector ψ of the form

[formula]

where the index [formula] runs over all legal configurations of one row of the cylinder, and {F(a,b)} is a set of four matrices of size n  ×  n, indexed by two spin values a and b. Here n is an arbitrary positive integer which need not be related to m. The F matrices are calculated from corner transfer matrix methods; the process is quite involved, and we leave its description until the next section. We can interpret this ansatz pictorially by thinking of the F matrices as half-row transfer matrices which build up the state [formula] one row at a time -- see Figure [\ref=fig:VandF].

In order to use ([\ref=eq:collatz]), we must also be able to compute [formula], and to do this we define the face weight ω. The weight of a face (a single cell of the lattice) is 1 when the spins around it form a legal configuration and 0 otherwise. The element of Vom which maps a column in state [formula] to a column in state [formula] is then given by the product

[formula]

This is shown pictorially in Figure [\ref=fig:VandF]. We can then write the action of Vom on ψ as

[formula]

where Fl is a 2n  ×  2n matrix defined by the block matrix equation (shown pictorially in Figure [\ref=fig:enlarge])

[formula]

We are now able to combine the above expression with ([\ref=eq:calkinwilf]) and ([\ref=eq:collatz]) to derive

[formula]

This is the upper bound that we use for κ, and it is valid for any m, n, and F, as long as we satisfy the following conditions:

Vom is non-negative. In fact Vom is a 0-1 matrix for the considered models, so this follows immediately.

Vom is irreducible. This is equivalent to showing that every set of states [formula] on a cut can be reached from any other. This is easy to show for our models, as there is no restriction on adjacency to [formula] spins -- so any [formula] can be adjacent to [formula], and thus can reach any other set of states.

[formula] is positive. This does not immediately follow from ([\ref=eq:psi]). We must show this by explicitly computing ([\ref=eq:psi]) for every [formula] and verifying that it is positive. However, this does not result in any extra work since we already need these values to compute ([\ref=eq:upper]).

Putting all of this together, we find an upper bound as follows:

Select m,n  >  0 with m even.

Calculate a set of n  ×  n matrices {F(a,b)} as specified in the next section.

For all possible cut states [formula] of m spins:

Verify [formula], where [formula] is given by ([\ref=eq:psi]).

Calculate [formula].

The upper bound for κ is the maximum of all values calculated in step [\ref=step:bound].

This method uses very little memory, because we do not need to keep the entire ψ vector in memory. Each component can be computed independently as it is needed from the F and Fl matrices. These matrices are tiny compared to ψ and Vom, so this is a very modest requirement. Furthermore, the calculation in step [\ref=step:calc] for any particular component does not depend on any other component, so can be done in parallel (and ratios compared afterwards). This step is by far the most time-consuming part of the process -- the number of traces required grows exponentially with m. Hence parallelisation creates a huge real-time saving. Details of our implementation and some optimisations are given in Section [\ref=sec_results] below.

Approximate eigenvectors from corner transfer matrices

So far, we have not described how to calculate the F matrices, and this is clearly critical in order to obtain a good upper bound. We need to choose the matrices in such a way that the approximate eigenvector ψ given by ([\ref=eq:psi]) is close to the true eigenvector of Vom. We accomplish this through the use of corner transfer matrix formalism, which we briefly outline here; we direct the reader to a more detailed discussion in [\cite=lowerbounds].

The expression ([\ref=eq:psi]) is the starting point of Baxter's corner transfer matrix formalism. It can be represented pictorially by considering F(a,b) in the limit n  →    ∞   as a half-row transfer matrix; it takes a half-infinite row of spins ending with spin a, and transfers it along one row to a half-infinite row of spins ending with spin b. Using this representation, we can see that the expression for ψ represents a half-plane partition function (normalised in some way), which is unchanged under the action of Vom save for a constant factor -- i.e., it is an eigenvector of Vom. This representation is shown in Figure [\ref=fig:VandF].

These infinite-dimensional half-row transfer matrices can be shown [\cite=CTM:1] [\cite=lowerbounds] to satisfy the CTM equations

[formula]

where A(a) are matrices of the same size as F, indexed by a single spin value. The A matrices are the eponymous corner transfer matrices; they transfer a half-infinite row of spins ending with spin a around an angle of π / 2, sweeping out a quarter of the lattice. The CTM equations can then be interpreted as equating half-plane transfer matrices (see Figure [\ref=fig:XandY]). The matrices on either side of the equality differ only by an extra row, which results in the scalar multipliers ξ and η.

In the infinite-dimensional limit, the CTM equations directly yield the solution of the model via κ  =  η  /  ξ. We can approximate the true solution by taking F matrices of finite size n  ×  n. The CTM equations can be solved for finite-dimensional matrices, and we use these finite sized solutions for our F matrices in our bound finding procedure.

Solving the CTM equations at finite size is quite non-trivial. For this purpose, we use the corner transfer matrix renormalisation group method developed by Nishino and Okunishi [\cite=CTM:RG1] [\cite=CTM:RG2]. In this method, we start with some trial values for A(a) and F(a,b) which are then "polished" into solutions. We do this by expanding A and F into the 2n  ×  2n matrices Al and Fl, using the block matrix equations ([\ref=eq:fl]) and

[formula]

These can be interpreted as "larger" versions of the corner and half-row transfer matrices (see Figure [\ref=fig:enlarge]).

We then reduce the large matrices to generate new iterations of A and F. To do this, we diagonalise Al(a), producing orthogonal diagonalising matrices P(a). We take the transformations

[formula]

which leave the CTM equations invariant. We then truncate the matrices to the original n  ×  n size by keeping the n largest eigenvalues of Al and performing a consistent truncation on Fl. This has the effect of making the matrices intuitively "cover as large an area as possible", so that they are close to the infinite-size solution of the CTM equations.

The expanding and reducing procedures are iterated, and it is observed that the matrices eventually converge to the finite-size solution of the CTM equations. The initial values for the A and F matrices can be taken to be of some small size, typically 1  ×  1 or 2  ×  2. They can then be "built up" to the desired n  ×  n size by sometimes keeping extra eigenvalues at the reduction step, resulting in larger matrices until the desired size is reached. We again direct the reader to [\cite=lowerbounds] for a more detailed description of this process.

Results

The method was implemented in 2 distinct steps: computing the F matrices, and then computing the trace ratios for all legal states [formula]. Both parts were implemented in C++ using the Eigen numerical linear algebra library [\cite=eigenweb]. We used Eigen since it readily supports multiple precision computation through the MPFR library [\cite=MPFR]. High precision is necessary in the first step because the eigenvalues of corner transfer matrices range over many orders of magnitude, and in the second step so that the trace ratios are also of high precision -- though less precision is needed. The first step requires only modest computing resources, and all F matrices were generated within a few hours on a modest Linux laptop using only a few megabytes of memory.

The second step -- computing the trace ratios -- can be implemented quite naïvely and still give good results. However we use a number of simple and very effective optimisations. Firstly, traces are invariant under cyclic permutations, so we only have to consider legal cut states modulo cyclic permutations for [formula]. Traces are also invariant under transposes, and the F matrices satisfy F(a,b)  =  FT(b,a), so we can also disregard reflections. Thus we consider bracelets which are legal for the system (generated using the methods in [\cite=Ruskey2000]). This reduces the number of computations by a factor of approximately 2m. Additionally, we can gain a little more speed by using similarity transforms to diagonalise one of the F matrices. Finally, we split the set of bracelets into batches of equal size across about 300 cores on the WestGrid computing cluster. Each batch (with n = 30,m = 50) took approximately 1 day of CPU time. Note that final upper bounds were computed at high precision and then rounded up.

Our results are given in Table [\ref=tab:results]. For each of the three models, we computed the bound using F matrices of size 30  ×  30 on cylindrical systems of circumference 50 vertices. In this table, we also indicate the previous best upper bounds. In Table [\ref=tab:known_digits], we combine these new upper bounds with the best known lower bounds to show the digits of the growth rates which we now know rigorously. We extend the number of rigorously known digits from previous work by between 4 and 6 digits for our models.

We note here that the use of software floating point precision for the trace-ratio computations made our code about 50-100 times slower than if we had been able to use hardware floating point. Unfortunately most commercially available processors, including those we had access to, support 80-bit double-extended precision rather than true 128-bit or higher precision. If such high precision hardware floating point were available, then we could have increased m by about 8, which would perhaps give an extra 2 or 3 digits exactly. The previous best upper bounds [\cite=Friedland2010] [\cite=louidor2010] used machine floating point.

Due to a lack of rigorous results on the theoretical convergence of the CTMRG, it is difficult to predict how good our bounds will be for given m and n. Thus we must observe their empirical behaviour for various m and n. We first note that m is the computational bottleneck parameter, as the time required is exponential in m (while the time and memory requirements depend polynomially on n). Thus we wish to increase m to the limit of our computational power, and then select an optimal n for that value of m. We show the results in the context of the hard squares model; other models behave in much the same way.

For any fixed m, the bound given by ([\ref=eq:upper]) decreases as n increases, but only up to a small limit, after which it stays level. Therefore, given a value of m, we can be assured of calculating the best bound for that m as long as n is sufficently large. This is shown in Figure [\ref=fig:finite]. The optimal n (i.e., the value of n after which the bound does not decrease further) for any given m appears to follow a linear relationship with m. In Figure [\ref=fig:optimal], we show this value for small m. For our final bound computation, we were able to run the method for m  =  50. We estimate by extrapolating the fitted linear relationship that for this value of m, the optimal value of n is approximately 14. We have taken n  =  30, and so are confident that this value is sufficient to achieve the best bound for our value of m.

Next, we look at the performance of the bound in relation to m. Because our bound is itself an upper bound on Λo(m)1 / m, we know that it will be inferior to an explicit evaluation of ([\ref=eq:calkinwilf]) for the same m. However, for sufficiently large n, the difference between ([\ref=eq:upper]) and ([\ref=eq:calkinwilf]) is very small. This is shown in Figure [\ref=fig:error], where there is almost no discernible difference between the two bounds. Thus we expect that the accuracy of our bound will behave similarly to that of ([\ref=eq:calkinwilf]), which is conjectured to decrease to κ exponentially with respect to m. This behaviour can also be observed in Figure [\ref=fig:error]. This means that the algorithm, which is exponential-time in m, will also be exponential-time in the number of digits found. This is worse than the observed performance for the lower bound found in [\cite=lowerbounds], although this is not unexpected.

As previously mentioned, ([\ref=eq:calkinwilf]) is the formula used to generate all previous best known upper bounds. The advantage of our method is that ([\ref=eq:upper]) is almost as accurate and much faster to compute, even though both methods are exponential in m. For example, in ([\ref=eq:calkinwilf]) the eigenvalue Λo(36) was computed using over 200 gigabytes of memory and 40 days of CPU time (and real time). We were able to push to m  =  50 using only a few megabytes of memory and about 300 days of CPU time but only 1 day of real time due to parallelisation. Thus we are able to achieve much better bounds.

Conclusion

In this paper, we have used transfer matrix analysis, the Collatz-Wielandt formula, and corner transfer matrix formalism to derive upper bounds on the growth rates of three lattice models motivated by an information storage problem. Our bounds are a significant improvement on all previously known upper bounds, and together with the corresponding lower bounds from [\cite=lowerbounds], fully determine the growth rates to a generous number of digits.

Our method is not limited to the models we have studied; nearly any lattice model which can be written in terms of local face weights and satisfies some elementary symmetry properties can be analysed in this way. It can be applied directly to colouring models, and it appears possible to exploit symmetries in this case to make it even more efficient. On the other hand, some other models lack irreducible transfer matrices, for example the "even" model in [\cite=lowerbounds]. We are extending our method to account for these difficulties.

One weakness of our method is that it appears to be exponential-time in the number of digits required, due to the need to evaluate all the ratios in ([\ref=eq:upper]) (modulo symmetries). It seems intuitive that much of this is wasted work; since in the limit n  →    ∞   it can be shown that the solution of the CTM equations gives the exact eigenvector in ([\ref=eq:psi]) and as such, all of the ratios should be very close to each other, and it should be unnecessary to calculate all 2m of them. We observed, for example, that the traces were always positive but we have been unable to prove this. Similarly, we observed that the maximum or minimum trace ratio was frequently given by [formula] or [formula], but, again, we have been unable to prove this. Such results would allow us to compute bounds much more efficiently and we are currently working to prove them.

Acknowledgements

The authors would like to thank Ian Enting and Brian Marcus for many helpful and interesting discussions. Additionally they thank WestGrid for providing access to their computer cluster and AR acknowledges financial support from NSERC.