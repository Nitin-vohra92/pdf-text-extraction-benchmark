=0pt =0pt =0pt

Requirements Engineering Aspects of a Geographically Distributed Architecture

Globalisation of the software and systems development offer great opportunities for the development industry. However, they also mean new challenges coming from the diversity of requirements on different locations, especially in the sense of legal requirements and regulatory compliance. The reasons for the differences in software and systems requirements within different countries, states and organisations are the cultural and economics diversity, as well as the diversity in standards, legal regulations and laws. These challenges have some similarities with the problems of product customisation and the development of product lines, but the core of the architecture requirements is different due the specific nature of the relations between the requirements for the geographically and organisationally distributed development and application of software.

Requirements engineering (RE), i.e., requirements elicitation, evaluation, specification, and design producing the functional and non-functional requirements, is one of the key disciplines in the software development domain. It has a critical impact on the product's quality. Requirements-related errors are often a major cause of the delays in the product delivery and development costs overruns, cf. e.g., [\citep=vanLamsweerde:2008] [\citep=Pretschner:2007] [\citep=Sawyer2007]. There are several methodologies on development of software systems from requirements, also enclosing CASE tools support, e.g., [\citep=BroySlotosch2001] [\citep=holzl2010autofocus] [\citep=spichkova2011architecture] [\citep=VerisoftXT_FMDS]. The RE task is challenging even in the case of a local (non-distributed) development of a product for application within/for a single country or organisation, i.e. where the system acts within an environment with a uniform set of standards, legal regulations, etc. Thus, in the case of global development we need to have an approach that deals the corresponding issues in a systematic and scalable way. There are several approaches that check requirements for compliance [\citep=Breaux2008] [\citep=Relaw2009] [\citep=Siena2009] or ensuring the compliance of the outcomes of business processes against outcome-focused regulations [\citep=eros2013]. We are going a step further, aiming to cover the RE aspects for the geographically distributed development and application. To minimise the overall effort while specifying and also ensuring required software and system requirements in a global development context, we elaborated a logical framework. The framework provides methodological structuring the requirements for the geographically distributed product development and application, as well as developing of the corresponding global architecture requirements. The purposed approach will help to analyse the relations between requirements and to trace requirements' changes in a global context.

Outline: The rest of the paper is structured as follows: Section [\ref=sec:related] overviews related work on integration architecture and RE as well as on regulatory compliance within the field of software engineering. In Section [\ref=sec:framework] we present our view on the architectural dependencies for the requirements for a global development and geographically distributed product application. In Section [\ref=sec:structure] we introduce the core ideas of requirements structuring process and requirements analysis in a global context. Section [\ref=sec:conclusion] concludes the paper by highlighting the main contributions of the paper and describing the future work directions.

[\cite=GlinzRE2007] surveyed the existing definitions of non-functional requirements (NFR), highlights and discusses the problems with the current definitions, and contributes concepts for overcoming these problems. In our work, we are mainly focusing on NFR in the sense of legal aspects and regulatory compliance, also taking into account human factor aspects of the requirement modelling [\citep=hffm_spichkova].

Integrating Architecture and Requirements Engineering: The main purpose of the requirements specification (RS) is to elicit and to document the given problem (product/software/system) using concepts from the problem domain, i.e. on the RE phase we are speaking only on the problem statement. In contrast to this, the aim of a software architecture (SA) is to design a draft of the solution for the problem described in the RS, at a high level of abstraction. Thus, there are tight interdependencies between functional/non-functional requirements and architectural elements, which makes the integration of the RE and architecture crucial [\citep=WinWinQR2001] [\citep=Egyed01refinementand]. The results of the empirical study conducted by [\cite=Ferrari2007] also have shown that the software architects with the knowledge and experience on RE perform better, in terms of architectural quality, than those without these knowledge end experience.

[\cite=Nuseibeh:2001] described a spiral model-like development cycle of requirements and architecture. [\cite=Pohl:2007] went further and have provided methodical guidance for the co-design. An experience-based approach for integration architecture and RE is presented by [\cite=icsePaechKDBKKTPD03]. This approach that supports the elicitation, specification and design activity by providing experience in terms of questionnaires, checklists, architectural patterns and rationale that have been collected in earlier successful projects and that are presented to developers to support them in their task.

The REMseS approach [\citep=Braun2014] aims at supporting RE processes for software-intensive embedded systems. The authors introduced fundamental principles of the approach and gave a structural overview over the guide and the tool support.

In contrast to these approaches, our research covers the regulatory compliance aspects and is oriented on legal requirements representation and analysis in the scope of the global software development.

Regulatory compliance: A survey of efforts to support the analysis of legal texts in the context of software engineering is presented in [\citep=OttoLegalReq]. The authors discuss the role of law in requirements and identify several key elements for any system to support the analysis of regulatory texts for requirements specification, system design, and compliance monitoring. [\citet=relaw2011] also identified key artefacts, relationships and challenges in the compliance demonstration of the system�s requirements against engineering standards and government regulations, also providing This work provides a basis for developing compliance meta-model.

[\cite=Kiyavitskaya2008] investigated the problem of designing regulation-compliant systems and, in particular, the challenges in eliciting and managing legal requirements. [\cite=Breaux2006] reported on an industry case study in which product requirements were specified to comply with the U.S. federal laws. [\cite=Relaw2009] performed a case study using our approach to evaluate the iTrust Medical Records System requirements for compliance with the U.S. Health Insurance Portability and Accountability Act. [\cite=Siena2009LawReq] presented the guiding rules and a framework for for deriving compliant-by-construction requirements, also focusing on the U.S. federal laws.

In contrast to these approaches, our research is oriented on global software development, dealing with diversity in standards, legal regulations, etc. within different countries and organisations.

Suppose that we have to develop M products (software components/systems) [formula]. We denote the set of products by P. Each product Pi, 1  ≤  i  ≤  M has the corresponding set of requirements RPi. However, in the case the legal requirements and the regulatory compliance are taken into account, the set of requirements will depend on the regulations and laws of the country/state the product is developed for.

In the case of global and remote development [\citep=spichkova2013abstract], we have to deal with cultural and economics diversity, which also has an influence on the software and system requirements. Suppose the products [formula] are developed for application in N countries [formula] with the corresponding

regulations/laws [formula] and

cultural/economics, i.e., human factor [\citep=Borchers:2003], influences [formula].

We denote the set of requirements to the product Pi valid for the country Cj by RCjPi. The complete set of requirements to the product Pi is then defined by

[formula]

The sets of requirements RPi might be different for each product Pi in different countries, i.e. RCj1Pi is not necessary equal to RCj2Pi for the case j1  ≠  j2.

Figure [\ref=fig:LRset_Cj] presents the corresponding architectural dependencies for the requirements based on the regulations and laws of the country Cj. We divide the set of requirements RPi in two (disjoint) subsets. For each of these subsets, we have to distinguish two separate parts: general and country-specific:

RLCjPi denotes the requirements based or depending on the regulations and laws, which could be country/state/organisation-specific. Requirements of this kind does not depend on the human factor related aspects.

[formula]

[formula]

RFNCjPi denotes the functional and non-functional requirements that are independent from the regulations and laws, but may depend on the human factor related aspects, which could be country-specific.

[formula]

[formula]

For simplicity, we denote the general subsets by RLgeneralPi and RFNgeneralPi respectively.

Given the set RLCjALL be the set of all legal requirements of the country Cj, we can see the set RLCjPi as a projection of RLCjALL to the product Pi:

[formula]

On this basis, we can say that the set of legal requirements for the country Cj related to the development of products [formula] is defined as a union over the corresponding requirements sets:

[formula]

However, it is not efficient to base the requirements analysis for the geographically distributed development on the sets RLCj:

The sets [formula] could have a joint subset Regul of the regulations/laws that are equal for all countries [formula]:

[formula]

We denote for each RegulCj the corresponding compliment to Regul (i.e. the country-specific subset) by [formula]. It it is important to identify these subsets as well as the corresponding subsets of [formula], as this helps to trace the RL-requirements' changes more efficiently.

Some requirements in RLCj can be stronger versions of another requirements from this set. For example, if req1∈RLCi1 and req2∈RLCi2 are not equal, they both will belong to RLCj, even if req1 is a refinement of req2. In this case, we call req2 a weaker version of req1 and denote it by [formula].

Thus we need to have a structured architecture for the legal requirements on the products [formula]. For this reason we build the corresponding sets RLCjmin and RLCj*, where RLCj* denotes the strongest set of legal requirements for the country Cj (related to the concrete products development), and RLminCj denotes the set of legal requirements that should be fulfilled by all the products [formula] developed in the country Cj:

[formula]

RLCj* is an optimisation of RLCj, where all the weaker versions of the requirements are removed using the algorithm presented in Section [\ref=sec:structure].

In our framework, we perform the analysis based on the optimised views on the requirements sets, focusing on the regulatory/legal aspects. First of all, we analyse the sets of relevant regulations [formula]. Three cases are possible:

In the case [formula], we have the situation when the regulations are completely different for all [formula]. This also implies that [formula] for all Pi, 1  ≤  i  ≤  M, i.e., RLCjPi  =  RLspecificCjPi. We have to trace all the sets RLspecificCjPi separately: changes in RegulCj do not influence on the global development process.

The regulations are not completely identical for [formula], but [formula]. If we can rely on the statical nature of this requirements (i.e. that these requirements do not change over the time of the development and the application), it would be beneficial to apply the component-based development paradigm [\citep=crnkovic2007component]: the requirements RLgeneralPi or at least the major part of them should correspond to architectural components(s) that are separate from the components corresponding to [formula]. However, if any of regulations sets RegulCj has some changes, this would influence on the development process as a whole.

In the case [formula], we have the situation when the regulations are completely identical for all [formula], which also means RLCjPi  =  RLgeneralPi. If we can rely on the statical nature of this requirements, we have the simplest case for the development process: we develop a single component (system) from RLgeneralPi to apply if for all [formula].

Thus, RLCjmin is defined on basis of Regul. The corresponding product-centred view on the architectural dependencies is presented on Figure [\ref=fig:LRset_Pi]. The algorithm of constructing RCjmin is trivial: we check all the requirements in [formula] to find out those elements, which belong to each of the sets.

Our approach is based on the ideas of refinement-based specification and verification. On the formal level, we need to define which exactly kind of a refinement we mean, e.g., behavioural, interface or conditional refinement [\citep=Spichkova2008131] [\citep=broy_stolen_01]. However, on the level of the logical architecture and modelling of the dependencies between the (sets of) requirements, we can abstract from these details.

In this paper, we present a simplified version of the optimisation algorithm. It can be applied to build the set RLCj* on the basis of RLCj (cf. Figure [\ref=fig:LRset_Cj] for the country-centred view), to build the set RPi* (cf. Figure [\ref=fig:LRset_Pi] for product-centred view) as well as to build the strongest global set of requirements R* over [formula] (cf. Figure [\ref=fig:LRset]). We start the algorithm with an empty set and build it up iteratively from the elements of the corresponding set.

Step 0: [formula], X  =  RLCj.

Step 1: If [formula], the RLCj* is complete, otherwise choose a requirement req∈X:

If a copy of req already belongs to RLCj* or r is a weaker version of any requirement from RLCj*, the set should not be updated on this iteration: [formula] RLCj*  ~  is  ~  unchanged

If r is a stronger version of any requirement(s) from RLCj*, we add r to RLCj* and remove all the weaker requirements: [formula] [formula]

If r does not belong to RLCj* and is neither weaker nor stronger version of any requirement from RLCj*, we add it to RLCj* and proceed the procedure with the next requirement from RLCj: [formula] [formula] [formula]

Step 2: The req element is deleted from the set X: [formula].

Steps 1 and 2 are then repeated until [formula].

While identifying RLmin we will analyse which products' subcomponents can be build once and then reused for the whole product set [formula]. On this basis, we will have more efficient process for the global software and systems development, also having an efficient tracing of requirements changes that might come from the changes in the regulations and laws for countries [formula]. For example, changes in [formula] imply changes in RLspecific1 only, which means that only the country-specific part of the architectural components for C1 is affected, where any changes in Regul might influence the global architecture.

While identifying RL *  we will obtain the global view on the the products' requirements, which is not overloaded with the variants of the similar requirements, where some requirements are just weaker versions of other.

This paper introduces our ongoing work on requirements specification and analysis for the geographically distributed software and systems. Developing software and systems within/for different countries or states or even within/for different organisations means that the requirements to them can differ in each particular case, which naturally impacts on the software architecture and on the development process as a whole. Dealing with this diversity and avoiding contradictions and non-compliance, is a very challenging and complicated task. A systematic approach is required. For this reason, we created a formal framework for the analysis of the software requirements diversity, which comes from the differences in the regulations for different countries or organisations. In this paper, we (i) presented our architectural dependency model for the requirements on the distributed development and application, (ii) introduced the core ideas of the corresponding requirements structuring process and requirements analysis in a global context. (iii) discussed the the research and industrial challenges in this field, as well as discussed our solutions and how they are related to the existing approaches.

Future Work: In our future work we will investigate how to extend the presented ideas to the software and systems development that involves hierarchical dependencies between the sets of regulations/laws. This could be the case if see the set [formula] not only as the set of countries/states, but also as a set of organisations having different internal regulations. Then we have to deal with hierarchical dependencies with many levels, e.g., (1) organisational regulations, (2) state's regulations and laws, (3) country's regulations and laws, where we also need to check which of the regulations are applicable in each particular case.