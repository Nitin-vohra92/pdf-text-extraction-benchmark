Represent a natural number as the sum of palindromes in various bases

Statement of result

Let [formula] denote the set of natural numbers. For any integer [formula], every number [formula] has a unique representation of the form

[formula]

where each digit δj belongs to the digit set

[formula]

and the leading digit δl - 1 is nonzero whenever l  ≥  2. We use

[formula]

represents the relation [\eqref=eq:representation]. The integer n is said to be a palindrome if its digits satisfy the symmetry condition

[formula]

Denoting by Pd the collection of all palindromes in [formula], we are to show that Pd is an additive basis for [formula] and for any [formula].

Every natural number is the sum of O(d) palindromes in base d for integer [formula].

[\cite=Ban] proved the decimal case using a different approach. Our construction is simpler and more generalized but it uses more palindromes than [\cite=Ban].

The proof

Notation.

We denote by Pd,l,k the set of integers {c(dl - 1 + dk)|0  ≤  c < d,0  ≤  k < l - 1}. Next we denote by [formula] the set of integers {xdk|dl - 1 - k  ≤  x < dl - k}. In other words, [formula] is the set of natural numbers n that have a d base expansion of the form

[formula]

with δl - 1  ≠  0.

Inductive passage from [formula] to [formula].

Every number [formula] is the sum of at most 2d numbers given by Algorithm [\ref=algorithm:algo1] from Pd,l,k and some number [formula] for l  ≥  k + 6.

Since [formula], we have

The first loop in Algorithm [\ref=algorithm:algo1] executes for at most d - 1 times.

If the first loop executes for at least d times, then n  ≥  dl - 1 + dx  ≥  dl.

It's clear that dl - 1  ≤  n < dl - 1 + x after the first loop. Similarly, we have

The second loop in Algorithm [\ref=algorithm:algo1] executes for at most d times.

If the second loop executes for at least d + 1 times, then n  ≥  dl - 1 + dy  ≥  dl - 1 + x.

Thus [formula] for the returned |Sk|. To complete the proof, it suffices to show that the returned n by Algorithm [\ref=algorithm:algo1] is in Nl - 1,k + 1. δk(n)  =  0 is satisfied by the choice of c. By the end condition of the second loop,

[formula]

Pseudo-Theorem 1.

If n is a natural number with at most k nonzero d base digits, then n is the sum of 2k palindromes in base d.

Let f be the function as following:

[formula]

So

[formula]

The proof is completed by the observation that f(δk) and dkδk - f(δk) are both palindromes.

(Pseudo-Theorem 1)Every number is the sum of O(d) pseudo-palindromes in base d for [formula].

A pseudo-palindrome here is a palindrome with possibly leading zeros. For any number [formula], using Algorithm [\ref=algorithm:algo1] repeatedly, we have a family of sets {Sk|l - k  ≥  k + 6}. Sk consists at most (d - 1) numbers in Pl - k - 1,k(denoted by sk,j,0  ≤  j < d), d numbers in Pl - k - 2,k(denoted by tk,j,0  ≤  j  ≤  d), and 1 number in Pl - k - 3,k(denoted by rk). (We add zeros in case of |Sk| < 2d.) Notice that sk,j only have two nonzero d base digits, namely δl - k - 2 and δk. Considering the form of d-base expansions,

[formula]

is a pseudo-palindrome; so are [formula] and [formula] . Thus n is the sum of 2d pseudo-palindromes and a number m in [formula] for [formula]. By Lemma [\ref=lemma:2k], m is also a sum of at most 10 palindromes.

Proof of Theorem [\ref=thm:main].

The only "bug" in Pseudo-Theorem 1(Lemma [\ref=lemma:pseudo]) is that the 2d pseudo-palindromes may have leading zeros when 0∈S0(i.e. when some of δl - 2(s0,j), δl - 3(t0,j) and δl - 4(rj) are equal to zero). So we must reduce a natural number n to some number with 0∉S0 in advance.

Let [formula] for [formula]. Then n is the sum of O(d) palindromes produced by Algorithm [\ref=algorithm:algo2] and an natural number f(n) of the form (d - 1)dl - 2 + (d - 1)dl - 3 + (d - 1)dl - 4 + m for d2 - 2d  ≤  m < dl - 4.

As the analysis of Algorithm [\ref=algorithm:algo1], we can easily show that |T|  =  O(d) and dl - 1 - w  ≤  n < dl - 1 after Algorithm [\ref=algorithm:algo2].

[formula]

We are now ready to give a proof to Theorem [\ref=thm:main]. If n  ≤  d8 + 1, n is the sum of at most 16 palindromes by Lemma [\ref=lemma:2k]. Otherwise we use Algorithm [\ref=algorithm:algo1] on f(n) produced by Algorithm [\ref=algorithm:algo2]. In Algorithm [\ref=algorithm:algo1], both the first and the second loop executes for (d - 1) times for [formula], when the second loop executes for one more time for d = 2. (The inequality d2 - 2d  ≤  m < dl - 4 provides that we don't need to care about the trailing digits of x, y and z in Algorithm [\ref=algorithm:algo1].) In the case of [formula], we modifies S by replacing one of the y produced by the second loop of Algorithm [\ref=algorithm:algo1] with two nonzero palindromes (d - 2)dl - 3 + (d - 2)dk and dl - 3 + dk. If c = 0, we just decrease n by 1(1 is a palindrome) before simulating Algorithm [\ref=algorithm:algo1]. Combining the pitches we have 0∉S0 and the pseudo-palindromes become genuine palindromes.