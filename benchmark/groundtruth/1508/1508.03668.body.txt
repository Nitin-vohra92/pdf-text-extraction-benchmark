TRI-BN-15-03: Linac Envelope Optics

Introduction

For beamline design, matching, etc., even in the case of strong space charge forces, it is often sufficient to calculate the evolution of size parameters such as the rms width and bunch length. The full set of such parameters is the 6-dimensional "σ-matrix"; x,Px,y,Py,z,Pz. Conventionally, the momenta are divided by the reference particle's momentum, making them x',y',ΔP / P. Parameter 5 is technically time, but converted to distance (bunch length) by multiplying by the speed β0c of the reference particle. Similarly, parameter 6 is ΔE, converted to Pz by dividing by β0c. The σ-matrix has 21 parameters, as it is symmetric: 6 rms sizes on the diagonal, 15 correlation parameters.

The mathematical fomalism for this technique, including space charge, was established by Frank Sacherer[\cite=sacherer1970rms]. The space charge forces depend crucially upon the bunch dimensions in configuration space, so it is important that these be tracked. In other words, it is insufficient to use a formalism that first integrates the equations of motion to derive the transfer matrices, and apply space charge effects afterwards. Some implementations such as TRANSPORT and TRACE3D divide standard elements into (hopefully sufficiently short) segments interleaved with space charge "lenses". This is crude, approximate and non-adaptive.

TRANSOPTR[\cite=dejong1983first] uses the envelope formalism, but did not until now include the case of beam high intensity bunches being accelerated with a RF accelerator. This case is of particular importance for modeling the elecron linear accelerator. Short accelerator gaps can often be sufficiently well modelled as infinitesimal i.e. as a thin longitudinal lens with also a transverse thin lens focusing component. But this is insufficient for extended RF devices and as well misses time-of-flight effects when the change in velocity of the reference particle is significant. Extended DC longitudinal fields have already been added to TRANSOPTR[\cite=baartman2010acc]; the present study aims at adding the AC case. In the DC case, the reference particle's longitudinal coordinates are inferred from the local potential. Not so the AC case; the time and energy versus longitudinal location must be tracked in a separate calculation and then the equations of first order deviations applied to find the transfer matrices and local envelope optics.

Theory

This follows closely from the previous note on DC axially-symmetric longitudinal fields[\cite=baartman2010acc].

Hamiltonian

With the distance along the reference trajectory s as the independent variable, the Hamiltonian is

[formula]

The case of RF axially-symmetric electric field can be handled entirely with no electric potential (Φ = 0), and time-varying vector potential. This has been presented a number of times in the past (e.g. Chambers[\cite=chambers1968particle]), but we are interested in the following more experimentally-useful case: The electric field along the axis E(s) has been measured and is therefore known, and the geometry is exactly axially symmetric. Rob Ryne [\cite=rynerfgap1991] has treated this case, and we use his vector potential [formula] directly.

[formula]

This is Coulomb/Lorenz gauge, satisfies Maxwell equations to second order in transverse coordinates, gives correct on-axis [formula].

A priori, we do not know the reference particle's energy and time coordinates. We need these in order to expand about them. They can be found from the equations of motion for x = y = Px = Py = 0:

[formula]

(From here on, I drop the 0 subscript: β and γ are implicitly assumed to be the relativistic parameters of the reference particle.)

These are solved first and give the functions E0(s) and t0(s) about which t and E are expanded: E = E0  +  ΔE, t = t0  +  Δt. So we transform the canonical variables t and - E to (Δt, - ΔE), using as generating function

[formula]

(Check: [formula], [formula].) The Hamiltonian gets the added terms

[formula]

Then expanding the square root, we get:

[formula]

In expanding Px - qAx,Py - qAy, the time dependence disappears because it is higher order:

[formula]

and similary for y. The term linear in Δt in the expansion of As about t0 cancels the -  ΔtE0'(s) term, as it should but there is a remaining term quadratic in Δt, the bunching effect. This leaves

[formula]

Notice the first term here and the first term in eqn. [\ref=hamdt] depend only on the independent variable and not on the 6 dependent ones. Thus these do not affect the equations of motion and we ignore them. We have:

[formula]

We defined here T(s) =  sin [ωt0(s)  +  θ]  /  ω to clean up the notation a bit.

Finally, we wish to transform from (Δt, - ΔE) to (z,Pz) = ( - βcΔt,ΔE / (βc)). (The reason for the sign change is as follows: an early arrival implies Δt < 0, but this means the particle is ahead so z > 0.) The generating function is

[formula]

(Check: [formula], [formula].) The term to be added to the Hamiltonian is

[formula]

where [formula].

[formula]

Hamiltonian 2

Ryne[\cite=rynerfgap1991] has a transformation that gets rid of the second derivative of the on-axis elecric field. It's complicated. At the same time he transforms away the adiabatic damping; it's a neat and didactic trick but not strictly necessary for computational purposes. It is simple to just use Px,y,z directly and then just rescale by final P at the end.

But there's an easy way to get rid of the second derivative: it turns out that the vector potential can be simplified if we use a different Gauge.

I propose the following function

[formula]

Add the gradient of this function to the previous vector potential ([\ref=ax],[\ref=ay],[\ref=as]). This zeroes both Ax and Ay, leaving

[formula]

This is considerably simpler, but now there is a scalar potential:

[formula]

Now if we expand the Hamiltonian, we get a different result:

[formula]

([formula], [formula])

This is not only much simpler than eqn. [\ref=hamgen] (Px and Py have their usual definitions, no transverse cross terms, no E''), but has nice intuitive explanations for the individual terms. (1) The factor in parentheses is precisely the integrand of eqn. 4 of a short note I wrote in 1985[\cite=baarbun] explaining the derivation of the focal power of an RF gap, e.g. a buncher. (2) Taking the limit as ω  →  0 reproduces precisely the Hamiltonian of the DC accelerator I derived in 2010[\cite=baartman2010acc]. Note that in that case, E' =  - φ''.

Infinitesimal Transfer Matrix

A convenient and useful way of representing the equations of motion through the optical element is the so-called infinitesimal transfer matrix approach[\cite=sacherer1970rms]. The infinitesimal transfer matrix F(s) is defined as (T - I) / ds where T is the transfer matrix from s to s + ds and I is the identity matrix. With this definition one has for individual particles

[formula]

Beams of particles are conveniently represented by the so-called σ-matrix; the elements of which represent second order moments of the beam[\cite=sacherer1970rms]. The σ-matrix and the transfer matrix M transform through the system according to the equations

[formula]

where FT is the transpose of F.

Now that the Hamiltonian for linear motion (eqn. [\ref=hamgen2]) has been obtained, it is a simple matter to find the infinitesimal transfer matrix F. Writing the equations of motion (x' = ∂H / ∂Px, Px' =  - ∂H / ∂x, etc.) in the form of Eqn. [\ref=force], the following F-matrix is found for the axially symmetric linear accelerator:

[formula]

where we have defined:

[formula]

Space Charge

Space charge forces depend recursively upon the σ-matrix elements, and are simply added to the focusing elements F2n,2m - 1|n,m = 1,2,3 of the element's infinitesimal transfer matrix such as eqn. [\ref=itm] above. This technique is used in the code TRANSOPTR, as described by de Jong[\cite=dejong1983first]. The resulting equations can only be solved numerically.

The given references[\cite=sacherer1970rms] [\cite=dejong1983first] treat space charge in the non-relativistic regime, so it was not obvious that TRANSOPTR was correct in the relativistic regime. There are two effects that need to be considered to generalize the equations: the space charge magnetic field, and bunch length contraction. For detailed derivations, the interested reader is referred to the Ph.D. thesis of Fubiani[\cite=fubiani2005controlled]. The first effect requires dividing the space charge force by γ2. The second requires that the Carlson elliptic integrals' arguments be modified. The 3 integrals for the 3 major axes are

[formula]

where (u,v,w) are (σ33,σ55,σ11) for the x-axis, (σ55,σ11,σ33) for the y-axis, (σ11,σ33,σ55) for the z-axis. To be relativistically correct, σ55 must be replaced by γ2σ55. (See Fubiani[\cite=fubiani2005controlled], Appendix J.)

An interesting limit is the long bunch, since this can be approximated as a continuous beam with current I. First of all, it is clear that for this limit to apply, bunch length ≫   transverse size is not a necessary condition. Rather, γ times bunch length ≫   transverse size. This means that for example a 1 mm long by 1 mm wide electron bunch is already well into the long-bunch regime with energy of 10 MeV.

Secondly, in the long bunch regime, the Carlson integrals governing transverse space charge are [formula], or the inverse bunch length augmented by the factor γ. For this reason, the constant governing space charge force in TRANSOPTR in the unbunched case is divided by an extra factor of γ.

Implementation into TRANSOPTR

In TRANSOPTR, the momentum is dimensionless and in absence of acceleration corresponds to angles (x',y',z'). When acceleration occurs, angles are not scaled canonical momenta. The simplest implementation is to scale (Px,Py,Pz) by initial total momentum Pi. Then after integration is complete, the momenta can be converted back into angles by multiplying by Pi / Pf. In this case, F (eqn. [\ref=itm]) becomes:

[formula]

In order to find the σ-matrix at any point s of a beamline, it is sufficient to calculate the transfer matrix to that point. This technique is not useful when space charge forces are non-negligible since then the optics themselves depend upon the σ-matrix. In the past space charge has been added to legacy codes such as TRANSPORT by inserting a sufficient quantity of defocussing lenses whose strength depends upon the local beam size. This is inefficient at best: it is the crudest sort of integration. The best way to do this is as implemented in TRANSOPTR: the exact Sacherer 6D envelope equations ([\ref=sig]) are integrated with a higher order integrator such as the Runge-Kutta.

In many situations, one needs only the σ-matrix and so it is sufficient to solve the 36 equations of eqns. [\ref=sig]. However, in general one would like to have the ability to fit certain optical characteristics, such as point-to-point imaging. It is therefore often useful to also know the transfer matrix to any point. This is in fact the incoherent transfer matrix. So in order to cover all cases, TRANSOPTR solves both eqns. [\ref=sig] and [\ref=space]. This comprises 72 equations. Internally, the code uses a single 12 by 6 matrix.

Without time-varying fields, the total momentum of the reference particle is always known at any s. In a linac, this is no longer true. Thus, the implementation needs to track not only the transfer and σ matrix elements, but also time and energy. These can be thought of as the 5th and 6th "zero-order" coordinates, with respect to which the fifth and sixth phase space coordinates are measured. Analogously, in the most general cases, the first through fourth "zero-order" coordinates may also not be known. This could happen for example if given only the field map of a dipole magnet. Thus there could be 6 "zero-order" coordinates as a function of s, and the usual 6 phase space coordinates are differentials with respect to these.

I therefore have added a row to the 72-element matrix, making it dimensioned 13-by-6, and there are 78 ODEs. This would allow at a later date adding elements whose reference trajectory is not known a priori.

Code

Here follows the f77 subroutine that takes the 13-by-6 matrix SX and calculates the 13-by-6 matrix DSX, which are the derivatives of SX with respect to Z=s. Note that SX(13,5) is not time t directly but is ct, and SX(13,6) is not energy directly but is γ - 1. The F matrix is in fact F directly.

Example

The TRIUMF injector electron linac, EINJ, takes bunches from energy of 300 keV to [formula] MeV if properly phased and the peak gradient is 20 MV/m. Below is example for phase θ = 0 at the start of the calculation.

Red is the 2rms transverse size, and green is the 2rms longitudinal (bunch length). The input bunch parameters are somewhat arbitrary, roughly the condition for a minimum beam size at exit. This particular case has zero bunch charge.

In this second example, TRANSOPTR is instructed to fit the 65 matrix element to zero. This makes energy insensitive to input phase, thus finding the peak energy gain phase. This phase turns out to be [formula].

In the third example, bunch charge has been raised to 30 pC.

Timing

Each calculation above takes roughly 400 Runge-Kutta steps for 2400 calls to the SCLINAC routine. This gives 5-figure accuracy to the transfer matrix and the σ-matrix, and is easily enough for describing reality considering that the on-axis field is only known to 2 or 3 significant figures. The extra accuracy is useful, however for fitting matrix or beam matching, which is done with a downhill simplex method, or simulated annealing for cases of more than 3 fitting parameters.

On my unremarkable, circa 2006 Intel desktop, each run through the linac takes about 17 milliseconds with zero bunch charge and 25 milliseconds with space charge. The difference is due to the Carlson elliptic integrals needed for the space charge case.

On a typical optics matching case, one varies 2 solenoids, the buncher amplitude, and the linac phase, to minimize the bunch size and energy spread at the linac output. A calculation with such a fit requires typically a half million total calls to SC (the space charge routine for no-linac case) and SCLINAC, and so takes about 5 seconds CPU time. The result is shown below. The bunch charge is 15 pC.

Rather extravagantly, each calculation starts from the cathode whereas it would have been more efficient to store the beam parameter set at the buncher entrance and start it from there. The DC acceleration to 300 keV from the cathode is described in reference [\cite=baartman2010acc].

The Buncher itself, located at s = 85 cm, is calculated as just another linac, phased to give no energy gain.

The code describing the whole transport from cathode to linac exit, is shown below.