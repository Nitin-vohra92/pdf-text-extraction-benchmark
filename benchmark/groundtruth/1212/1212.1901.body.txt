Kolmogorov Complexity and The Garden of Eden Theorem

keywords: Kolmogorov complexity, cellular automata, garden of Eden theorem

Introduction

Suppose G is an amenable group and A is a finite set, called an alphabet. Suppose we fixed some Fø lner sequence {Fn}. For an infinite element x∈AG in the discourse of the Kolmogorov complexity it is very natural to consider some kind of mean information along the Fø lner sequence:

[formula]

In this way we should make some assertions, to guarantee well behaviour of the defined quantity. If we are working with a group like [formula] we do not care about computability. Passing to more general case we have to explicitly require our group to be computable. Then, there is a choice of an object to measure the complexity: the string, obtaining by listing of letters, marking elements of given Fn in some order, or the whole object: the map from Fn to A. In the second case we get an additional information from the configuration of Fn. To avoid such troubles, we introduce the notion of the modest Fø lner sequence, that is such Fø lner sequence, that complexities of its elements are asymptotically negligible to their sizes: [formula]. This will help us establish equivalence of the two definitions of the asymptotic Kolmogorov complexity.

It is not hard to see, that asymptotic Kolmogorov complexity do not increases under the action of cellular automaton(proposition [\ref=asymptotic_complexity_properties]). The point of interest is to describe those cellular automata, which preserves asymptotic complexity in terms of some well-known properties of cellular automata. The first result of such kind, known to author, contained in the paper [\cite=CRI], there proved, that every invertible cellular automaton over [formula] with finite alphabet preserves the asymptotic Kolmogorov complexity, which is defined in the following way:

[formula]

there C(xi) is the Kolmogorov complexity of the restriction of x to the segment

[formula]

Computable amenable groups

It is obvious, that the operation x  ↦  x- 1 in computable group is computable function.

Throughout this paper we will assume, that G is computable, if not, we could enhance our computability class by a suitable oracle.

Suppose, G is a countable amenable group, {Fn} -- its Fø lner sequence. Then for every finite subset S of G we have

[formula]

Since [formula], we have

[formula]

From which we could infer, using the definition of Fø lner sequence

[formula]

Suppose G is an infinite countable amenable group, and {Fn} is a Fø lner sequence on it, then [formula]

Suppose, on the contrary, for some constant c we have infinitely many indices i, such that [formula]. Then, passing to subsequence, we will get a Fø lner sequence {Fni} with [formula]. Take some finite subset S of G with [formula] we get a contradiction with the proposition [\ref=folner_reformulated]:

[formula]

for every i.

Every finite subset of the natural numbers could be computably encoded by the natural numbers, so, they forms the constructible set. It is clear, that set-theoretic operations with the finite subsets are computable, and function (A,B)  ↦  AB there A and B are the finite subsets of computable group is computable too.

There exists a computable Fø lner sequence , with [formula] in every computable amenable group.

Fix some computable enumeration of the finite subsets. Let Fn be the first set, such that

[formula]

and [formula].

Fn is a desired computable Fø lner sequence.

Kolmogorov complexity

We will use the notation C(x) for the plain complexity and C(x|y) for the conditional complexity, for the definition see [\cite=LV08], definition 2.1.2, p. 106 . Plain complexity of the pair (x,y) is denoted as C(x,y), for the definition see [\cite=LV08], example 2.1.5, p. 109.

For the plain Kolmogorov complexity the following statements hold:

C(x)  ≤   log x  +  O(1)

if f is computable, then C(f(x))  ≤  C(x)  +  O(1)

There exist a constant c, such that [formula]

C(x,y)  =  C(y,x) + O(1)

C(x,y)  ≤  C(x)  +  C(y)  +  2 log  min (C(x),C(y))  +  O(1)

C(x|y)  ≤  C(x)  +  O(1)

C(x,y)  =  C(x)  +  C(y|x)  +  O( max ( log C(y), log C(x)))

For the proofs, see [\cite=LV08]: (1) is theorem 2.1.2 on the page 108, (2) and (3) are simple consequences of the definition of plain complexity, (4) is follows from (2) and definition of complexity of pair, (5) is proved in example 2.1.5 on the page 109, (6) is from exercise 2.1.5 on page 113, (7) is a slight reformulation of the theorem 2.8.2 on the page 190.

Suppose, f is a computable function. If x = f(y), then

[formula]

Fix some computable enumeration t(x,i) (i  ≤  0) of the preimage of the function f, such that if t(x,i) does not fail, then t(x,j) does not fail for all 0  ≤  j  ≤  i and t(x,i)  ≠  t(x,j) (if both do not fail) for i  ≠  j . Then, there exists [formula], such that y = t(x,i). Using proposition [\ref=complexity_properties], we get

[formula]

so

[formula]

which implies desired estimate.

Suppose, that {Vi}i∈I is an enumerable family of enumerable sets, there I is some constructible set. Suppose, there exists a function [formula], such that for every i∈I we have [formula], then for every x∈Vi the following holds:

[formula]

Follows from proposition [\ref=complexity_properties].

Cellular automata

Suppose G is a group and A is a finite set. We will call A an alphabet. We will call AG a configuration space. There is a natural left action of G on AG defined in the following way:

[formula]

The set of all words is denoted by [formula]. For a word w we denote [formula] its domain. By [formula] we will denote the size of its domain. Consider a word w, by the definition it is a map from the finite set [formula] to the alphabet A

We will endow AG with the product topology, assuming that A endowed with the discrete topology. By Tychonoff theorem, AG is a compact Hausdorff topological set. Sets

[formula]

are clopen and forms the base of the topology on AG.

Assuming G is computable, it is obvious, that every word could be computably encoded by some natural number.

Since all finite subsets of natural numbers and all words forms constructible sets, it make sense to consider the Kolmogorov complexity of such objects, and we will use the same notation as fo plain complexity: C(B), C(w), there B is a finite subset, w is a word.

Consider a word w, by the definition it is a map from the finite set [formula]. Assume, that gi  <  gj for [formula] (remind, that group G is defined on the set [formula]). Then, string [formula] is called a content of word w, and denoted as [formula]. By the definition, for word w holds [formula].

Evidently, if G is a computable group and τ is a cellular automaton over it, then restriction of τ on words is computable function.

Entropy and asymptotic Kolmogorov complexity

We want our Fø lner sequence not to affect Kolmogorov complexity

It obviously follows from the proposition [\ref=existence_of_folner], that there exist at least one modest Fø lner sequence.

It would be convinient for us to use the following notation for the restriction of configuration x∈AG to the subset B of G: x|B. If B is a finite set, then this restriction is a word, so, if in addition, G is a computable group, then this would justify the notation C(x|B). We would use the same notation for the restriction of words as well: w|B if B is a subset of the domain of word B.

Let us fix some modest Fø lner sequence {Fn}.

For the entropy the following holds:

[formula]

[formula]

h(τ(X))  ≤  h(X).

For the proof see [\cite=CAG], propositions 7.7.2 and 5.7.3 on pages 125,126.

For every x∈AG we have

[formula]

It is enough to prove, that

[formula]

Using proposition [\ref=complexity_properties] we have

[formula]

the last equality is true, since

[formula]

(by the proposition [\ref=complexity_properties] and the definition of modest Fø lner sequence), and

[formula]

by the proposition [\ref=complexity_properties].

The following proposition allows us to estimate the difference of the complexities of two words in terms of the symmetric difference of their supports.

Suppose, w1 and w2 are two words, then

[formula]

Evidently, there exists an algorithms, which recovers w1 from the triple w2, [formula] and [formula]. From the proposition [\ref=complexity_properties] follows

[formula]

By symmetry we get

[formula]

Combining this two we get the desired estimate.

Let us endow AG with the Bernoulli measure ν.

The following holds:

for every x∈AG we have [formula]

for almost every x∈AG we have [formula]

for every x∈AG we have hc(τ(x))  ≤  hc(x).

The following inequality implies the first statement :

[formula]

For the proof of the second statement consider a set

[formula]

We have

[formula]

But since

[formula]

We have ν(Eε) = 0. Taking a sequence εn  →  0, we see, that [formula], so, almost every x∈AG has [formula], because [formula] for every x.

For the proof of the third statement, consider

[formula]

and

[formula]

but

[formula]

so

[formula]

This mean, it is enough to prove, that

[formula]

Proposition [\ref=complexity_difference] implies By the definition of the Fø lner sequence,

[formula]

Using proposition [\ref=complexity_properties], since FnS is computable from Fn, and by the definition of modest Fø lner sequence we have

[formula]

which finishes proof.

If X is an effectively closed set, then for every x∈X we have

[formula]

It is clear, that [formula]

Let us fix some rational q > h(X). By the definition of the entropy, there exists a constant c, such that

[formula]

If there exists an enumerable family of enumerable sets {Vf}, there [formula], such that X|f  ⊂  Vf and [formula] for all n, then by the proposition [\ref=complexity_and_size] we would have for y∈Vn

[formula]

and therefore, for every x∈X

[formula]

But since q is an arbitrary rational, bigger than h(X), we would have hc(x)  ≤  hc(X) for every x∈X.

Let us prove existence of {Vf}. X is an effectively closed set, so

[formula]

for some enumerable set of words W. Consider a word v with [formula]. Suppose, that [formula]. Then,

[formula]

and since it is an open covering of the compact set, we have, U(v) could be covered by some finite subset. This mean, that if [formula], we could realize it in a finite time. Therefore, the set of such v-s is enumerable(and computably depends on n). Really, assertion, that U(v) is covered by [formula] is equivalent to the fact, that for every word t with domain

[formula]

from the fact, that [formula] follows, that there exists 1  ≤  i  ≤  k, such that [formula] This means, that sets

[formula]

forms the computable family of the finite sets, and we could get Vf to be the first Vf,k with [formula].

See [\cite=CAG] theorem 5.8.1 on page 128.

See [\cite=CAG], theorem 1.8.1 on page 20.

Suppose, that cellular automaton τ has a Garden of Eden configurations. Then for some x∈AG we have hc(τ(x))  <  hc(x).

By the Garden of Eden theorem, if there exists a Garden of Eden configuration, then h(τ(AG))  <  h(AG). By the proposition [\ref=asymptotic_complexity_properties] there exist an element x∈AG with [formula]. The set τ(AG) is a closed subset of the set AG, because it is image of the compact set under the action of the continuous map. Since the statement [formula] is equivalent to [formula], we have, that the set τ(AG) is effectively closed. So, by the proposition [\ref=entropy_and_asymptotic_complexity], we have, that [formula].

Suppose we have x∈AG, such that hc(τ(x))  <  hc(x). Then the cellular automaton is not pre-injective.

Without loss of generality we may assume, that S = S- 1, and that S contains the identity. Since hc(τ(x))  <  hc(x), there is a subsequence {nk} and two constants a < b, such that

[formula]

Using the proposition [\ref=complexity_difference] we could assume(maybe, passing to subsequence and slightly modifying constants a and b), that

[formula]

then, since

[formula]

we could use the proposition [\ref=inverse_complexity] and denoting y = τ(x) we get

[formula]

which imply, that for some big enough N and positive constant c, for every k > N the following holds:

[formula]

so

[formula]

Consider a set T of pairs of words (v,w), there f(v) = w, [formula] and v|FnK  =  τ(x)|Fnk. Its cardinality is at least [formula] for k > N. That is, for big enough k, by the pigeonhole principle there exists at least two pairs (v1,w2) and (v2,w2) in T, such that v1 and v2 coincides outside the the set Fnk, and w1 = w2. Really, w1 and w2 coincides on Fnk, and we have [formula] variants for the filling [formula] and [formula] by elements of A.

Extending w1 to some x1∈AG and w2 to some x2∈AG in such a way, that they will coincide outside Fnk, we will get, that automaton is not pre-injective, since τ(x1) = τ(x2).

Combining last two propositions and the Garden of Eden theorem, we get the following result