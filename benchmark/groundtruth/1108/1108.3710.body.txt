Filip Najman

Abstract. In this note we improve an algorithm from a recent paper by Bauer and Bennett for computing a function of Erdös that measures the minimal gap size f(k) in the sequence of integers at least one of whose prime factors exceeds k. This allows us to compute values of f(k) for larger k and obtain new values of f(k).

Keywords Pell equation, Compact representations, Smooth numbers

Mathematics subject classification (2000) 11N25, 11D09.

Introduction

For any integer m we let P(m) be the largest prime factor of m with the convention P(0) = P(  ±  1) = 1. Let Πn,k be the product of k consecutive integers, starting with n, i.e.

[formula]

By a theorem of Sylvester (see [\cite=syl]) Πn,k is divisible by a prime p > k whenever n > k, and thus, following Erdös [\cite=erd], we define f(k) to be the least integer with the property that

[formula]

if n > k. Standard heuristics for the size of gaps between consecutive primes lead one to expect that order of magnitude of f(k) is ( log k)2.

The following table gives known values of f(k):

The values of f(k) for k  ≤  10 were computed by Utz [\cite=utz] and extended to k  ≤  42 by Lehmer [\cite=leh2], to k  ≤  46 by Ecklund and Eggleton [\cite=ee], to k  ≤  73 by Ecklund, Eggleton and Selfridge [\cite=ees1], [\cite=ees2] and finally to k  ≤  178 by Bauer and Bennett [\cite=bb]. Bauer and Bennett in the same paper also disproved an assertion of Utz that f is monotone.

In this paper we compute the values of f(k) for k  ≤  268. Our results can be summarized in the following theorem.

Note that Bauer and Bennett, although greatly extending the set of k such that f(k) is known, by 105 values of k, did not find any values of f(k) such that f(k) > 14. In Theorem 1 we find the new largest proven value of f(k), the first after nearly 40 years (the previous being [\cite=ees2]).

The algorithm

Lemher [\cite=leh] searched for two consecutive smooth integers, satisfying P(z(z + 1))  ≤  pt, where pt is the t-th prime. One can write x = 2z + 1 and see that P(z(z + 1))  ≤  pt iff P(x2 - 1)  ≤  pt. Writing x2 - 1 = dy2, where d is squarefree, leads to the Pell equation

[formula]

where P(dy)  ≤  pt. This implies that the solutions [formula] we are searching for are powers of the fundamental solution [formula], i.e

[formula]

By classic results on primitive divisors (see [\cite=car]) and the work of Lehmer (see [\cite=leh3]), if we want P(y)  ≤  pt, then

[formula]

Thus one needs to consider only finitely many Pell equations and for each one only some of the first solutions.

After finding all pairs of smooth consecutive integers in this way, one can search through the results and find larger strings of consecutive integers.

Bauer and Bennett [\cite=bb] improve on this strategy by the following clever argument: for fixed m  ≤  3 and t suppose we are searching for all integers n satisfying

[formula]

We can split the indices [formula] into [formula] disjoint pairs (i,i + 2), where [formula]. Set t0  =  π(m - 1). By the Dirichlet principle, we can find an index i such that (n + i)(n + i + 2) is divisible by at most

[formula]

of the primes from the set

[formula]

Now one writes X = n + i + 1 and Y = (n + i)(n + i + 2), and gets

[formula]

where D is squarefree and divisible only by some of the first t0 primes and at most N of the primes from the set ([\ref=set]). Then one proceeds exactly as Lehmer, with the difference that in this approach P(X)  ≤  pt also has to hold. This lowers the number of Pell equations one needs to consider from 2t - 1 to

[formula]

and equally important, reduces the size of the Pell equations.

The bottleneck of both the algortihms of Lehmer and Bauer and Bennett is solving the Pell equation. The main difficulty in solving the Pell equation is the size of the solutions, as it grows exponentially with respect to the size of the coefficient d form ([\ref=pell]). This means that just writing down the solution in standard representation takes exponential time. In [\cite=ln], Luca and the author used compact representations of the solutions to the Pell equations to overcome this difficulty and managed to extend Lehmer's results (see also [\cite=fn2] for another application of this approach). Note that the algorithm described in [\cite=ln] is still the best up to date if one wants to find 2 or 3 consecutive smooth integers.

A compact representation of an algebraic number [formula] is a representation of β of the form

[formula]

where [formula] where [formula], and there exist polynomial (in log d) upper bounds for k, aj, bj and cj. A detailed description of compact representations and their use can be found in [\cite=jw]. Using compact representations, the Pell equation is solved in two steps. First, the regulator of the appropriate quadratic field is computed. Once the regulator is known, one computes a compact representation, in polynomial time. By far the harder part of this process is the computation of the regulator. The fastest unconditional algorithms are still exponential with respect to d, while the fastest known algorithm, Buchmann's subexponential algorithm (see [\cite=bc]), depends on the Generalized Riemann Hypothesis.

For our purposes, the only algorithm fast enough is Buchmann's algorithm. We will perform a check, using continued fractions, that will for each case tell us either that the output of Buchmann's algorithm is unconditionally correct or that we can disregard this case. This implies that, although we cannot unconditionally solve the Pell equation in subexponential time, we can determine unconditionally whether it has a smooth solution (and find any smooth solutions) in subexponential time.

We do this by the following method, first used in [\cite=ln]: suppose we want to find the solutions of x2 - dy2 = 1, where x and y are n-smooth (d is a fixed n-smooth integer). We first compute the regulator Rd of [formula] using Buchmann's subexponential algorithm. As mentioned, the correctness of the output Rd is dependent on the GRH, but what is unconditionally true is that the output is equal to mRd, where m is some positive integer. From the obtained value we construct, in polynomial time, a compact representation of the m-th power of the fundamental unit, and from it a compact representation of the m-th solution [formula] of our Pell equation. We define z to be the n-smooth part of ym, which is computed using the algorithm for performing modular arithmetic on compact representations from [\cite=fn].

Let [formula] be the fundamental solution of our Pell equation and [formula]. If the GRH is false and Buchmann's algorithm does not return the exact value of the regulator this will mean that it might happen that we will miss some smooth solutions of our equation. Suppose this happens. This means that m > 1 and yk is n-smooth for some k that is not a multiple of m. But we have y1|yk, so y1 is also n-smooth, implying y1|z (because y1|ym). This obviously implies y1  ≤  z. So if something has gone wrong, we will find the solution y1 that is smaller or equal to z and strictly smaller than ym. We can use continued fractions to check whether such a y1 exists. If we do not find such a y1 (and indeed we never do, as it's existence would disprove the GRH), it means either m = 1 or m > 1 but we are not missing a smooth solution. In any case, this removes the dependence of our results on the Generalized Riemann Hypothesis. Note that although ym does become very large, z in practice does not. This means that it is usually, for our purposes, enough to compute the first 10 or so convergents of the expansion of [formula] to a continued fraction, to prove that the hypothetical y1 does not exist.

Using compact representation, in combination with this check, cuts down the space needed from exponential to polynomial with respect to d and the time needed to solve the Pell equation from exponential to subexponential.

In essence, in this paper we combine the clever approach of [\cite=bb] and the powerful methods for finding smooth solutions of the Pell equations from [\cite=ln].

It is worth noting the somewhat counter-intuitive implications of the mentioned algorithms: it is easier to solve the Pell equation (using compact representations) than it is to write down the solution in decimal notation, and it is easier to unconditionally find all smooth solutions of the Pell equation or determine that there are none (this takes subexponential time) than it is to unconditionally solve the Pell equation (this takes exponential time).

Results

We run our algorithm for two pairs of parameters (m,t), these pairs being (47,14), and (56,16). Note thet p47 = 211, p56 = 263 and P(Π318,13) = 163, P(Π1330,15) = 223, implying

[formula]

By proving that there is no integer n > k for 178  ≤  k  ≤  222 satisfying P(Πn,14)  ≤  k implies f(k) = 14 for 178  ≤  k  ≤  222. In the same way one proves that f(k) = 16 for 223  ≤  k  ≤  268.

The case (m,t) = (47,14) makes us solve

[formula]

Pell equations, while the case (m,t) = (56,16) makes us solve

[formula]

Pell equations.

We obtain that there do not exist such integers n, thus proving Theorem 1.

Acknowledgements. These materials are based on work financed by the National Foundation for Science, Higher Education and Technological Development of the Republic of Croatia.

E-mail address: fnajman@math.leidenuniv.nl

AND

E-mail address: fnajman@math.hr