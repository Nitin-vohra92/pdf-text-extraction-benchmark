Lemma Corollary Proposition Conjecture

The Treewidth of Line Graphs

School of Mathematical Sciences, Monash University, Melbourne, Australia. {Daniel.Harvey,David.Wood}. Supported by the Australian Research Council.

Introduction

Treewidth is a graph parameter that measures how "tree-like" a graph is. It is of fundamental importance in structural graph theory (especially in the graph minor theory of [\citet=RS-GraphMinors]) and in algorithmic graph theory, since many NP-complete problems are solvable in polynomial time on graphs of bounded treewidth [\citep=Bodlaender-AC93]. Let (G) denote the treewidth of a graph G (defined below). This paper studies the treewidth of line graphs. For a graph G, the line graph L(G) is the graph with vertex set E(G) where two vertices are adjacent if and only if their corresponding edges are incident. (We shall refer to vertices in the line graph as edges--vertices shall refer to the vertices of G itself unless explicitly noted.)

As a concrete example, the treewidth of L(Kn) is important in recent work by [\citet=marxgrohe] and [\citet=marx]. Specifically, [\citet=marx] showed that if (G)  ≥  k then the lexicographic product of G with Kp contains the lexicographic product of L(Kk) with Kq as a minor (for choices of p and q depending on |V(G)| and k). Motivated by this result, the authors determined the treewidth of L(Kn) exactly [\citep=mylinegraph-jgt]. The techniques used were extended to determine the treewidth of the line graph of a complete multipartite graph up to lower order terms, with an exact result when the complete multipartite graph is regular [\citep=mythesis]. These results also extend to pathwidth (since the tree decompositions constructed have paths as the underlying trees.)

Lower Bounds.

The following are two elementary lower bounds on (L(G)). First, if Δ(G) is the maximum degree of G, then (L(G))  ≥  Δ(G) - 1 since the edges incident to a vertex in G form a clique in L(G). Second, given a minimum width tree decomposition of L(G), replace each edge with both of its endpoints to obtain a tree decomposition of G. It follows that

[formula]

We prove the following lower bound on (L(G)) in terms of (G)2, where (G) is the average degree of G.

For every graph G with average degree (G),

[formula]

The bound in Theorem [\ref=theorem:avgdegintro] is within '+ 1' of optimal since we show that for all k and n there is an n-vertex graph G with (G)  ≈  2k and [formula]. All these results are proven in Section [\ref=section:avgdeg].

We also prove a sharp lower bound in terms of δ(G)2, where δ(G) is the minimum degree of G. (The constants in Theorem [\ref=theorem:avgdegintro] and [\ref=theorem:mindegintro] are such that, depending on the graph, either result could be stronger.)

For every graph G with minimum degree δ(G),

[formula]

The bound in Theorem [\ref=theorem:mindegintro] is sharp since for all n and k we describe a graph G with n vertices and minimum degree k such that (L(G)) equals the bound in Theorem [\ref=theorem:mindegintro] when n is even or k is even, and is within '+ 1' when n is odd and k is odd. All these results are proven in Section [\ref=section:mindeg].

A weaker version of Theorem [\ref=theorem:mindegintro] first appeared in the first author's PhD thesis [\citep=mythesis]. Theorems [\ref=theorem:avgdegintro] and [\ref=theorem:mindegintro] are significant improvements for line graphs over the standard results that (G)  ≥  δ(G) and [formula] (which hold for all graphs), since δ(L(G)),(L(G)),δ(G) and (G) can be quite close. For example, δ(L(G)) = (L(G)) = 2  δ(G) - 2 = 2(G) - 2 when G is regular.

In order to prove these results, we first show (in Section [\ref=sec:embed]) that constructing a tree decomposition of L(G) is equivalent to determining a particular embedding of G into a tree. This in turn allows us to prove a strong relationship between the treewidth of L(G) and the vertex congestion of G, together with a similar relationship for the pathwidth of L(G) and the vertex congestion of G when embedded into a path. This second relationship is similar to a previous result relating (L(G)) and cutwidth established by [\citet=Golovach].

In Section [\ref=sec:altlow] we show that Theorems [\ref=theorem:avgdegintro] and [\ref=theorem:mindegintro] cannot be improved by replacing one of the (G) (or δ(G)) terms by (G).

Finally, we mention a related conjecture of Seymour, which was recently proved by [\citet=immersion] using the theory of immersions. It states that, given a graph G with average degree (G), the Hadwiger number of L(G) satisfies [formula] for some constant c > 0. They also show that the exponent [formula] is sharp due to the complete graph. Given that (L(G))  ≥  (L(G)), this gives a lower bound on (L(G)) in terms of [formula].

Upper Bounds.

Now consider upper bounds on (L(G)). Equivalent results by [\citet=Bienstock] [\citet=atserias] and [\citet=calinescu] all show that

[formula]

To see this, consider a minimum width tree decomposition of G, and replace each bag X by the set of edges incident with a vertex in X. This creates a tree decomposition of L(G), where each bag contains at most ((G) + 1)Δ(G) edges. A similar argument can be used to prove that

[formula]

In Section [\ref=sec:upper], we establish the following improvement.

For every graph G,

[formula]

Theorem [\ref=theorem:maxdegintro] is of primary interest when Δ(G)  ≫  (G) or Δ(G)  ≫  (G), in which case the upper bounds are [formula] and [formula]. When Δ(G)  <  (G) or Δ(G)  <  (G), the bounds in [\eqref=eq:atsbound] and [\eqref=eq:atsboundpw] are better than those in Theorem [\ref=theorem:maxdegintro].

In Section [\ref=sec:bipartite], we show that this upper bound on (L(G)) is sharp ignoring lower order terms. The key example here is G = Kp,q, which is of independent interest. Since (Kp,q) = (Kp,q) = q and Δ(Kp,q)  =  p for p  ≥  q, Theorem [\ref=theorem:maxdegintro] implies that [formula]. Hence the following theorem is sufficient.

For all p  ≥  q  ≥  1,

[formula]

Theorem [\ref=theorem:introbipart] extends a previous result of [\citet=lucenabramble], who determined (L(Kn,n) exactly, and a previous result from the PhD thesis of the first author [\citep=mythesis], which determined upper and lower bounds on the treewidth of line graphs of complete multipartite graphs. The bounds in [\citep=mythesis] are equal when the graphs are regular, and are close when the graphs are almost regular. However, they say nothing when p  ≫  q, which is handled by Theorem [\ref=theorem:introbipart].

Treewidth and the Congestion of Embeddings

For a graph G, a tree decomposition (T,X) of G is a tree T, together with X, a collection of sets of vertices (called bags) indexed by the nodes of T, such that: (Often, we conflate a node and the bag indexed by that node, and refer to two bags being adjacent when their indexing nodes are adjacent and so on, for simplicity.) The width of a tree decomposition is the size of the largest bag, minus 1. The treewidth of G, denoted (G), is the minimum width over all tree decompositions of G.

A path decomposition is a tree decompositions where the underlying tree is a path. Pathwidth [formula] is defined analogously to treewidth but with respect to path decompositions. Given a tree decomposition of L(G) with underlying tree T, for each edge vw of G, let Svw denote the subtree of T induced by the bags containing vw. (Recall each bag contains vertices of L(G), which are edges of G.)

For every graph G there exists a minimum width tree decomposition (T,X) of L(G) together with an assignment :V(G)  →  V(T) such that for each edge vw∈E(G), Svw is exactly the path in T between (v) and (w).

Let (T,X) be a minimum width tree decomposition of L(G) such that [formula] is minimised. For each vertex v of G, the edges incident to v form a clique in L(G) and thus, by the Helly property, there exists a bag of T containing all edges incident to v. Hence for each v choose one such node and declare it (v).

Consider an edge vw∈E(G). Denote the path between (v) and (w) by Pvw. Since vw is in the bags at (v) and (w), it follows Pvw  ⊆  Svw. If |V(Pvw)|  <  |V(Svw)| then we could obtain another tree decomposition of L(G) by removing vw from the bags of V(Svw) - V(Pvw), since each edge incident to vw appears in [formula]. However, such a tree decomposition would contradict our choice of (T,X). Hence Pvw  =  Svw, as required.

We call (v) the base node of v. What Lemma [\ref=lemma:basenodes] shows is that, in some sense, the best way to construct a tree decomposition of L(G) is to choose a tree T, assign a base node for each v∈V(G), and then place each edge in exactly the bags between the base nodes assigned to its endpoints--any other tree decomposition "contains" such a tree decomposition inside of it. We can obtain a slightly stronger result that will be useful when proving our major theorems. Given (T,X) and [formula] as guaranteed by Lemma [\ref=lemma:basenodes], we can also ensure that each base node is a leaf and that [formula] is a bijection between vertices of G and leaves of T. This is done as follows. If (v) is not a leaf, then simply add a leaf adjacent to (v), and let (v) be this leaf instead. Such an operation does not change the width of the tree decomposition. If some leaf x is the base node for several vertices of G, then add a leaf adjacent to x for each vertex assigned to x. Finally, if x is a leaf that is not a base node, then delete x; this maintains the desired properties since a leaf is never an internal node of a path.

We can improve this further. Given a tree T, we can root it at a node and orient all edges away from the root (that is, from the parent, to the child). In such a tree, a leaf is a node with outdegree 0. Say a rooted tree is binary if every non-leaf node has outdegree 2. (That means that every non-leaf node has degree 3 except the root which has degree 2.)

Given a tree decomposition, it is possible to root it and then modify the underlying tree so that each node has outdegree at most 2, by (repeatedly) splitting a node with outdegree 3 or more and distributing the children evenly amongst the two new nodes, where both new bags contain exactly the edges of the original bag. This maintains all the properties of the tree decomposition and does not increase the width. If [formula] is a mapping into the leaves, then this property is maintained by the splitting. In fact, in such a case, we can go further to obtain a binary tree; if x is a non-root node with outdegree 1 then delete x and an edge from its parent to its child, and if x is a root with outdegree 1 then delete x and declare its child to be the new root. All of these results give the following key theorem.

For every graph G there exists a minimum width tree decomposition (T,X) of L(G) together with an assignment :V(G)  →  V(T) such that:

Theorem [\ref=theorem:goodtd] has all the properties we require in order to prove our main results. It also leads to the following lower bound on (L(G)) that is slightly stronger than [\eqref=eq:easylb].

(L(G))  ≥  (G) - 1.

Let k  =  (L(G)) + 1, and let (T,X) be a tree decomposition of L(G) of width k - 1, together with an assignment [formula] as ensured by Lemma [\ref=lemma:basenodes]. Partially construct a tree decomposition of G as follows: for each edge vw∈E(G), arbitrarily choose one endpoint (say v) and place v in all bags of Svw except (w), in which we place w. The size of a bag is at most k since each edge contributes only one endpoint to a given bag. This is a tree decomposition of G, except if vw∈E(G) then it is possible that v and w do not share a bag, but do appear in adjacent bags. For each such edge vw∈E(G), call the edge XY∈E(T) with v∈X - Y and w∈Y - X the edge corresponding to vw. If XY is the edge corresponding to both vw,uz∈E(G), then subdivide it to create a new bag [formula]. Now XX' corresponds to vw, and nothing else, and X'Y corresponds to uz. Repeat this process so that every edge in T corresponds to at most one edge of G. Finally, arbitrarily root T, and if XY is the edge corresponding to vw such that Y is the child of X, then add v to Y. Note that this increases the size of each bag by at most 1, and creates a tree decomposition for G. Thus (G)  ≤  k  =  (L(G)) + 1, as required.

Theorem [\ref=theorem:goodtd] also shows a connection between (L(G)) and embeddings of G into a tree. Consider the following definition by [\citet=Bienstock]. Define an embedding as an injective map from V(G) into the leaves of a sub-cubic tree T. If π is such an embedding and vw∈E(G) then let Pvw be the path from π(v) to π(w). The vertex congestion of π is

[formula]

The vertex congestion of G, denoted (G), is the minimum congestion over all sub-cubic trees T and choices of π. ([\citet=Bienstock] also considered the edge congestion of G which counts the maximum number of paths Pvw using an edge e∈E(T). [\citeauthor=Bienstock] showed that vertex and edge congestion are within a factor of [formula] of each other.) Graph embeddings into paths (which we discuss below) and infinite grids (for example [\citep=Bhatt]) were studied prior to [\citeauthor=Bienstock]. Embeddings have also been considered for hypercubes, see [\citep=hypercube] for example. Determining (G) is NP-hard [\citep=Saks].

Observe that embeddings into sub-cubic trees are similar to our construction of tree decompositions in Theorem [\ref=theorem:goodtd], and lead to the following theorem.

For every graph G,

[formula]

An embedding into the leaves of a sub-cubic tree is equivalent to an assignment of base nodes into the leaves. An edge vw contributes to the congestion at a vertex u of T under an embedding π if and only if vw is in the bag of u when π is treated as an assignment. Thus (L(G)) + 1  ≤  (G). Equality holds by Theorem [\ref=theorem:goodtd] since every binary tree is sub-cubic.

A similar result to Theorem [\ref=theorem:goodtd] holds for path decompositions. Much like our results on trees, it is reasonably clear that we can always ensure that [formula] is a bijection between vertices of G and nodes of P. This gives the following lemma.

For every line graph L(G) there exists a minimum width path decomposition (P,X) together with an assignment :V(G)  →  V(P) such that:

From Lemma [\ref=lemma:goodpd] and by a similar argument to Theorem [\ref=theorem:cng], the following holds.

For every graph G, let P be a |V(G)|-vertex path and Π be the set of all bijections π:V(G)  →  P. Then

[formula]

where Pvw is the path from π(v) to π(w).

Theorem [\ref=theorem:vcngpath] considers the minimum vertex congestion of a graph embedding into a path. As mentioned previously, we may also consider the minimum edge congestion of a graph embedding into a path. This topic is well studied [\citep=cut1] [\citep=cut2] [\citep=cut3] [\citep=cut4]; it is usually referred to as cutwidth. Specifically, if π is a linear ordering of G (that is, a bijection from V(G) to [formula]), then the cutwidth of π is defined as

[formula]

and the cutwidth of G, denoted (G), is the minimum cutwidth over all choices of π. Determining the cutwidth of a graph is NP-complete [\citep=fanica]. Previously [\citet=Golovach] proved that if Δ(G)  ≥  2 then

[formula]

(Note the result of Golovach concerns vertex separation number, but this is equal to pathwidth [\citep=kinn].) This result is the edge congestion equivalent to Theorem [\ref=theorem:vcngpath]. The lower bound here is sharp due to the star [\citep=Golovach]. Thus there is a relationship between (L(G)) and both the minimum vertex and minimum edge congestion of an embedding of G into a path.

Lower Bound in Terms of Average Degree

This section proves Theorem [\ref=theorem:avgdegintro]. Say a graph G is minimal if (G - S)  <  (G) for all non-empty [formula]. For example, every connected regular graph is minimal. Given a set X  ⊆  V(G), let (X) denote the set of edges with both endpoints in X. Given X,Y  ⊆  V(G) such that [formula], let (X,Y) denote the set of edges with one endpoint in each of X and Y.

If G is a minimal graph and S is a non-empty proper subset of V(G), then

[formula]

Let G': = G - S, and note that (G')  <  (G). Let m: = |E(G)| and n: = |V(G)|. So,

[formula]

Hence, (m  -  |(S,V(G) - S)|  -  |(S)|)n  <  m(n - |S|) and -  |(S,V(G) - S)|n  -  |(S)|n  <   - m|S|. Thus

Theorem [\ref=theorem:avgdegintro] follows from the following lemma since every graph G contains a minimal subgraph H with (H)  ≥  (G), in which case L(H)  ⊆  L(G) and (L(G))  ≥  (L(H)).

For every minimal graph G with average degree (G),

[formula]

If (G) = 0, then the lemma holds trivially. If 0 < (G) < 2, then [formula], as required. Now assume that (G)  ≥  2. Let (T,X) be a tree decomposition for L(G) as guaranteed by Theorem [\ref=theorem:goodtd]. For each node u of T, let Tu denote the subtree of T rooted at u containing exactly u and the descendants of u. Let (Tu) be the set of vertices of G with base nodes in Tu. (Recall all base nodes are leaves.) Call a node u of T significant if [formula] but [formula] for each child v of u.

There exists a non-root, non-leaf significant node u.

Starting at the root of T, begin traversing down the tree by the following rule: if some child v of the current node has [formula], then traverse to v, otherwise halt. Clearly this algorithm halts.

For a leaf v, |(Tv)|  =  1. We only traverse to v if [formula]. Hence the algorithm halts at a non-leaf.

Say the algorithm halts at the root. If v,w are children of the root then [formula]. Thus |(Tu)|  =  |(Tv)| + |(Tw)|  ≤  (G)  <  |V(G)|. But every base node is in (Tu). Hence the algorithm does not halt at the root.

Let u be the node where the algorithm halts. It is not the root or a leaf. First, [formula] given that we traversed to u. Second, if v is a child of u, then [formula]. This shows that u is a significant, as required.

If a,b are the children of u, let A: = (Ta) and B: = (Tb). Hence [formula] but [formula]. Also [formula]. Define

[formula]

[formula].

Given that [formula], it follows that [formula]. Also, since u is not the root and [formula], it follows that [formula]. Hence we may apply Lemma [\ref=lemma:goodSfact] to [formula]. Hence

[formula]

By substitution,

Let X be the bag indexed by u. The bag X consists of every edge with exactly one endpoint in A and every edge with exactly one endpoint in B. Thus,

[formula]

Define α,β such that |A| = α(G) and |B| = β(G), and define [formula]. Recall [formula] and [formula]. Hence |A|,|B|  >  0 and so |A|,|B|  ≥  1. Thus [formula] and [formula]. Substituting |A| = α(G) and |B| = β(G) into [\eqref=eq:lbX] gives

[formula]

In Appendix [\ref=section:fmin] we prove that [formula]. Hence

Consider the case when G = Pkn, the kth-power of an n-vertex path. As n  →    ∞  , (G)  =  2k  -  γ where γ  →  0. So Theorem [\ref=theorem:avgdegintro] states that [formula]. Since [formula] is an integer, [formula]. For an upper bound take a path decomposition of L(G) in the form suggested by Lemma [\ref=lemma:goodpd], ordering the base nodes in the same order as in the path in G. The largest bag contains [formula]. Hence [formula] and thus Theorem [\ref=theorem:avgdegintro] is almost precisely sharp for both treewidth and pathwidth--it is out by only 1.

Lower Bound in Terms of Minimum Degree

We use similar techniques to those in Section [\ref=section:avgdeg] to prove a lower bound on (L(G)) in terms of δ(G) instead of (G). This bound is superior when G is regular or close to regular. Because this proof is so similar to that of Lemma [\ref=lemma:avgdeg], we omit some of the details. However, we also take particular care with lower order terms, so that this result is sharp.

If δ(G)  <  2, then the result is trivial, since (L(G))  ≥  0 whenever L(G) contains at least one vertex. Now assume that δ(G)  ≥  2.

Let (T,X) be a tree decomposition for L(G) as guaranteed by Theorem [\ref=theorem:goodtd]. For each node u of T, let Tu denote the subtree of T rooted at u containing exactly u and the descendants of u. For any Tu, let (Tu) be the set of vertices of G with base nodes in Tu.

Call a node u of T significant if [formula] but [formula] for each child v of u. There exists a non-root, non-leaf significant node u. This result follows by a argument similar to Claim [\ref=claim:avgsig]; run a similar traversal but only traverse down an edge when [formula]. Let a,b be the children of u, and define A: = (Ta) and B: = (Tb). Hence [formula] and [formula]. Since |A|,|B| are integers, if δ(G) is odd then [formula], and if δ(G) is even then [formula]. It also follows that |A|,|B|  ≥  1. Define α,β,s such that |A| = αδ(G), |B|  =  βδ(G) and [formula]. Thus

[formula]

Let X be the bag indexed by u. Our goal is to show that |X| is large. As in Lemma [\ref=lemma:avgdeg],

[formula]

Note the following:

[formula]

A similar result holds for |(B,V(G) - B)|, and |(A,B)|  ≤  |A||B|  =  αβδ(G)2. Hence

[formula]

In Appendix [\ref=section:fprimemin] we prove that

[formula]

Thus

We now show that Theorem [\ref=theorem:mindegintro] is sharp. Let Ckn be the kth-power of an n-vertex cycle [formula]. Let the ith node in an n-vertex path be the base node for the ith vertex of Ckn. It is easily seen each resulting bag has size at most k2  +  2k. So [formula], since δ(Ckn) = 2k. Hence Theorem [\ref=theorem:mindegintro] is precisely sharp when δ(G) is even. Now consider the odd case. Define the matching [formula], and if n is even, also define the matching [formula]. If n is odd, let H be the graph obtained from Ckn by deleting X1; if n is even instead delete [formula]. Then using the same base node assignment as above, it is easily seen that

[formula]

Since δ(H) = 2k - 1, Theorem [\ref=theorem:mindegintro] is precisely sharp when n is even and δ(G) is odd, and within '+ 1' when n,δ(G) are both odd. Finally, applying Theorem [\ref=theorem:mindegintro] when G = Kn agrees with the exact determination of (L(Kn)) as given in [\citep=mylinegraph-jgt] [\citep=mythesis], for both even and odd cases.

Upper Bounds

Let (T,X) be a tree decomposition of G with width k - 1 such that T has maximum degree at most 3. By the discussion in Section [\ref=sec:intro], we may assume that Δ(G)  ≥  k - 1. (The existence of such a (T,X) is well known, and follows by a similar argument to Theorem [\ref=theorem:goodtd].)

Say a vertex v of G is small if deg (v)  ≤  k - 1 and large otherwise. For each v∈V(G), let Tv denote the subtree of T induced by the bags containing v. For each edge e∈E(T), let A(e),B(e) denote the two component subtrees of T - e. If e is also an edge of Tv for some v, then let A(e,v),B(e,v) denote the two component subtrees of Tv  -  e, where A(e,v)  ⊆  A(e) and B(e,v)  ⊆  B(e). Let α(e,v) denote the set of neighbours of v that appear in a bag of A(e,v) and β(e,v) denote the set of neighbours of v that appear in a bag of B(e,v). Any vertex in both of these sets must be in the bags at both ends of e, but cannot be v itself, and so [formula].

For every large v∈V(G) there exists an edge e∈Tv such that [formula]. Moreover, if Tv is a path, then there exists an edge e∈Tv such that [formula].

Assume for the sake of a contradiction that no such e exists. Hence for all e∈Tv, either |α(e,v)| or |β(e,v)| is too large. Direct the edge e towards A(e,v) or B(e,v) respectively. (If both |α(e,v)|,|β(e,v)| are too large, then direct e arbitrarily.) Given this orientation of Tv, there must be a sink, which we label u, and label the bag of u by Xu.

Let [formula] be the edges of T incident to u, where d∈{1,2,3}. Without loss of generality say that ei was directed towards B(ei,v) for all ei.

First, consider the case when Tv is not a path. Hence [formula] for all i. If d = 3, then [formula]. However, [formula] counts every neighbour of v that is not in Xu twice, since each subtree of Tv  -  u is in β(ei,v) for two choices of i. It counts the neighbours of v in Xu three times, and there are at most k - 1 of these (since v∈Xu). Thus [formula], which is a contradiction. If d = 2, then [formula]. However, [formula] counts every neighbour of v not in Xu once, and every neighbour of v in Xu twice, so [formula]. But then deg (v)  <  k - 1, contradicting the fact that v is large. If d = 1, then [formula]. However, β(e1,v) is contained within X - u and so |β(e1,v)|  ≤  k - 1, and again deg (v)  <  k - 1, a contradiction.

Now, consider the case when Tv is a path. Hence [formula]. If both ei exist then [formula], but [formula] counts every neighbour of v not in Xu once, and the neighbours of v in Xu twice. Thus [formula], a contradiction. If u has degree 1, then [formula] but β(e1,v) is contained within Xu, and so deg (v)  <  k - 1, a contradiction.

For each small vertex v of G, arbitrarily select a base node in Tv. For each large vertex v of G, select an edge e of Tv as guaranteed by Claim [\ref=claim:agoodedge]. Subdivide e and declare the new node to be (v), the base node of v. If e is selected for several different vertices, then subdivide it multiple times and assign a different base node for each vertex of G that selected e. Denote the tree T after all of these subdivisions as T'. Together, this underlying tree T' and the assignment [formula] gives a tree decomposition of L(G) in the same form as Lemma [\ref=lemma:basenodes]. Label the set of bags for this tree decomposition by X', so the tree decomposition of L(G) is (T',X'). It remains to bound the width of this tree decomposition.

For each bag X' of X', define a corresponding bag in X as follows. If X' is indexed by a node x in T' that is also in T, then the corresponding bag is simply the bag of X indexed by x in T. If X' is indexed by a subdivision node created by subdividing the edge e, then the corresponding bag is one of the bags of X indexed by the endpoints of e, chosen arbitrarily.

The following two claims give enough information to bound the width of (T',X').

If X' is a bag of X' with corresponding bag X, and vw is an edge of G in X', then v∈X or w∈X.

Assume for the sake of a contradiction that vw∈X' but neither v nor w is in X. Hence [formula]. Thus Tv and Tw are contained in T - X. If Tv and Tw are contained in different components of T - X, then [formula], but this is not possible given that vw∈E(G). Thus Tv and Tw are contained in the same component of T - X. However, (v) and (w) are assigned inside of Tv and Tw respectively (perhaps after some edges are subdivided, but this does not alter their positions relative to X). Hence the path from (v) to (w) in T' does not include X', and so vw∉X'. This is a contradiction.

If v is a large vertex and X'∈X' is not (v), then X' contains at most [formula] edges incident to v. Moreover, if Tv is a path, then X' contains at most [formula] edges incident to v.

As v is large, (v) is a subdivision node, and T' - (v) has two components. Label these subtrees Lv and Rv, and let e∈E(T) be the edge that was subdivided to create (v). Let w be a neighbour of v such that (w) is in Lv. (Note each neighbour is in Lv or Rv as (v)  ≠  (w).) Thus, without loss of generality, w appears in a bag of A(e,v), and so w∈α(e,v). By Claim [\ref=claim:agoodedge], [formula], and so at most [formula] neighbours of v may have their base node in Lv, and the same bound holds for Rv.

If vw is an edge in X', then X' is on the unique path in T' between (v) and (w), without being (v) itself. So X' is, without loss of generality, in Lv, and then so is (w). Hence there are at most [formula] such choices of w and hence [formula] edges in X' incident to v.

If Tv is a path, then the result follows from the alternate upper bound in Claim [\ref=claim:agoodedge].

We now determine an upper bound on the size of a bag X'∈. We count the edges of X' by considering the number of edges a given vertex v of G contributes to X'. By Claim [\ref=claim:correspond], only the at most k vertices of the corresponding bag X contribute anything to X'.

So in the worst case, there are k vertices in the corresponding bag, all of which are large and contribute the maximum number of edges, which is [formula] for k - 1 vertices and Δ(G) for one vertex. Hence

[formula]

If we set (T,X) to be a minimum width tree decomposition, then k - 1  =  (G), and so

[formula]

Alternatively, if we let (T,X) be a minimum width path decomposition, then k - 1  =  (G), and we can use the alternate upper bound in Claim [\ref=claim:limitedge] given that Tv is always a path. Since T' was created by subdividing edges, T' is also a path. Hence

We now consider a few extensions of Theorem [\ref=theorem:maxdegintro]. For an outerplanar graph G, which has treewidth at most 2, [\eqref=eq:atsbound] proves that (L(G))  ≤  3Δ(G) - 1. Theorem [\ref=theorem:maxdegintro] proves that [formula]. We can do better as follows.

If G is outerplanar, then (L(G))  ≤  2Δ(G) + 1.

In Theorem [\ref=theorem:maxdegintro], if it were possible to select a tree decomposition such that Tv was a path for each v∈V(G), then it would be possible to achieve an upper bound of [formula] Since G is outerplanar, let G' be an outerplanar triangulation such that G  ⊆  G', and let T be the weak dual of G'. Take (T,(Bx)x∈V(T)) as the tree decomposition of G, where the bag Bx is the set of three vertices on the boundary of the face corresponding to x∈V(T). Note that this tree decomposition has width 2 and Tv is a path for all v∈V(G). Hence the result follows.

It is plausible that Theorem [\ref=theorem:maxdegintro] can be further improved. The following conjecture is the strongest possible in this direction.

For every graph G with maximum degree Δ(G),

[formula]

This conjecture seems very strong, and indeed it seems challenging even in the treewidth 2 case. Nevertheless, we now prove it for trees, thus providing some supporting evidence.

If (G) = 1 then (L(G))  =  Δ(G) - 1.

We may assume G is a tree. Construct a tree decomposition for L(G) by taking the underlying tree to be G itself and letting (v) = v. Then each bag contains exactly the edges of G incident to the vertex, and so (L(G))  ≤  Δ(G) - 1. This is also a lower bound given that L(G) contains a clique of order Δ(G).

Treewidth of

The graph L(Kp,q) is isomorphic to [formula], the Cartesian product of Kp and Kq, which can be thought of as a grid with p rows and q columns such that each row and column is a clique. A separator of G is a set of vertices X such that V(G - X) can be partitioned into at most three parts A1,A2,A3 such that [formula] for all i, and no edge of G - X has an endpoint in more than one part. (See [\citep=mythesis] [\citep=mypttt] for more explanation on separators.) A well-known result of [\citet=RS-GraphMinorsII-JAlg86] states that every graph G has a separator of order (G) + 1. Let [formula]. It is sufficient to show that if X is a separator of G then [formula].

Label the parts of V(G - X) by A1,A2,A3. Clearly [formula]. Consider a row R of G. No two vertices of R are in different parts, since R forms a clique. Thus R is a subset of [formula] for some i; colour R by i. If no vertex of R is in G - X, then colour R arbitrarily. Colour columns similarly. Thus a vertex is in Ai only if its row and column are both coloured i. (However, such vertices are not necessarily in Ai.) Define xi,yi,zi such that xip is the number of rows coloured i, yiq is the number of columns coloured i, and zipq is the number of vertices not in Ai whose row and column is coloured i. Then |Ai| = (xiyi  -  zi)pq. Define [formula]. Clearly, these variables satisfy the following basic constraints:

[formula]

and the following balance constraints (since [formula]):

[formula]

In Appendix [\ref=sec:bipartworking] we prove that [formula], implying [formula] and [formula], as desired.

Alternate Lower Bounds

Given the format of Theorem [\ref=theorem:maxdegintro] and Conjecture [\ref=conjecture:strong], we might hope for some analogous lower bound in terms of minimum degree and treewidth, or average degree and treewidth. In particular, does there exist some constant c > 0 such that any of the following hold?

[formula]

Each of these inequalities would be qualitative strengthenings of our results in Sections [\ref=section:avgdeg] and [\ref=section:mindeg], since (G)  ≥  (G)  ≥  δ(G) and [formula]. However, we now prove that none of these inequalities hold--thanks to Bruce Reed for this example. This implies that Theorems [\ref=theorem:avgdegintro] and [\ref=theorem:mindegintro] are best possible in the sense that we cannot replace δ(G) or (G) by (G).

For positive integers n,k construct the following graph Hn,k. Begin with the n  ×  n grid, and for each vertex v of the grid, have k -  deg (v) disjoint cliques of order k + 1. For each such clique C, add a single edge from a single vertex of C to v. Every vertex of this graph has degree k, except those vertices of the cliques that are adjacent to vertices of the grid, which have degree k + 1. Hence δ(Hn,k)  =  k and (Hn,k)  >  k. Since Hn,k contains an n  ×  n grid, it follows that (Hn,k)  ≥  n. We now prove a weak upper bound on (L(Hn,k)).

(L(Hn,k))  ≤  (L(Hn,k))  ≤  4n + O(k3).

Let v be a vertex of the grid in Hn,k, and let Av be the set containing the vertex v together with all vertices of the cliques C where there is an edge from C to v. The sets Av form a partition of V(Hn,k). Let P be an n2-node path, and label the vertices of the grid [formula] considering rows from top to bottom, and going along each row from left to right. Then let the ith node of P be the base node for all w∈Ai. This defines a path decomposition of L(Hn,k). Let Xi be the bag indexed by the ith node. By the labelling, for each edge ab of the grid, |b - a|  ≤  n. Hence if ab∈Xi then without loss of generality, i - n  ≤  a  ≤  i. Thus there are n + 1 possible choices of a, and each such a may contribute at most 4 such edges, and thus Xi contains at most 4n + 4 such edges. Now consider edges without both endpoints in the grid. If w∈Aj  -  {j}, then every neighbour of w is in Aj, and as such the edges with at least one endpoint in Aj  -  {j} appear in Xi only when i = j. Thus [formula].

Each possible strengthening in [\eqref=eq:strength] would imply that (L(Hn,k))  ≥  cnk or (L(Hn,k))  ≥  cnk where c is some constant, which contradicts Lemma [\ref=lemma:pwhnk] for [formula]. Hence none of these strengthenings hold.

Appendix A

Here we prove that for [formula] and [formula] and [formula],

[formula]

We do this using calculus of two variables. Any minimum point is either at a critical point, along the boundary of the defined region, or at a corner point. It is sufficient to show that f(α,β) evaluates to [formula] at the minimum point.

For any critical point, the second partial derivative test shows that it is a local maximum: Hence

[formula]

Since fαα(α,β)  <  0, this shows any critical point is a local maximum.

Along the boundary of the region, we consider functions of one variable. However, along most of the boundary, either α or β is constant (either s or [formula]), and in such cases our one variable functions are equivalent to either fα,α or fβ,β. By the second derivative test any critical point will be a local maximum.

Slightly more care is required along the boundary defined by [formula] An easy rearrangement gives f(α,β)  =  (1 + s)(α  +  β)  -  α2  -  β2. Then

[formula]

Interpreting the above as a function in one variable, the second derivative test shows any critical point along the boundary is a local maximum.

All that remains is to consider the corner points; the smallest evaluation at a corner will be the minimum of f(α,β) in the given region. The corner points are [formula] and [formula]. Given that f(α,β)  =  f(β,α), it suffices to check the following three points.

[formula]

If [formula], then [formula]. Given that [formula], it follows that [formula]. As s > 0, it follows [formula]. Hence f(α,β) is minimal at [formula], and so [formula]

Appendix B

Here we prove that

[formula]

given that [formula] and that

[formula]

For any critical point, the second partial derivative test shows that it is a local maximum: Hence

[formula]

Since hαα(α,β)  <  0, this shows any critical point is a local maximum.

Along the boundary of the region, we consider functions of one variable. However, along most of the boundary, either α or β is constant (either s or [formula]), and in such cases our one variable functions are equivalent to either hα,α or hβ,β. By the second derivative test any critical point will be a local maximum.

Slightly more care is required along the boundary defined by

[formula]

An easy rearrangement gives h(α,β)  =  (1 + s)(α  +  β)  -  α2  -  β(α  +  β). Then

[formula]

Interpreting the above as functions in one variable, the second derivative test shows any critical point along the boundary is a local maximum.

All that remains is to consider the corner points; the smallest evaluation at a corner will be the minimum of h(α,β) in the given region. When δ(G) is even, the corner points are [formula] and [formula]. When δ(G) is odd, the corner points are [formula] and [formula]. Given that h(α,β)  =  h(β,α), it suffices to check the following three points.

[formula]

Since s > 0, it follows that [formula], which proves our result.

Appendix C

Recall αi  =  xiyi - zi for i = 1,2,3. Choose x1,y1,z1,x2,y2,z2,x3,y3,z3 to maximise

[formula]

subject to the following basic constraints:

[formula]

and also the following balance constraints:

[formula]

We prove that [formula].

At most one of the balance constraints is a strict inequality.

Assume for the sake of a contradiction that two of the balance constraints are strict inequalities, without loss of generality α2  <  α3  +  α1 and α3  <  α1  +  α2. Without loss of generality, x2  +  y2  ≥  x3  +  y3. If x3  =  0 then α3  =  x3y3  -  z3  ≤  0, and so α3  =  0. Similarly, if y3 = 0 then α3 = 0, and if z3  =  x3y3 then α3  =  0. However if α3  =  0 then the first two balance constraints give that α1  ≤  α2 and α2  ≤  α1. But this means that α1  =  α2 and as such our assumption that α2  <  α3  +  α1 does not hold. Hence x3,y3  >  0 and z3  <  x3y3. Choose ε  >  0 such that [formula].

Define x2'  =  x2  +  ε, y2'  =  y2  +  ε, x3'  =  x3  -  ε and y3'  =  y3  -  ε. We now show that by replacing x2 with x2' and so on, we contradict our assumption that [formula] maximise α1  +  α2  +  α3 with respect to all our constraints.

First, check the basic constraints. By the choice of ε, we have x3  -  ε,y3  -  ε  ≥  0. Also, (x3  -  ε)(y3  -  ε)  =  x3y3  -  ε(x3  +  y3)  +  ε2  ≥  x3y3  -  (x3y3  -  z3)  +  ε2  >  z3, as required. All other basic constraints hold trivially.

Now we check the balance constraints. First consider [\eqref=eq:balance1]. We prove this by contradiction. Suppose that x1y1  -  z1  >  x2'y2'  -  z2  +  x3'y3'  -  z3. Thus

[formula]

However, since x2  +  y2  ≥  x3  +  y3, it follows that α1  >  α2  +  α3, which contradicts the fact that [formula] satisfy the balance constraints. To prove [\eqref=eq:balance2], suppose that x2'y2'  -  z2  >  x1y1  -  z1  +  x3'y3'  -  z3. Thus

[formula]

This contradicts our choice of ε. Now consider [\eqref=eq:balance3] and suppose that x3'y3'  -  z3  >  x1y1  -  z1  +  x2'y2'  -  z2. Thus

[formula]

Since ε(x2 + y2 + x3 + y3)  ≥  0, this again contradicts our choice of [formula].

Finally, we now show that replacing x2 with x2' and so on increases α1  +  α2  +  α3.

[formula]

This is a strict improvement since x2  +  y2  ≥  x3  +  y3 and 2ε  >  0.

Thus, at least two of the balance constraints are equalities. Without loss of generality, α1  =  α2  +  α3 and α2  =  α3  +  α1. This forces α3  =  0.

If z1,z2 > 0 then let ε  =   min {z1,z2}. If we replace z1,z2 with z1  -  ε,z2  -  ε this maintains all constraints and increases α1  +  α2  +  α3. (We omit the proof of this as it is clear.) Thus without loss of generality z2 = 0.

Now replace the balance constraints with the following two equivalent constraints:

[formula]

From this, it also follows that maximising [\eqref=eq:maxthis] is equivalent to maximising 2x2y2.

z1  =  0.

Assume that z1  >  0. Also assume that 2x2y2 > 0 (for otherwise the entire result is proven). If x1  =  0 or y1  =  0, then x2y2  =   - z1  <  0, and so we may assume x1,y1  >  0. Choose ε > 0 such that x1  -  ε,y1  -  ε,z1  -  2ε  ≥  0. As in Claim [\ref=claim:no2ineq], we replace some choices of [formula] and show that our initial set of choices was not optimal. Let x1'  =  x1  -  ε,y1'  =  y1  -  ε,x2'  =  x2  +  ε,y2'  =  y2  +  ε,z1'  =  z1  -  2ε. It is clear replacing x1 with x1' and so on still satisfies the basic constraints, and increases 2x2y2. The only difficult step is checking [\eqref=eq:balance4].

[formula]

Hence [\eqref=eq:balance4] still holds, and thus our choice of [formula] was not optimal, a contradiction.

Thus x1y1  =  x2y2. Define c,d∈[null] such that [formula] and [formula]. Thus [formula]. Hence [formula], and so c  ≤   - d. Finally, this means that

[formula]