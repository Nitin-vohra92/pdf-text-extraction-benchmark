An upper bound on the extremal version of Hajnal's triangle-free game

Introduction

Hajnal proposed the following game: let n be a positive integer, and let G0 be the empty graph on n vertices. Two players alternate adding edges between non-adjacent vertices. The first to create a triangle loses. Note that there is no difference between the edges played by either player. The question is, of course, who has a winning strategy for a given n.

The answer is only known for small values of n. Namely, the first player wins for n = 6,10,12,13,14,15,16, and the second player wins for n = 3,4,5,7,8,9,11. Values up to n = 11 were known in the early 90's, and Cater, Harary, and Robinson [\cite=Cat-Har-Rob-01] used computers to solve the n = 12 case. With heavy use of computers, Prał at [\cite=Pra-10] settled the cases of n = 13,14,15, and then Gordinowicz and Prał at [\cite=Gor-Pra-12] settled the case of n = 16.

Füredi, Reimer, and Seress [\cite=Fur-Rei-Ser-91] proposed a variation of this game. In this variant, instead of complete victory belonging to a single player, the game has a score which each player tries to manipulate. The two players play until a maximal triangle-free graph is achieved, and the score is the number of edges played. The player who moves first is trying to maximize this number, while the other one is trying to minimize it. Assuming perfect strategy from both players, there is a well-defined function that assigns the score of each game (under perfect play) to each positive integer n. Füredi, Reimer, and Seress proved the following theorem.

The score is at least (n log n) / 2 - 2n log  log n + O(n).

In [\cite=Fur-Rei-Ser-91] and [\cite=Ser-92], the authors cite personal communication with Paul Erd os, who is claimed to have proven an upper bound for the score under perfect play of n2 / 5. This proof is probably lost. One of the original motivation of the authors was the reconstruction of Erd os's proof. After some shorter, and later, longer attempts of proofs and improvements, which turned out to be just slightly wrong, we had to settle on a bit weaker bound presented in this paper. However, it is all but certain, that this proof is not what Erd os had in mind.

Competitive optimization

The problem discussed in this article is only one of a large area of research, called competitive optimization, with strong relations to extremal graph theory.

Let F be a family of graphs. If a graph G has no subgraph from F, but adding an edge between any pair of non-adjacent vertices of G would create a subgraph from F, then we say that G is F-saturated. If F contains a single graph H, then we conventionally refer to H-saturation rather than {H} saturation. The "game board" at the end of the extremal version of Hajnal's game is an K3-saturated graph. The well-studied Turán-number, written [formula] is the maximum number of edges in an F-saturated graph on n vertices. The minimum number of edges of an F-saturated graph on n vertices is called the saturation number, denoted by [formula].

A game version of these numbers is defined as follows. A two person game is played, starting on the empty graph on n vertices, and the two players add edges to the graph, alternating, until an F-saturated graph is reached. The goal of the player who moves first is to maximize the number of edges in this final graph, while the second player is trying to minimize the number of edges. The number of edges played under optimal play is called the game saturation number of F, denoted by [formula].

An even more general version of the game saturation number where the "playable" edges are limited by an initial "host" graph (which is Kn for us, as all edges are playable) was defined in full generality by West [\cite=West]. Many recent results were obtained in specific settings, see e.g. [\cite=Car-Kin-Rei-Wes-14-u] and [\cite=Lee-Rie-14-u].

Strictly speaking, there are two kinds of game saturation numbers, and the other kind, denoted by [formula] is if the first player is the one minimizing the number of edges in the final graph. While these two versions may differ significantly (see e.g. [\cite=Car-Kin-Rei-Wes-14-u]), our proof works in both cases, so our (asymptotic) result applies to both types of game saturation number. For convenience, we will assume that the minimizing player is starting the game, though the reader will see that it does not really matter.

Some proof ideas

It is obvious that for any family F, we have [formula]. These provide the trivial bounds n - 1 and n2 / 4 for the triangle-free game. While there are short proofs that provide modest improvements on the lower bound, we are not aware of any short proof of any (multiplicative) improvement on the upper bound. We make an observation that will be crucial for our proof.

There are at most 10 edges between any pair of C5's in a triangle-free graph. Also, between a vertex and a C5, there are at most 2 edges in a triangle-free graph.

In addition to the fact that a C5 itself is K3-saturated, if one could build just one C5 using, say, k vertices of the graph (i.e. all other vertices will have degree 0), then this strategy may be repeated on empty vertices, and after the whole game board is filled with these building blocks, the number of edges is at most

[formula]

(Essentially the same calculation is detailed out for k = 11 at the end of the proof of our main theorem.)

Here k  ≥  5. If k is very large, the this bound gets very close to n2 / 4, but with any finite k, it provides a multiplicative improvement over the trivial bound. The only problem is that building even one C5 on finitely many vertices seem not be that easy. It is possible, as our proof will show (and more), but there are some technical difficulties.

If, by some miracle, k = 5 is possible, we would get the Erd os bound ≈  n2 / 5. In fact, if we one could just build an almost perfect C5-factor of the graph, with o(n2) vertices not in the C5-factor, the n2 / 5 bound would follow (asymptotically). Unfortunately, no strategy can guarantee such a C5-factor. The maximizing player can build a star on about n / 2 vertices, and this can not be stopped. Then any C5 may only use two vertices of the star leaves, so it is not possible to create more than roughly n / 6 copies of C5's.

The C5-building strategy

Still the core of this technique for ending the game as soon as possible is to build as many disjoint cycles of length 5 as possible; since a C5 is the minimal nonbipartite triangle-free graph, the incorporation of as many vertices as possible into C5 subgraphs minimizes the number of vertices which can be incorporated into a large, balanced bipartite graph.

However, forcing the construction of C5 subgraphs when confronted with an opponent who is trying to prevent the construction of a C5 is not easy. It is easy to build a path on 4 vertices in a way which cannot be prevented by the opponent, but the attempt to extend this into a C5 can be stymied by the opponent prematurely closing it into a C4. For that reason, a more complicated technique in which two parallel paths are constructed and then joined is necessary.

Starting with n vertices and no edges, there is a sequence of moves by one player which, regardless of the other player's actions, leads to [formula] disjoint C5s being constructed.

We shall show that a particular C5-construction procedure can be repeated several times. During the course of this procedure, let us denote the set of vertices which are not yet vertices of a constructed C5 as U. Let the "count" of U be calculated according to the following method: U has count equal to the number of different components of the graph in which the vertices of U lie, plus whichever is largest of the following measures of partial progress towards the next C5-construction:

5 if there is a P3 subgraph among the vertices of U and another vertex of U in the same component as the P3 at a distance of at least 3 from an endpoint of the P3.

4 if there is a P3 subgraph among the vertices of U.

3 if there is a P2 subgraph among the vertices of U and another vertex of U in the same component as the P2 at a distance of at least 3 from an endpoint of the P2.

2 if there is a P2 subgraph among the vertices of U.

1 if there are two vertices of U at a distance of at least 3 within a single component of the graph.

0 otherwise.

The construction procedure below will be shown to be implementable whenever the count exceeds 13, and will have a net effect of reducing the count by at most 11; thus, the procedure may be implemented [formula] times before the count becomes too low to repeat it.

The C5-constructing player will begin by building a P4 among vertices in U. If there is already a P3 in the graph, doing so will take one move and reduce the number of components in the graph by 1. If there is already a P2 in the graph and a vertex at distance 3 from the P2, this construction takes two moves, but will only reduce the number of components in the graph by 1, as the first edge may be added between vertices in a single component. If there is already a P2 in the graph and no such other vertex, this construction takes two moves, and reduces the number of components in the graph by 2. if there are no usable subgraphs then this construction step takes 3 moves; if two vertices are at a distance 2 in a single component it will only reduce the number of components by 2, but otherwise it reduces the number of components by 3. Thus, we may note that the sum of the reduction in component count and number of moves taken will always be equal to six minus the above-mentioned "count bonus"; since every move used allows the opponent an opportunity to move and possibly reduce the count, we may conclude that the P4-construction stage, if completed without opponent interference, will result in a reduction of the count by at most 6, as at this point there is no guarantee that count-bonus structures remain.

We may note that it is impossible for the other player to obstruct this construction, since adding edges among vertices in distinct components is always permitted; in the course of constructing this P4, either the opponent will have used their moves in count-reduction, reducing the count by at most 6 as mentioned above, or have used one move in converting this P4 into a C4, and effecting a count reduction of no more than 5. We will address these possibilities in two subsections.

Opponent does not create a C4

Now we shall create a second P3 using vertices from U in distinct components. This P3 requires the addition of 2 edges, during which the opponent may add two edges. These edges may include external edges, a single edge converting the original P4 to a C4, edges between the P4 and developing P3, or edges to from the P3 to an external vertex adjacent to the P4. Note that we may guarantee that one of the endpoints of this new P3 is "untouched" as such: after we have added one of our two edges, at most one vertex of this P3 will be "touched", and we may add the new edge such that the touched vertex is the middle, and thus both endpoints are untouched, after which the opponent has the opportunity to touch at most one of the endpoints.

Addressing the possible interferential opponent actions individually, the easiest one to dispense with is the prospect that the opponent adds an edge between the constructed P4 and the under-construction P3, which will result in a construct isomorphic to one of the two shown in Figure [\ref=fig:P4-and-P2-connected]. Since in adding the edge the opponent will have used the only opportunity to create obstructions relating to the vertices in the P3, we know that any edge incident on the two vertices of the P3 does not form a K3 unless it does so with edges known to us; thus the addition of any of the dashed edges in Figure [\ref=fig:P4-and-P2-connected] will complete a C5.

If, on the other hand, the opponent connects the P4 and a just-completed P3, it is possible that they have already spent a previous turn creating complications for one of the vertices in the P3. These possibilities are illustrated in Figure [\ref=fig:P4-and-P3-connected], and in each case, there are at least two vertices in the P3 which can serve as termini for edges which form a C5. Since the opponent has at most one opportunity to construct new edges incident to the P3, they will be able to render at most one of those termini unusable. Thus, when the opponent builds an edge between the P3 and P4, we are guaranteed the ability to complete a C5 in one more step.

If, on the other hand, the opponent spends the two moves during the P3 in other ways, we become responsible for building the edge between these two paths ourselves. If the opponent has not interfered with our construction during these steps, we may ourselves add the edge depicted with a wavy line in the first case of Figure [\ref=fig:P4-and-P3-connected] and then, with three possible C5-completing edges among six distinct vertices, cannot be stopped.

If the opponent does interfere, we know the nature of the interference: since we have addressed the possibility of an opponent-added edge between the paths, and since the only preventative to our adding edges freely is that a vertex in the P3 and a set of non-adjacent vertices in the P4 might possibly be mutually adjacent to a third vertex; the opponent has two opportunities to do this, and, as previously noted, the construction of the P3 can be dynamically adjusted to ensure that one of the endpoints of the P3 is untouched. Considering only the most restrictive choices of vertices in the P4 which are mutually adjacent to some vertex, there are six possible scenarios up to isomorphism which may arise, depicted in Figure [\ref=fig:P4-and-P3-with-constraints]. Although the P4 may be arbitrarily highly adjacent to external vertices, as depicted by the rings around each vertex, the P3 was constructed with initially clean vertices, and so at most two external adjacencies can be introduced by the opponent while we are building the P3. In each scenario, the move depicted with a wavy line produces two legal C5-completing moves which do have nonadjacent endpoints in the P3, so the opponent will be able to render at most one of them illegal, resulting in successful completion of a C5.

Opponent creates a C4

Now we address those cases in which the opponent, in response to the formation of the P4, closes it into a C4. Under such a circumstance, we will extend the P3 into a P4. If the opponent chooses to place an edge between the C4 and an under-construction P4, then we will be faced with one of the situations described in Figure [\ref=fig:C4-and-P4-interrupted]. In each of these situations one of the C5-completion edges must still be a valid move: if we have only completed a P2, the opponent has had no opportunities to interfere with our P2, while if a P3 is completed, only one of the at two possible endpoints in the P3 of the C5-completing edge could be constrained by opponent activity, and if we have completed the P4, there might be as many as two vertices constrained by the opponent in the P4, but in all cases there are three vertices serving to construct a C5-completing edge.

If the opponent does not add an edge between the C4 and the P4, but engages in other interference, then we may craft our P4 in such a manner as to be guaranteed that one of the outer vertices of the new P4 is free of interference. Our optimal responses to each scenario are depicted in Figure [\ref=fig:C4-and-P4-with-constraints]. As was described in discussion of Figure [\ref=fig:P4-and-P3-with-constraints], the C4 may be arbitrarily highly adjacent to external vertices but the P4 was constructed with initially clean vertices, and so at most three external adjacencies can be introduced by the opponent while we are building the P4. In each case there are sufficiently many edges, with sufficiently disjoint sets of endpoints, that the opponent cannot, with the one move available after our edge is added, successfully make all of these C5-completing moves invalid.

It now remains only to show that, if the opponent spends the last move after we construct this second P4 converting it to a C4, that we can nonetheless build a C5. Doing so requires that we make use of one more new vertex, adding an edge between the new vertex and the most constrained vertex in the second C4 as seen in Figure [\ref=fig:C4-and-C4-with-interruption]. If the opponent responds by adding an edge among these vertices, we can always complete a C5 immediately, since each of these cases has at least one C5-completing edge which is not constrained: in the specfic case of G26, there are edges between a large enough set of vertices that the two vertices the opponent has interfered with are insufficient to prevent one such edge from still being valid, while in the other cases, the C5 completing edge has the known clean new point as an one of its endpoints. If instead the opponent does not provide an edge internal to the graph, then we know the opponent will have interfered at most three times, twice during the construction of the second C4 and once after adding the most recent edge. These possibilities are seen in Figure [\ref=fig:C4-and-C4-with-constraints], and in each case an optimal choice of move induces sufficiently independent C4-completing edges that no single move by the opponent can obstruct them all. As was described in discussion of Figure [\ref=fig:P4-and-P3-with-constraints], the first C4 may be arbitrarily highly adjacent to external vertices but the second C4 was constructed with initially clean vertices, and so at most two external adjacencies can be introduced by the opponent while we are building the P4, with one move spent closing our P4 into a C4, and the opponent may then introduce one more adjacency while we introduce the ninth vertex.

The total reductions in count resulting from each of the 39 cases illustrated here are summarized in Table [\ref=tab:costs]. The "component usage" column counts the number of components which have been connected as a result of this procedure, which is simply one less than the number of vertices in the graph in question. Note that in practice the component usage may be reduced by distance-3 vertices or pre-existing structures in the last C5 construction; this effect has been factored into the count calculation.

The "opponent moves" column counts the number of moves the opponent made which do not appear on the graph. This is ordinarily equal to the number of moves we have taken but may be reduced in cases where the graph only arises from an opponent move, as in the case where one of our paths has been closed into a C4. Since the opponent moves might include joining components or distance-3 vertices within a single component, each opponent move may result in a count reduction of 1. As was the case with the component usage calculation, the number of moves the opponent has may be reduced by the presence of pre-existing structures from the last C5 construction; this too is factored into the count from that construction. Several of the graphs include the presumption that opponent moves may be spent interferentially, and in these graphs only an upper bound on the number of possible unconstrained opponent moves is included, since the opponent may spend several moves in interference.

The "structures" and "distance 3" columns describe the elements which remain after the construction procedure and which will reduce the cost of the next construction. In particular, any P2 and P3 subgraphs which are left in U are described here, as well as if a single component is guaranteed to contain two vertices at a distance of 3.

Under certain circumstances, the opponent's actions may affect the remaining structures which we are able to leave behind. Thus, with a reduction in the opponent's unconstrained moves, they may force a less desirable set of remaining structures. In particular, graphs G16, G23, G25, and G30 through G39 are subject to such interference. These scenarios are handled separately in Table [\ref=tab:costs]. With all of these quantifications of the 37 different graphs, the effect of each scenario on the total count is easily calculated to be the sum of the component usage and the number of the opponent's unconstrained moves, reduced by whatever count bonus accrues from leftover structures and distance properties in U. It is thus easily observed that no scenario reduces the count by more than 11.

Once we have constructed these [formula] cycles of length 5, it is easy to show that, regardless of the following moves, the final edge-density is significantly less than the balanced-bipartite bound of [formula].

Given n vertices, Theorem [\ref=theorem:C5-construction] guarantees that we may construct approximately [formula] cycles of length 5, leaving approximately [formula] vertices not incorporated into cycles. Between any two C5s in a triangle-free graph there are 10 or fewer edges, so the number of edges among the approximately [formula] cycles is no more than

[formula]

while among the remaining [formula] vertices, the densest the edges can possibly be is in a balanced complete bipartite graph, which has approximately [formula] edges, and between these [formula] remaining vertices and the cycles, we know each cycle can have at most two vertices adjacent to a single vertex, yielding [formula] edges, for a total edge density of

[formula]

Potential improvements

The above-determined edge density is still slightly above the previously cited bound of [formula], although it represents a significant improvement on the trivial bound of [formula]. Certain aspects of the above proof and underlying strategy, however, may be amenable to improvement. In particular, the above result does not include any strategic choices made after the completion of as many C5 subgraphs as possible, but merely assumes worst-case results regarding the introduction of additional edges.

One aspect of the above method which may lend itself to improvement is that the term [formula] results from the assumption that all except a subquadratic number of pairs of C5 subgraphs have ten edges among them. After the C5-construction phase, since only a linear number of edges have been added, almost all of these pairs will have no edges among them, and it may be possible to "spoil" the prospect of adding ten edges among most of the pairs. We may note that, up to isomorphism, there is only one way to add ten edges among a pair of C5s without forming a triangle. There are 10 different ways to orient this structure on a pair of labeled C5s, and a specific orientation may be determined by as few as two edges. Thus, by adding edges judiciously between two C5s, it is likely possible to force the opponent, if they are attempting to build such a structure of ten edges, to include several specific edges, which we could then make moves chosen to prohibit. It thus seems likely that in a positive fraction of the pairs -- or quite possibly in almost all of the pairs -- an edge density of 10 could be prevented. Such an improvement could reduce this term from [formula] to [formula], effecting a reduction of [formula] in the edge density achieved. A further reduction by a strategy limiting edge density to 8 or less (a maximal triangle-free set of adjacencies between two C5s could use as few as 5 edges) could serve to reduce the density further, but unfortunately doing so is likely to be very difficult. In reducing edge density from 10 to 9, we would be aided by the fact that a unique configuration is necessary to achieve 10 edges, whereas 9 edges can be achieved in many different ways.

It may also be possible to improve the efficiency of the C5-building process. As was seen in Table [\ref=tab:costs], a cost of 11 when building a C5 emerges only if the opponent is interfering minimally with our construction and is instead building edges elsewhere. It is possible that wise utilization of the vertices on which the opponent is building these edges might serve to bring our efficiency up to an ability to build approximately [formula] cycles of length 5. Such an improvement would reduce the edge density to [formula], or, if combined with the above edge-density improvement, [formula]. Even this hoped-for improvement, however, is still slightly higher than the sought-after [formula] edge-density bound, which may not be achievable even by refinements of this strategy.