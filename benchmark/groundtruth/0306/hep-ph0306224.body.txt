[formula]

A Monte Carlo Test of the Optimal Jet Definition

Introduction

Jets of hadrons which appear in the final states of scattering experiments in high energy physics correspond, to the first approximation, to quarks and gluons produced in the collisions. Quarks and gluons, interacting strongly, are not observed as free particles. Only some combinations of them, hadrons, can avoid the strong interaction at large distances and only those combinations appear in experiments. If the energy of the colliding particles is high enough, the quarks and gluons produced in the collision manifest themselves as jets of hadrons which move roughly in the same direction as the quarks and gluons originating them.

Let us consider an example high energy event. An electron and positron collide at the CM energy equal to 180 GeV. The electron and positron annihilate and a pair of W-bosons is produced. Each of the W's decays into two quarks. When the quarks move away from each other, potential energy of the strong interaction between them grows quickly and new pairs of quarks and antiquarks are created out of this energy. The many quarks and antiquarks combine into colorless hadrons which form 4 or more jets.

We are interested, for instance, in extracting the W-boson mass from a collection of events similar to the one described above. It would be much easier if we were able to observe directly the quarks coming from decaying W's. But we observe jets of hadrons instead and when we make the analysis we have to deal with the jets. And this may not be always easy. Jets may be wide and/or overlap. It is hard to say even how many jets we have and how to share the particles between them.

Another aspect is that when we have a procedure to recognize and reconstruct jets it may give different answers for the same physical process depending whether it is applied at the level of quarks and gluons in theoretical calculations or at the level of hadrons from Monte Carlo simulations or at the level of calorimeter cells in experiments.

The Optimal Jet Definition avoids most of the problems of the conventional schemes. The derivation of OJD from the properties of the strong interaction and specifics of measurements involving multi-hadronic final states is contained in [\cite=tka-tjd], [\cite=tka-wij]. A short introduction to the subject is [\cite=letter]. An efficient FORTRAN 77 implementation of OJD, called the Optimal Jet Finder (OJF), is described in [\cite=paper-ojf] and the source code is available from [\cite=source-ojf]. Below we summarize OJD and present the result of a benchmark Monte Carlo test based on the W-boson mass extraction from fully hadronic decays of pairs of W's.

Jet algorithms

The analysis of events with many hadrons is often performed with the use of so called jet algorithms. A jet algorithm is a procedure to associate the particles into jets. It decides which particle belongs to which jet. Often it determines also how many jets there are. (When we say particles it may mean as well calorimeter cells or towers when the analysis is applied to experimental data or partons in theoretical calculations.)

After the content of each jet is known, some rule is chosen to compute the properties of the jet from the properties of the particles that belong to that jet. A simple and logical prescription, but not necessarily the only possible (see [\cite=run2-jp] for discussion), is that the 4-momentum of the jet, [formula], is the sum of 4-momenta pa of all particles that belong to that jet: [formula]

There have been many jet definitions developed by various collaborations over the years. Examples are the class of cone algorithms (various variants) and the family of successive recombination algorithms such as [formula] (Durham), Jade, Geneva.

Cone algorithms define a jet as all particles within a cone of fixed radius. The axis of the cone is found, for instance, from the requirement that it coincides with the direction of the net 3-momentum of all particles within the cone.

Successive recombination algorithms, in the simplest variant, work as follows. The "distance" dab between any two particles is computed according to some definition, for example, [formula] for JADE and [formula] for [formula], where Ea is the energy of the a-th particle and θab is the angle between the a-th and the b-th particles. Then the pair with the smallest difference is merged into one pseudo-particle with the 4-momentum given (for example) by pab = pa + pb. In that way the number of (pseudo-) particles is reduced by one. The procedure is repeated until the required number of pseudo-particles is left (if we know in advance how many jets we want) or until [formula] for all a, b, where [formula] is some chosen parameter. The remaining pseudo-particles are the final jets. The described scheme corresponds to so called binary algorithms as they merge only two particles at a time (2  →  1). Other variants may correspond to 3  →  2 or more generally to m  →  n.

With many available jet definitions, an obvious question is how to decide which algorithm should be used. It should be clear that the jets are defined (through the jet algorithm used) for the purpose of data analysis. In the example used it is the W-boson mass extraction. In this case we can measure how good the jet definition is based on how small the uncertainty in the extracted mass is. On this idea we based our benchmark test of the Optimal Jet Definition.

Optimal Jet Definition

The OJD works as follows. It starts with a list of particles (hadrons, calorimeter cells, partons) and ends with a list of jets. To find the final jet configuration we define ΩR, some function of a jet configuration. The momenta of the input particles enter ΩR as parameters. The final, optimal jet configuration is found as the configuration that minimizes ΩR.

The essential feature of this jet definition is that it takes into account the global structure of the energy flow of the event. Above mentioned binary algorithms take at a time only two closest particles into account, to decide whether to merge them or not.

A jet configuration is described by the so-called recombination matrix zaj, where a=1,2,...,[formula] indexes the input particles with 4-momenta pa and j=1,2,...,[formula] indexes the jets. zaj is interpreted as the fraction of the a-th particle that goes into formation of the j-th jet. The conventional schemes correspond to restricting zaj to either one or zero depending on whether or not the a-th particle belongs to the j-th jet. Here we require only that 0  ≤  zaj  ≤  1 and [formula]. The 4-momentum of the j-th jet is given by: [formula] The 4-direction of the j-th jet is defined as [formula], where [formula] is the unit direction vector obtained from [formula]. The explicit form of ΩR is: [formula] The first term in the above equation "measures" the width of the jets and the second is the fraction of the energy of the event that does not take part in any jet formation. The positive parameter R has the similar meaning to the radius parameter in cone algorithms in the sense that a smaller value of R results in narrower jets and more energy left outside jets. A large [formula] value of R forces the energy left outside jets to zero.

If the number of jets that the event should be reconstructed to is already known one finds zaj that minimizes ΩR given in the above equation. This value of zaj describes the final desired configuration of jets. The minimization problem is non-trivial because of the large dimension of the domain in which to search the global minimum, [formula] of continuous variables zaj. However, it is possible to solve it due to the known analytical structure of ΩR and the regular structure of the domain of zaj. An efficient implementation, called the Optimal Jet Finder (OJF), is described in detail in [\cite=paper-ojf] and the FORTRAN 77 code is available from [\cite=source-ojf]. The program starts with some initial value of zaj, which in the simplest case can be entirely random, and descends iteratively into the local minimum of ΩR. In order to find the global minimum, random initial values of zaj are generated a couple of times ([formula]) and the deepest minimum is chosen out of the local minima obtained at each try.

If the number of jets should be determined in the process of jet finding, one repeats the above described reconstruction for the number of jets equal to 1,2,3,... and takes the smallest number of jets for which the minimum of ΩR is sufficiently small, i.e. [formula], where [formula] is a positive parameter chosen by the user. [formula] has a similar meaning to the [formula] parameter in the successive recombination algorithms.

The shapes of jets are determined dynamically in OJD (as opposed to the fixed shapes of cones in the cone algorithms). Jet overlaps are handled automatically without necessity of any arbitrary prescriptions. OJD is independent of whether input particles are split into collinear groups (collinear safety). OJD is also infrared safe, i.e. any soft particle radiation results in soft (small) only change in the structure of jets. (So, it avoids the serious problems of cone algorithms based on seeds.) OJD, as opposed to successive recombination algorithms, takes into account the global structure of the energy flow in the event (rather then merging a single pair of particles at a time).

Details of the test

We performed a simple, benchmark Monte Carlo test of the Optimal Jet Definition. The analysis was modeled after a similar one performed by the OPAL collaboration from LEP II data [\cite=mass-W-opal].

We simulated the process [formula] at CM energy of 180 GeV using PYTHIA 6.2 [\cite=pythia]. We reconstructed each event to 4-jets using OJF and two binary jet algorithms: [formula] and Jade for comparison. For OJF, we chose R   =   2 and employed the most primitive variant of OJF-based algorithm with a fixed [formula]=10 for all events. The jets can be combined into two pairs (supposedly resulting from decays of the W's) in three different ways. We chose the combination with the smallest difference in invariant masses between the two pairs and calculated the average m of the two masses. We generated the probability distribution πM(m) with the W-boson mass M as a parameter. The smallest error of parameter estimation corresponding to the number [formula] of experimental events (as given by Rao-Frechet-Cramer theorem) is [formula] We can use this number directly to evaluate the jet algorithms.

Results

The statistical error [formula] of the W-boson mass corresponding to 1000 experimental events is displayed in the table below:

(The error of 3 MeV in our results is dominated by the uncertainties in the numerical differentiation with respect to M.) Within the obtained precision Durham and OJF are equivalent with respect to the accuracy, JADE appears to be worse.

An important aspect is the speed of the algorithms. The average processing time per event depends on the number of particles or detector cells in the input [formula]. We observed the following empirical relations (time in seconds): [formula] for [formula] and [formula] for OJF. [formula] varied from 50 to 170 in our sample, with the mean value of 83. However, the behavior was verified for [formula] up to 1700 by splitting each particle into 10 collinear fragments (similarly to how a particle may hit several detector cells).

We observe that OJF is slower for small number of particles or detector cells whereas for a large number of particles it appears to be relatively much faster. In the process we studied it starts to be more efficient for [formula].

It may be a strong advantage. For instance [\cite=run2-jp], in the CDF or D0 data analysis, where binary [formula] algorithm is commonly used, it is not possible to analyze data directly from the calorimeter cells or even towers because it would take forever. The preclustering procedure (defined separately from the jet algorithm) is necessary to reduce input data to approximately 200 preclusters. With OJF, it is possible to test how the preclustering step affects the results or even skip it altogether.

Summary

We performed a Monte Carlo test of the Optimal Jet Definition. We found that in the process we studied it gives the same accuracy as the best algorithm applied previously to the similar analysis. OJD offers new options yet to be explored, e.g. the weighting of events (according to the value of Ω) to enhance the precision. We found that the already available implementation of OJD is very time efficient for analyses at the level of calorimeter cells. Acknowledgments. We are grateful to Andrzej Czarnecki and James Pinfold for helpful discussions.