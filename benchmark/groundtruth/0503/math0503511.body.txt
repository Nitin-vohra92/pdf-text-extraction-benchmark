The Complexity of Pebbling and Cover Pebbling

Definition Lemma Corollary Proposition

Introduction

Graph pebbling, first suggested by Lagarias and Saks, has been the subject of many recent developments. It was first introduced into the literature by Chung in [\cite=Chung], and has been developed by many others including Hurlbert, who published a survey of pebbling results in [\cite=Glenn2].

Given a graph G (we assume all graphs we consider in this paper are connected), we imagine that we can distribute pebbles on its vertices in arbitrary arrangements called configurations. Formally, a configuration C on a graph G is a function [formula] which represents such a distribution. We say a configuration C on a graph G contains a configuration C' if C(v)  ≥  C'(v) for all v∈G. Define the [formula] |C| of a configuration C to be the total number of pebbles, that is, [formula] By a pebbling move, we will mean a change made to a configuration of pebbles by taking two pebbles from some vertex which has at least two pebbles and placing one pebble on an adjacent vertex. We call a vertex reachable from C if there is some sequence of pebbling moves starting at C, which ends in a configuration which has at least one pebble on this vertex.

The most commonly studied pebbling questions are about a concept called the "solvability" of a configuration. We first consider the traditional concepts, which we will distinguish with the adjective "canonical" to avoid confusion. Call a configuration C on a graph G canonical pebbling solvable if every vertex in G is reachable from C. Define the canonical pebbling number, π(G) to be the smallest integer k such that every configuration of size k on G is canonical pebbling solvable.

This paper will focus primarily on a concept called "cover pebbling" which was introduced by the authors of [\cite=Glenn1], but suggested earlier by Herscovici in [\cite=Herv]. Given a graph G, we imagine not only a configuration C but a demand configuration D on G. We say C is cover solvable or simply solvable for D if it is possible, through a sequence of pebbling moves, to move to from C to a configuration C' which contains D. We define the cover pebbling number γG(D) to be the smallest integer k such that ever configuration of size k on G is cover solvable for D.

Denote by U the configuration for which U(v) = 1 for all v∈G, which we will call the unit configuration on G and denote by Rv the configuration for which Rv(v) = 1 and Rv(w) = 0 for all [formula] which we will call the v-reachability configuration, because clearly C is solvable for Rv only if v is reachable from C. Note that therefore a configuration C is canonical pebbling solvable if and only C is solvable for Rv for all v∈G.

In this paper, we show several results about the complexity of cover pebbling, including the fact that the question of whether a given configuration on a graph is solvable for the unit configuration is N P-complete. For this, it will be necessary to show that certain constructed configurations on possibly large graphs are not solvable. Our first task is to develop tools for proving that a configuration is not solvable, which will involve slightly generalizing the concept of solvability.

Preliminaries

Cover pebbling literature has thus far worked with the definitions given in the introduction, thinking of weight functions and configurations as non-negative. However, in [\cite=monthlypaper] we see that if we create a concept called "negative pebbling" in which we allow configurations to have any integer number of pebbles on each vertex, then a non-negative configuration is "negative pebbling solvable" (solvable by a sequence of pebbling moves, allowing negative numbers of pebbles for a given demand configuration) for a non-negative demand configuration if and only if it is cover solvable for this configuration as defined in the introduction, that is, solvable by a sequence of moves with only non-negative intermediate configurations. Actually, [\cite=monthlypaper] shows this result only for unit configurations, but the proof applies to arbitrary demand configurations mutatis mutandis, and we repeat this proof for the general case below.

[\cite=monthlypaper] Let G be a graph, C a configuration on G, and D a non-negative demand configuration. Let |G| = m and label the vertices of G as [formula]. Then C is cover solvable if and only if there exist integers nij  ≥  0 with 1  ≤  i,j  ≤  m and nij = 0 and nji = 0 whenever {vi,vj}∉E(G) such that for all 1  ≤  k  ≤  m,

[formula]

First, suppose C is solvable for D. Then find some sequence of pebbling moves which solves C for D, and let nij be the total number of pebbling moves from vi to vj in this sequence. Then after all the moves, there are exactly

[formula]

pebbles left on vk, which is always at least D(vk) because of the fact that this sequence of moves solves C for D.

Conversely, suppose such numbers nij exist. This means that there does exist a sequence of moves that solves C, with nij moves being made from vi to vj, but possibly with some illegal "negative pebbling" along the way. To be explicit, we can make n12 moves from v1 to v2, then n21 moves from v2 to v1, then n13 moves from v1 to v3 and so forth, making in general nij moves from vi to vj for all 1  ≤  i,j  ≤  n with [formula]. After the moves are done (which might require using "negative pebbles,") we calculate that the resulting configuration, which we call , is

[formula]

for each k, so [formula] will contain D.

We show, however, that it is possible to legally make enough moves from our list of nij moves from vi to vj for each i,j to cover solve the graph. In fact, we may proceed haphazardly, making moves from our list from a vertex vi' to a vertex vj' such that less than ni'j' moves from vi' to vj' have already been made and there are at least two pebbles on vi', as long as such a pair of vertices vi' and vj' exists. If no such pair {vi',vj'} is left, then for each (i,j), either nij moves have been made from i to j or else there is at most 1 pebble on vertex vi. Let C' be the configuration left on G after these moves and S be the set of vi∈G for which the total number of moves from vi having already been made is less than [formula]

If [formula] then clearly for every 1  ≤  i,j  ≤  m we have made nij moves from vi to vj and thus, for every k there are (vk) pebbles on vk, so C' =  and since [formula] contains D, we have solved C for D through our sequence of moves.

If [formula] then call the moves that remain to be made the inexecutable moves (clearly all originate from S), and consider the total number of them ([formula] minus the number of moves that have already been made from vertices in S.) These moves, if they could executed with negative pebbling, would transform C' to . By the definition of S, there are at least |S|, at least one inexecutable move for each vertex in S. The total is exactly |S| only if there is exactly one inexecutable move from each vertex. Also, we know C'(v)  ≤  1 for all v∈S, for a total of at most |S| pebbles. Since these moves originate from vertices of S, if executed, they would each would remove one pebble from S if they end at a vertex in S, and two if they end at a vertex outside of S.

Thus each inexecutable move must both begin and end in S, for otherwise S would be left with a negative total number of pebbles at the end of the pebbling sequence in configuration [formula] , which is impossible since [formula] contains non-negative configuration D and so is non-negative on all vertices. Even if all moves begin and end in S, however, we end up with at most 0 pebbles on S, and so must have exactly 0 pebbles on each vertex in S, that is (s) = 0 for all s∈S. Further, since all inexecutable moves begin and end in S, we know [formula] is equal to C' on all vertices not in S. Finally, since C' is nonnegative, we must have C'(s)  ≥  (s) for all s∈S. So we see that C' contains [formula] and thus D, so we have already solved for D by executing the moves which lead to C'.

As the proof suggests, numbers nij can be thought of as a list of moves, (nij) representing a number of moves from the vi to vj. The theorem says that if we calculate the number of pebbles left on each vertex after the moves are all executed, by adding a pebble for each move onto a vertex and subtracting two pebbles for each move from it, and the resulting configuration satisfies the demand configuration, then the original configuration is solvable.

We may thus speak of a configuration as being solved by a list of moves, that is, a list of numbers (nij) (which we call a solution) meeting the condition in the theorem. We can use this definition to expand the definition of solvability to arbitrary (possibly negative) configurations and demand configurations saying C is solvable for D if there exists such a list of numbers nij meeting the condition of Theroem 1 for C and D. Clearly, this is the same as simply revising our definition of solvability to allow negative numbers of pebbles. The theorem shows that the two definitions concur for non-negative configurations, so this definition generalizes the existing concept of solvability. It will sometimes be useful to remember, however, that if a non-negative configuration is solvable for a non-negative demand configuration by a list of moves, it is solvable by a sequence of pebbling moves with intermediate configurations all non-negative.

Note that Theorem 1 shows that only the difference of the two configurations, C - D, is material to whether C is solvable for D. We now point out three other trivial corollaries that will be useful in the sequel.

Let G be a graph with vertices [formula], C a configuration on G, and D a non-negative demand configuration. If the list of pebbling moves (kij) solves C for D, and we have a list (lij) of moves with lij  ≤  kij for all 1  ≤  i,j  ≤  k then the configuration C' obtained from C by making the moves lij,

[formula]

is solvable by the list of moves (nij) = (lij - mij) .

That is, if we execute part of a solution, the resulting configuration is solvable, and is solved by the list of remaining moves.

Notation as in Theorem 1. If a configuration C is solvable by (nij) and C' is a configuration containing C, then C' is solvable by (nij)

That is, adding pebbles to a solvable configuration yields a solvable configuration.

Notation as in Theorem 1. If G has a subset of p vertices, without loss of generality [formula] and a solvable configuration C with solution (nij) such that nij = 0 if i  ≥  m - p + 1 and j  ≤  m - p. Let G' be the subgraph of G induced by removing vertices [formula] then the numbers (nij), with i,  j  ≤  m - p solve the configuration C' induced by C on G' by restriction for the induced demand configuration D'.

This says that given a configuration on a graph we may remove vertices from our graph and get a solvable configuration on the induced subgraph if no moves from these vertices are necessary to solve the original configuration

Next we will show that if a configuration is cover solvable, it may be cover solved without a directed cycle of pebbling moves. This is proven in [\cite=Glenn1] using transition digraphs, but it is also a corollary of Theorem 1. We state it here as

[\cite=Glenn1] Notation as in Theorem 1. If C is solvable for D, we can choose the nij meeting the condition in theorem 1 such that there is no list of distinct integers [formula] with 1  ≤  ij  ≤  m such that nijij + 1 > 0, for all 1  ≤  j  <  p and nipi1 > 0.

Choose the list (nij) meeting the condition in Theorem 1 so that [formula] the total number of moves, is minimal. If such integers [formula] exist, form a new list (n'ij) by letting n'i'j'  =  ni'j' - 1 if there is a j such that i'  =  ij and j'  =  ij + 1 and otherwise, letting n'i'j' = ni'j'. Considering the new sums for each vertex

[formula]

we note if [formula] the value is unchanged from the former sum with the nij. If k  =  ij for some j then [formula] and [formula] are both decreased by 1 because n'ij - 1ij  =  nij - 1ij - 1 and n'ijij + 1  =  nijij + 1 - 1. Thus the sum has been increased by 1 in this case, and so we know for all k

[formula]

thus the condition of Theorem 1 is met for the (n'ij). But clearly [formula], contradicting the minimality of the list (nij).

This result can be applied to vertices of degree 1 in a graph in a straightforward manner. Similar analysis is implicitly carried out in the treatment of cover pebbling on trees in [\cite=Glenn1].

Let G be a graph, B a solvable configuration, D a demand configuration. Suppose v∈G has degree 1, and is adjacent to v'∈G. Let H be the subgraph of G induced by removing v. Let D' be the demand function induced by restriction of D to H. Construct configuration C on H by letting C(w) = B(w) for all [formula] in H and letting [formula] if B(v) - D(v)  ≥  0 (where as usual [formula]) or C(v') = B(v') + 2(B(v) - D(v)) otherwise. Then C is solvable for D' on H.

Label the vertices of G as [formula] with v = vm and v' = vm - 1 and choose a directed-cycle-free solution (nij). Since vm is adjacent only to vm - 1 we have nmj = 0 and njm = 0 if [formula] So we must have

[formula]

Since our solution is cycle-free we must have n(m - 1)m = 0 or nm(m - 1) = 0 Perform all moves n(m - 1)m or nm(m - 1) between vm and vm - 1, as in Corollary 2, to obtain solvable configuration B', solvable by remaining list remaining of moves. This list has no more moves to or from vm so we apply Corollary 4 to see that the configuration B'' on H induced by restricting B' to H is solvable. Clearly we know B'' is equal to B and thus C on every vertex of [formula]

Now suppose we have n(m - 1)m = 0. By (1) we see B(vm) - D(vm)  ≥  2nm(m - 1). Clearly B(vm) - D(vm)  ≥  0 and since both sides are integers, we have [formula] so

[formula]

Similarly, if nm(m - 1) = 0 by (1) we have B(vm) - D(vm)  ≥    -  n(m - 1)m so we have

[formula]

We thus know C contains solvable configuration B'' and so is solvable by Corollary 3.

This corollary says that if a graph G has solvable configuration C and a vertex v of degree 1, we can just move the excess pebbles on v to its neighbor or meet the excess demand of v with pebbles from its neighbor and then get rid of v, and the resulting configuration on the induced subgraph will be solvable. In particular, this result allows us to easily tell if a configuration on a tree is solvable.

There is one more theorem we need in our toolbox. Given graph G, configuration C and demand function D define function ΓC(v) by

[formula]

where d represents graph theoretic distance.

Let G be a graph, C a configuration, D a demand configuration. If  ΓC(v) < 0 for some v∈G, then C is not solvable.

Clearly ΓC(v) can not be increased by a pebbling move, since a pebbling move always removes two pebbles from a vertex and adds one pebble to a vertex which is at most 1 edge closer to v. A solved configuration has C(v')  ≥  D(v') for all v'∈G thus ΓC(v')  ≥  0 for all v'. Thus, we cannot solve a configuration C such that ΓC(v) < 0 for some v∈G through a sequence of pebbling moves.

The N P-Completeness of the Cover Solvability Problem

The material in this section appears in [\cite=monthlypaper]. I repeat it here to give a more rigorous proof, using the tools developed above.

The cover solvability decision problem which accepts pairs {G,C,D} if and only if G is a graph and C is a non-negative configuration on G which is solvable for configuration D is in N P.

Given the list of integers nij, the solvability of C for D may be quickly checked by checking that the |G| inequalities in Theorem 1 hold.

To show the problem is N P-hard, we make use of the following problem:

Let the exact cover by 4-sets problem be the decision problem which takes as input a set S with 4n elements and a class A of at least n four-element subsets of S, accepting such a pair if there exists an A'  ⊆  A such that A' is a class of disjoint subsets which make a partition of S, that is they are n subsets containing every element of S.

This problem is N P-complete [\cite=Karp]. Indeed, the corresponding problem of exact cover by 3-sets is also N P-complete, but for our purposes, the 4-set problem is more convenient. We now show the main result of this section:

The cover solvability decision problem which accepts pairs {G,C} if and only if G is a graph and C is a configuration which is solvable for the unit configuration on V(G) is N P-hard and thus N P-complete.

We will show that instances the exact cover by 4-sets may be translated to equivalent instances of cover solvability for the unit configuration in polynomial time. Given an instance this problem, that is, a set [formula] and a class [formula] of four-element subsets of S, construct a graph G' in the following manner: create a set of vertices [formula] corresponding to the elements of S, and a set of vertices [formula] corresponding to the members of A. Create edges between B and T in the natural way, including {bi,tj} if sj∈ai. Additionally, create a vertex v and a path of length m - n which has one terminal vertex v and the other called w. Finally, create vertex classes [formula] and [formula] creating edges {bi,bi'}, {bi',bi''} and {bi'',v} for all i.

Now we create a configuration C' on G'. Let C'(t) = 0 for all t∈T and let C'(b) = 9 for all b∈B. Let C'(v)  =  2m - n - (m - n) + 1, C'(w) = 0 and C'(u) = 1 for all u between v and w on the path connecting them. Let C'(u)  =  1 for all [formula] (Figure [\ref=dia].)

Since we have made only 5|A| + 1 vertices, the construction may be done in polynomial time. To finish the proof, we now must that C' is solvable if and only if A contains an exact cover of S.

First suppose that A contains a exact cover [formula] of S. Then for each vertex in B which is a bij for some 1  ≤  j  ≤  n, we use 8 of the pebbles on this vertex to put one pebble on each of the four vertices of T to which it is adjacent. Because of the fact that A' is a exact cover and the way we constructed G', we now have one pebble on every vertex of T. Furthermore, we have m - n vertices in B that still have 9 pebbles each on them. Because v is at distance 3 from each of these vertices, we can use 8 pebbles from each of these vertices to move one pebble each onto v, leaving 2m - n + 1 pebbles on v, enough to move one pebble onto w while leaving one pebble on v. This leaves this exactly one pebble on every vertex of G', so we have solved C' for the unit configuration. Therefore, C' is solvable whenever A contains a exact cover of S.

To show the converse, suppose that A does not contain a exact cover of S. We must show C' is not solvable for the unit configuration. Assume the opposite, C' is solvable. The sequence of pebbling moves which solves C' must contain (at least) one move to t for every t∈T. Of the 4n moves that are necessary (one to each vertex in T,) all must originate from B, and no more than 4 can originate from any one vertex of B, since each vertex in B is adjacent to only four vertices in T. Since A does not contain a exact cover of S, it cannot be the case that these moves originate from exactly n vertices in B.

We make these 4n moves immediately from C', using Corollary 2 to see that the resulting configuration must be solvable. There are now 8(m - n) + m pebbles left on B, total. Suppose another move to B is necessary to solve the graph. Then we can make one such move immediately. But then we apply Theorem 7 to show that the resulting configuration is unsolvable, since

[formula]

can be easily seen. We now know that none of the remaining moves are onto vertices in T, and thus there can be no more moves from T because such a move would leave a vertex in T permanently uncovered. Our configuration is solvable without any further moves to or from any vertex in T. We can thus eliminate these vertices T from our graph using Corollary 4, leaving us with a tree.

Corollary 6 now allows us to collapse the paths of length three which terminate in the vertices of B, and we easily see that collapsing these paths one vertex at a time adds one pebble to v if there are still 9 pebbles on the end vertex in B, and adds zero pebbles to v otherwise. But since it is not the case that the moves originate from exactly n vertices in B, there are less than m - n total stacks of 9 pebbles on B left, and so we add less than m - n pebbles to v through this process. This leaves us with less than 2m - n + 1 pebbles on v, and therefore we do not have enough pebbles to move a pebble onto w while leaving a pebble on v. Therefore, the configuration on this reduced graph is unsolvable, so the original configuration was unsolvable, contradiction.

The N P-Completeness of the Canonical Pebbling Solvability Problem

A configuration C on a graph G is canonical pebbling solvable if and only if the v-reachability configuration Rv is solvable for all v∈G Thus, the canonical pebbling solvability question is equivalent to |G| cover pebbling questions, and is therefore trivially in N P. We now show it is in fact also N P-hard and thus is N P-complete.

The traditional pebbling solvability decision problem, which accepts pairs {G,C} if and only if G is a graph and C is a configuration which is solvable for each configuration which has value 1 on a single vertex in V(G) and value 0 on every other vertex is N P-hard and thus N P-complete.

We demonstrate that it is possible to "translate" a cover pebbling solvability question into a pebbling solvability question in polynomial time, thus showing the pebbling solvability question is N P-hard since cover solvability is N P-hard by Theorem 10. For simplicity, we translate instances of the restricted class of problems shown N P hard by Theorem 10, that is, problems of the solvability of non-negative configurations for the unit configuration.

Consider a graph G with |G| = n and a non-negative configuration C on G to be solved for the unit configuration. If |C|  ≥  2n - 1 then C is solvable because we know in [\cite=Glenn1] that 2n - 1 is the largest possible cover pebbling number possible for the unit configuration on a graph with n vertices. So if |C|  ≥  2n we translate our solvability problem to some trivially solvable canonical pebbling solvability problem, such as the solvability problem of the empty graph. We may therefore assume that |C|  <  2n. Further, if |G| = 1, it is obvious that a configuration is canonical pebbling solvable if and only if it is cover solvable for the unit configuration, so we leave the graph and configuration unchanged by our translation. So we may assume n  ≥  2.

Label the vertices of G [formula] Construct a graph G' and a configuration C' in the following manner: begin with an isomorphic copy of G with vertices [formula] and with edges added in the obvious way, that is with {vi',vj'}∈E(G') if and only if {vi,vj}∈E(G). Let H be the subgraph induced by [formula] which is isomorphic to G. Now we add a path of length n to each vertex vi' and attach the opposite end of each path to a vertex w0. To put this precisely, add vertices uij for all 1  ≤  i, j  ≤  n, and a vertex w0 and edges {vi',ui1}, {uij,ui(j + 1)}, and {uin,w0} for all 1  ≤  i  ≤  n for all 1  ≤  j  ≤  n - 1. Finally, add a path of length n attached at w0 and call the terminal vertex wn. That is, add vertices [formula] and edges {wi - 1,wi} for each 1  ≤  i  ≤  n.

Now, we define a configuration C' on the graph G' we constructed: let C'(vi') = C(vi) + 1 for all 1  ≤  i  ≤  n. Let C'(uij)  =  1 for all 1  ≤  i, j  ≤  n. Let C'(w0)  =  2n  -  n and let C'(wi)  =  0 for all 1  ≤  i  ≤  n. (Figure 2.)

We have created |G|2  +  2|G|  +  1 vertices, so this construction may be done in polynomial time. We now show that the configuration C' is canonical pebbling solvable on G' if and only if C is solvable for the unit configuration on G.

We know that if the wn-reachability configuration on Rwn is not solvable, then wn is not reachable from C' and so C' is not canonical pebbling solvable. Also if Rwn is solvable from C', we know from Theorem 1 it may be solved by a sequence of moves for which the intermediate configurations are all non-negative. Clearly, this requires moving pebbles onto each vertex [formula] in some intermediate configuration, thus these vertices are reachable from C'. Since every other vertex of G' is trivially reachable from C', we know C' is canonical pebbling solvable. Thus the canonical pebbling solvability of C' is equivalent to the solvability of Rwn. Therefore, we henceforth consider the solvability of Rwn.

If the configuration C is solvable for the unit configuration on G, we may perform the same moves that solve C on the isomorphic copy of H in G' and because each vertex in H begins with one more pebble on each vertex, the result will be a configuration with one more pebble on each vertex of H than is on the corresponding vertex of G after the configuration C has been solved. In particular, there will be at least 2 pebbles on each vertex vi'. Thus, we can move a pebble from each vi' onto ui1,, which leaves 2 pebbles on each vertex ui1, meaning we may move a pebble from each ui1 onto each ui2, and so forth, until we have 2 pebbles on each uin, from each of which we may move a pebble onto w0, adding n pebbles to w0 for a total of 2n. We can use these 2n pebbles to add one pebble to wn, which is at distance n from w0. So Rwn is solvable whenever C is solvable for the unit configuration on G.

Now we turn to the converse. Assume the converse does not hold, that C is not solvable for the unit configuration on G, but C' is solvable for Rwn on G'. Then, using Theorem 5, C' has a directed-cycle-free solution for Rwn, so choose such a solution. Suppose there is a move from ui1 to vi' for some i. Since the move from ui1 to vi' leaves - 1 pebbles on ui1, we must have a move onto ui1. But our solution is directed-cycle-free, so we do not have a move from vi' to ui1, so the only possibility is a move from ui2 to ui1. By the same reasoning, we must have a move onto ui2 which cannot originate from ui1, and thus must originate from ui3. Repeating the argument, we have a move from ui1 to vi, a move from uij to ui(j - 1) for 2  ≤  j  ≤  n, and a move from w0 to uin. By Corollary 2, the configuration C'' obtained by executing all of these moves is solvable.

We now use Theorem 7 to derive a contradiction, by calculating ΓC''(wn). We have added one pebble to H, so there are now at most 2n pebbles on H. Since these vertices have distance 2n + 1 from wn this gives a contribution to ΓC''(wn) of at most 2n2- 2n +  - 1 = 2- n - 1. For the uij we see n - 1 paths are still covered with pebbles, so we calculate a contribution to ΓC''(wn) of

[formula]

Finally, the contribution of w0 is (2n  -  n)2- n  =  1  -  n2- n and the contribution of wn is - 1. Totalling up, we see

[formula]

and since n  ≥  2 we have ΓC''(wn) < 0 so the C'' is not solvable for Rwn, contradiction.

Therefore, there can be no move from ui1 to vi', for any i. Now execute every move on our solution from some vi' to ui1, and call the resulting configuration C''. By Corollary 2, the resulting configuration is solvable by the remaining moves. But there are no moves left from H to [formula] and no moves from [formula] to H, so by Corollary 4, the configuration induced by C'' on H and the configuration induced by C'' on [formula] must both be solvable. Consider first the configuration induced by C'' on [formula] [formula] is a tree, and using Corollary 6, we may collapse the paths formed by the uij down to w0. We know that C'' agrees with C' on [formula] except possible on the vertices ui1 for each i, and we easily see that when we collapse the path formed by [formula] to w0 we add no pebbles to W0 if C''(ui1)  ≤  1 and one pebble if 2  ≤  C''(ui1)  ≤  2n - 1  +  1.

First suppose C''(ui1)  ≥  2n - 1 + 2 for some i. This is possible only if we have made at least 2n - 1 + 1 moves from vi to ui1. Now consider the restriction of C'' to H. We had at most 2n - 1 pebbles on H originally, and the moves from vi to ui1 decrease this number by at least 2n + 2. We thus have at most - 3 pebbles left on H, and since pebbling moves can only decrease this number, we can never get back to 0, which is required to solve for Rwn restricted to H. So the restriction of C'' to H is not solvable for this restricted demand function, which is impossible by Corollary 6.

Now suppose C''(ui1)  ≤  2n - 1  +  1 for all i. Then collapsing the paths formed by [formula] to w0 we add one pebble to w0 for each i such that C''(ui1)  ≥  2. If this is not every i, we are left with less than 2n pebbles on w0, which clearly makes wn unreachable, so we may assume C''(ui1)  ≥  2 for each i. This means we have made at least one move from vi' to ui1 for each i, decreasing the number of pebbles on each vi by at least 2. We know by Corollary 6 that the resulting configuration C'' restricted to H is solvable for Rwn restricted to H, that is, the configuration which is identically 0 on H. Since we know C''(vi')  ≤  C'(vi') - 2  =  C(vi) - 1 for all i we know by Corollary 3 that the configuration C'  -  2 found by starting with C' and removing two pebbles from each vertex of H is solvable for the zero configuration on H. By the isomorphism of G and H and the fact that C'(vi) - 2 = C(vi) - 1 for all i, this is equivalent to saying C(vi) - U is solvable for the zero configuration. But by Theorem 1, we know that only the difference between the demand function and the initial configuration is material to cover solvability. Thus, this is equivalent to saying C is solvable for the unit configuration on G, which we assumed is false, contradiction.

The decision problem which accepts pairs {G,C,v} if and only if G is a graph, v a vertex of G and C is a non-negative configuration on G which is solvable for configuration Rv is N P-complete.

We showed above that the canonical pebbling solvability question we constructed is equivalent to problem of solvability for the configuration Rwn. Thus, the proof also shows that the cover pebbling solvability problem restricted to reachability configurations is still N P-hard, and thus N P-complete.

The N P-Hardness of Determining Pebbling Numbers for Reachability Configurations

In [\cite=Vuong] a simple formula for the cover pebbling number of a strictly positive configuration on a graph is given. In this section, however, the problem of determining whether the pebbling number of a general non-negative configuration is greater than a certain quantity is shown to be N P-hard.

The decision problem which accepts triples {G,v,m} if and only if γG(Rv)  >  m is N P-hard.

Again, we use the exact cover by four-sets problem. Given a set [formula] and a class [formula] of four-element subsets of S, construct a graph G' as follows: as before create a set a set of vertices [formula] corresponding to the elements of S, and a set of vertices [formula] corresponding to the members of A, and include edge {bi,tj} whenever sj∈ai. Create a vertex v and add edges {ti,v} for all 1  ≤  i  ≤  4n. Finally, attach a path of length 3 to each vertex in B, that is, create vertices bj',bj'', and bj''' and edges {bj,bj'}, {bj',bj''}, and {bj'',bj'''}, for each 1  ≤  j  ≤  m. (Figure 3.)

Now, we claim that γG'(Rv)  >  31n  +  15(m - n) = 15m  +  16n if and only if A contains an exact cover of S. First, suppose such an exact cover [formula] exists. Define configuration C on G by putting 31 pebbles on each [formula] and 15 on each bi''' such that [formula] for all j. We easily calculate |C| = 31n + 15(m - n). We claim this configuration is not solvable for Rv, and so γG(Rv)  >  31n  +  15(m - n).

Applying Corollary 6, we can collapse the paths to the bi, leaving 2 pebbles on bij for all j and 1 pebble on all bi for which [formula] for all j. But since [formula] is an exact cover, the bij are not mutually adjacent to any vertex, so while we may move the stacks of 2 onto vertices of T, we can only produce stacks of at most one pebble on any vertex, so no further moves are possible, and we cannot solve for Rv.

Now suppose no exact cover exists. We wish to show an arbitrary configuration C' of size 31n + 15(m - n) on G' is solvable for Rv and thus γG'(Rv)  ≤  31n + 15(m - n). Clearly, any configuration which has a pebble on v is trivially solvable for Rv, so we may assume our configuration has no such pebble. Similarly, if our configuration has more than two pebbles on any vertex in T, it is solvable for Rv by using these two pebbles to put a pebble on v. So we may assume there is at most one pebble on any vertex of T.

We consider two cases. First suppose the configuration has no pebbles on T. Then all 16n + 15m pebbles are distributed on the m paths (bi,bi',bi'',bi'''). Note that we know from [\cite=Glenn2] that the canonical pebbling number of a path of length 4 is 8. Thus, we can use any collection eight pebbles on one of these paths to move a pebble to bi. If there are 32 pebbles or more on any of the paths (bi,bi',bi'',bi'''), we may use them to move 4 pebbles to bi, and from there two onto a vertex in T, and then one onto v, so we may assume we have no more than 31 on any of the paths. Thus, we must have 16 pebbles on at least n of the paths, because any configuration which avoids this has at most 31(n - 1) + 15(m - (n - 1)) = 16n + 15m - 16 pebbles distributed on the paths, fewer than the 16n + 15m in the configuration we are considering. We can use these n collections of 16 pebbles to move two pebbles each onto n of the vertices in B. Since there is no exact cover of S in A, we know that of this set of n of vertices in B, two are mutually adjacent to a vertex in T. We can move one pebble each from these two vertices onto the vertex in T which they are both adjacent to, and then use those two pebbles to put one pebble on v. Thus, the original configuration must be solvable for Rv.

Now suppose there k > 0 pebbles on T. If there are more than 15 pebbles on a path (bi,bi',bi'',bi''') with bi adjacent to a vertex in T which has a pebble on it, we can move two pebbles onto bi using these 16 or more pebbles, use these to add a pebble to this vertex of T, and then use these two pebbles to put a pebble on v, showing our configuration is solvable for Rv. So we assume none of these paths has 16 or more pebbles. Also, as before, we may assume none of the m paths below B has more than 31 pebbles total. Now note that any set of [formula] of the vertexes in B which are not adjacent to any of the k covered vertices in T contains two vertices which are mutually adjacent to some vertex in T by the pigeonhole principle (there are 4n - k vertices in T which are not covered, and every vertex in B which is not adjacent to a covered vertex is adjacent to four non-covered vertices.)

We now claim that we have at least 16 pebbles on [formula] of the paths below B which are not rooted at to any of the vertices in B which are adjacent to covered vertices in T. If our configuration avoided having [formula] such paths with 16 pebbles, we calculate the maximum number of pebbles on the graph as [formula] less than the number of pebbles in our configuration. So we have 16 pebbles on [formula] of the paths below B which are not adjacent to a covered vertex in T, and using the above, we see we can move two pebbles to each of two vertices in B which are mutually adjacent to a vertex in T. Move one pebble from each of these vertices to this vertex of T, and then use these two pebbles to place one on v. We have now shown Rv is solvable in all cases if our configuration is of size 31n + 15(m - n). Thus γG'(Rv)  ≤  31n + 15(m - n) if A contains no exact cover of S. We now know our cover pebbling number problem is equivalent to the exact cover problem. Thus the problem of determining in general the cover pebbling number of a reachability configuration is N P-hard.

Open Questions

Acknowledgments

Part of this work was done while the author was receiving support from NSF grant DMS-0139286 while a participant at the East Tennessee State University REU under the direction of Anant Godbole. I acknowledge him for his guidance and encouragement. Also, I thank Carl Yerger for his help preparing the original version of Section 3 for publication in [\cite=monthlypaper], including providing comments and creating Diagram 1. Finally, I acknowledge Kevin Purbhoo for showing me that one of my early attempts to prove Theorem 10 was flawed.