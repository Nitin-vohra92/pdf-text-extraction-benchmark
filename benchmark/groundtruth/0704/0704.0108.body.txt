Reducing SAT to 2-SAT

Introduction

Among all dimensions, 2-SAT possesses many special properties unique in the sense of computational complexity [\cite=cook1] [\cite=cook] [\cite=karp] [\cite=garry] [\cite=lane]. But in light of works [\cite=gubin3] [\cite=gubin1] [\cite=gubin2] [\cite=gubin] a problem arose: either those properties are accidental or there are polynomial time reductions of SAT to 2-SAT of polynomial size. This article describes one such reduction.

Presenting SAT with XOR

In [\cite=gubin3] was described one of the ways to present SAT with a conjunction of XOR. Let us summarize it. Let Boolean formula f define a given SAT instance:

[formula]

Clauses ci are disjunctions of literals:

[formula]

- where ni is the number of literals in clause ci; and Lij are the literals. Using distributive laws, formula (1) can be rewritten in disjunctive form:

[formula]

Clauses dk in this presentation are conjunctions of m literals - one literal from each clause [formula]:

[formula]

It is obvious that formula (1) is satisfiable iff there are clauses without complimentary literals amongst conjunctive clauses (2). Disjunction of all those clauses is the disjunctive normal form of formula (1). Thus, formula (1) is satisfiable iff there are members in its disjunctive normal form. There is a generator for conjunctive clauses (2):

[formula]

- where Boolean variable ξμν indicates whether literal Lμν participates in conjunction (2). Solutions of equation (3) generate conjunctive clauses (2). Let's call the variables ξ the indicators. To select from all solutions of equation (3) those without complimentary clauses, let's use another Boolean equation. For each of the combination of clauses (ci,cj),  ~  1  ≤  i  <  j  ≤  m, let's build a set of all couples of literals participating in the clauses:

[formula]

Let Bij be a set of such couples of indicators (ξiμ,ξjν), that the literals they present are complimentary:

[formula]

There are C2m sets Bij,  ~  1  ≤  i  <  j  ≤  m, and

[formula]

Let's mention that some of the sets can be empty. Then, the following equation will select from all solutions of equation (3) those without complimentary clauses:

[formula]

Due to the above estimations of the number of sets Bij and of their sizes, the number of clauses in formula (4) is

[formula]

- where t2 is the second number in the row of clauses' sizes sorted by value:

[formula]

Because satisfiability of formula (1) means that the disjunctive normal form of formula (1) has conjunctive clauses, formula (1) is satisfiable iff the following formula/equation is satisfiable:

[formula]

The reasons for replacing formula (1) with formula (5) are explained in [\cite=gubin3]. The number of true-strings in truth-tables of XOR clauses of formula (3) is linear over initial input. The number of true-strings in truth-tables of disjunctive clauses of formula (4) is just 3. The number of all clauses in (5) is cubic over initial input. It can be estimated as

[formula]

Thus, application of the simplified compatibility matrices method [\cite=gubin3] to equation (5) will produce a polynomial time algorithm for SAT. But let's return to the reduction.

SAT vs. 2-SAT

Let's apply the simplified method of compatibility matrices [\cite=gubin3] to equation (5). The method consists of sequential Boolean transformations of compatibility matrices of equation (5). Let's mention that after m iterations, due to the allocation of formula (4) at the end of formula (5), there will only be compatibility matrices of equation (4) left in play. They will be grouped in an upper triangular box matrix

[formula]

The matrix is displayed below:

[formula]

If there are no complimentary literals in different clauses of formula (1), then formula (4) is just missing. The size of matrix (6) is 0  ×  0. In this case, formula (1) is reducible to 1-SAT instance

[formula]

- where

[formula]

This singularity belongs to the set of all 2-SAT instances. If, during the first m iterations, a pattern of unsatisfiability arises (one of the compatibility matrices becomes filled with false entirely), then formulas (5) and (1) are both unsatisfiable [\cite=gubin3]. This case may be thought of as a case of formula (1) being reduced to an unsatisfiable formula

[formula]

Let's include this singularity in the set of all 2-SAT instances. Otherwise, boxes Fm + μ,m + ν in matrix (6) are what is left of the compatibility matrices of equation (4) after the first m iterations of the method. Due to their construction [\cite=gubin3], the boxes are 3  ×  3 matrices:

[formula]

- where xij∈{false,true}. The number of boxes is C2n. Thus, the number of all elements in matrix (6) is

[formula]

Let's enumerate the elements arbitrarily:

[formula]

Then, distribution of true/false in matrix (6) can be described with a 1-SAT formula/equation

[formula]

- where ηi are literals over a set of Boolean variables

[formula]

The literals are

[formula]

Let's take the following 2-SAT instance:

[formula]

Box matrix (6) is an initialization of the modified method of compatibility matrices [\cite=gubin3] for formula (9): compatibility matrices of formula (4) are depleted to satisfy equation (8). Thus, continuation of the simplified method of compatibility matrices for equation (5) from its Step m + 1 to its finish is an application of the modified method of compatibility matrices to system (9) from its Step 1 to its finish [\cite=gubin3]. After n - 2 iterations, both methods must result with the same version of satisfiability of formula (1). Thus, formulas (5) and (1) are satisfiable iff 2-SAT formula (9) is satisfiable. The number of clauses in formula (9) is

[formula]

According to [\cite=gubin3], the time to deduce formula (9) can be safely estimated as

[formula]

SAT vs. 1-SAT

Let's take one step further. Applying to formula (1)/(5) either of the variations of the compatibility matrices method [\cite=gubin3] will produce a Boolean matrix. Let it be a matrix R:

[formula]

Size of the matrix depends on the method's variation and the order of clauses in formula (1). The size can be changed if permute the clauses and repeat the method [\cite=gubin3]. The formula (1) is satisfiable iff matrix R contains true-elements [\cite=gubin3] (elements which are true). The existence/absence of the true-elements is the only invariant. If formula (1) is unsatisfiable, then that formula is reducible to formula "false". Otherwise, formula (1) is reducible to a 1-SAT instance. Let's enumerate elements of matrix R in arbitrarily order:

[formula]

Let B be a set of t  =  ab Boolean variables:

[formula]

Then the following 1-SAT formula describes distribution of true / false in matrix R:

[formula]

- where literals θi are

[formula]

Thus, the compatibility matrices method reduces satisfiable formula (1) to 1-SAT formula (10). In its turn, formula (10) can be rewritten as SAT of any dimension by appropriate substitution of variables. If use the simplified method of compatibility matrices, then matrix R is a 3  ×  3 Boolean matrix [\cite=gubin3]. Let there be two clauses shorter than 3 in formula (1). Let's permute all clauses and make those shortest clauses to be the last ones in formula (1). Then, result of the modified method [\cite=gubin3] will be a matrix R of size less than 3  ×  3. That proves the following theorem.

Any SAT instance is reducible to a 1-SAT instance with 9 variables or less. A SAT instance is unsatisfiable iff its 1-SAT presentation is "false" - there is not any variables in its 1-SAT presentation.

Conclusions

Formula (1) may be thought of as a "Business Requirements". And any appropriate computer program may be thought of as a solution of the SAT instance. Then, theorem 1 can be an explanation of the remarkable efficiency of the "natural programs". From this point of view, the iterations of the method of compatibility matrices may be thought of as a learning/modeling of the business domain. In the artificial programming, the calculation of the compatibility matrices - a virtual business domain - could be a conclusion of the stage "Business Requirements Analysis/Mathematical Modeling". That would improve the programs' performance. The resulting compatibility matrices may be thought of as a fussy logic's tables of rules for the domain. The whole solution of formula (1) can be achieved, with one of the following approaches, for example. ANN approach is the applying of the compatibility matrices method backward, starting from matrix R. An example of that can be found in [\cite=gubin2]. DTM approach is the looping trough of the following three steps: selection of any true-element from matrix R; substitution of the appropriate true-assignments in formula (1); and repeating of the compatibility matrices method. The last method is an implication of the self-reducibility property of SAT [\cite=lane]. In certain sense, theorem 1 may be seen as an answer to the Feasibility Thesis [\cite=cook].