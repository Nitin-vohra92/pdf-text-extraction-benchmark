VOI-aware MCTS

Introduction

MCTS, and especially UCT [\cite=Kocsis.uct] appears in numerous search applications, such as [\cite=Eyerich.ctp]. Although these methods are shown to be successful empirically, most authors appear to be using UCT "because it has been shown to be successful in the past", and "because it does a good job of trading off exploration and exploitation". While the latter statement may be correct for the Multi-armed Bandit problem and for the UCB1 algorithm [\cite=Auer.ucb], we argue that a simple reconsideration from basic principles can result in schemes that outperform UCT.

The core issue is that in MCTS for adversarial search and search in "games against nature" the goal is typically to find the best first action of a good (or even optimal) policy, which is closer to minimizing the simple regret, rather than the cumulative regret minimized by UCB1. However, the simple and the cumulative regret cannot be minimized simultaneously; moreover, [\cite=Bubeck.pure] shows that in many cases the smaller the cumulative regret, the greater the simple regret.

We begin with background definitions and related work. VOI estimates for arm pulls in MAB are presented, and a VOI-aware sampling policy is suggested, both for the simple regret in MAB and for MCTS. Finally, the performance of the proposed sampling policy is evaluated on sets of Bernoulli arms and on Computer GO, showing the improved performance.

Background and Related Work

Monte-Carlo tree search was initially suggested as a scheme for finding approximately optimal policies for Markov Decision Processes (MDP). MCTS explores an MDP by performing rollouts--trajectories from the current state to a state in which a termination condition is satisfied (either the goal or a cutoff state).

Taking a sequence of samples in order to minimize the regret of a decision based on the samples is captured by the Multi-armed Bandit problem (MAB) [\cite=Vermorel.bandits]. In MAB, we have a set of K arms. Each arm can be pulled multiple times. When the ith arm is pulled, a random reward Xi from an unknown stationary distribution is encountered. In the cumulative setting, all encountered rewards are collected. UCB1 [\cite=Auer.ucb] was shown to be near-optimal in this respect. UCT, an extension of UCB1 to MCTS is described in [\cite=Kocsis.uct], and shown to outperform many state of the art search algorithms in both MDP and adversarial search [\cite=Gelly.mogo] [\cite=Eyerich.ctp]. In the simple regret setting, the agent gets to collect only the reward of the last pull.

The simple regret of a sampling policy for MAB is the expected difference between the best expected reward μ* and the expected reward μj of the empirically best arm [formula]:

[formula]

where Δj  =  μ*  -  μj.

Strategies that minimize the simple regret are called pure exploration strategies [\cite=Bubeck.pure].

A different scheme for control of sampling can use the principles of bounded rationality [\cite=Horvitz.reasoningabout] and rational metareasoning [\cite=Russell.right] [\cite=HayRussell.MCTS]. In search, one maintains a current best action α, and finds the expected gain from finding another action β to be better than the current best.

Upper Bounds on Value of Information

The intrinsic VOI Λi of pulling an arm is the expected decrease in the regret compared to selecting the best arm without pulling any arm at all. Two cases are possible:

the arm α with the highest sample mean [formula] is pulled, and [formula] becomes lower than [formula] of the second-best arm β;

another arm i is pulled, and [formula] becomes higher than [formula].

The myopic VOI estimate is of limited applicability to Monte-Carlo sampling, since the effect of a single sample is small, and the myopic VOI estimate will often be zero. However, for the common case of a fixed budget of samples per node, Λi can be estimated as the intrinsic VOI Λbi of pulling the ith arm for the rest of the budget. Let us denote the current number of samples of the ith arm by ni, and the remaining number of samples by N:

Λbi is bounded from above as

[formula]

where [formula] is the sample mean of the ith arm after ni + N samples.

The probabilities can be bounded from above using the Hoeffding inequality [\cite=Hoeffding.ineq]:

The probabilities in equations ([\ref=eqn:thm-be]) are bounded from above as

[formula]

where [formula].

An upper bound on the VOI estimate Λbi is obtained by substituting ([\ref=eqn:probound-blnk-hoeffding]) into ([\ref=eqn:thm-be]).

[formula]

VOI-based Sample Allocation

Following the principles of rational metareasoning, for pure exploration in Multi-armed Bandits an arm with the highest VOI should be pulled at each step. The upper bounds established in Corollary [\ref=crl:bound-blnk-hoeffding] can be used as VOI estimates. In MCTS, pure exploration takes place at the first step of a rollout, where an action with the highest utility must be chosen. MCTS differs from pure exploration in Multi-armed Bandits in that the distributions of the rewards are not stationary. However, VOI estimates computed as for stationary distributions work well in practice. As illustrated by the empirical evaluation (Section [\ref=sec:empirical-evaluation]), estimates based on upper bounds on the VOI result in a rational sampling policy exceeding the performance of some state-of-the-art heuristic algorithms.

Empirical Evaluation

Selecting The Best Arm

The sampling policies are first compared on random Multi-armed bandit problem instances. Figure [\ref=fig:random-instances] shows results for randomly-generated Multi-armed bandits with 32 Bernoulli arms, with the mean rewards of the arms distributed uniformly in the range

[formula]

Playing Go Against UCT

The policies were also compared on Computer Go, a search domain in which UCT-based MCTS has been particularly successful [\cite=Gelly.mogo]. A modified version of Pachi [\cite=Braudis.pachi], a state of the art Go program, was used for the experiments. The UCT engine was extended with a VOI-aware sampling policy, and a time allocation mode ensuring that both the original UCT policy and the VOI-aware policy use the same average number of samples per node was added. (While the UCT engine is not the most powerful engine of Pachi, it is still a strong player; on the other hand, additional features of more advanced engines would obstruct the MCTS phenomena which are the subject of the experiment.) The engines were compared on the 9x9 board, for 5000, 7000, 10000, and 15000 samples per ply, each experiment was repeated 1000 times. Figure [\ref=fig:vct-against-uct] shows the winning rate of VOI against UCT vs. the number of samples. For most numbers of samples per node, VOI outperforms UCT.

Summary and Future Work

This work suggested a Monte-Carlo sampling policy in which sample selection is based on upper bounds on the value of information. Empirical evaluation showed that this policy outperforms heuristic algorithms for pure exploration in MAB, as well as for MCTS.

MCTS still remains a largely unexplored field of application of VOI-aware algorithms. More elaborate VOI estimates, taking into consideration re-use of samples in future search states should be considered. The policy introduced in the paper differs from the UCT algorithm only at the first step, where the VOI-aware decisions are made. Consistent application of principles of rational metareasoning at all steps of a rollout may further improve the sampling.