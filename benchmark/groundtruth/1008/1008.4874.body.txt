Applying dissipative dynamical systems to pseudorandom number generation: Equidistribution property and statistical independence of bits at distances up to logarithm of mesh size

Introduction

Pseudorandom number generation is an important component of any stochastic simulations such as molecular dynamics and Monte Carlo simulations [\cite=cm]. The problem of design of reliable and fast generators is of great importance and attracts much attention [\cite=Knuth].

There are numerous papers where chaos is considered as a requirement for good pseudorandomness. Many properties of chaotic dynamical systems are discussed in this respect: ergodicity, sensitivity to initial conditions, mixing property, local divergence of trajectories, deterministic dynamics and structural complexity. These properties resemble certain properties of pseudorandomness and are considered in the literature as desirable properties for pseudorandomness. Several pseudorandom number generators based on chaotic maps have been proposed in the literature [\cite=chaoticRNGs] [\cite=BarashShchur]. However, the behavior of dynamical systems on a discrete lattice is studied much less than in continuous space and a number of corresponding important questions still remain open. In this work I show that applying dissipative dynamical systems to pseudorandom number generation can result in substantially preferable statistical behavior of the corresponding pseudorandom number sequences, compared to applying conservative dynamical systems.

The present approach extends the method of pseudorandom number generation of Ref. [\cite=BarashShchur] [\cite=BarashShchur2], which is based on evolution of the ensemble of dynamical systems. Several generalizations are carried out. The connection between the statistical properties of a generator and geometric properties of the corresponding map is uncovered. New pseudorandom number generator is proposed. Using SSE2 technology, which is supported by all Intel and AMD processors fabricated later than in 2003 [\cite=Pentium4] [\cite=AMD64], effective implementations are developed.

One of the most important properties characterizing the quality of pseudorandom sequences of numbers is the high-dimensional uniformity and the corresponding equidistribution property [\cite=Equidistr]. Unlike other essential characteristics of pseudorandom number generators such as the period length, which is studied in detail in relationship to nearly all known generators, there are not so many examples in which the high-dimensional equidistribution property was proved [\cite=Equidistr] [\cite=MT] [\cite=Panneton] [\cite=LFSR113].

In this paper the proper choice of parameters is established, which results in the validity of the equidistribution property for the proposed generator. In particular, it is shown that the determinant of the transformation has to be an even integer in order for the property to hold. The equidistribution is established on length up to a characteristic length [formula]: for [formula], each combination of successive n bits taken from the RNG output occurs exactly the same number of times and has a corresponding probability 1 / 2n. The length [formula] turns out to depend linearly on t, where the mesh size g (i.e. the modulus of the basic recurrence) is equal to p  ·  2t and p is an odd prime. In other words, for given p, one has [formula]. Numerical results show that the equidistribution property still approximately holds with high accuracy beyond the region of its strict validity under the condition n < 6.8 log p.

I have constructed several realizations for the proposed generator (see Table [\ref=RNGParams]). It is shown in Proposition 2 in the section on geometric and statistical properties that for the realizations either [formula] or [formula] takes place. The speed and statistical properties of the constructed generators are compared with those of other modern generators (see Tables [\ref=RNG-Properties], [\ref=Tspeed1]). Practically, the generators with smaller values of t (e.g. with prime g) also have very good properties for a particular choice of parameters, while the generator period is not less than p2 - 1 and increases significantly with increasing p. For this reason two realizations with small t are also thoroughly tested.

Among several statistical test suites available in the literature, TestU01 is known to contain very stringent batteries of tests for empirical testing of pseudorandom numbers. At present there are only several known pseudorandom number generators that pass all the tests even in the sense that no p-value is outside the interval

[formula]

The generator, its initialization and period

It is suggested in [\cite=BarashShchur] [\cite=BarashShchur2] to construct RNGs based on an ensemble of sequences generated by multiple recursive method. The state of the generator consists of the values [formula], [formula]. The transition function of the generator is defined by the recurrence relation

[formula]

where [formula]. The values x(n)i, [formula] can be considered as x-coordinates of s points (x(n)i,y(n)i)T, [formula] of the g  ×  g lattice on the two-dimensional torus, then each recurrence relation describes the dynamics of x-coordinate of a point on the two-dimensional torus:

[formula]

where matrix [formula] is a matrix with integer elements, [formula], q =  det M and [formula] is a trace of matrix M [\cite=Grothe] [\cite=Lecuyer90] [\cite=BarashShchur]. Indeed, it follows from ([\ref=MatrixRecurr]) that kx(n - 1)i - qx(n - 2)i = (m1 + m4)x(n - 1)i - (m1m4 - m2m3)x(n - 2)i  =  (x(n)i - m2y(n - 1)i) + m4x(n - 1)i - m1m4x(n - 2)i + m2m3x(n - 2)i  =  x(n)i - m2(y(n - 1)i - m3x(n - 2)i) + m4(x(n - 1)i - m1x(n - 2)i) = x(n)i - m2m4y(n - 2)i + m2m4y(n - 2)i = x(n)i ( mod  g). The basic recurrence ([\ref=Recurrence]) is therefore closely related to so-called matrix generator of pseudorandom numbers studied in [\cite=Knuth] [\cite=Grothe] [\cite=NiederrBook].

The output function is defined as follows:

[formula]

where [formula], i.e. each bit of the output corresponds to its own recurrence, and s = 32 recurrences are calculated in parallel.

For g = p  ·  2t, where p is a prime number, the characteristic polynomial f(x) = x2 - kx + q is chosen to be primitive over [formula]. Primitivity of the characteristic polynomial guarantees maximal possible period p2 - 1 of the output sequence for g = p. It is straightforward to prove that taking g = p  ·  2t instead of g = p does not reduce the value of the period.

There is an easy algorithm to calculate x(n) in ([\ref=Recurrence]) very quickly from x(0) and x(1) for any large n. Indeed, if x(2n) = knx(n) - qnx(0) ( mod  g), then x(4n) = (k2n - 2qn)x(2n) - q2nx(0) ( mod  g). As was mentioned already in [\cite=BarashShchur], this helps to initialize the generator. To initialize all s recurrences, the following initial conditions are used: x(0)i = x(iA), [formula]. Here A is a value of the order of (p2  -  1) / s. The author has tested realizations with various values of A of the order of (p2  -  1) / s and found in all cases that the specific choice of A was not of importance for the properties studied in the next sections. Short cycles and, in particular, the cycle consisting of zeroes, are avoided if at least one of x(0) and x(1) is not divisible by p. As a result of the initialization, all s initial points belong to the same orbit on the torus of the period p2 - 1, while the minimal distance A between the initial points along the orbit is chosen to be very large.

In addition to the realizations based on the output function ([\ref=OutputFunction]) that takes a single bit from each linear recurrence, I have also constructed realizations based on a more general output function

[formula]

where v bits are taken from each recurrence and [formula]. For example, GM55.4-SSE realization calculates only s = 8 recurrent relations in parallel and takes v = 4 bits from each number. Pseudorandom 32-bit numbers can be generated if sv  ≥  32. The sequence of bits {⌊2vx(n)i / g⌋}, where i is fixed and {x(n)i} is generated with relation ([\ref=MatrixRecurr]) will be designated below as a stream of v-bit blocks generated with matrix M. The pairs [formula] for the recurrence ([\ref=Recurrence]) and [formula] for the recurrence ([\ref=MatrixRecurr]) represent seeds for the streams of v-bit blocks generated with ([\ref=Recurrence]) and ([\ref=MatrixRecurr]) respectively. Consider the set of admissible seeds containing all seeds such that at least one of the two values is not divisible by p. Selecting the seed at random from a uniform distribution over the set of admissible seeds determines the probability measure for output subsequences of a stream of v-bit blocks. Such probabilities are considered below in the next section.

The parameters for the particular constructed realizations of the generator are shown in Table [\ref=RNGParams]. The parameters are chosen in order for the characteristic polynomial x2 - kx + q to be primitive over [formula]. In addition, as is shown below, value of q must be divisible by 2v in order for the equidistribution property to hold. Also the value of (k + q)g should not exceed either 232 or 264 in order to effectively calculate four 32-bit recurrences or two 64-bit recurrences in parallel within SIMD arithmetic. In the particular case t = 0 and v = 1 the method reduces to that studied earlier in [\cite=BarashShchur] [\cite=BarashShchur2]. Program codes for the new generators and proper initializations are available in [\cite=AlgSite].

Geometric properties and statistical properties

In [\cite=BarashShchur] a connection is established between statistical properties, the results of a random walk test and geometric properties of the cat maps. Cat maps are simple chaotic dynamical systems that correspond to transformations ([\ref=MatrixRecurr]) for q =  det M = 1, i.e. hyperbolic automorphisms of the two-dimensional torus. In particular, it is proved in [\cite=BarashShchur] that the probability of sequence 0000 of the first bits generated by a single cat map depends only on the trace k of a matrix M and for even k is equal to P = P0k2 / (k2 - 1), where P0 = 1 / 16. If k is odd, then all sequences of length 4 are equiprobable. The probability of sequence 00000 of length 5 is equal to P = P0(1 + 1 / (3k2 - 6)) for odd k, where P0 = 1 / 32. The condition P > P0 signifies that the 5-dimensional equidistribution never takes place for q = 1, i.e. for conservative hyperbolic automorphisms of the torus. In this work a more general case q  ≠  1 involving dissipative dynamical systems is studied.

Fig. [\ref=length5] shows the regions on the torus obtained in [\cite=BarashShchur] for the third points of sequences of length 5 for the matrix [formula]. The regions correspond to the sequences of length 5 of the first bits generated by the respective RNG, and the areas of the regions are equal to the probabilities of the sequences. Each region is drawn with its own color.

Let Xi  =  {(x,y)T|i / 2v  ≤  x / g < (i + 1) / 2v,0  ≤  y / g < 1}, i.e. the torus is divided into 2v vertical stripes [formula] of equal area. Suppose that g is divisible by 2v and consider the shift S:(x,y)T  →  (x + g / 2v,y)T ( mod  g), i.e. S(Xi) = X(i + 1) ( mod  2v). The shift S is a superposition of two rotations: S = R2R1, where R1 is a 180-degree rotation with respect to the point (1 / 2v + 1,1 / 2)T and R2 a 180-degree rotation with respect to the point (1 / 2v,1 / 2)T.

Proposition 1. If (i) [formula] is a matrix with integer values m1, m2, m3, m4, (ii) m1, q =  det M and g are divisible by 2v, (iii) the image of the lattice g  ×  g with the transformation Mj is invariant with respect to the shift S for [formula], then all the sequences of length n in a stream of v-bit blocks generated with matrix M are equiprobable.

Proof. In this case the element m(n)1 of matrix

[formula]

satisfies the recurrence relation m(n)1 = km(n - 1)1 - qm(n - 2)1 ( mod  g). Hence m(n)1 is divisible by 2v for any integer n  ≥  1.

Since m(n)1 is divisible by 2v, one has MnS(x,y)T = Mn(x + g / 2v ( mod  g),y)T = Mn(x,y)T + (0,m(n)3g / 2v)T. Hence, the set of points A such that A∈Xi and Mn(A)∈Xj passes with the shift S into the set of points A such that A∈X(i + 1) ( mod  2v) and Mn(A)∈Xj.

Let's now prove by induction that all sequences of length n are equiprobable. Obviously, if g is divisible by 2v, sequences of length 1 are equiprobable: [formula]. Assume that all sequences of length n - 1 are equiprobable. Let [formula], [formula] be probabilities of sequences of length n. Then αi  =  αi + 1, [formula] because the set of points A of the lattice g  ×  g such that A∈Xi, M(A)∈Xx1,, Mn - 1(A)∈Xxn - 1 passes with the shift S into the set of points A of the lattice g  ×  g such that A∈X(i + 1) ( mod  2v), M(A)∈Xx1,, Mn - 1(A)∈Xxn - 1. On the other hand, [formula] is the probability of sequence [formula] of length n - 1 and equals 1 / 2v(n - 1). Therefore, [formula], and all the sequences of length n are equiprobable. Proposition 1 is proved.

The condition that the image of the lattice g  ×  g with the transformation Mj is invariant with respect to the shift S for [formula], is used in the above consideration and is necessary for the Proposition 1. For j = 0 the invariance means that g is divisible by 2v. If g and m(n)1 are divisible by 2v, then the number of points A of the lattice g  ×  g such that A∈X0 and Mn(A)∈X0 is equal to the number of points A of the same lattice such that A∈X1 and Mn(A)∈X0. If g is not divisible by 2v then these numbers are approximately equal because the corresponding areas are equal and g is large number, and the exact equality holds only if g is divisible by 2v. Fig. [\ref=regions] shows the sets of points {A|A∈X0,M2(A)∈X0} and {A|A∈X1,M2(A)∈X0} for [formula] and v = 1.

Proposition 2. For [formula], [formula] and [formula] the sequences of length [formula] in a stream of bits generated with matrix M are equiprobable, where [formula], [formula] and [formula] respectively. Here g = p  ·  2t, where p is an odd prime, and the matrices correspond to the realizations GM29-SSE, GM58-SSE and GM55-SSE respectively.

Proof. Let's check that the image of the lattice g  ×  g with the transformation Mj is invariant with respect to the shift for [formula] and [formula]. In particular, the invariance takes place if there are integers r,l < t such that the distance between integer vectors (x + g / 2r + 1,y + g / 2l + 1)T and (x,y)T after applying transformation Mj is equal to (g / 2,0)T modulo g. This results in [formula]. For the matrix [formula] the condition is satisfied when r = j / 2, l = j / 2 - 1 for even j and r = (j - 1) / 2, l = (j + 1) / 2 for odd j. Thus [formula]. Similarly, for each of the matrices [formula] and [formula] the condition is satisfied for [formula]. Proposition 2 is proved.

Generally, the following statements are also valid. Consider a matrix M with integer elements and the following integer quantities: g = p  ·  2t, q =  det M = 2uw ( mod  g), [formula], u  ≥  1, t  ≥  v, m  ≥  0. Here w,r are odd integers and p is an odd prime. Then (i) all 2j sequences of length j in a stream of v-bit blocks generated with recurrent relation ([\ref=Recurrence]) are equiprobable for [formula]. Here [formula] for u  ≤  2m and [formula] for u > 2m; (ii) if k is even, then the image of the lattice g  ×  g with the transformation M2t is the lattice p  ×  p on the torus; (iii) if k is odd, then the image of the lattice g  ×  g with the transformation M⌈t / u⌉ is not invariant with respect to the shift S.

Although the exact equidistribution property does not hold when distance between some points of the sequence ≥  2t, numerical results show that the equidistribution holds approximately with high accuracy for the sequences of bits of length n, where n < 6.8 log p. Also, one can take n points with arbitrary distances (not exceeding p2 - 1) between them along the orbit (i.e. not necessarily successive points of the orbit), where n < 6.8 log p, and still the approximate equidistribution will hold with a high accuracy. The output value a(n) in ([\ref=OutputFunction]) consists of high-order bits of s = 32 successive points along the orbit of matrix MA, where A is the value of the order of (p2 - 1) / s. Therefore, according to the numerical results, the output value a(n) has a uniform distribution with a very high accuracy.

In most cases the image of the lattice g  ×  g on the torus with Mj where j  ≥  2t is the p  ×  p-lattice, therefore it is most interesting to study the deviations from the equidistribution for the p  ×  p-lattice. I have calculated the exact areas on the torus which correspond to each of the sequences for [formula]. The calculations were carried out on a PC using Class Library for Numbers [\cite=CLN] for exact rational arithmetics. For each of the 2n sequences of length [formula], the corresponding set of points on the unit two-dimensional torus consists of filled polygons. Exact rational coordinates of all the vertices of each filled polygon were found. Also, the exact number of points of the p  ×  p lattice inside each polygon was calculated. The total area of the polygons for each of the 2n sequences of length n was found to equal 1 / (2n). Such equality of the areas for different sequences of the same length was observed for matrices with even determinant and was not observed for matrices with odd determinant. Let [formula] be the numbers of points of the p  ×  p-lattice corresponding to the sequences of length n. Then [formula]. Therefore, if An is the set of numbers [formula], then 〈An〉 = 1, where 〈An〉 is the average value of An. The dependence of logarithm of variance of An on n is shown in Fig. [\ref=variance] for p = 229 - 3. The calculations for smaller values of p and larger values of n demonstrate that the dependence of log (σ2) on n is almost linear. Calculations show that the deviations from equidistribution are negligibly small in the sence that σ(An) is much smaller than 〈An〉 = 1, for n < 6.8 log p. In particular, for p = 229 - 3 the deviations are small for n < 130.

The variance for the several points of the orbit of matrix M on the p  ×  p-lattice on the torus, is found to substantially depend on the number of points and on the value of p, and only weakly depend (within several percent) on the distances between the points along the orbit.

Statistical testing

Table [\ref=RNG-Properties] shows the results of applying the SmallCrush, PseudoDiehard, Crush and BigCrush batteries of tests taken from [\cite=TestU01], to the generators introduced in Table [\ref=RNGParams]. Batteries SmallCrush, PseudoDiehard, Crush and BigCrush contain 15, 126, 144 and 160 statistical tests respectively. For each battery of tests, Table [\ref=RNG-Properties] displays three characteristics: the number of statistical tests with p-values outside the interval

[formula]

, and number of tests with p-values outside the interval

[formula]

Speed of the generator

I have tested the CPU times needed for generating 109 random numbers. The results are shown in Table [\ref=Tspeed1] for Intel Core i7-940 and AMD Turion X2 RM-70 processors respectively. The results are presented for different compilers and optimization options. The compilers in use are GNU C compiler gcc version 4.3.3 and Intel C compiler icc version 11.0. The CPU times for the realizations GM29.1-SSE, GM55.4-SSE, GQ58.1-SSE, GQ58.3-SSE and GQ58.4-SSE introduced in Table [\ref=RNGParams] are compared with those for Mersenne Twister generator of Matsumoto and Nishimira [\cite=MT], combined Tausworthe generator of L'Ecuyer [\cite=LFSR113] and combined multiple recursive generator proposed in [\cite=CombinedLCG].