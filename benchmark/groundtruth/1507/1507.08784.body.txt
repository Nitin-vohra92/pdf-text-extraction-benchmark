Proposition Lemma Corollary

Definition Example

Remark

Numerical simulation of parabolic moving and growing interface problems using small mesh deformation

Introduction

The conventional Arbitrary Lagrangian-Eulerian (ALE) method (see, e.g., [\cite=TH:81] [\cite=JD04:00]) works well for small deformation in many applications. For large deformation problem, the ALE method may fail due to the deteriorated mesh quality. Some improved ALE methods have been studied, e.g., a method based on the biharmonic extension in [\cite=Wick11:00]. More work based on the so called fixed-mesh ALE approach has been studied, e.g., in [\cite=NME:NME2740] [\cite=Codina20091591]. The parametric finite element method [\cite=SFTR14], the immersed-interface finite element method [\cite=YGBLZL08] and the immersed boundary method [\cite=BoffiD11] may also be applied in this context. An enhanced ALE method combined with the fixed-grid and extended finite element method (XFEM) was studied in [\cite=FLD:FLD1782]. Another promising approach is to use the space-time method, that is more flexible to handle moving interface problems; see, e.g., [\cite=MN11] [\cite=EKMN15].

In this work, we propose an interface capturing method by pre-computing the intersection of the moving object immersed in the underlying reference tetrahedral elements in three dimension (3D). Combined with the ALE method on such reference elements, we are able to deal with the moving or growing interface problems with large displacement or deformation. In a similar manner as already investigated in the earlier work [\cite=RBM11] [\cite=YW11:00] [\cite=YH11:00], the piece-wise linear finite element basis functions are constructed on each macro-element [\cite=RBM11], that is decomposed into four pure tetrahedral elements and one octahedral element. In addition, the method offers a nice opportunity to keep capturing the interface without introducing extra degrees of freedom. To test the robustness of the method, we consider a model heat-conduction-like problem with vector-valued functions. Such a model can be used to handle the mesh movement in the fluid-structure interaction simulation, see, e.g., [\cite=Razzaq20121156]. The construction of robust solution methods for solving the arising finite element equations requires additional effort. For this, we use both the all-at-once and the segregated methods, that employ an algebraic multigrid (AMG) method [\cite=FK98:00] [\cite=UH:02].

The remainder of the paper is organized as follows: In Section [\ref=sec:model], we set up the model parabolic interface problem. Section [\ref=sec:dis] deals with the temporal and spatial discretization of the model interface problem. In Section [\ref=sec:linsol], we discuss the all-at-once and the segregated methods for solving the linear system of equations arising from the temporal and spatial discretization. We present numerical results of two proposed interface moving problems in Section [\ref=sec:numa]. Finally, some conclusions are drawn in Section [\ref=sec:con].

A model interface problem

Geometrical configurations

We consider a simply connected, bounded, polyhedral Lipschitz domain [formula], which includes an immersed time-dependent, sufficiently smooth sub-domain Ωt1  =  Ω1(t)  ⊂  Ω, where t∈I denotes the time with I = (0,T] being the time interval. The remaining sub-domain is [formula]. By [formula], we denote the interface. The boundaries of Ω are denoted by ΓD and ΓN such that [formula] and [formula], where proper Dirichlet and Neumann boundary conditions are prescribed, respectively. We use n to denote the outward unit normal vector on the boundary ∂Ω, n1 and n2, the outward unit normal vectors on Γt with respect to Ω1 and Ω2, respectively. We refer to Fig. [\ref=fig:modeldomain] for an illustration of a sub-domain immersed in the big domain. We consider two interface problems in this work. In the first problem, the sub-domain Ω1 keeps the shape and moves with a constant velocity [formula], i.e., a rigid body motion; see the left plot in Fig. [\ref=fig:modeldomain]. In the second problem, the sub-domain grows with a constant velocity v along the line connecting the mass center pc of the sub-domain and any point pb on the boundary ∂Ω1; see the right plot in Fig. [\ref=fig:modeldomain].

The model problem with a fixed interface Γ

We start to formulate the problem in the fixed sub-domains Ω1 and Ω2 with proper interface conditions on the fixed interface [formula]. We aim to find the solution [formula], for all t∈I, such that

[formula]

with the initial condition u = 0 at t = 0, and the boundary conditions u2  =  gD on ΓD and [formula] on ΓN at t > 0. Here [formula] in Ω1, [formula] in Ω2, a1  ≠  a2, are two different material coefficients. The analysis of such an interface problem with the scalar-valued function has been studied, e.g., in [\cite=ZJ98] [\cite=LiZhiLin03] [\cite=JB96]. In this work, we consider the model problem with the vector-valued function, that can be used to model the mesh movement in the fluid-structure interaction simulation in our future work.

The model problem with a unfixed interface Γt

For the interface problem with unfixed interface Γt, the time derivative ∂tu in ([\ref=eq:heatfixedinterface]) is not well-defined since the computational domain is moving. One of the classical approaches is to use the ALE method [\cite=TH:81] [\cite=JD04:00], in which we introduce a displacement defined on the reference domain ΩR:

[formula]

for all x∈ΩR and t∈I, that tracks the monition of the computational domain Ω. The ALE mapping At:ΩR  ↦  Ωt for all t∈I, where [formula], is defined as

[formula]

for all x∈ΩR and t∈I. In our model problem, we shall interprete d as the finite element mesh movement, which defines the change of the computational sub-domains and is explicitly precomputed. The ALE time derivate of the function [formula] is defined as

[formula]

for all x∈ΩR and t∈I. By the chain rule, we obtain

[formula]

with [formula]. Then we have the following model problem under the ALE framework: Find the solution [formula], for all t∈I, such that

[formula]

with the initial conditions u(x,0) = 0, w(x,0) = 0 for all [formula], and the boundary conditions u  =  gD on ΓD and [formula] on ΓN at t > 0. Here [formula] in Ωt1, [formula] in Ωt2, a1  ≠  a2, are two different material coefficients in two moving domains, respectively.

A combination of the ALE and macro-element method

In the classical ALE method, we use the interface tracking method, where the mesh grids on the interface are following the object movement. The mesh movement inside the computational domains is computed by an arbitrary extension into the domain, e.g., a simple harmonic extension. The main drawback of this method is the restriction to small deformations. In case of large deformation or displacement, the mesh quality may deteriorate rapidly. To overcome this difficulty, we develop an interface capturing method, that is a combination of the ALE and macro-element method [\cite=RBM11] [\cite=YW11:00]. According to the cutting cases, the underlying reference domain is decomposed into macro-elements: four triangles in each macro-element in 2D and four tetrahedra plus one octahedron in 3D, see Fig. [\ref=fig:aleref] for an illustration of such decomposed reference domain into structured grids in 2D. The velocity [formula] of the mesh movement is constructed locally in each sub-element of the macro-element by an interpolation. The same applies to the displacement [formula] of the mesh movement, with respect to the reference configuration ΩR. The local velocity and displacement are related by w = ∂td. We comment that, for cells that are completely untouched with the moving interface (far away from the moving object), the velocity w = 0 and the ALE mapping is an identity. In this case, the equation ([\ref=eq:heatunfixedinterface]) is reduced to the one under the usual Eulerian framework.

Temporal and spatial discretization

Temporal discretization

Let the time interval I be divided into N equidistant small time intervals Δt, i.e., Δt  =  T / N. Let tn = nΔt be the time at level n. By the notation fn = f(x,tn), we denote the function defined at the time tn and in the corresponding domain. We employ first-order implicit Euler scheme to discretize the time derivative: For all n  ≥  1 and given u0 = u0, we have

[formula]

where [formula], [formula]. In our model problem, the displacement d is defined on the reference domain ΩR and is explicitly evaluated by the intersection of the moving object with the underlying tetrahedral mesh. In Fig. [\ref=fig:ale], the cyan and magenta arrows indicate the movement of the intersection points with respect to the underlying reference macro-element mesh. Assume the underlying mesh size consisting of the macro-element is h, then the mesh movement velocity is controlled by [formula]. When we choose sufficiently small mesh size, it will only introduce a very small convection term in the model problem, that is in general less problematic to perform standard finite element discretization and to solve the arising linear system of equations.

Spatial discretization

The weak formulation arises from ([\ref=eq:timedis]) by integration by parts and reads as follows: Find the solution un∈Vg  =  {gD  +  V0} with [formula] such that, for all v∈V0, we have

[formula]

where the continuity condition for the solution on Γt has been explicitly enforced by using one identical un in the domain Ωtn, and the surface traction balance condition is implicitly included in the week form by integration by parts.

We use a finite element method for the spatial discretization. This method relies on the piecewise linear basis functions constructed on the underlying hybrid mesh consisting of tetrahedral and octahedral elements. Such mixed elements are obtained by decomposing each macro-element (a big tetrahedra) into four tetrahedral elements and one octahedral element; see Fig. [\ref=fig:tetverts] for an illustration of such a typical macro-element. Each tetrahedral macro-element has four fixed nodes with local node numbering 0 - 3 (brown dots in Fig. [\ref=fig:tetverts]) and six nodes 4 - 9 on edges (cyan dots in Fig. [\ref=fig:tetverts]) that are given by the edge middle points or the intersection points between the edge and the moving object. Each macro-element is decomposed into five sub-elements: four tetrahedron with the local node numbering {0,4,6,7}, {4,1,5,6}, {6,5,2,9}, {7,8,9,3} and one octahedron with the local node numbering {6,4,5,9,7,8}. This gives a very limited intersection patterns. In addition every macro-element has very similar structure to each other, that is easy to templatize on the computer implementation. By this means, we are able to reconstruct the triangle surface mesh of the immersed object; see Fig. [\ref=fig:surfconstruct] for an illustration of a sequence of such surface meshes. The hybrid mesh, consisting of different element types, has also been used recently in the cardiac electrophysiology simulation [\cite=RBM11] and in the fluid-structure interaction simulation [\cite=YW11:00] [\cite=YH11:00].

To be more precise, the finite element basis functions on the four tetrahedra in each macro-element is constructed as the standard hat function in 3D. On the remaining octahedron, we first add an auxiliary point 6 near or at the mass center. The octahedron will be sub-divided into 8 tetrahedra; see Fig. [\ref=fig:octasplit] for an illustration. We then construct standard hat functions on each tetrahedron. The extra degree of freedom at the node 6 will be eliminated by the averaging of the values at nodes 0 - 5; see more details in [\cite=RBM11] [\cite=YW11:00]. By this means, we do not introduce new degrees of freedom. The number of total degrees of freedom is the number of nodes plus edges in the original mesh consisting of pure big tetrahedral macro-elements.

Solution methods for the linear system of equations

An all-at-once method

After using finite element discretization, at each time step, we obtain the following linear system of equations:

[formula]

We solve the linear system of equations by the AMG preconditioned conjugate gradient (PCG) method (see, e.g., [\cite=UH:02]) and the AMG preconditioned GMRES method (see [\cite=Saad86]). We mention here that, due to the small convection term, we found out that even the PCG method works well for solving such a non-symmetrically perturbed symmetric linear system of equations. For convenience of the solution procedure, the linear system has been ordered with firstly the degrees of freedom on the original tetrahedral nodes uV, and then of the edges uE, where the subscripts V and E are associated with the nodes and edges. Such reordering has been used in the AMG method for high-order finite element discretized equations [\cite=YH14] [\cite=ULHY15]. The stiffness matrices AVV and AEE arise from the finite element assembly of the basis functions associated with the original macro-element nodes and edges, respectively, AEV and AVE are coming from the coupling. To solve such a linear system of equations, we use a special AMG method [\cite=FK98:00], that is based on the matrix graph connectivity. Similar idea was also developed in [\cite=DB95]. In our numerical simulation, such solution methods give us quite satisfactory results. We observe a quite robust behavior of the AMG preconditioner with respect to moving interface in each time step.

A segregated method

By a close look at the matrix structure in ([\ref=eq:lineq]), we have observed that AVV is a block-diagonal matrix. This is due to the fact that the degrees of freedom associated with the original macro-element nodes are completely decoupled. In Fig. [\ref=fig:matrixpattern], we demonstrate a sparsity pattern of the system matrix K, where it is easy to see the block-diagonal structure of AVV.

We now perform a LU factorization of the system matrix K in ([\ref=eq:lineq]):

[formula]

where S denotes the Schur complement S = AEE - AEVA- 1VVAVE. Since A- 1VV can be constructed very easily, the Schur complement S can also be constructed exactly. A simple blockwise forward and backward substitution gives rise to the solution of the linear system. The main cost is to solve the Schur complement equation

[formula]

for bE: = fE - AEVA- 1VVfV. This is realized by applying the AMG preconditioned CG method [\cite=UH:02].

Numerical results

The numerical result for the model problem with an immersed moving sphere

In the first example, we consider a sphere with fixed radius 0.12 and the initial center at (0.125,0.125,0.125) immersed in a unit cube; see Fig. [\ref=fig:heatmovingobjcutting] for an illustration. The cube is decomposed into macro-elements with 35937 nodes and 196608 tetrahedra. The sub-divided hybrid mesh consists of 274625 nodes and 786432 tetrahedra and 196608 octahedra. The total number of degrees of freedom is 823875. See Fig. [\ref=fig:meshinfo] for an illustration.

The sphere is moving along the line with the starting point (0,0,0) and the ending point (1,1,1), and the moving speed is v = (1,1,1)T. The constructed sphere surface is shown in the middle and right plots of Fig. [\ref=fig:heatmovingobjcutting]. On the bottom of the cube, we set the Dirichlet boundary condition u = (0,0,0)T, on the top, u = (1,0,0)T. For the rest of the boundaries, we use the homogeneous Neumann boundary condition. The time stepsize is Δt = 0.0625 and the number of time steps is 9, i.e., the ending time is T = 0.5625. The material coefficient inside Ωt1 is a1 = 1.0e + 06 and inside Ωt2 is a1 = 1.0. The simulation results at different time on the cutting plane (see the left plot in Fig. [\ref=fig:heatmovingobjcutting]) are shown in Fig. [\ref=fig:heatmovingobj]. The relative residual error is set to 10e - 09 as stopping criteria. The iteration numbers and the computational CPU time (in second) of the AMG preconditioned CG and GMRES methods in the all-at-once method, and the iteration numbers of the AMG preconditioned CG for the Schur complement equation and the computational CPU time in the segregated method, are shown in Fig. [\ref=fig:heatamg]. We observe that, in terms of iteration numbers, the GMRES method shows the best performance, then the CG method, and last the segregated method. However, regarding CPU time, we see that, the CG method shows its best performance, then the segregated method, and last the GMRES.

The numerical result for the model problem with an immersed growing sphere

In the second example, we consider a sphere with an initial radius 0.08 and the initial center at (0.5,0.5,0.5) immersed in a unit cube; see Fig. [\ref=fig:heatgrowingobjcutting] for an illustration. We use the same finite element mesh as in the first example. The sphere is growing along the radius direction and the growing speed is v = n, where n denotes the outward unit normal vector in the radius direction. The surfaces of the growing sphere at time t = 0 and t = 0.45 are constructed as shown in the middle and right plots of Fig. [\ref=fig:heatgrowingobjcutting], respectively. On the bottom of the cube, we set the Dirichlet boundary conditions u = (0,0,0)T, on the top, u = (1,0,0)T. For the rest of the boundaries, we use the homogeneous Neumann boundary condition. The time stepsize is Δt = 0.05 and the number of time steps is 9, i.e., the ending time is T = 0.45. The material coefficient inside Ωt1 is a1 = 1.0e + 06 and inside Ωt2 is a1 = 1.0. The simulation results on the cutting plane (see the left plot in Fig. [\ref=fig:heatgrowingobjcutting]) is shown in Fig. [\ref=fig:heatgrowingobj]. The relative residual error is set to 10e - 09 as stopping criteria of the linear solvers. The iteration numbers and the computational CPU time (in second) of the AMG preconditioned CG and GMRES methods in the all-at-once method, and the iteration numbers of the AMG preconditioned CG for the Schur complement equation and the computational CPU time in the segregated method, are shown in Fig. [\ref=fig:heatgamg]. We observe that, in terms of iteration numbers, the GMRES method shows the best performance, then the CG method, and last the segregated method. However, regarding CPU time, we see that again, the CG method shows the best performance, then the segregated method, and last the GMRES method.

Conclusion

In this work, we develop an ALE method on the underlying reference domain decomposed macro-elements consisting of tetrahedral and octahedral elements. That is combined with the interface capturing method. The numerical results demonstrate the robustness of this method with respect to large displacement or deformation of the moving interface in the model parabolic problem. We have compared the algebraic multigrid based all-at-once and the segregated methods for solving the linear system of algebraic equations arising from the finite element discretization. We observed that the all-at-once AMG preconditioned CG method shows the best performance in terms of CPU time. The segregated method shows comparable performance. Regarding the iteration numbers, the AMG preconditioned GMRES method shows the best performance.