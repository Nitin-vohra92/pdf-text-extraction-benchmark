Not Every Domain of a Plain Decompressor Contains the Domain of a Prefix-Free One

Partially supported by RFBR 0901-00709-a and by NAFIT ANR-08-EMER-008-01 grants

Ilya Razenshteyn

Alexander Shen

Introduction

Let D:{0,1}*  →  {0,1}* be a computable partial function (used as a decompressor). Kolmogorov complexity of x∈{0,1}* with respect to D is defined as the length of its shortest D-description:

[formula]

There exists an optimal decompressor U such that CU is minimal up to O(1). CU(x) is called plain complexity of x and is usually denoted by C(x).

A decompressor is called prefix-free if its domain is prefix-free (if u is a prefix of v, the decompressor cannot be defined on both u and v). Again it can be proved that there exists an optimal (up to O(1)) prefix-free decompressor V. CV(x) is called prefix complexity of x and is usually denoted by K(x). (See, e.g., [\cite=uppsala-notes] for more details.)

In [\cite=cnss] Calude et al. characterized domains of optimal plain and prefix decompressors. They did not show any relation between domains of optimal plain decompressor and prefix one, but they posed the following question: is it true that the domain of every optimal plain decompressor contains the domain of some optimal prefix decompressor? We answer this question in the negative:

There exist an optimal plain decompressor D with domain S such that no set T  ⊂  S is the domain of an optimal prefix-free decompressor.

Note that for every decidable set A that contains a fixed fraction (say, at least one third) of n-bit strings for every n, there is an optimal plain decompressor whose domain is a subset of A. Indeed, in this case there exists an injective mapping p  ↦  a(p) such that for every string p the string a(p) belongs to A and is two bits longer than p. (Our assumption guarantees that there is enough strings of this length in A.) Then let us take any optimal decompressor U and replace k-bit descriptions by (k + 2)-bit descriptions inside A: let V(a(p)) be equal to U(p). Then V is an optimal decompressor whose domain is a subset of A. (A more general question: which sets are the domains of an optimal plain decompressor? -- is answered in [\cite=cnss].)

So it is enough to show that there exists a decidable set A with this property (containing at least 1 / 3 of n-bit strings for every n) such that there is no optimal prefix-free decompressor whose domain is a subset of A. From now on we forget about plain decompressors: we need only to construct such a set A. This construction is provided in the next section; in the rest of this section we discuss the intuition behind it and the result itself.

The useful tool in the prefix complexity theory is provided by an observation often called Kraft-Chaitin lemma. Consider the following "memory allocation" game: at each round Alice gives a natural number n and Bob replies with a string of length n. The restriction for Alice is that the sum of 2- n for all her numbers does not exceed 1; the restriction for Bob is that none of his strings is a prefix of another one. Kraft-Chaitin lemma says that Bob has a computable winning strategy in this game. (See, e.g., [\cite=uppsala-notes], p. 28.)

Informally, the question posed in [\cite=cnss] asks whether this remains true if some strings (a fixed fraction for every length) are forbidden for Bob (and the allowed sum for Alice is adjusted accordingly). The answer is no: one can choose the forbidden part of every {0,1}n in such a way that it cripples Bob's ability to win. Technically, we need to consider a more complicated game, since complexity is defined up to a constant. We do not explain this game in details (but note that the game approach that goes back to Andrej Muchnik [\cite=muchnik-game] was an important tool for us). Instead, we give a self-contained proof that combines game-theoretic and recursion-theoretic arguments.

Finally, one may say that the question itself is a bit artificial: one may ask instead whether for every optimal plain decompressor there is some restriction of it (on some smaller enumerable domain) that is an optimal prefix-free decompressor. In this form, however, the answer is negative for obvious reasons: consider an optimal plain decompressor U where two different strings s and t have unique descriptions (U-preimages) ps and pt, and, say, ps is a prefix of pt.

Construction

Statement of the Lemma

As explained in the previous section, it is enough to prove the following lemma:

There exists a decidable (synonyms: computable, recursive) set A of strings with the following properties:

(1) For every n the set A contains at least 1 / 3 of all strings of length n;

(2) There is no optimal prefix-free decompressor whose domain is a subset of A.

Constructing A

Describing the construction, we identify binary strings with vertices of the full binary tree: empty string is the root, string x has sons x0 and x1. The set Ω  =  {0,1}ω of infinite binary sequences is identified with

[formula]

; the intervals Ix0 and Ix1 are left and right halves of Ix. In Ω the interval Ix corresponds to the subtree that consists of binary sequences that have prefix x, and we use the notation Ix both for intervals in

[formula]

we consider intervals that share an endpoint as disjoint.) If a basic set V equals the union [formula] where X  ⊂  {0,1}n, we say that X represents V at level n. Each basic set can be represented at all sufficiently high levels.

We construct the set A layer by layer in such a way that every basic set of measure at least 1 / 3 is represented by some layer of A: for every basic set V of measure at least 1 / 3 there exists n such that [formula] represents V at level n. (In a sense, this makes A "universal": every possible restriction appears somewhere.) Moreover, every basic set V (of measure at least 1 / 3) should be represented by infinitely many layers that form large groups of subsequent layers: there are infinitely many n such that V is represented by A at levels [formula]). It is easy to find a decidable set A with this property (the family of all basic sets is countable and can be effectively enumerated, so we allocate infinitely many groups of layers for every basic set).

It remains to show (assuming that A has these properties) that no optimal prefix-free decompressor can have a domain that is a subset of A.

Density

Assume that D is an optimal prefix-free decompressor whose domain is a subset of A. The strings x where D is defined form a prefix-free set. The corresponding intervals Ix are disjoint; let [formula] be the union of these intervals.

[formula] intersects any basic set of measure at least 1 / 3.

Let V be a basic set of measure at least 1 / 3. According to the assumption, there are infinitely many n such that V is represented by A at all levels [formula]. If [formula] does not intersect V, this implies that D is undefined on strings of lengths [formula], which is impossible for an optimal D (most of the strings of length 1.5n have complexity between n and 2n for large values of n, so description of those lengths should exist).

Splitting the task

Prefix complexity can be equivalently defined as the logarithm of maximal lower semicomputable semimeasure. We use this fact in one direction: if x  ↦  q(x) is a lower semicomputable non-negative function and [formula], then K(x)  ≤    -   log 2q(x) + O(1). We need to get a contradiction and show that every prefix-free function D defined on the subset of A is not an optimal prefix-free decompressor. For this purpose we construct a lower semicomputable non-negative function x  ↦  q(x) and show that CD(x)  ≤    -   log 2q(x) + O(1) is false.

Replacing O(1)-notation by an explicit statement, we obtain the following claim:

for every [formula] there exists x such that CD(x)  ≥    -   log 2q(x) + c.

We achieve this by constructing for each c a (uniformly) lower semicomputable function x  ↦  qc(x) such that [formula] and CD(x)  ≥    -   log 2qc(x) + c for some x. Then we let [formula]; the sum [formula] does not exceed 1 since the corresponding sum for qc is bounded by 2- c and [formula]. (We can use other converging series instead of [formula].)

Constructing qc

It remains to show how one can "lower semicompute" (=enumerate from below) some function qc with the required property while watching the enumeration of the graph of D. Imagine that Alice is given some "capital" 2- c and is allowed to distribute this amount between different strings x (note that we distribute capital between strings that form the image of D); her goal is to allocate at least 2c  ·  2- CD(x) to some x. Of course, Alice does not know the final value of CD(x); it can decrease later (after the allocation is made). So Alice needs to guarantee that her allocation still prevails for some x independently of what happens after the allocation is done.

How can Alice achieve this goal? To explain her strategy, let us introduce some terminology. The vertices (strings) in A are allowed, and the strings outside A are prohibited. (For each level at least 1 / 3 of all strings of this length are allowed.)

These notions do not depend on time (i.e., on the number of steps in the enumeration of the domain of D). The other notion is dynamic. Let [formula] be the part of the domain of D that already appeared in the enumeration process. A string u is free at that step if [formula] is prefix-free. (A string that is not free cannot appear later in the domain of D since this domain should remain prefix-free.) In terms of Ω this definition can be reformulated as follows: u is free if Iu and the set [formula] of all sequences that have prefix in [formula] are disjoint.

If at some level there are no free allowed strings, this guarantees that no new strings of this length will appear in the domain of D.

A free string can later become non-free but not vice versa. Note also that an extension of a free string is free, so the fraction of free strings at level n is a non-decreasing function of n (at any moment).

Only allowed free strings can be later used as descriptions, so if at some level and at nearby levels they form a very small minority, Alice can use this fact to achieve her goal. Let us make this statement more precise.

Winning case

Assume that at all levels in some interval (say, between l and L) the allowed strings represent the same basic set. Then the fraction of free allowed strings of length n increases as n increases (from l to L). Assume that at level L this fraction is still less than some small ε > 0.

What can Alice do in this case? She can allocate 2c  ·  2- L to many (say, N; the value of N will be chosen later) different strings that have no description yet (do not belong to the image of the current part of D). If this turns out to be insufficient for her to win, each of these N strings gets later a description of length at most L (otherwise Alice still prevails on this string). These descriptions are different (moreover, none of them is a prefix of another one). Only 2l descriptions may have length less than l, so at least N - 2l of them are in our interval (have lengths between l and L). All these descriptions were free when Alice made her move, so at that moment the fraction of free allowed strings of length L is at least

[formula]

(If a free allowed string appears at an intermediate level between l and L, this can only increase the fraction, since it can be replaced by several free allowed strings at level L.)

We come to a contradiction if

[formula]

i.e.,

[formula]

Recall that the total capital of Alice is bounded by 2- c, so the allocated amount needed to win is

[formula]

Therefore, Alice wins if both ε  ·  2c and 2c / 2L - l are bounded by 2- c / 2. Both conditions are satisfied, for example, if

[formula]

Strategy for Alice

We arrive to the following strategy for Alice.

For a given c, Alice waits until an interval

[formula]

Why it helps

It remains to show that the event that Alice is waiting for will indeed happen. Assume that it is not the case. Recall that (by our construction) every basic set is represented infinitely many times by blocks of levels, and all these blocks (except for finitely many of them) are thick enough (have L - l  ≥  3c). Therefore, the fraction of free allowed vertices at the bottom line of each block never drops below ε  =  2- 3c.

This leads to a contradiction in the following way. Fix some block ("the first block") that is thick enough and wait until the fraction of free allowed vertices at its bottom level stabilizes. Let B0 be the basic set that is represented by the set of free allowed vertices at this level; by assumption, its measure is at least ε.

If the measure of B0 is at least 1 / 3, we get a contradiction with density lemma. So it is less than 1 / 3 (and therefore 2 / 3), so there exists second block below the first one where prohibited (=not allowed) elements represent B0. At the bottom line of this block the fraction of free allowed strings also never drops below ε. Wait until it stabilizes and let B1 be the basic set that corresponds to the free allowed strings at this level. By construction B0 and B1 are disjoint (we considered only allowed strings while constructing B1, and B0 corresponds to prohibited strings).

If the measure of [formula] is at least 1 / 3, we again get a contradiction with density lemma (since [formula] and [formula] are disjoint; recall that we wait for the stabilization). So we can find a third block where [formula] is prohibited, wait for the stabilization at its bottom line, construct B3 etc.

Finally we get a contradiction since each block contributes at least ε to the measure and at some point we exceed the threshold 1 / 3.

Technical remarks: (1) The threshold 1 / 3 can be replaced by any other value not exceeding 1 / 2: we need to get a contradiction before the size of the prohibited part becomes too large. In our argument we may prohibit up to 2 / 3 of all strings and 1 / 3 is enough for a contradiction.

(2) The construction of [formula] is not effective but this is not necessary since we only prove the existence of a moment when the fraction of free allowed strings drops below ε.

Acknowledgments

We thank all the participants of Kolmogorov seminar and Undergraduate Seminar at the Logic and Theory of Algorithms division of Mathematics Department, Moscow Lomonosov State University.