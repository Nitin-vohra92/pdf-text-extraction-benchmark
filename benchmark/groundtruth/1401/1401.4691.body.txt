An algorithm for calculating steady state probabilities of M|Er|c|K queueing systems

Introduction

Multi-server queueing systems with Poisson input and phase-type distributed service times (M|PH|c queueing systems) are an important extension of simple M / M / c queueing systems. Different phase-type distributions are used for different fields of application.

The class of Erlang(r) distributed service times (M|Er|c) are important, because for constant mean service time the family of Erlangian distributions interpolates infinitely many distributions between the negative exponential (r  =  1) and constant service time (r  =    ∞  ). Many solution approaches for different types of Erlangian distributed queueing systems have been proposed in the literature. Shapiro [\cite=Shapiro1] studied the M / E2 / c system and proved that the probability of n jobs in the system can be expressed as a linear combination of powers. Poyntz and Jackson [\cite=Poyntz1] analyzed the Ek / Er / 2 and the Ek / Er / 3 system by applying generating functions. Tables of such results have been published by Sakasegawa [\cite=Sakasegawa1]. The M / Er / c system was analyzed by Mayhugh and McCormick [\cite=MayMc1] and Heffer [\cite=Heffer1]. They determined the generating function of the stationary state probabilities. However, their results are from a computational point of view only useful for small values of r and c only. Yu [\cite=Yu1] solved the Ek / Er / c queueing system with heterogeneous servers by generalizing the approach of Mayhugh and McCormick [\cite=MayMc1]. Hillier and Lo [\cite=Hillier1] presented some numerical results based on the above procedure for the special case of homogeneous servers. Approximation formulas for the average waiting time and average system size in equilibrium were given by Page [\cite=Page1] and Smith [\cite=Smith1]. Hillier and Lo also presented tables and graphs of performance measures for different queueing systems. However, steady state probabilities for these queueing systems with limited waiting room are not given yet.

This paper presents an easy to implement algorithm to calculate the steady state probabilities of M / Er / c / K queueing systems. For this, we use a similar approach like Mayhugh and McCormick [\cite=MayMc1]. Firstly, all possible states in the queueing system are determined and a generator matrix is built up. This generator matrix determines - via a well known theorem - the transition matrix. This transition matrix is used to find the steady state probabilities for being in a particular stage in the queueing system. These can be summed up to get the steady state probabilities for a specific number of customers in the queueing system. These probabilities can then be used to calculate different performance measures like the average queueing length and, with the help of Little's theorem [\cite=Kleinrock1], the average waiting time in the queue. In contrast to many other queueing systems with phase-type distributed service times, where the generator matrix can be written down immediately, the calculation of the matrix for M / Er / c / K systems needs a more detailed description, and is the main topic of this paper.

This paper is organized as follows. Section [\ref=general] provides an overview of M / Er / c / K queueing systems and summarizes the algorithms used to calculate the generator matrix and derive steady state probabilities. Section [\ref=example] gives an example how this method can be used in telecommunication call-centers to calculate performance measures and discusses computational issues of the algorithm presented above. Additionally, Appendix [\ref=AppendixA] contains tables for the average queueing length with different traffic densities for the M / Er / c / K system.

The M|Er|c|K queueing system

Assumptions

The M / Er / c / K queueing system is defined by the following assumptions:

The arrival process of customers follows a Poisson distribution with intensity rate λ.

The population of customers is infinite.

The service system consists of c service channels.

Only one customer can be served in one service channel.

The maximum queue size is K.

If an arriving customer finds all service channels busy and the maximum queue size is not reached, she joins the single waiting line which is served in the order of arrival.

An arriving customer is forced to balk if she arrives at a time when the queue size is at its limit K.

If an arriving customer finds more than one service channel vacant, she randomly selects a free service channel.

The customer at the head of the waiting line is forwarded to the first vacant channel without delay, i.e. the queue discipline is FCFS.

The service process of customers follows an Erlang probability distribution of degree r. The distribution of service time is equal in every channel.

Building the generator matrix

The probability density of an Erlang(r) distributed service time θ(t) is

[formula]

Each service channel may be regarded as consisting of r ordered stages such that the conditional probability of transition of a customer from any stage to the succeeding stage in the time interval (t,t + Δt) is μΔt  +  o(Δt). Equivalently, the distribution ([\ref=densservtime]) can be seen as the distribution of the sum of r independent negative exponentially distributed random variables each with the same parameter μ. The reason for using Erlang distributed random variables in Queuing theory lies in the fact, that the phase method can be used to describe the process as a function of a Markov process. The cost is an enlarged state space for the model, and consequently an increased complexity of the numerical solution. The benefit, of course, is in enlarging the class of service time distributions for which the model is solvable.

If the service time is Erlang(r) distributed ([\ref=densservtime]), the mean service time is [formula] and the mean traffic density per service channel in an M / Er / c system is thus

[formula]

[formula] can be regarded as the mean traffic density per stage. It is well known in queueing theory [\cite=Asmussen1] that a steady state solution exists if and only if ρ  <  1. This means e.g. for queueing systems with limited waiting room and ρ  ≥  1 that the average queueing length is near or at its maximum.

The transition matrix of a continuous-time Markov chain can be expressed [\cite=Pflug1] as

[formula]

where Q is the intensity matrix [formula].

For an ergodic process, the limit of the transition matrix

[formula]

exists, is of rank 1 and its identical rows π coincide with the stationary distribution of the Markov process. Instead of solving the linear equations πQ  =  0, [formula], numerical solutions also can be obtained by using the generator matrix, formula [\ref=transitionmatrix] and taking the power of P until no changes in the rows occur anymore.

We use this method to calculate the stationary probability distributions of the M / Er / c / K queueing system with the assumptions made above. First, we define the different states with the vector s = (s0,s1,...,sr) where s0 is the queueing length and si (i = 1,..,r) is the total number of customers being in phase i, this is a similar approach as in Mayhugh and McCormick [\cite=MayMc1].

The total number of possible states can be calculated through the equation:

[formula]

or in closed form, calculated with the Zeilberger algorithm

[formula]

where the first part in ([\ref=nopossiblestates]) is the number of states where no customers are waiting (s0 = 0) and the second part is the number of states where customers are waiting to get served (s0 > 0). The third part refers to the empty state si = 0 for i = 0,...,r. A possible algorithm to calculate these states as matrix Ms is given in Algorithm 1.

It should be clear that other algorithms, like the lexicographically ordering in Mayhugh and McCormick [\cite=MayMc1], could also be used. However, the states created here are the same, but in different orders. We note, that we only have to find all possible states for a specific queuing system and it is not necessary to order the states in a specific way to build up our generating matrix.

After that, we have to create all possible states where customers are waiting. The number of states in which j,(j = 1,...,K) customers are waiting is independent from j and therefore a constant equal to [formula]. Furthermore, the set of possible states for different numbers of waiting customers are equal except in s0. E.g. the set of states with s0 = 1 are identical to the set of states with s0 = j,(j = 2,...,K) except for the number of customers in the queue. We can use the created states from the algorithm above, to find all possible states for the queuing system with waiting customers. Therefore, we are looking only at the created states where the [formula], because in this situation arriving customers could not be served and have to wait in the queue. To create all possible states with s0 = 1 we only have to take the states created by the above algorithm with s0 = 0 and [formula] and set s0 = 1 instead of s0 = 0, the same procedure can be used for s0 = 2 until s0 = K.

Because of ([\ref=nopossiblestates]) the generator matrix must have size N  ×  N. Below the possible transitions from one state to another are summarized:

If the queue is empty (s0 = 0) and at least one service channel is free ([formula]) an arriving customer starts phase 1 (from (s0,s1,...,sr) to (s0,s1 + 1,...,sr) with intensity λ).

If the queue is not at its maximum (0  ≤  s0 < K) and all service channels are busy ([formula]) the arriving customer joins the queue (from (s0,s1,...,sr) to (s0 + 1,s1,...,sr) with intensity λ)..

A customer being in phase si i = 1,...,r - 1 transits to phase si + 1 i = 2,...,r with intensity siμ.

If a customer is in phase sr she leaves the system with intensity μ. If there is a customer waiting in the queue she starts in phase s1, otherwise the server is idle until the next customer arrives.

The rows of the matrix Q can be seen as the starting point of each state and the columns are filled in the way described above. After that, the qii (i = 1,...,N) can be calculated by the formula:

[formula]

Matrix Setup Example

As an example we consider the M / E2 / 2 / 1 queue. First we give a table of all possible states for this system, it was generated with the algorithm given above:

The generator matrix build with the algorithm above is

The first row represents the state (0,0,0), as we can see the only transition to another state is given by (0,1,0) with intensity λ. The sixth row represents the state (0,0,2), this state can go to (0,0,1) with intensity 2μ and to (1,0,2) with intensity λ.

Calculating steady state probabilities

The algorithm for calculating steady state probabilities of the M / Er / c / K queueing system needs five steps and an optional sixth step:

Calculate all possible states

Generate the Q-matrix with the steps explained above

Use formula (5) to get the transition matrix

Take the power of the transition matrix iteratively until the columns don't change anymore (see Algorithm 2)

Take the sum of the different steady state probabilities for the stages to get the steady state probabilities for n customers in the system

(Optional) Calculate performance measures

Step 4 is needed to calculate the steady state probabilities for the different stages. Let P be the transition matrix, a possible algorithm could be a simple iteration like shown in algorithm 2 where δ is some critical level defined by the user. Step 5 in the algorithm above can be calculated in various ways. The chosen method depends on the algorithm which is used to create the possible states. If an algorithm is used which creates states like in Mayhugh and McCormick [\cite=MayMc1] formulas to calculate the probability of n customers in the system Pn can be devised easily. However, to calculate the possible states with the algorithm presented here, a different formula has to be used. Denote the state probabilities with pj. We first notice that P0  =  p0, and if n  >  c then Pn can be calculated with the formula given in Mayhugh and McCormick [\cite=MayMc1], pp. 710. For Pn with 0  <  n  ≤  r we have to sum up the states pj for which [formula].

Step 6 is optional, if some performance measures are requested, they can be easily calculated with the steady state probabilities Pn, see for example Gross and Harris [\cite=Gross1]. E.g. the average system size can be calculated, using the well known formula:

Empirical computational issues

The current algorithm is easy to implement, but a large waiting queue K with more than 4 phases leads to high computational times. The following run-time experiments have been conducted on a Pentium IV computer with 2.6 Ghz and 1 GB RAM using Microsoft Windows XP Professional and MatLab 6.5. Figure [\ref=fig:queuecalc1] shows the calculation time in seconds for average queueing length of a M / Er / c / K system with ρ  =  0.9, c  =  6 for [formula] and K∈{1,3,6,8,10}.

Telecommunication Call-Centers

A call center is a service network in which agents provide telephone-based services. The typical call center setup is shown in figure [\ref=figccqueue1]. When all agents are busy customers seeking these services are delayed in queues, hence it is convenient to model call centers as a queueing system. Process-wise these queues can be compared to inventories in manufacturing (just-in-time, time-based-competition, ). But human queues include personal preferences, complaints, abandonments and the like. Thus, customers are likely to base judgments about the service-providing company on their queueing-experience. Therefore the goal of a company providing such a service is to minimize the average waiting time of their costumers. This can always be accomplished by extending the number of agents, which in turn raises the cost of the call center significantly. The decision problem is schematically shown in figure [\ref=fig:cccost1]. To take a good decision c* it is important to calculate the average queue length as correct as possible.

A survey of queueing system theory for call centers was published by Koole and Mandelbaum [\cite=Koole02] and more detailed by Koole et al. [\cite=Koole03]. Recently Ishay [\cite=Ishay03] applied phase type distributions to fit call center data and found out that phase type distributions of order k  =  2,3,4,5,6 can be used to fit the service durations of call-center data for different priorities and service-types. The general structure of order k  =  3 already provides a reasonable fit to the overall service time. She used the program EMpht (see S. Asmussen et al. [\cite=Asmussen96]) to fit phase-type distributions to available data from a call center of a large Israelian bank.

Conclusion

In this paper we presented an easy-to-implement algorithm for calculating steady state probabilities of M / Er / c / K queueing systems. In contrast to other types of queueing systems with phase-type distributed service times, the main problem with the type of queueing system considered throughout this paper is how to generate the generator matrix. Hence, an algorithm to generate this matrix was presented. The resulting methodology can be used for several practical applications, including telecommunication call-centers. Phase-type distributions and associated average system size calculations are well suited to re-design and re-dimension existing call centers.

Future research includes an extension of this methodology to PH|PH|c (especially Es|Er|c|K) queueing systems.

Tables