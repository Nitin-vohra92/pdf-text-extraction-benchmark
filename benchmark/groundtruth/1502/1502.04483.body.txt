=1

A stable finite-difference scheme for growth and diffusion on a map

Keywords: reaction-diffusion equations , finite-difference solvers, population dynamics

Introduction

There is an increasing interest in modeling population dynamics at large spatial and temporal scales, for example the modern human out-of-Africa dispersal [\citep=eriksson2012] [\citep=henn2012] [\citep=nikitas2005] [\citep=young1995] or Neanderthal dispersal and extinction [\citep=callegari2013]. These models are required to interpret local and global patterns of genetic, phenetic and cultural variation [\citep=bouckaert2012] [\citep=eriksson2012] [\citep=manica2007] [\citep=pinhasi2005] [\citep=relethford2004].

Fisher [\citep=fisher1937] studied the description - via a reaction-diffusion equation - of an analogous but one-dimensional problem: the propagation of an advantageous genetic mutation within an already-present population, situated along a coast line. Kolmogorov, Petrovskii and Piskunov [\citep=kolmogorov1937] were more general; in particular, their analysis treated the two-dimensional case. Such a model (called Fisher/KPP in the following) was first applied to the dispersal and growth of a population by Skellam [\citep=skellam1951], and serves as an important control for designing and validating other more complex spatiotemporal population models [\citep=callegari2013]. Coupling population dynamics with models of large-scale changes in continental topography, climate, and ecosystem productivity is essential to understand the role of environmental constraints on patterns of genetic, phenetic, and cultural variation among human populations [\citep=callegari2013].

Here we present a stable and efficient finite-difference solver for the Fisher/ KPP equation on 2-D domains of arbitrary shape (e.g. geographical maps), and show how it can be extended to include environmental fluctuations. In a brief outline of our paper, we will: review the derivation of the Fisher/KPP equation (Section [\ref=sec:fisherkppeq]); develop finite-difference schemes in 1 and 2 dimensions for constant environmental carrying capacity, K (Section [\ref=sec:methodsandsplittings]); extend the scheme to allow for space- and time-dependent [formula] (Section [\ref=sec:fisherkpp]) and irregular domains such as geographical maps; show an application of this technique to the out-of-Africa dispersal of Homo sapiens by using net primal productivity (NPP) as a proxy for [formula] (Section [\ref=sec:dispersal]).

The Fisher/KPP equation

An intuitive way to get the Fisher/KPP equation [\citep=fisher1937] [\citep=kolmogorov1937] [\citep=skellam1951] is as follows. A current [formula] of particles (e.g., individuals) moving across an interface located at [formula] is proportional to the gradient of the population density p ("Fickian diffusion")

[formula]

The rate of change of p is then given by the mass balance equation [\citep=reichl2004], which for Fickian diffusion reads

[formula]

If ρ = 0, this is the heat equation when c  =  D / 2 and D is the diffusion coefficient. For lack of a better model, we assume c is a constant (Young & Bettinger [\citep=young1995]). The source term ρ is usually modeled by a logistic growth function, ρ  =  λp(1 - p / K), yielding the Fisher/KPP equation

[formula]

where K is called carrying capacity and λ is the growth rate. In ([\ref=eq:fisherKPP0]) we assumed K is constant, but it suffices that there is an upper limit [formula], in which case 0  ≤  p  /    ≤  1. This scaled version will be used in ([\ref=eq:fisherKPP]) below. Fisher and KPP were particularly interested in the traveling wave case, [formula]. Notice what happens here if f exists:

[formula]

which in 1-D becomes a second order ordinary differential equation

[formula]

If v were known, this ODE could be solved using pvp4c from MatLab, for example. By the rescalings show in Table [\ref=tab:scalings], for constant K the Fisher/KPP equation ([\ref=eq:fisherKPP0]) will be used in the form

[formula]

where the only sensible solutions have 0  ≤  u  ≤  1. The initial distribution [formula] must be defined for all [formula].

In Murray ([\citep=murray2002], eq. (11.17)) our growth coefficient λ is called r and c is denoted by D, whereas in Young and Bettinger [\citep=young1995] the growth coefficient is R and the diffusion coefficient is K. These inputs to our code are given in units of yr- 1 and km2/yr respectively.

Numerical methods and splitting

In one dimension, ([\ref=eq:fisherKPP]) can be solved using the MatLab function pdepe. In fact, if the system is two-dimensional but rotationally symmetric, pdepe can again be used with the radial part of the Laplace operator in cylindrical coordinates,

[formula]

requiring only that one sets a pdepe parameter m=1. Although the MatLab function pdepe is robust, it cannot be generalized to arbitrary 2-D domains. However, it is a valuable control for testing more general solvers, and a more general solver is what we wish to explore here.

The finite-difference scheme

Since the map on which we will be working is a pixelized plane, an obvious method uses finite differences. First, however, let us examine the 1-D case for ([\ref=eq:fisherKPP]). In this situation, the second order derivative becomes a differencing operator in matrix form acting on the vector {uj,j = 1,n}, where uj  =  u(x0 + (j - 1)Δx),

[formula]

where the matrix A is

[formula]

If h is the time step, the Courant–-Friedrichs–-Lewy (CFL) parameter [\citep=strang1986] is

[formula]

An explicit integrator for ([\ref=eq:fisherKPP]) would require k  <  1 / 4 [\citep=leveque2007] [\citep=strang1986]. In our case, because the boundary conditions are so irregular on a map, we are less interested in a method of higher order than 2nd because stability is more important [\citep=godunov1987].

Using this notation, the lowest order approximation is Euler's method which estimates the next step u(t + h) by

[formula]

which should be considered a vector equation in u(t)  =  {uj(t),j = 1,n}. The logistic terms, which are diagonal, should be taken to mean ((1 - u)u)j  =  (1 - uj)uj for [formula]. Euler's method is both low-accuracy and usually unstable if it is used alone over many steps. But, it is O(h) accurate and thus useful as an explicit estimate in O(h) terms. An application of the trapezoidal rule yields

[formula]

and is an O(h2)  +  O((Δx)2) accurate procedure but solving the quadratic vector equation ([\ref=eq:trapezoidalrule]) for u(t + h) is awkward. To the same O(h2), we propose a semi-implicit procedure which uses the Euler estimate ([\ref=eq:Eulerestimate]) to replace one of the terms in ([\ref=eq:trapezoidalrule]):

[formula]

Equation ([\ref=eq:semiimplicit]) can now be solved as a linear system,

[formula]

because the matrix, [formula], on the left hand side is explicit, as is the right hand side. That is, this matrix and the right hand side contain only old data, namely only information from the previous step, u(t). Euler estimate uE is an explicit one step computation using u(t). Significant advantages are: the matrix on the left hand side is tridiagonal with constants on the sub/super-diagonals, and the diagonal terms are O(1) strong. The procedure ([\ref=eq:semidifference]) is only linearly stable but we will show empirically that it gives good results when compared to pdepe when this MatLab function is appropriate, that is, in both the one-dimensional and rotationally symmetric 2-D case. Not only is the method ([\ref=eq:semidifference]) step-wise stable but also stable for initial data which may not be smooth.

Figure [\ref=fig:1dplots] shows the results for h = 1 / 5, k = 2.5 compared to pdepe. Notice that at t = 20 the agreement is remarkable; and that at t = h, where the wave front profile is very steep, our Godunov splitting described in Section [\ref=sec:Godunov2Dsplitting], specifically eq.([\ref=eq:yoshida]), is very stable. The CFL number, k = 2.5, used to get Figure [\ref=fig:1dplots] is much larger than would be possible with an explicit method [\citep=leveque2007].

2-D case: Godunov-Strang-Yoshida splittings

It turns out that a generalization to the 2-D problem is a straightforward variant of Strang-Yoshida splittings [\citep=strang1968] [\citep=yoshida1990], which are themselves variants of Godunov's method [\citep=godunov1987]. The following is a fully implicit variant of our two-dimensional scheme, with two intermediate arrays, [formula] and [formula],

In ([\ref=eq:yoshida]), the operators Ax and Ay are the same as ([\ref=eq:Amatrix]) for directions x and y, respectively. For simulations on a lattice, uij(t)  =  u(t,x0 + (i - 1)Δx,y0 + (j - 1)Δy), where 1  ≤  i  ≤  Nx,  1  ≤  j  ≤  Ny and Δx  =  Δy, the following gives the action of the Ax,Ay operators:

[formula]

The compression scheme and code outline given in Appendix [\ref=sec:code] show that only a maximum of one row or column (i.e., max(Nx,Ny)) of storage is needed for [formula] and [formula].

Again because the fully implicit quadratic vector equation in ([\ref=eq:yoshidaB]) is awkward to solve, we use an Euler estimate in one of the terms. Here is one integration time step of ([\ref=eq:yoshida]) in discrete semi-implicit form: Equations ([\ref=eq:discreteyoshidaA]), ([\ref=eq:discreteyoshidaC]), and ([\ref=eq:discreteyoshidaD]) are solved in sequence as multiple independent tridiagonal systems for [formula] and the final step u(t + h).

Symmetries in 2-D case

Our Godunov scheme ([\ref=eq:discreteyoshida]) is not rotationally symmetric, and thus one way to estimate the error is to assess a solution using ([\ref=eq:discreteyoshida]) for a symmetric problem. Again, we can use pdepe but now with the cylindrically symmetric parameter choice m=1 (see Section 12.5 in [\citep=higham2005]). Figure [\ref=fig:2dpcolorplots] shows that any asymmetries are not apparent without more careful examination. Even the wave front portrait of the 2-D case in the left-hand panel of Figure [\ref=fig:2Dwavefrontanderrors] and the error estimate in the right-hand panel of the same Figure are not sufficiently quantitative. In particular, there should be no distinction between x and y directions in ([\ref=eq:yoshida]), while a 2-D plot of the error distribution shows a small asymmetry (compare the right-hand plot in Figure [\ref=fig:symmetryornot] to the left).

For this reason, we implemented an alternating direction method, à la Crank-Nicholson [\citep=leveque2007] [\citep=ritchmyer1967], which makes the error distribution more symmetric. The left panel of Figure [\ref=fig:symmetryornot] shows that, while symmetrization only slightly improves the r.m.s. and maximum errors, they have now the desirable property of being more rotationally equi-distributed: respectively, cyclic groups C4 vs. C2. Relatively larger deviations from the pdepe solution now correspond to directions diagonal to the spatial lattice, as expected, and do not reflect the arbitrary choice of x and y in the integration.

Fisher/KPP on maps

The next natural step when applying a reaction-diffusion equation to the modeling of population dispersal is to include geographical and environmental effects. In this Section, we discuss how to implement our solver on domains with space- and time-dependent K, and then how to treat irregular boundaries that arise when solving Fisher/KPP on geographical maps. Using the same Godunov-type splitting described above, it is more straightforward to do the simulations on a map than might be expected.

Maps with space-dependent capacity

In our scaling of ([\ref=eq:fisherKPP]), the maximum population density at [formula] is unity. Thus, in the following we will use a scaled carrying capacity [formula]. Our algorithm ([\ref=eq:yoshida]) can be modified in a straightforward way for the case that [formula] also depends explicitly on time: see Section [\ref=sec:fisherkppvarKxt]. First, however, let us deal with the time independent [formula] case,

[formula]

(we dropped the [formula] dependence of K for convenience of notation), for which the Godunov splitting ([\ref=eq:yoshida]) now becomes Again, as in ([\ref=eq:yoshida]), multiple tridiagonal system solves must be carried out: Ny x-direction solutions ([\ref=eq:godunovwithKA]), Nx y-direction solutions ([\ref=eq:godunovwithKC]), and finally, another Ny x-direction solutions ([\ref=eq:godunovwithKD]). Hopefully no confusion will result from the notation: k is the CFL parameter, while K is the (space-dependent) carrying capacity.

A desert test of space-dependent capacity

Now we are in uncharted territory. To assess if the solver ([\ref=eq:godunovwithK]) works, let us examine a problem where we can compute a solution by independent means. The test setup follows below. Its motivations will be explained further in Section [\ref=sec:noisyNPPmaps].

The desert test:

for - y0  ≤  y  ≤  y0, K  =  K(x) is independent of y;

for x0  ≤  x  ≤  xL, let K = 1, while for xL  <  x  <  xH, let K = fr, where the fraction 0  <  fr  ≤  1 defines a desert (inhospitable region) in the domain. Finally, for xH  ≤  x  ≤  x1, again set K = 1;

initialize u(x,y,t = 0) to a strip midway between x0 and xL, then run the simulation to study the traveling wave behavior across the

[formula]

In other words, the variable carrying capacity domain has K = 1 for x  ≤  xL and x  ≥  xH, but K = fr in an x-direction desert. If the initial data [formula] are widely distributed enough (nearly full y-width), near the middle of the domain, i.e. y  =  0, the problem looks basically one-dimensional. Thus we can again use pdepe from MatLab to compute the behavior of the one-directional wave as it passes through the desert, and compare this solution to the behavior of our Godunov method near this same center line. According to KPP [\citep=kolmogorov1937], the velocity in the desert is the same as in the K = 1 region, and far enough from transients it should be approximately

[formula]

where parameter [formula]. In our case ρ(u)  =  u(1  -  u / K), so [formula]. Thus, when not entering or leaving the desert, the velocity should be [formula] [\citep=kolmogorov1937]. Figure [\ref=fig:gaptestresults] shows that the velocity agrees with the KPP prediction, and is nearly constant except for short transients entering and exiting the desert, as expected. Our metric for measuring this velocity is to find, on the leading edge of the wave front, the position x1 / 2 where u(x1 / 2) = K / 2.

If the jump in K is deep enough ([formula]), however, the integrator will fail without some regularization. The parameters for the results shown in Figure [\ref=fig:gaptestresults] are K = 1 above and below the desert, but K = 0.01 in the desert. For this case, [formula] gives an instability with unpleasant sign changes, and a regularization scheme has to be used. We show this in the next subsection.

Regularization against holes and noise

An obvious problem with deep holes, jumps or ragged noise in the carrying capacity K is this: the right hand side of equation ([\ref=eq:godunovwithKC]) (as well as ([\ref=eq:godunovwithKTC]) in the next Section) contains the term

[formula]

which for large [formula] basically determines the sign of the u(t + h) on the left side of ([\ref=eq:godunovwithKC]) (likewise ([\ref=eq:godunovwithKTC])). Since both [formula] and K are positive, if K is very small in some pixel, then we may have

[formula]

in which case u(t + h) changes sign. This is unphysical, so we would like to regularize the term ([\ref=eq:badeulerterm]). To do so, we need to find a monotonically increasing function, call it g(x), such that

[formula]

Multiple choices are available, as shown in Figure [\ref=fig:regularizers]. We want a straight line with slope 1 when x is small, then a smooth but rapid cut-off when [formula] gets too large. Some suitable choices are (1 -  exp (  -  xβ))1 / β, or just as cheap to compute,

[formula]

or any variant shown in Figure [\ref=fig:regularizers]. We choose g(x) with β = 4. The regularization ([\ref=eq:regularizer0]) to be used in ([\ref=eq:badeulerterm]) and thus ([\ref=eq:godunovwithKC]) (likewise ([\ref=eq:godunovwithKTC]) in the next section) is then modified to

[formula]

where h is the step-size. In the desert test presented above, using the regularizer yields the same results as decreasing h tenfold.

One alternative to the above regularization ([\ref=eq:regularizer1]) is to use smoothing by a low pass filter which weights a center pixel (map coordinate i,j) and its nearest (2L - 1)  ×  (2L - 1)  -  1 neighbors. A neighboring pixel with X,Y distances ix,jy from (i,j), has weight

[formula]

for all - L  <  ix  <  L and - L  <  jy  <  L, including center at ix  =  jy  =  0. Neighboring pixels with coordinates (i + ix,j + jx) having zero value (e.g. water), i + ix  >  NX or i + ix  <  1, are ignored. In Mercator projection maps, Y coordinates are periodic in the longitude direction). For each (i,j) - pixel to be smoothed, a total of each accepted (non-zero) neighbor's weight was kept and the resulting total was normalized appropriately. The choice ([\ref=eq:weightfunction]) is an approximate Gaussian weight exp (   -   Δx2   -   Δy2), cut off at distances |ix|  ≥  L and |jy|  ≥  L or at uninhabitable pixels. Figure [\ref=fig:siberiaCCrawvssmooth] shows an example of the effect of a low-pass filter (5 cells half-width, eq. ([\ref=eq:weightfunction])) smoothing on one of the maps used in this study. A comparison between regularization and smoothing is shown on the right hand plot of Figure  [\ref=fig:outofafrica0].

Time-dependent capacity maps

Fluctuations in climate produce environmental changes in vegatation, sea levels, opening/closing of land bridges, waxing/waning of ice sheets, and perturbations to habitable areas in general. Thus, time-dependent environments compel us to extend our procedure ([\ref=eq:godunovwithK]) for both space- and time-dependent [formula] (see Section [\ref=ss:timeinterpol]).

Since ([\ref=eq:godunovwithK]) is basically the trapezoidal method (see section 5.3 in [\citep=leveque2007]), the modification for a time-dependent K is as follows: where we have again suppressed the [formula] dependence of [formula] for simplicity of notation.

Fisher/KPP on geographical maps

In order to solve Fisher/KPP on an irregular domain such as a geographical map, it is sufficient to break down the map into x- and y-direction segments, imposing a u = 0 boundary condition at their endpoints; the solver can act on each segment independently, alternating the direction [\citep=leveque2007] [\citep=ritchmyer1967] of integration as discussed above. This approach lends itself also to efficient parallelization. Appendix [\ref=sec:code] and Figure [\ref=fig:mapsegmentation] illustrate in detail our scheme with a sample Matlab code.

Note that holes in K maps can represent the partial closing of land bridges without the necessity of re-segmenting land portions, as in Section [\ref=sec:fisherkpp] and shown in Figure [\ref=fig:mapsegmentation]. However, the regularization scheme (Section [\ref=sec:noisyNPPmaps]) should be used with caution. A u = 0 boundary condition region is not the same as one with low K, which can pass a tiny population into a subequent region where it may well flourish. For example, historically known falling sea levels opened passages across Bab al Mandeb to open South Asia for human dispersal [\citep=siddall2003], and the retreat of the North American ice sheet opened a passage on the Bering strait around 12 kya (kilo-years ago).

World-wide hominin dispersal

We now turn to a sample application of the methods presented above: the world-wide dispersal of Homo sapiens out of Africa.

Capacity maps

Our construction of a time-dependent K uses Net Primary Productivity (NPP) as a proxy [\citep=eriksson2012]. The Miami model [\citep=grieser2006] was originally formulated in 1972 to estimate NPP (in grams (of carbon) in dry organic matter/m2/day) from annual temperature and rainfall [\citep=lieth1975]. In order to compute our NPP maps, we obtained the temperature and precipitation data from simulations by the bridge program [\citep=bridgeproj] organized at the University of Bristol [\citep=bigelow2003] [\citep=harrison2001] [\citep=pickett2004] [\citep=prentice2000]. The simulation data that we used were computed on a 96  ×  73 grid, which we interpolated to size 100  ×  50 and converted to NPP maps by applying the formulas given in [\citep=grieser2006]. In Figure [\ref=fig:siberiaCCrawvssmooth], the original NPP units in (grams of C)/m2 / day were adopted.

World-wide NPP data are difficult to obtain, so our Miami model-like maps are rough. As we showed in Section [\ref=sec:gaptest], our Godunov solver is fairly robust with respect to abrupt steps in the carrying capacity [formula]. However, an alternative to the regularization scheme proposed in Section [\ref=sec:noisyNPPmaps] would be desirable, when dealing with maps in which noise and holes may not necessarily correspond to real physical conditions of the model system.

Time interpolation of maps

We assembled 61 NPP maps, from 120 kya to 1 kya. These are in 4 ky steps for the first 10, 2 ky steps for the next 21, then 1 ky for the remainder. Since the time stepper in our Godunov scheme can have no information about the continuity in time of NPP maps, an interpolation scheme needs to be used.

If some estimates or proxies for the carrying capacities KL, KH at times tL, tH are available, one possible estimate for K(t) is a homotopy

[formula]

where a sigmoid function 0  =  S(tL)  <  S(t)  <  S(tH)  =  1 will smoothly interpolate between the two time frames. There are many choices available, such as that used in [\citep=eriksson2012]. For this study, we used the following variant.

Start with the classical sigmoid

[formula]

which is zero at z  =    -    ∞   and unity at z =  +   ∞  . The -    ∞    <  z  <    +    ∞   interval is not what we want, but with a small change the following t  ↦  z transformation permits many variants:

[formula]

where ΔT  =  tH  -  tL. Notice that S(z(tL))  =  0 and S(z(tH))  =  1. The exponent ν in ([\ref=eq:ourinterpolator]) gives some freedom in choosing a particular form for z for almost any ν  >  0. If ν  <  1 / 2, d2S / dt2 has more than two sign changes, so ν  ≥  1 / 2 is preferable. By the choice ν = 1 / 2, the interpolant is nearly a straight line: see Figure [\ref=fig:sigmoids]. However, its turn-up at t = tL and turn-down at t = tH numerically resemble very quick derivative changes. Thus, for this test case we choose ν = 1. At both ends, all derivatives of S(z(t)) in t vanish. Also notice the forward/backward symmetry S(z(tH - t))  =  1  -  S(z(t)) for tL  ≤  t  ≤  tH [\citep=eriksson2012].

Population dispersal

We set up the initial population density at t = 50 kya as shown in the top left panel of Figure [\ref=fig:outofafrica0]. The integration units are scaled following Tab. [\ref=tab:scalings] such that [formula] ky- 1 and c = 208 km2/ky (consistent with those used in [\citep=young1995]). The solver is then run using time frame K maps described above, down to 1 kya. The remaining plots (Figures [\ref=fig:outofafrica1],[\ref=fig:outofafrica2]) display the resulting population dispersal simulation on unsmoothed K maps, regularized by ([\ref=eq:regularizer0]). Using population parameters consistent with the literature, the gross features of the late (50-60 kya) out-of-Africa dispersal of Homo sapiens are reproduced [\citep=forster2004], e.g. the colonization of Western Europe by ~  40 kya and that of South America before 14 kya. Using the solver with the same initial conditions but on a smooth NPP map, like the one shown in right panel of Figure [\ref=fig:siberiaCCrawvssmooth], without the regularizer ([\ref=eq:regularizer0]), yields the same wavefront propagation speed.

Conclusions

In this paper, we presented a novel semi-implicit Godunov scheme for the Fisher/KPP equation with a constant carrying capacity K, described in Section [\ref=sec:methodsandsplittings]. In one dimension, the expected traveling wave [\citep=fisher1937] [\citep=kolmogorov1937] develops as shown in Figure [\ref=fig:1dplots]. In other tests, not shown here, we saw that almost any concentrated inital condition will develop similar waves: for example, two nearby peaks. Our scheme is on a rectangular grid, so in 2-D we need to ensure that in cylindrically symmetric situations we can control the errors due to the x  -  y asymmetry. The error plots, Figure [\ref=fig:symmetryornot], show that we can reduce the asymmetries somewhat by an alternating direction scheme. In any case, these errors are very small even for a relatively high CFL number. As in the one-dimensional situation, a traveling wave also develops as expected [\citep=kolmogorov1937]: Figure [\ref=fig:2dpcolorplots] and Figure [\ref=fig:2Dwavefrontanderrors] show this development and compare the results to the 2-D symmetric version of the Matlab function pdepe. Because the [formula] discretization has truncation errors proportional to (Δx)3, after [formula] time steps we should not be surprised to see the errors shown in Figure [\ref=fig:2Dwavefrontanderrors] turn up for very small h and behave roughly as [formula].

In Secs. [\ref=sec:fisherkppvarK] we extended our procedure to handle an [formula]-dependent K, specifically eq. ([\ref=eq:godunovwithK]). In order to regularize our solver against bad behavior when dealing with K maps inferred from real-world data, in Section [\ref=sec:gaptest] we studied both regularization and the expected constant velocity of the traveling wave. Except for small transition regions entering or leaving a region of low carrying capacity, the velocity ([formula] in our scaling) is indeed constant. In Section [\ref=sec:fisherkppvarKxt], we went further to develop a scheme for the situation with both [formula] and t dependent carrying capacity K via eq.([\ref=eq:godunovwithKT]).

Finally, this scheme has been applied to a prototypical case in population dynamics: the out-of-Africa dispersal of Homo sapiens. On the Mercator projected world map, by using vegetation net primal productivity as a proxy for carrying capacity, Figure [\ref=fig:outofafrica0] shows that by the regularization of K in space via eq. ([\ref=eq:regularizer0]) but interpolating in time yields stable and reasonable results. In fact, the results showing ancestor arrival in NE India at roughly 40 kya, then crossing the Bering Strait before 10 kya, and multiple routes into South Asia [\citep=reyescentento2014] are very encouraging. Honesty requires that we admit our size (408km)2 pixels do not resolve the two crossing points at Bab al Mendab and Sinai adequately. Additionally, a switch (see: Section [\ref=subsec:geographicalmaps]) which would allow passage at the Bering Strait seems unnecessary due to the interesting coincidence that the hominin wave front reaches this passage at the beginning of the last ice age. If it were blocked previously, this would have had no effect.

The core computations performed by our solver are independent tridiagonal solutions, which can be easily parallelized to deal with larger grids. In order to further improve numerical performance, in the Appendix [\ref=sec:code], we discussed a compressed storage scheme to integrate the Fisher/KPP equation on a projected world map (or any other irregularly-shaped domain). The alternating direction scheme discussed in Section [\ref=sec:Godunov2Dsplitting] also works with this compressed storage. In the case of world dispersal discussed in Section [\ref=sec:dispersal], since about 71% of the earth's surface is water, this compressed storage reduces computational work by the same amount.

Provenance

For this paper, the simulations were run on either a Mac Mini, 2.4 GHz Intel Core Duo (Mac OS 10.6.8), or a MacBook laptop with the same processor specifications but running OS 10.8.4. On the Mini, MatLab (7.10.0.499) R2010a was used, respectively (8.1.0.604) R2013a on the MacBook laptop.

Acknowledgments

The authors are thankful for the encouragement, financial arrangements, and technical help from Prof. G. Lake, Prof. S. Mishra, and Dr. I. Schloenvogt. Dr. Schloenvogt's assistance at critical junctures was particularly valuable.

Map segmentation appendix

In order to use our solver on a geographical map, it suffices to use a map outline, i.e., a rectangular grid with 1's in habitable regions, and 0's in the water, as in Figure [\ref=fig:mapsegmentation]. Since each Godunov direction step only involves a row, or a column, independently, we can set up the following indexing scheme. Each row [formula] in Figure [\ref=fig:mapsegmentation] will have nysegs(i) of habitable segments, whose starting and ending positions are ystart_seg(k) and yend_seg(k), respectively, where [formula]nysegs(i). Likewise, for [formula] columns each with nxsegs(j) also with start and end positions. Roughly 24% of the world map is land, i.e. habitable. As an example, Figure [\ref=fig:mapsegmentation] shows row 26 has 4 segments of varying size. Likewise, column 87 has 5 segments. A sample MatLab code in Appendix [\ref=sec:code] illustrates the scheme for 1/2 step of x-direction updates, followed by a full step of y-direction updates, then again 1/2 step of x-direction segment updates. The alternating direction method, described in Section [\ref=sec:Godunov2Dsplitting], just interchanges x  ↔  y on alternate time steps.

For the reader's convenience, we include here a sample Matlab code of our Godunov-Strang-Yoshida scheme.