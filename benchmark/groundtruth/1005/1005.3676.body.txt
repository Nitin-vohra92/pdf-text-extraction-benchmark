Quantum search algorithms on a regular lattice

Introduction

Quantum random walks as introduced by Aharonov, Davidovich and Zagury [\cite=ADZ93] in 1993 have gained considerable attention over the last decade or so. It could be demonstrated that a quantum version of a classical random walk has transport properties which exhibit polynomial or even exponential speed-up compared to a classical random walk, see [\cite=kempe] [\cite=Kendon06] [\cite=Santha08] for overviews. This has recently lead to increased efforts for implementing quantum random walks experimentally. In particular, one dimensional quantum walks have been realised using neutral atoms in optical lattices [\cite=Kar09], with trapped ions [\cite=Sch09] [\cite=Xue09] [\cite=Zae10], using coupled optical wave guides [\cite=Per08] and single photons [\cite=Schr10].

One of the most fascinating applications based on quantum random walk concepts are spatial quantum search algorithms. Like Grover's search algorithm [\cite=Gro96] [\cite=Gro97] for searching an unstructured data base, quantum walk search algorithms can (usually) achieve a quadratic speed up compared to the corresponding classical search. The most prominent algorithms are the search on a hypercube introduced by Shenvi, Kempe and Whaley [\cite=SKW03] and the search on a d-dimensional lattice presented by Childs and Goldstone [\cite=CG04] in a continuous time version and by Ambainis, Kempe and Rivosh (AKR) [\cite=AKR05] as a discrete time algorithm. In particular, it has been pointed out that the search in a two-dimensional lattice is critical with the number of search steps scaling like [formula] whereas quantum search algorithms on the hypercube as well as for lattices of dimension d  ≥  3 scale like [formula]; here, N is the number of vertices. Expressions for the leading order coefficients for the search time in the hypercube have been given in [\cite=HT09], proposals for improving the efficiency of the hypercube search can be found in [\cite=PGKJ09]. In [\cite=Tul08], it has been shown that the number of steps for solving the search problem on a two-dimensional lattice can be decreased to [formula] by modifying the quantum walk search algorithm, thus coming closer to the theoretical lower bound [formula] [\cite=BBBV97]. By changing the starting state, it has been demonstrated in [\cite=HT09I] that quantum search algorithms on lattices can also be used in a sender-receiver configuration. Remarkably, this makes it possible to communicate across the lattice by sending information exclusively between two (or more) marked vertices where neither the sender nor the receivers need to know each others position.

We will in the following focus on the AKR search algorithm on d-dimensional lattices. Extending the ideas and techniques from [\cite=HT09], we will give improved estimates for the approximate eigenstate of the walk localised on the target vertex. This makes it possible to give closed form expressions for the leading order coefficients both for the search time and the search efficiency, that is, the overlap of the localised state with the target vertex. The paper is structured as follows: the search algorithm on the lattice and the basic vectors spanning the search space in the full Hilbert space are introduced in section [\ref=chap:grid]; this is followed by a detailed calculation of the normalisation constant for the approximate eigenvector localised on the target vertex in section [\ref=grid:calculation_b]. In section [\ref=sec:avoidedcrossings], we analyse the spectral gap at the avoided crossing in an (approximately) invariant two-dimensional subspace. The results for leading order contributions to the localisation time and the amplitude at the target vertex are given in section [\ref=grid:results].

A quantum search on a d-dimensional square lattice - introducing the algorithm

Quantum search algorithms - like Grover's search - are usually described in terms of a two unitary matrices: a quantum or wave propagator acting uniformly on the search space and a "marker" (or oracle) matrix which deviates from the identity only locally near the marked item. We will discuss here a lattice search algorithm of this type which was first introduce in [\cite=AKR05]. We will limit the discussion to the search of one target vertex only. A generalisation to more than one marked item is straightforward and is discussed in [\cite=AKR05] [\cite=HT09I]. We will first introduce the propagator without a marked vertex leading to a quantum random walk on the lattice. The full quantum search algorithm and an analysis of the search mechanism will be given in Sec.  [\ref=secgrid:search].

A quantum random walk on a d-dimensional lattice

We consider a d-dimensional regular lattice with n vertices along each dimension, that is, N = nd vertices overall. The positions of the vertices in the lattice are defined by the set of vectors [formula] with integer coordinates [formula]. Periodic boundary conditions will be assumed throughout.

Following the spirit of quantum graph theory, we consider quantum waves propagating freely along 1-dimensional bonds connecting adjacent vertices [\cite=KS99] [\cite=GS06]. Waves undergo scattering at the vertices described by a 2d  ×  2d scattering matrix σ, where 2d is the number of bonds connected at each vertex. The scattering mechanism is the same at all vertices and the quantum dynamics on the lattice is in fact equivalent to a quantum random walk, see [\cite=Tan06]. (The unitary scattering matrix σ can then also be interpreted as a 'coin flip' matrix acting on an internal (spin-) degree of freedom of a quantum walker). The total Hilbert space H of the problem is described as the tensor product of a vertex or position space [formula] and a direction or coin space [formula] representing waves travelling in the negative/positive direction along the ith axis, [formula]. The dimension of H is thus 2d  nd  =  2d  N.

We chose a scattering matrix σ which is unbiased with respect to the outgoing directions (except possibly for back-scattering). A natural choice is Grover's matrix [\cite=Gro97] (which incidentally also features prominently in a quantum graph approach using Kirchhoff boundary conditions on the vertices, see [\cite=KS99] [\cite=GS06]). That is, we define [\cite=AKR05]

[formula]

where |s〉 is the uniform distribution in coin space, that is,

[formula]

We have identical scattering processes at all vertices and we thus define a global coin flip matrix

[formula]

The wave propagation on the lattice is now given by a "shift" matrix S. Waves emanating from vertex [formula] in the i±th direction will reach vertex [formula] with [formula], the unit vector in the i+th direction. Writing [formula], we find for the shift matrix S

[formula]

This is a natural choice for a moving shift since a walker leaving vertex [formula] in direction i+, enters vertex [formula] from direction i-.

The quantum random walk U0 is defined by first applying the global coin flip and then the moving shift

[formula]

In what follows, the eigenvectors and eigenvalues of U0 will be of importance which have been discussed in some detail in [\cite=AKR05]. Using the tensor product, we write each eigenvector of U0 as a vector in coin space [formula] and a position space vector [formula] according to

[formula]

where [formula] is a d-dimensional vector with components [formula] and [formula]. The vector in position space can be factorised in the form [formula], where the [formula] are obtained from the canonical basis vectors of position space using a Fourier transformation, that is,

[formula]

The thus obtained basis provides a convenient way to denote the eigenvectors in position space.

For the quantum search, only 2N - 1 of the 2dN eigenvectors of U0 are important, namely those having a coin space component not orthogonal to [formula]. These vectors are the 1-eigenvector [formula], which is the uniform distribution, and two eigenvectors [\cite=AKR05]

[formula]

for each [formula] with complex conjugated eigenvalues [formula] and

[formula]

The expressions for the vector [formula] in coin space become more and more cumbersome with increasing d and we will not attempt to give closed form expressions here. However, it has been shown in [\cite=AKR05] that

[formula]

which is all we need in what follows. In addition, one has [formula] eigenvectors with eigenvalue 1 and [formula] eigenvectors with eigenvalue - 1 all with coin components perpendicular to |s〉. Note that the high degeneracies in the ±  1 eigenspaces are due to the special choice of the coin flip matrices σ and thus C.

The quantum search algorithm

The quantum search matrix

We now assume that the lattice contains one marked vertex at (a yet unknown) position [formula]; here, the marking is done by applying a different coin flip or scattering matrix [formula] at this target vertex [formula]. The search algorithm is then defined as

[formula]

[formula]

Note that, since [formula] is a projection on the target vertex, the additional term changes at most 4d2 matrix elements in U0. As U0 is a 2dN  ×  2dN-matrix, U1 is identical to U0 up to a local perturbation and the quantum search algorithm can be regarded as a locally perturbed quantum random walk.

Following AKR we define [formula] which leads after some algebra to

[formula]

The perturbed quantum walk is shown in Fig. [\ref=figgrid:search]; starting from the uniformly distributed state [formula] and applying U1 for t time steps with t = 0, 19, 38 and 57, one observes a localisation on the target vertex. Plotted here is the probability (wave amplitude square) on a logarithmic scale.

Following the analysis developed for the hypercube in [\cite=HT09], we now define a one parameter family of unitary matrices Uλ for the d-dimensional lattice:

[formula]

This makes it possible to extrapolate smoothly from the unperturbed walk (λ  =  0) to the AKR search algorithm (λ  =  1) and will be helpful for analysing the eigenvalues and eigenvectors of Uλ near λ  =  1 in terms of the eigenbasis of the unperturbed quantum walk.

Before doing so, we simplify the problem by reducing the size of the Hilbert space. We note that eigenvectors of U0 with eigenvalues ±  1 (except the important vector [formula]) are orthogonal to [formula] and thus remain eigenvectors of Uλ independent of the value of λ; this part of H is thus irrelevant for the localisation effect. We define a reduced space [formula] by projecting out all ±  1-eigenvectors of U except [formula]. This subspace is a 2N - 1 dimensional Hilbert space spanned by [formula] and [formula] for [formula].

The scalar product [formula] can be obtained using ([\ref=defgrid:overlap]); thus an expansion of [formula] in terms of eigenvectors of U0 in the reduced space gives

[formula]

Since [formula] is orthogonal to all eigenvectors of U0 not contained in [formula], this expansion also holds for the non-reduced space.

Approximate eigenvectors of Uλ

In the following we will analyse the search algorithm in detail. Our approach is based on the work in [\cite=HT09] and makes it possible to go beyond the results found in [\cite=AKR05] by giving explicit leading order coefficients for the search time.

The overall strategy is best explained by considering briefly the spectrum of eigenphases {ωi} of Uλ; in Fig. [\ref=figgrid:eigenphases], the eigenphases are shown for an 11  ×  11 lattice in the reduced space [formula]. The local perturbation leads to a set of avoided crossings in the spectrum, most notably at λ = 1,ω = 0. This avoided crossing is formed by the state [formula] (which is a 1-eigenstate of U) and "another" state, which we will denote [formula] in what follows. It will be argued that [formula] is localised in the vicinity of the target vertex and that the subspace [formula] is an approximate basis for the two-dimensional eigenspace spanned by the exact eigenstates at the crossing. The quantum search amounts then to a rotation in this two-dimensional subspace of H' similar to the mechanism found in Grover's original search. It is important to note that unlike for Grover's algorithm, for the lattice search only approximate expressions for the state |νλ = 1〉 are known which will be given below; furthermore, the starting state [formula] has a small overlap with the rest of the spectrum at λ  =  1 leading to losses.

We start by considering the uniform distribution [formula] which is the remaining 1-eigenvector of U0 in H'. One obtains

[formula]

that is, |φ0〉 is an approximate eigenvector of Uλ of order [formula]. The remaining components, [formula], are localised on the 2d sites next to the target vertex. This can be seen from the definition of the shift operator S in Eq. ([\ref=defgrid:S]).

To obtain [formula], we start by expanding the vector in the basis of the unperturbed walk U0, that is,

[formula]

with a yet unknown set of coefficients [formula]. Normalisation requires

[formula]

We now make the ansatz

[formula]

that is, we assume an approximate eigenvalue equation with a yet unknown eigenvalue [formula]. This gives rise to a linear system of equations for the 2N - 1 unknown coefficients [formula]. We are looking for a second approximate eigenvector which spans the space at the avoided crossing together with [formula], that is we demand that [formula] and [formula] are orthogonal which leads to a0 = 0.

A straight forward application of Uλ on [formula] results in

[formula]

with [formula], the position of the target vertex. In what follows, we set

[formula]

and define the overall phase factor of [formula] such that b is real with 0  ≤  b  ≤  1. Note that b determines the overlap of the approximate eigenvector with the target vertex. We will show in the next section that b is of order [formula] for d = 2 and O(1) for d  ≥  3 at λ  =  1; thus |ν1〉 is indeed localised at the target vertex.

We now add and subtract the right hand side of Eq. ([\ref=app-eigen]) in ([\ref=soso]) and obtain

[formula]

An approximate solution is obtained if each of the coefficients in front of the components [formula] is zero, that is,

[formula]

The resulting vector [formula] has a component in the |φ0〉 direction of order [formula]; thus, similar to Eq.  ([\ref=grid:Ulambdaphi0]), |νλ〉 remains in a subspace spanned by itself and |φ0〉.

The coefficients [formula] enter Eq. ([\ref=grid:a_k]) also through b, that is, ([\ref=grid:a_k]) represents a set of linear, coupled equations. Assuming b  ≠  0, equation ([\ref=defgrid:b]) can be divided by b and the system of equations has a solution if and only if

[formula]

The avoided crossing occurs at λ = 1 and [formula], for which the right hand side of equation ([\ref=grid:sumformula]) can be obtained directly,

[formula]

That is, no solution exists which maps a vector |ν1〉 exactly onto itself and |φ0〉. The error term 1  /  N is small compared to typical coupling terms between basis states [formula] (which are of the order [formula]) and the set of coefficients from Eq. ([\ref=grid:a_k]) thus define an approximate solution of the eigenvalue equation ([\ref=app-eigen]). That is, the vector

[formula]

fulfils to leading order the equation

[formula]

where g(λ) is defined implicitly by minimising the expression ([\ref=grid:sumformula]). An expansion of g(λ) around λ  =  1 can be obtained successively, see [\cite=HT09]. We will restrict our attention here to the case λ  =  1 and thus [formula] for which g(1)  =  0.

The only unknown quantity in determining [formula] is the constant b which has dropped out of the equations. Since the vector [formula] needs to be normalised, b turns out to be a normalisation constant.

Normalisation of |ν1〉

Evaluating the normalisation constant b turns out to be the most laborious and technical part of the derivation. Readers more interested in the final results may want to proceed directly the result in equation ([\ref=grid:1/b2]).

We will in the following restrict ourselves to the case λ = 1 and thus [formula] only. Demanding the vector in Eq. ([\ref=grid:nu_lambda]) to be normalised, one obtains

[formula]

where the sum is taken over all vectors [formula] in a d-dimensional cube with [formula].

We start by rearranging the total sum into a summation over lower dimensional objects where only a limited number of entries of [formula] are different from 0. That is, we consider the summation over all one dimensional edges, two dimensional faces, 3-dimensional cubes and so on, where the non-zero entries ki vary from 1 to n - 1. The edges are obtained by choosing d - 1 entries of [formula] equal 0, the faces have d - 2 entries of [formula] equal 0 and higher dimensions accordingly. This new arrangement results in

[formula]

where Ii has been implicitly defined in ([\ref=defgrid:defI_i]). Using the identity [formula], we can simplify the sums and obtain

[formula]

Using Poisson's summation formula, one arrives at

[formula]

where the last equality is due to a reordering of terms and substituting [formula] in all integrals.

The dominant contributions come from the terms mj  =  0 for all [formula], that is, we write to leading order in the large n limit,

[formula]

Using the symmetry of the sine squared function, the integrals ([\ref=integrals1]) can be simplified to

[formula]

We are only interested in leading order contributions and will thus use the integral ([\ref=grid:I_i]) as an approximation for the full set of sums in Eq. ([\ref=sums]). The expression ([\ref=grid:I_i]) will form the starting point of our calculation of the leading order behaviour of |b|.

Integration of I1

The first integration can be done explicitly and one obtains

[formula]

Integration of I2

To obtain a leading order estimate for

[formula]

we first note that the integrand is symmetric with respect to exchanging x and y and therefore

[formula]

Now, the y integration is solved by observing that

[formula]

Thus

[formula]

Integrating by parts results in

[formula]

Using the substitution z =  tan x, the resulting integration can finally be written in the form

[formula]

where K  ≈  0.916 is Catalan's constant.

Using Eq. ([\ref=defgrid:defI_i]), the result for the d = 2 dimensional lattice is

[formula]

Integration of I3

For the third integral I3, we will only evaluate the asymptotic limit for n  →    ∞  . Starting with

[formula]

we evidently have I3 > 0 independent of n. An upper bound for I3 can be obtained using spherical coordinates, that is

[formula]

The integrand is bounded in the whole region of integration and in particular also in the limit r  →  0; we thus have I3  =  O(1).

Using numerical integration methods, we obtained

[formula]

Substituting again into Eq. ([\ref=defgrid:defI_i]), we obtain for the normalisation of the d = 3 dimensional lattice:

[formula]

Integrations for d > 3

We show in this section that 1 / b2  =  O(1) for all d  ≥  3; actual numerical values can be obtained by integrating expressions of the form ([\ref=grid:I_i]) using numerical methods. From this, we can deduce that the search time T indeed scales like [formula] for d  ≥  3 as will be shown in Sec. [\ref=sec:avoidedcrossings].

We will proceed by induction: from ([\ref=defgrid:ordernormalisation3d]) it is evident that [formula] holds for d = 3. Thus, assuming that [formula] holds for some d  ≥  3, it follows from Eq. ([\ref=defgrid:defI_i]) and Ii  >  0, that [formula].

It remains to be shown that [formula] also holds for d + 1. The starting point is again provided by Eq. ([\ref=defgrid:defI_i]), but this time for d + 1, that is,

[formula]

The sum of the first d terms adds to a leading order of 1  /  n, since [formula] for 3  ≤  i  ≤  d and the lower order terms [formula] and [formula] have prefactors n1 - d and n- d, respectively. Therefore these contributions vanish for n  →    ∞  .

It remains to be shown that [formula] and this is done using Eq.  ([\ref=grid:I_i]), that is,

[formula]

As the squared sines are greater than zero, an upper bound is obtained by dropping the last sine term. Now, the yd + 1 integration is performed, that is,

[formula]

and this results in [formula]. Thus, the normalisation constant b is of the order [formula].

The overall result for the normalisation constant is to leading order

[formula]

where K  ≈  0.916 is Catalan's constant and we found [formula] asymptotically, see ([\ref=defgrid:I_3]). In particular, it has been shown that for i  ≥  3, lim n  →    ∞Ii converges. Thus, the leading order contribution to b can be calculated from equation ([\ref=grid:I_i]) by replacing [formula] with 0 and using numerical integration methods.

Localisation

The normalisation parameter b is at the same time a measure for the localisation of |ν1〉 onto the state |sv〉 and thus on the target vertex [formula], see Eq.  ([\ref=defgrid:b]). Hence, the probability that the search will be localised at the target vertex [formula] is proportional to

[formula]

(In fact, b2 gives only a lower bound for the localisation probability as [formula] fixes the coin space state in which the localised state is measured.).

For estimating the overlap of the two-dimensional eigenspace at the avoided crossing with the basis vector pair |φ0〉,|ν1〉, we can resort to the results, Eqs.  ([\ref=grid:Ulambdaphi0]), ([\ref=grid:Ulambdanu]). In particular, we found in ([\ref=grid:Ulambdaphi0]), that the uniform state |φ0〉 is mapped onto itself and a component in the direction U0|sv〉. One finds by straightforward calculation

[formula]

The overlap of |ν1〉 with [formula], that is, the localisation on the nearest neighbours is thus of the same order as on the target state |sv〉 itself. To obtain the last equality [formula] has been used.

We have shown that the vector |ν1〉 constructed in the preceding section is localised on the target vertex. We have furthermore shown that the vector space spanned by the orthonormal pair of approximate eigenvectors {|φ0,|ν1〉} has an order O(1) or [formula] overlap with itself under the unitary map U1.

Quantum search at the avoided crossing

The quantum search algorithm corresponds to a rotation in a lower dimensional sub-space spanned by the eigenvectors at the avoided crossing at λ  =  1,ω  =  0. The search is initialised in the state [formula] which has an O(1) overlap with the exact eigenstates at the crossing, see ([\ref=grid:Ulambdaphi0]). We have constructed a second approximate eigenvector at the crossing, namely [formula] in ([\ref=grid:nu_lambda]), again with an O(1) overlap with the eigenspace at the avoided crossing. We can thus restrict the analysis to studying the avoided crossing in the subspace of H spanned by the basis vectors [formula]; this subspace is approximately invariant under the quantum walk U1, as shown in Sec. [\ref=secgrid:search], see also [\cite=HT09] [\cite=HT09I].

The size of the gap at the avoided crossing

In a first step, we project out the two-dimensional submatrix related to the (approximately) invariant subspace, namely [formula], where H is a Hermitian 2  ×  2 matrix. The entries of H can be determined by calculating the matrix elements of [formula] explicitly. Using Eqs.  ([\ref=defgrid:svinHprime]), ([\ref=grid:Ulambdaphi0]) and ([\ref=grid:Ulambdanu]), one obtains to leading order

[formula]

for the diagonal elements and

[formula]

for the off-diagonal entries, where Eq. ([\ref=grid:vUsv]) has been used for the last equality. Identifying the basis vectors [formula] with [formula], we obtain to leading order

[formula]

which results in a Hamiltonian

[formula]

We note that the coupling term ε scales like [formula] and depends on the normalisation constant b.

Eigenvectors and eigenvalues of H are easily calculated, that is,

[formula]

This means in particular that the gap at the avoided crossing behaves like

[formula]

The time of search is directly related to the gap Δ; the search starts in the vector [formula] which after successive iterations becomes

[formula]

Thus, for a time [formula], one has e±  iεt  =    ±  i and

[formula]

which is the localised state. Note, that the search time T is inversely proportional to the coupling parameter ε in Eq. ([\ref=grid:H2x2]) and thus to the spectral gap at the avoided crossing. The quantum search algorithm succeeds after [formula] steps and thus faster as any classical search.

Results

Putting everything together, we have now identified the search time in leading order as

[formula]

It depends on the normalisation constant b which has been obtained in ([\ref=grid:1/b2]). Overall, the number of time steps T can now be given as the integer closest to

[formula]

Note, that the bound for d  ≥  3 is tight, because we know from [\cite=BBBV97] [\cite=Gro96], that the search can not be faster than [formula]. In Fig. [\ref=figgrid:time], we compare the analytical results for the localisation time with numerical simulations. The theoretical results agree very well with the outcome of the numerical simulations. The general behaviour suggests that the walk for a fixed number of vertices is the faster the higher the dimension.

The probability to find the search at the target vertex after T steps is equal to b2 ([\ref=defgrid:b]). From Eq. ([\ref=grid:1/b2]), we find

[formula]

Note, that the upper bound for b in the case d  ≥  4 is a consequence of ([\ref=defgrid:time]) and the lower bound for the search time is provided by [\cite=BBBV97].

To leading order, the localisation amplitude at the target vertex is not N-dependent for d  ≥  3; the d = 2 case is exceptional, as the projection of [formula] onto [formula] decreases like [formula]. Note, however, that the state |ν1〉 is still localised on the marked vertex for d = 2 since the average amplitude of an eigenstate of the random walk U0 on an arbitrary vertex decreases like [formula]. Amplitude amplification methods can be used to increase the success probability to a constant in N by repeating the search algorithm [formula] times [\cite=Grover98].

In Fig. [\ref=figgrid:probability], we compare the numerical results for the probability to find the walk at the target vertex with the analytical results for b2. The numerical results are obtained from running the quantum search algorithm and determining the maximum of the probability at the target vertex. It is noted that for d = 3, the asymptotic value given in Eq. ([\ref=grid:b]) is not reached before N  ≈  106, (see inset of Fig. [\ref=figgrid:probability]). This corresponds to a 3d lattice of side-length n  =  100 - far beyond what can be simulated on a computer. However, a direct evaluation of b2 in terms of the sums in Eq. ([\ref=defgrid:defI_i]) confirms the basic mechanism behind our approach.

Conclusions

We presented a detailed analysis of the lattice search and show in particular that the search mechanism is based on a rotation from a uniformly extended state to a localised state coupled at an avoided crossing point in the spectrum of the operator Uλ. The search time and localisation strength can be obtained from an effectively two-dimensional model similar to the analysis in [\cite=HT09]. We have thus independently verified the scaling behaviour of the search time and localisation probability as stated in [\cite=AKR05] and can now also give explicit expressions for the leading order coefficients; the results have been verified by numerical simulations.

A generalisation to a search with more than one marked item is straightforward and leads to reduced models as presented in [\cite=HT09I]. We also give a detailed derivation of how to obtain the localised state [formula] asymptotically. This is important for the wave communication protocols proposed in [\cite=HT09I]; here, the search algorithm is used to search for more than one marked vertex, to send signals through the lattice from a sender to one or more receiver points and to construct new search algorithms that do not rely on knowing the number of target vertices.